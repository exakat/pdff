{"versions":{"4.7.0":{"\\":{"constants":{"WP_DEFAULT_THEME":{"name":"WP_DEFAULT_THEME","phpdoc":[],"expression":false,"value":"'twentyseventeen'"},"WP_DEBUG":{"name":"WP_DEBUG","phpdoc":[],"expression":false,"value":"false"},"DB_NAME":{"name":"DB_NAME","phpdoc":[],"expression":false,"value":"'database_name_here'"},"DB_USER":{"name":"DB_USER","phpdoc":[],"expression":false,"value":"'username_here'"},"DB_PASSWORD":{"name":"DB_PASSWORD","phpdoc":[],"expression":false,"value":"'password_here'"},"DB_HOST":{"name":"DB_HOST","phpdoc":[],"expression":false,"value":"'localhost'"},"DB_CHARSET":{"name":"DB_CHARSET","phpdoc":[],"expression":false,"value":"'utf8'"},"DB_COLLATE":{"name":"DB_COLLATE","phpdoc":[],"expression":false,"value":"''"},"AUTH_KEY":{"name":"AUTH_KEY","phpdoc":[],"expression":false,"value":"'put your unique phrase here'"},"SECURE_AUTH_KEY":{"name":"SECURE_AUTH_KEY","phpdoc":[],"expression":false,"value":"'put your unique phrase here'"},"LOGGED_IN_KEY":{"name":"LOGGED_IN_KEY","phpdoc":[],"expression":false,"value":"'put your unique phrase here'"},"NONCE_KEY":{"name":"NONCE_KEY","phpdoc":[],"expression":false,"value":"'put your unique phrase here'"},"AUTH_SALT":{"name":"AUTH_SALT","phpdoc":[],"expression":false,"value":"'put your unique phrase here'"},"SECURE_AUTH_SALT":{"name":"SECURE_AUTH_SALT","phpdoc":[],"expression":false,"value":"'put your unique phrase here'"},"LOGGED_IN_SALT":{"name":"LOGGED_IN_SALT","phpdoc":[],"expression":false,"value":"'put your unique phrase here'"},"NONCE_SALT":{"name":"NONCE_SALT","phpdoc":[],"expression":false,"value":"'put your unique phrase here'"},"WP_TESTS_DOMAIN":{"name":"WP_TESTS_DOMAIN","phpdoc":[],"expression":false,"value":"'example.org'"},"WP_TESTS_EMAIL":{"name":"WP_TESTS_EMAIL","phpdoc":[],"expression":false,"value":"'admin@example.org'"},"WP_TESTS_TITLE":{"name":"WP_TESTS_TITLE","phpdoc":[],"expression":false,"value":"'Test Blog'"},"WP_PHP_BINARY":{"name":"WP_PHP_BINARY","phpdoc":[],"expression":false,"value":"'php'"},"WPLANG":{"name":"WPLANG","phpdoc":[],"expression":false,"value":"''"},"T_ML_COMMENT":{"name":"T_ML_COMMENT","phpdoc":[],"expression":true,"value":"T_COMMENT"},"T_DOC_COMMENT":{"name":"T_DOC_COMMENT","phpdoc":[],"expression":true,"value":"T_ML_COMMENT"},"DOING_CRON":{"name":"DOING_CRON","phpdoc":[],"expression":false,"value":"true"},"WP_USE_THEMES":{"name":"WP_USE_THEMES","phpdoc":[],"expression":false,"value":"true"},"WP_INSTALLING":{"name":"WP_INSTALLING","phpdoc":[],"expression":false,"value":"true"},"XMLRPC_REQUEST":{"name":"XMLRPC_REQUEST","phpdoc":[],"expression":false,"value":"true"},"WP_MAIL_INTERVAL":{"name":"WP_MAIL_INTERVAL","phpdoc":[],"expression":false,"value":"300"},"WPINC":{"name":"WPINC","phpdoc":[],"expression":false,"value":"'wp-includes'"},"WP_CONTENT_DIR":{"name":"WP_CONTENT_DIR","phpdoc":[],"expression":true,"value":"ABSPATH . 'wp-content'"},"MULTISITE":{"name":"MULTISITE","phpdoc":[],"expression":false,"value":"false"},"IFRAME_REQUEST":{"name":"IFRAME_REQUEST","phpdoc":[],"expression":false,"value":"true"},"WP_LOAD_IMPORTERS":{"name":"WP_LOAD_IMPORTERS","phpdoc":[],"expression":false,"value":"true"},"DOING_AJAX":{"name":"DOING_AJAX","phpdoc":[],"expression":false,"value":"true"},"WP_ADMIN":{"name":"WP_ADMIN","phpdoc":[],"expression":false,"value":"true"},"WP_SETUP_CONFIG":{"name":"WP_SETUP_CONFIG","phpdoc":[],"expression":false,"value":"true"},"IS_PROFILE_PAGE":{"name":"IS_PROFILE_PAGE","phpdoc":[],"expression":false,"value":"true"},"WP_INSTALLING_NETWORK":{"name":"WP_INSTALLING_NETWORK","phpdoc":[],"expression":false,"value":"true"},"WP_NETWORK_ADMIN":{"name":"WP_NETWORK_ADMIN","phpdoc":[],"expression":false,"value":"true"},"WP_USER_ADMIN":{"name":"WP_USER_ADMIN","phpdoc":[],"expression":false,"value":"true"},"WP_BLOG_ADMIN":{"name":"WP_BLOG_ADMIN","phpdoc":[],"expression":false,"value":"true"},"WP_IMPORTING":{"name":"WP_IMPORTING","phpdoc":[],"expression":false,"value":"true"},"DOING_AUTOSAVE":{"name":"DOING_AUTOSAVE","phpdoc":[],"expression":false,"value":"true"},"PCLZIP_READ_BLOCK_SIZE":{"name":"PCLZIP_READ_BLOCK_SIZE","phpdoc":[],"expression":false,"value":"2048"},"PCLZIP_SEPARATOR":{"name":"PCLZIP_SEPARATOR","phpdoc":[],"expression":false,"value":"','"},"PCLZIP_ERROR_EXTERNAL":{"name":"PCLZIP_ERROR_EXTERNAL","phpdoc":[],"expression":false,"value":"0"},"PCLZIP_TEMPORARY_DIR":{"name":"PCLZIP_TEMPORARY_DIR","phpdoc":[],"expression":false,"value":"''"},"PCLZIP_TEMPORARY_FILE_RATIO":{"name":"PCLZIP_TEMPORARY_FILE_RATIO","phpdoc":[],"expression":false,"value":"0.47"},"PCLZIP_ERR_USER_ABORTED":{"name":"PCLZIP_ERR_USER_ABORTED","phpdoc":[],"expression":false,"value":"2"},"PCLZIP_ERR_NO_ERROR":{"name":"PCLZIP_ERR_NO_ERROR","phpdoc":[],"expression":false,"value":"0"},"PCLZIP_ERR_WRITE_OPEN_FAIL":{"name":"PCLZIP_ERR_WRITE_OPEN_FAIL","phpdoc":[],"expression":false,"value":"-1"},"PCLZIP_ERR_READ_OPEN_FAIL":{"name":"PCLZIP_ERR_READ_OPEN_FAIL","phpdoc":[],"expression":false,"value":"-2"},"PCLZIP_ERR_INVALID_PARAMETER":{"name":"PCLZIP_ERR_INVALID_PARAMETER","phpdoc":[],"expression":false,"value":"-3"},"PCLZIP_ERR_MISSING_FILE":{"name":"PCLZIP_ERR_MISSING_FILE","phpdoc":[],"expression":false,"value":"-4"},"PCLZIP_ERR_FILENAME_TOO_LONG":{"name":"PCLZIP_ERR_FILENAME_TOO_LONG","phpdoc":[],"expression":false,"value":"-5"},"PCLZIP_ERR_INVALID_ZIP":{"name":"PCLZIP_ERR_INVALID_ZIP","phpdoc":[],"expression":false,"value":"-6"},"PCLZIP_ERR_BAD_EXTRACTED_FILE":{"name":"PCLZIP_ERR_BAD_EXTRACTED_FILE","phpdoc":[],"expression":false,"value":"-7"},"PCLZIP_ERR_DIR_CREATE_FAIL":{"name":"PCLZIP_ERR_DIR_CREATE_FAIL","phpdoc":[],"expression":false,"value":"-8"},"PCLZIP_ERR_BAD_EXTENSION":{"name":"PCLZIP_ERR_BAD_EXTENSION","phpdoc":[],"expression":false,"value":"-9"},"PCLZIP_ERR_BAD_FORMAT":{"name":"PCLZIP_ERR_BAD_FORMAT","phpdoc":[],"expression":false,"value":"-10"},"PCLZIP_ERR_DELETE_FILE_FAIL":{"name":"PCLZIP_ERR_DELETE_FILE_FAIL","phpdoc":[],"expression":false,"value":"-11"},"PCLZIP_ERR_RENAME_FILE_FAIL":{"name":"PCLZIP_ERR_RENAME_FILE_FAIL","phpdoc":[],"expression":false,"value":"-12"},"PCLZIP_ERR_BAD_CHECKSUM":{"name":"PCLZIP_ERR_BAD_CHECKSUM","phpdoc":[],"expression":false,"value":"-13"},"PCLZIP_ERR_INVALID_ARCHIVE_ZIP":{"name":"PCLZIP_ERR_INVALID_ARCHIVE_ZIP","phpdoc":[],"expression":false,"value":"-14"},"PCLZIP_ERR_MISSING_OPTION_VALUE":{"name":"PCLZIP_ERR_MISSING_OPTION_VALUE","phpdoc":[],"expression":false,"value":"-15"},"PCLZIP_ERR_INVALID_OPTION_VALUE":{"name":"PCLZIP_ERR_INVALID_OPTION_VALUE","phpdoc":[],"expression":false,"value":"-16"},"PCLZIP_ERR_ALREADY_A_DIRECTORY":{"name":"PCLZIP_ERR_ALREADY_A_DIRECTORY","phpdoc":[],"expression":false,"value":"-17"},"PCLZIP_ERR_UNSUPPORTED_COMPRESSION":{"name":"PCLZIP_ERR_UNSUPPORTED_COMPRESSION","phpdoc":[],"expression":false,"value":"-18"},"PCLZIP_ERR_UNSUPPORTED_ENCRYPTION":{"name":"PCLZIP_ERR_UNSUPPORTED_ENCRYPTION","phpdoc":[],"expression":false,"value":"-19"},"PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE":{"name":"PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE","phpdoc":[],"expression":false,"value":"-20"},"PCLZIP_ERR_DIRECTORY_RESTRICTION":{"name":"PCLZIP_ERR_DIRECTORY_RESTRICTION","phpdoc":[],"expression":false,"value":"-21"},"PCLZIP_OPT_PATH":{"name":"PCLZIP_OPT_PATH","phpdoc":[],"expression":false,"value":"77001"},"PCLZIP_OPT_ADD_PATH":{"name":"PCLZIP_OPT_ADD_PATH","phpdoc":[],"expression":false,"value":"77002"},"PCLZIP_OPT_REMOVE_PATH":{"name":"PCLZIP_OPT_REMOVE_PATH","phpdoc":[],"expression":false,"value":"77003"},"PCLZIP_OPT_REMOVE_ALL_PATH":{"name":"PCLZIP_OPT_REMOVE_ALL_PATH","phpdoc":[],"expression":false,"value":"77004"},"PCLZIP_OPT_SET_CHMOD":{"name":"PCLZIP_OPT_SET_CHMOD","phpdoc":[],"expression":false,"value":"77005"},"PCLZIP_OPT_EXTRACT_AS_STRING":{"name":"PCLZIP_OPT_EXTRACT_AS_STRING","phpdoc":[],"expression":false,"value":"77006"},"PCLZIP_OPT_NO_COMPRESSION":{"name":"PCLZIP_OPT_NO_COMPRESSION","phpdoc":[],"expression":false,"value":"77007"},"PCLZIP_OPT_BY_NAME":{"name":"PCLZIP_OPT_BY_NAME","phpdoc":[],"expression":false,"value":"77008"},"PCLZIP_OPT_BY_INDEX":{"name":"PCLZIP_OPT_BY_INDEX","phpdoc":[],"expression":false,"value":"77009"},"PCLZIP_OPT_BY_EREG":{"name":"PCLZIP_OPT_BY_EREG","phpdoc":[],"expression":false,"value":"77010"},"PCLZIP_OPT_BY_PREG":{"name":"PCLZIP_OPT_BY_PREG","phpdoc":[],"expression":false,"value":"77011"},"PCLZIP_OPT_COMMENT":{"name":"PCLZIP_OPT_COMMENT","phpdoc":[],"expression":false,"value":"77012"},"PCLZIP_OPT_ADD_COMMENT":{"name":"PCLZIP_OPT_ADD_COMMENT","phpdoc":[],"expression":false,"value":"77013"},"PCLZIP_OPT_PREPEND_COMMENT":{"name":"PCLZIP_OPT_PREPEND_COMMENT","phpdoc":[],"expression":false,"value":"77014"},"PCLZIP_OPT_EXTRACT_IN_OUTPUT":{"name":"PCLZIP_OPT_EXTRACT_IN_OUTPUT","phpdoc":[],"expression":false,"value":"77015"},"PCLZIP_OPT_REPLACE_NEWER":{"name":"PCLZIP_OPT_REPLACE_NEWER","phpdoc":[],"expression":false,"value":"77016"},"PCLZIP_OPT_STOP_ON_ERROR":{"name":"PCLZIP_OPT_STOP_ON_ERROR","phpdoc":[],"expression":false,"value":"77017"},"PCLZIP_OPT_EXTRACT_DIR_RESTRICTION":{"name":"PCLZIP_OPT_EXTRACT_DIR_RESTRICTION","phpdoc":[],"expression":false,"value":"77019"},"PCLZIP_OPT_TEMP_FILE_THRESHOLD":{"name":"PCLZIP_OPT_TEMP_FILE_THRESHOLD","phpdoc":[],"expression":false,"value":"77020"},"PCLZIP_OPT_ADD_TEMP_FILE_THRESHOLD":{"name":"PCLZIP_OPT_ADD_TEMP_FILE_THRESHOLD","phpdoc":[],"expression":false,"value":"77020"},"PCLZIP_OPT_TEMP_FILE_ON":{"name":"PCLZIP_OPT_TEMP_FILE_ON","phpdoc":[],"expression":false,"value":"77021"},"PCLZIP_OPT_ADD_TEMP_FILE_ON":{"name":"PCLZIP_OPT_ADD_TEMP_FILE_ON","phpdoc":[],"expression":false,"value":"77021"},"PCLZIP_OPT_TEMP_FILE_OFF":{"name":"PCLZIP_OPT_TEMP_FILE_OFF","phpdoc":[],"expression":false,"value":"77022"},"PCLZIP_OPT_ADD_TEMP_FILE_OFF":{"name":"PCLZIP_OPT_ADD_TEMP_FILE_OFF","phpdoc":[],"expression":false,"value":"77022"},"PCLZIP_ATT_FILE_NAME":{"name":"PCLZIP_ATT_FILE_NAME","phpdoc":[],"expression":false,"value":"79001"},"PCLZIP_ATT_FILE_NEW_SHORT_NAME":{"name":"PCLZIP_ATT_FILE_NEW_SHORT_NAME","phpdoc":[],"expression":false,"value":"79002"},"PCLZIP_ATT_FILE_NEW_FULL_NAME":{"name":"PCLZIP_ATT_FILE_NEW_FULL_NAME","phpdoc":[],"expression":false,"value":"79003"},"PCLZIP_ATT_FILE_MTIME":{"name":"PCLZIP_ATT_FILE_MTIME","phpdoc":[],"expression":false,"value":"79004"},"PCLZIP_ATT_FILE_CONTENT":{"name":"PCLZIP_ATT_FILE_CONTENT","phpdoc":[],"expression":false,"value":"79005"},"PCLZIP_ATT_FILE_COMMENT":{"name":"PCLZIP_ATT_FILE_COMMENT","phpdoc":[],"expression":false,"value":"79006"},"PCLZIP_CB_PRE_EXTRACT":{"name":"PCLZIP_CB_PRE_EXTRACT","phpdoc":[],"expression":false,"value":"78001"},"PCLZIP_CB_POST_EXTRACT":{"name":"PCLZIP_CB_POST_EXTRACT","phpdoc":[],"expression":false,"value":"78002"},"PCLZIP_CB_PRE_ADD":{"name":"PCLZIP_CB_PRE_ADD","phpdoc":[],"expression":false,"value":"78003"},"PCLZIP_CB_POST_ADD":{"name":"PCLZIP_CB_POST_ADD","phpdoc":[],"expression":false,"value":"78004"},"FS_CONNECT_TIMEOUT":{"name":"FS_CONNECT_TIMEOUT","phpdoc":[],"expression":false,"value":"30"},"FS_TIMEOUT":{"name":"FS_TIMEOUT","phpdoc":[],"expression":false,"value":"30"},"WXR_VERSION":{"name":"WXR_VERSION","phpdoc":[],"expression":false,"value":"'1.2'"},"WP_REPAIRING":{"name":"WP_REPAIRING","phpdoc":[],"expression":false,"value":"true"},"RSS":{"name":"RSS","phpdoc":[],"expression":false,"value":"'RSS'"},"ATOM":{"name":"ATOM","phpdoc":[],"expression":false,"value":"'Atom'"},"MAGPIE_INITALIZED":{"name":"MAGPIE_INITALIZED","phpdoc":[],"expression":false,"value":"1"},"MAGPIE_CACHE_ON":{"name":"MAGPIE_CACHE_ON","phpdoc":[],"expression":false,"value":"1"},"MAGPIE_CACHE_DIR":{"name":"MAGPIE_CACHE_DIR","phpdoc":[],"expression":false,"value":"'.\/cache'"},"MAGPIE_CACHE_AGE":{"name":"MAGPIE_CACHE_AGE","phpdoc":[],"expression":true,"value":"60 * 60"},"MAGPIE_CACHE_FRESH_ONLY":{"name":"MAGPIE_CACHE_FRESH_ONLY","phpdoc":[],"expression":false,"value":"0"},"MAGPIE_DEBUG":{"name":"MAGPIE_DEBUG","phpdoc":[],"expression":false,"value":"0"},"MAGPIE_FETCH_TIME_OUT":{"name":"MAGPIE_FETCH_TIME_OUT","phpdoc":[],"expression":false,"value":"2"},"MAGPIE_USE_GZIP":{"name":"MAGPIE_USE_GZIP","phpdoc":[],"expression":false,"value":"true"},"COMMENTS_TEMPLATE":{"name":"COMMENTS_TEMPLATE","phpdoc":[],"expression":false,"value":"true"},"WP_LANG_DIR":{"name":"WP_LANG_DIR","phpdoc":[],"expression":true,"value":"ABSPATH . WPINC . '\/languages'"},"LANGDIR":{"name":"LANGDIR","phpdoc":[],"expression":true,"value":"WPINC . '\/languages'"},"CUSTOM_TAGS":{"name":"CUSTOM_TAGS","phpdoc":[],"expression":false,"value":"false"},"SIMPLEPIE_NAME":{"name":"SIMPLEPIE_NAME","phpdoc":[],"expression":false,"value":"'SimplePie'"},"SIMPLEPIE_VERSION":{"name":"SIMPLEPIE_VERSION","phpdoc":[],"expression":false,"value":"'1.3.1'"},"SIMPLEPIE_URL":{"name":"SIMPLEPIE_URL","phpdoc":[],"expression":false,"value":"'http:\/\/simplepie.org'"},"SIMPLEPIE_USERAGENT":{"name":"SIMPLEPIE_USERAGENT","phpdoc":[],"expression":true,"value":"SIMPLEPIE_NAME . '\/' . SIMPLEPIE_VERSION . ' (Feed Parser; ' . SIMPLEPIE_URL . '; Allow like Gecko) Build\/' . SIMPLEPIE_BUILD"},"SIMPLEPIE_LINKBACK":{"name":"SIMPLEPIE_LINKBACK","phpdoc":[],"expression":true,"value":"'<a href=\"' . SIMPLEPIE_URL . '\" title=\"' . SIMPLEPIE_NAME . ' ' . SIMPLEPIE_VERSION . '\">' . SIMPLEPIE_NAME . '<\/a>'"},"SIMPLEPIE_LOCATOR_NONE":{"name":"SIMPLEPIE_LOCATOR_NONE","phpdoc":[],"expression":false,"value":"0"},"SIMPLEPIE_LOCATOR_AUTODISCOVERY":{"name":"SIMPLEPIE_LOCATOR_AUTODISCOVERY","phpdoc":[],"expression":false,"value":"1"},"SIMPLEPIE_LOCATOR_LOCAL_EXTENSION":{"name":"SIMPLEPIE_LOCATOR_LOCAL_EXTENSION","phpdoc":[],"expression":false,"value":"2"},"SIMPLEPIE_LOCATOR_LOCAL_BODY":{"name":"SIMPLEPIE_LOCATOR_LOCAL_BODY","phpdoc":[],"expression":false,"value":"4"},"SIMPLEPIE_LOCATOR_REMOTE_EXTENSION":{"name":"SIMPLEPIE_LOCATOR_REMOTE_EXTENSION","phpdoc":[],"expression":false,"value":"8"},"SIMPLEPIE_LOCATOR_REMOTE_BODY":{"name":"SIMPLEPIE_LOCATOR_REMOTE_BODY","phpdoc":[],"expression":false,"value":"16"},"SIMPLEPIE_LOCATOR_ALL":{"name":"SIMPLEPIE_LOCATOR_ALL","phpdoc":[],"expression":false,"value":"31"},"SIMPLEPIE_TYPE_NONE":{"name":"SIMPLEPIE_TYPE_NONE","phpdoc":[],"expression":false,"value":"0"},"SIMPLEPIE_TYPE_RSS_090":{"name":"SIMPLEPIE_TYPE_RSS_090","phpdoc":[],"expression":false,"value":"1"},"SIMPLEPIE_TYPE_RSS_091_NETSCAPE":{"name":"SIMPLEPIE_TYPE_RSS_091_NETSCAPE","phpdoc":[],"expression":false,"value":"2"},"SIMPLEPIE_TYPE_RSS_091_USERLAND":{"name":"SIMPLEPIE_TYPE_RSS_091_USERLAND","phpdoc":[],"expression":false,"value":"4"},"SIMPLEPIE_TYPE_RSS_091":{"name":"SIMPLEPIE_TYPE_RSS_091","phpdoc":[],"expression":false,"value":"6"},"SIMPLEPIE_TYPE_RSS_092":{"name":"SIMPLEPIE_TYPE_RSS_092","phpdoc":[],"expression":false,"value":"8"},"SIMPLEPIE_TYPE_RSS_093":{"name":"SIMPLEPIE_TYPE_RSS_093","phpdoc":[],"expression":false,"value":"16"},"SIMPLEPIE_TYPE_RSS_094":{"name":"SIMPLEPIE_TYPE_RSS_094","phpdoc":[],"expression":false,"value":"32"},"SIMPLEPIE_TYPE_RSS_10":{"name":"SIMPLEPIE_TYPE_RSS_10","phpdoc":[],"expression":false,"value":"64"},"SIMPLEPIE_TYPE_RSS_20":{"name":"SIMPLEPIE_TYPE_RSS_20","phpdoc":[],"expression":false,"value":"128"},"SIMPLEPIE_TYPE_RSS_RDF":{"name":"SIMPLEPIE_TYPE_RSS_RDF","phpdoc":[],"expression":false,"value":"65"},"SIMPLEPIE_TYPE_RSS_SYNDICATION":{"name":"SIMPLEPIE_TYPE_RSS_SYNDICATION","phpdoc":[],"expression":false,"value":"190"},"SIMPLEPIE_TYPE_RSS_ALL":{"name":"SIMPLEPIE_TYPE_RSS_ALL","phpdoc":[],"expression":false,"value":"255"},"SIMPLEPIE_TYPE_ATOM_03":{"name":"SIMPLEPIE_TYPE_ATOM_03","phpdoc":[],"expression":false,"value":"256"},"SIMPLEPIE_TYPE_ATOM_10":{"name":"SIMPLEPIE_TYPE_ATOM_10","phpdoc":[],"expression":false,"value":"512"},"SIMPLEPIE_TYPE_ATOM_ALL":{"name":"SIMPLEPIE_TYPE_ATOM_ALL","phpdoc":[],"expression":false,"value":"768"},"SIMPLEPIE_TYPE_ALL":{"name":"SIMPLEPIE_TYPE_ALL","phpdoc":[],"expression":false,"value":"1023"},"SIMPLEPIE_CONSTRUCT_NONE":{"name":"SIMPLEPIE_CONSTRUCT_NONE","phpdoc":[],"expression":false,"value":"0"},"SIMPLEPIE_CONSTRUCT_TEXT":{"name":"SIMPLEPIE_CONSTRUCT_TEXT","phpdoc":[],"expression":false,"value":"1"},"SIMPLEPIE_CONSTRUCT_HTML":{"name":"SIMPLEPIE_CONSTRUCT_HTML","phpdoc":[],"expression":false,"value":"2"},"SIMPLEPIE_CONSTRUCT_XHTML":{"name":"SIMPLEPIE_CONSTRUCT_XHTML","phpdoc":[],"expression":false,"value":"4"},"SIMPLEPIE_CONSTRUCT_BASE64":{"name":"SIMPLEPIE_CONSTRUCT_BASE64","phpdoc":[],"expression":false,"value":"8"},"SIMPLEPIE_CONSTRUCT_IRI":{"name":"SIMPLEPIE_CONSTRUCT_IRI","phpdoc":[],"expression":false,"value":"16"},"SIMPLEPIE_CONSTRUCT_MAYBE_HTML":{"name":"SIMPLEPIE_CONSTRUCT_MAYBE_HTML","phpdoc":[],"expression":false,"value":"32"},"SIMPLEPIE_CONSTRUCT_ALL":{"name":"SIMPLEPIE_CONSTRUCT_ALL","phpdoc":[],"expression":false,"value":"63"},"SIMPLEPIE_SAME_CASE":{"name":"SIMPLEPIE_SAME_CASE","phpdoc":[],"expression":false,"value":"1"},"SIMPLEPIE_LOWERCASE":{"name":"SIMPLEPIE_LOWERCASE","phpdoc":[],"expression":false,"value":"2"},"SIMPLEPIE_UPPERCASE":{"name":"SIMPLEPIE_UPPERCASE","phpdoc":[],"expression":false,"value":"4"},"SIMPLEPIE_PCRE_HTML_ATTRIBUTE":{"name":"SIMPLEPIE_PCRE_HTML_ATTRIBUTE","phpdoc":[],"expression":false,"value":"'((?:[\\x09\\x0A\\x0B\\x0C\\x0D\\x20]+[^\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\x2F\\x3E][^\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\x2F\\x3D\\x3E]*(?:[\\x09\\x0A\\x0B\\x0C\\x0D\\x20]*=[\\x09\\x0A\\x0B\\x0C\\x0D\\x20]*(?:\"(?:[^\"]*)\"|\\'(?:[^\\']*)\\'|(?:[^\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\x22\\x27\\x3E][^\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\x3E]*)?))?)*)[\\x09\\x0A\\x0B\\x0C\\x0D\\x20]*'"},"SIMPLEPIE_PCRE_XML_ATTRIBUTE":{"name":"SIMPLEPIE_PCRE_XML_ATTRIBUTE","phpdoc":[],"expression":false,"value":"'((?:\\s+(?:(?:[^\\s:]+:)?[^\\s:]+)\\s*=\\s*(?:\"(?:[^\"]*)\"|\\'(?:[^\\']*)\\'))*)\\s*'"},"SIMPLEPIE_NAMESPACE_XML":{"name":"SIMPLEPIE_NAMESPACE_XML","phpdoc":[],"expression":false,"value":"'http:\/\/www.w3.org\/XML\/1998\/namespace'"},"SIMPLEPIE_NAMESPACE_ATOM_10":{"name":"SIMPLEPIE_NAMESPACE_ATOM_10","phpdoc":[],"expression":false,"value":"'http:\/\/www.w3.org\/2005\/Atom'"},"SIMPLEPIE_NAMESPACE_ATOM_03":{"name":"SIMPLEPIE_NAMESPACE_ATOM_03","phpdoc":[],"expression":false,"value":"'http:\/\/purl.org\/atom\/ns#'"},"SIMPLEPIE_NAMESPACE_RDF":{"name":"SIMPLEPIE_NAMESPACE_RDF","phpdoc":[],"expression":false,"value":"'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#'"},"SIMPLEPIE_NAMESPACE_RSS_090":{"name":"SIMPLEPIE_NAMESPACE_RSS_090","phpdoc":[],"expression":false,"value":"'http:\/\/my.netscape.com\/rdf\/simple\/0.9\/'"},"SIMPLEPIE_NAMESPACE_RSS_10":{"name":"SIMPLEPIE_NAMESPACE_RSS_10","phpdoc":[],"expression":false,"value":"'http:\/\/purl.org\/rss\/1.0\/'"},"SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT":{"name":"SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT","phpdoc":[],"expression":false,"value":"'http:\/\/purl.org\/rss\/1.0\/modules\/content\/'"},"SIMPLEPIE_NAMESPACE_RSS_20":{"name":"SIMPLEPIE_NAMESPACE_RSS_20","phpdoc":[],"expression":false,"value":"''"},"SIMPLEPIE_NAMESPACE_DC_10":{"name":"SIMPLEPIE_NAMESPACE_DC_10","phpdoc":[],"expression":false,"value":"'http:\/\/purl.org\/dc\/elements\/1.0\/'"},"SIMPLEPIE_NAMESPACE_DC_11":{"name":"SIMPLEPIE_NAMESPACE_DC_11","phpdoc":[],"expression":false,"value":"'http:\/\/purl.org\/dc\/elements\/1.1\/'"},"SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO":{"name":"SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO","phpdoc":[],"expression":false,"value":"'http:\/\/www.w3.org\/2003\/01\/geo\/wgs84_pos#'"},"SIMPLEPIE_NAMESPACE_GEORSS":{"name":"SIMPLEPIE_NAMESPACE_GEORSS","phpdoc":[],"expression":false,"value":"'http:\/\/www.georss.org\/georss'"},"SIMPLEPIE_NAMESPACE_MEDIARSS":{"name":"SIMPLEPIE_NAMESPACE_MEDIARSS","phpdoc":[],"expression":false,"value":"'http:\/\/search.yahoo.com\/mrss\/'"},"SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG":{"name":"SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG","phpdoc":[],"expression":false,"value":"'http:\/\/search.yahoo.com\/mrss'"},"SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG2":{"name":"SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG2","phpdoc":[],"expression":false,"value":"'http:\/\/video.search.yahoo.com\/mrss'"},"SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG3":{"name":"SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG3","phpdoc":[],"expression":false,"value":"'http:\/\/video.search.yahoo.com\/mrss\/'"},"SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG4":{"name":"SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG4","phpdoc":[],"expression":false,"value":"'http:\/\/www.rssboard.org\/media-rss'"},"SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG5":{"name":"SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG5","phpdoc":[],"expression":false,"value":"'http:\/\/www.rssboard.org\/media-rss\/'"},"SIMPLEPIE_NAMESPACE_ITUNES":{"name":"SIMPLEPIE_NAMESPACE_ITUNES","phpdoc":[],"expression":false,"value":"'http:\/\/www.itunes.com\/dtds\/podcast-1.0.dtd'"},"SIMPLEPIE_NAMESPACE_XHTML":{"name":"SIMPLEPIE_NAMESPACE_XHTML","phpdoc":[],"expression":false,"value":"'http:\/\/www.w3.org\/1999\/xhtml'"},"SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY":{"name":"SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY","phpdoc":[],"expression":false,"value":"'http:\/\/www.iana.org\/assignments\/relation\/'"},"SIMPLEPIE_FILE_SOURCE_NONE":{"name":"SIMPLEPIE_FILE_SOURCE_NONE","phpdoc":[],"expression":false,"value":"0"},"SIMPLEPIE_FILE_SOURCE_REMOTE":{"name":"SIMPLEPIE_FILE_SOURCE_REMOTE","phpdoc":[],"expression":false,"value":"1"},"SIMPLEPIE_FILE_SOURCE_LOCAL":{"name":"SIMPLEPIE_FILE_SOURCE_LOCAL","phpdoc":[],"expression":false,"value":"2"},"SIMPLEPIE_FILE_SOURCE_FSOCKOPEN":{"name":"SIMPLEPIE_FILE_SOURCE_FSOCKOPEN","phpdoc":[],"expression":false,"value":"4"},"SIMPLEPIE_FILE_SOURCE_CURL":{"name":"SIMPLEPIE_FILE_SOURCE_CURL","phpdoc":[],"expression":false,"value":"8"},"SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS":{"name":"SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS","phpdoc":[],"expression":false,"value":"16"},"REST_API_VERSION":{"name":"REST_API_VERSION","phpdoc":[],"expression":false,"value":"'2.0'"},"REST_REQUEST":{"name":"REST_REQUEST","phpdoc":[],"expression":false,"value":"true"},"EP_NONE":{"name":"EP_NONE","phpdoc":[],"expression":false,"value":"0"},"EP_PERMALINK":{"name":"EP_PERMALINK","phpdoc":[],"expression":false,"value":"1"},"EP_ATTACHMENT":{"name":"EP_ATTACHMENT","phpdoc":[],"expression":false,"value":"2"},"EP_DATE":{"name":"EP_DATE","phpdoc":[],"expression":false,"value":"4"},"EP_YEAR":{"name":"EP_YEAR","phpdoc":[],"expression":false,"value":"8"},"EP_MONTH":{"name":"EP_MONTH","phpdoc":[],"expression":false,"value":"16"},"EP_DAY":{"name":"EP_DAY","phpdoc":[],"expression":false,"value":"32"},"EP_ROOT":{"name":"EP_ROOT","phpdoc":[],"expression":false,"value":"64"},"EP_COMMENTS":{"name":"EP_COMMENTS","phpdoc":[],"expression":false,"value":"128"},"EP_SEARCH":{"name":"EP_SEARCH","phpdoc":[],"expression":false,"value":"256"},"EP_CATEGORIES":{"name":"EP_CATEGORIES","phpdoc":[],"expression":false,"value":"512"},"EP_TAGS":{"name":"EP_TAGS","phpdoc":[],"expression":false,"value":"1024"},"EP_AUTHORS":{"name":"EP_AUTHORS","phpdoc":[],"expression":false,"value":"2048"},"EP_PAGES":{"name":"EP_PAGES","phpdoc":[],"expression":false,"value":"4096"},"EZSQL_VERSION":{"name":"EZSQL_VERSION","phpdoc":[],"expression":false,"value":"'WP1.25'"},"OBJECT":{"name":"OBJECT","phpdoc":[],"expression":false,"value":"'OBJECT'"},"object":{"name":"object","phpdoc":[],"expression":false,"value":"'OBJECT'"},"OBJECT_K":{"name":"OBJECT_K","phpdoc":[],"expression":false,"value":"'OBJECT_K'"},"ARRAY_A":{"name":"ARRAY_A","phpdoc":[],"expression":false,"value":"'ARRAY_A'"},"ARRAY_N":{"name":"ARRAY_N","phpdoc":[],"expression":false,"value":"'ARRAY_N'"},"UPLOADBLOGSDIR":{"name":"UPLOADBLOGSDIR","phpdoc":[],"expression":false,"value":"'wp-content\/blogs.dir'"},"ADMIN_COOKIE_PATH":{"name":"ADMIN_COOKIE_PATH","phpdoc":[],"expression":true,"value":"SITECOOKIEPATH . 'wp-admin'"},"WPMU_SENDFILE":{"name":"WPMU_SENDFILE","phpdoc":[],"expression":false,"value":"false"},"WPMU_ACCEL_REDIRECT":{"name":"WPMU_ACCEL_REDIRECT","phpdoc":[],"expression":false,"value":"false"},"VHOST":{"name":"VHOST","phpdoc":[],"expression":false,"value":"'no'"},"SUBDOMAIN_INSTALL":{"name":"SUBDOMAIN_INSTALL","phpdoc":[],"expression":false,"value":"false"},"KB_IN_BYTES":{"name":"KB_IN_BYTES","phpdoc":[],"expression":false,"value":"1024"},"MB_IN_BYTES":{"name":"MB_IN_BYTES","phpdoc":[],"expression":true,"value":"1024 * KB_IN_BYTES"},"GB_IN_BYTES":{"name":"GB_IN_BYTES","phpdoc":[],"expression":true,"value":"1024 * MB_IN_BYTES"},"TB_IN_BYTES":{"name":"TB_IN_BYTES","phpdoc":[],"expression":true,"value":"1024 * GB_IN_BYTES"},"WP_MEMORY_LIMIT":{"name":"WP_MEMORY_LIMIT","phpdoc":[],"expression":false,"value":"'40M'"},"WP_MAX_MEMORY_LIMIT":{"name":"WP_MAX_MEMORY_LIMIT","phpdoc":[],"expression":false,"value":"'256M'"},"WP_DEBUG_DISPLAY":{"name":"WP_DEBUG_DISPLAY","phpdoc":[],"expression":false,"value":"true"},"WP_DEBUG_LOG":{"name":"WP_DEBUG_LOG","phpdoc":[],"expression":false,"value":"false"},"WP_CACHE":{"name":"WP_CACHE","phpdoc":[],"expression":false,"value":"false"},"MEDIA_TRASH":{"name":"MEDIA_TRASH","phpdoc":[],"expression":false,"value":"false"},"SHORTINIT":{"name":"SHORTINIT","phpdoc":[],"expression":false,"value":"true"},"WP_FEATURE_BETTER_PASSWORDS":{"name":"WP_FEATURE_BETTER_PASSWORDS","phpdoc":[],"expression":false,"value":"true"},"MINUTE_IN_SECONDS":{"name":"MINUTE_IN_SECONDS","phpdoc":[],"expression":false,"value":"60"},"HOUR_IN_SECONDS":{"name":"HOUR_IN_SECONDS","phpdoc":[],"expression":true,"value":"60 * MINUTE_IN_SECONDS"},"DAY_IN_SECONDS":{"name":"DAY_IN_SECONDS","phpdoc":[],"expression":true,"value":"24 * HOUR_IN_SECONDS"},"WEEK_IN_SECONDS":{"name":"WEEK_IN_SECONDS","phpdoc":[],"expression":true,"value":"7 * DAY_IN_SECONDS"},"MONTH_IN_SECONDS":{"name":"MONTH_IN_SECONDS","phpdoc":[],"expression":true,"value":"30 * DAY_IN_SECONDS"},"YEAR_IN_SECONDS":{"name":"YEAR_IN_SECONDS","phpdoc":[],"expression":true,"value":"365 * DAY_IN_SECONDS"},"WP_PLUGIN_DIR":{"name":"WP_PLUGIN_DIR","phpdoc":[],"expression":true,"value":"WP_CONTENT_DIR . '\/plugins'"},"WP_PLUGIN_URL":{"name":"WP_PLUGIN_URL","phpdoc":[],"expression":true,"value":"WP_CONTENT_URL . '\/plugins'"},"PLUGINDIR":{"name":"PLUGINDIR","phpdoc":[],"expression":false,"value":"'wp-content\/plugins'"},"WPMU_PLUGIN_DIR":{"name":"WPMU_PLUGIN_DIR","phpdoc":[],"expression":true,"value":"WP_CONTENT_DIR . '\/mu-plugins'"},"WPMU_PLUGIN_URL":{"name":"WPMU_PLUGIN_URL","phpdoc":[],"expression":true,"value":"WP_CONTENT_URL . '\/mu-plugins'"},"MUPLUGINDIR":{"name":"MUPLUGINDIR","phpdoc":[],"expression":false,"value":"'wp-content\/mu-plugins'"},"COOKIEHASH":{"name":"COOKIEHASH","phpdoc":[],"expression":false,"value":"''"},"USER_COOKIE":{"name":"USER_COOKIE","phpdoc":[],"expression":true,"value":"'wordpressuser_' . COOKIEHASH"},"PASS_COOKIE":{"name":"PASS_COOKIE","phpdoc":[],"expression":true,"value":"'wordpresspass_' . COOKIEHASH"},"AUTH_COOKIE":{"name":"AUTH_COOKIE","phpdoc":[],"expression":true,"value":"'wordpress_' . COOKIEHASH"},"SECURE_AUTH_COOKIE":{"name":"SECURE_AUTH_COOKIE","phpdoc":[],"expression":true,"value":"'wordpress_sec_' . COOKIEHASH"},"LOGGED_IN_COOKIE":{"name":"LOGGED_IN_COOKIE","phpdoc":[],"expression":true,"value":"'wordpress_logged_in_' . COOKIEHASH"},"TEST_COOKIE":{"name":"TEST_COOKIE","phpdoc":[],"expression":false,"value":"'wordpress_test_cookie'"},"COOKIE_DOMAIN":{"name":"COOKIE_DOMAIN","phpdoc":[],"expression":false,"value":"false"},"FORCE_SSL_ADMIN":{"name":"FORCE_SSL_ADMIN","phpdoc":[],"expression":false,"value":"false"},"AUTOSAVE_INTERVAL":{"name":"AUTOSAVE_INTERVAL","phpdoc":[],"expression":false,"value":"60"},"EMPTY_TRASH_DAYS":{"name":"EMPTY_TRASH_DAYS","phpdoc":[],"expression":false,"value":"30"},"WP_POST_REVISIONS":{"name":"WP_POST_REVISIONS","phpdoc":[],"expression":false,"value":"true"},"WP_CRON_LOCK_TIMEOUT":{"name":"WP_CRON_LOCK_TIMEOUT","phpdoc":[],"expression":false,"value":"60"},"EBML_ID_CHAPTERS":{"name":"EBML_ID_CHAPTERS","phpdoc":[],"expression":false,"value":"0x0043A770"},"EBML_ID_SEEKHEAD":{"name":"EBML_ID_SEEKHEAD","phpdoc":[],"expression":false,"value":"0x014D9B74"},"EBML_ID_TAGS":{"name":"EBML_ID_TAGS","phpdoc":[],"expression":false,"value":"0x0254C367"},"EBML_ID_INFO":{"name":"EBML_ID_INFO","phpdoc":[],"expression":false,"value":"0x0549A966"},"EBML_ID_TRACKS":{"name":"EBML_ID_TRACKS","phpdoc":[],"expression":false,"value":"0x0654AE6B"},"EBML_ID_SEGMENT":{"name":"EBML_ID_SEGMENT","phpdoc":[],"expression":false,"value":"0x08538067"},"EBML_ID_ATTACHMENTS":{"name":"EBML_ID_ATTACHMENTS","phpdoc":[],"expression":false,"value":"0x0941A469"},"EBML_ID_EBML":{"name":"EBML_ID_EBML","phpdoc":[],"expression":false,"value":"0x0A45DFA3"},"EBML_ID_CUES":{"name":"EBML_ID_CUES","phpdoc":[],"expression":false,"value":"0x0C53BB6B"},"EBML_ID_CLUSTER":{"name":"EBML_ID_CLUSTER","phpdoc":[],"expression":false,"value":"0x0F43B675"},"EBML_ID_LANGUAGE":{"name":"EBML_ID_LANGUAGE","phpdoc":[],"expression":false,"value":"0x02B59C"},"EBML_ID_TRACKTIMECODESCALE":{"name":"EBML_ID_TRACKTIMECODESCALE","phpdoc":[],"expression":false,"value":"0x03314F"},"EBML_ID_DEFAULTDURATION":{"name":"EBML_ID_DEFAULTDURATION","phpdoc":[],"expression":false,"value":"0x03E383"},"EBML_ID_CODECNAME":{"name":"EBML_ID_CODECNAME","phpdoc":[],"expression":false,"value":"0x058688"},"EBML_ID_CODECDOWNLOADURL":{"name":"EBML_ID_CODECDOWNLOADURL","phpdoc":[],"expression":false,"value":"0x06B240"},"EBML_ID_TIMECODESCALE":{"name":"EBML_ID_TIMECODESCALE","phpdoc":[],"expression":false,"value":"0x0AD7B1"},"EBML_ID_COLOURSPACE":{"name":"EBML_ID_COLOURSPACE","phpdoc":[],"expression":false,"value":"0x0EB524"},"EBML_ID_GAMMAVALUE":{"name":"EBML_ID_GAMMAVALUE","phpdoc":[],"expression":false,"value":"0x0FB523"},"EBML_ID_CODECSETTINGS":{"name":"EBML_ID_CODECSETTINGS","phpdoc":[],"expression":false,"value":"0x1A9697"},"EBML_ID_CODECINFOURL":{"name":"EBML_ID_CODECINFOURL","phpdoc":[],"expression":false,"value":"0x1B4040"},"EBML_ID_PREVFILENAME":{"name":"EBML_ID_PREVFILENAME","phpdoc":[],"expression":false,"value":"0x1C83AB"},"EBML_ID_PREVUID":{"name":"EBML_ID_PREVUID","phpdoc":[],"expression":false,"value":"0x1CB923"},"EBML_ID_NEXTFILENAME":{"name":"EBML_ID_NEXTFILENAME","phpdoc":[],"expression":false,"value":"0x1E83BB"},"EBML_ID_NEXTUID":{"name":"EBML_ID_NEXTUID","phpdoc":[],"expression":false,"value":"0x1EB923"},"EBML_ID_CONTENTCOMPALGO":{"name":"EBML_ID_CONTENTCOMPALGO","phpdoc":[],"expression":false,"value":"0x0254"},"EBML_ID_CONTENTCOMPSETTINGS":{"name":"EBML_ID_CONTENTCOMPSETTINGS","phpdoc":[],"expression":false,"value":"0x0255"},"EBML_ID_DOCTYPE":{"name":"EBML_ID_DOCTYPE","phpdoc":[],"expression":false,"value":"0x0282"},"EBML_ID_DOCTYPEREADVERSION":{"name":"EBML_ID_DOCTYPEREADVERSION","phpdoc":[],"expression":false,"value":"0x0285"},"EBML_ID_EBMLVERSION":{"name":"EBML_ID_EBMLVERSION","phpdoc":[],"expression":false,"value":"0x0286"},"EBML_ID_DOCTYPEVERSION":{"name":"EBML_ID_DOCTYPEVERSION","phpdoc":[],"expression":false,"value":"0x0287"},"EBML_ID_EBMLMAXIDLENGTH":{"name":"EBML_ID_EBMLMAXIDLENGTH","phpdoc":[],"expression":false,"value":"0x02F2"},"EBML_ID_EBMLMAXSIZELENGTH":{"name":"EBML_ID_EBMLMAXSIZELENGTH","phpdoc":[],"expression":false,"value":"0x02F3"},"EBML_ID_EBMLREADVERSION":{"name":"EBML_ID_EBMLREADVERSION","phpdoc":[],"expression":false,"value":"0x02F7"},"EBML_ID_CHAPLANGUAGE":{"name":"EBML_ID_CHAPLANGUAGE","phpdoc":[],"expression":false,"value":"0x037C"},"EBML_ID_CHAPCOUNTRY":{"name":"EBML_ID_CHAPCOUNTRY","phpdoc":[],"expression":false,"value":"0x037E"},"EBML_ID_SEGMENTFAMILY":{"name":"EBML_ID_SEGMENTFAMILY","phpdoc":[],"expression":false,"value":"0x0444"},"EBML_ID_DATEUTC":{"name":"EBML_ID_DATEUTC","phpdoc":[],"expression":false,"value":"0x0461"},"EBML_ID_TAGLANGUAGE":{"name":"EBML_ID_TAGLANGUAGE","phpdoc":[],"expression":false,"value":"0x047A"},"EBML_ID_TAGDEFAULT":{"name":"EBML_ID_TAGDEFAULT","phpdoc":[],"expression":false,"value":"0x0484"},"EBML_ID_TAGBINARY":{"name":"EBML_ID_TAGBINARY","phpdoc":[],"expression":false,"value":"0x0485"},"EBML_ID_TAGSTRING":{"name":"EBML_ID_TAGSTRING","phpdoc":[],"expression":false,"value":"0x0487"},"EBML_ID_DURATION":{"name":"EBML_ID_DURATION","phpdoc":[],"expression":false,"value":"0x0489"},"EBML_ID_CHAPPROCESSPRIVATE":{"name":"EBML_ID_CHAPPROCESSPRIVATE","phpdoc":[],"expression":false,"value":"0x050D"},"EBML_ID_CHAPTERFLAGENABLED":{"name":"EBML_ID_CHAPTERFLAGENABLED","phpdoc":[],"expression":false,"value":"0x0598"},"EBML_ID_TAGNAME":{"name":"EBML_ID_TAGNAME","phpdoc":[],"expression":false,"value":"0x05A3"},"EBML_ID_EDITIONENTRY":{"name":"EBML_ID_EDITIONENTRY","phpdoc":[],"expression":false,"value":"0x05B9"},"EBML_ID_EDITIONUID":{"name":"EBML_ID_EDITIONUID","phpdoc":[],"expression":false,"value":"0x05BC"},"EBML_ID_EDITIONFLAGHIDDEN":{"name":"EBML_ID_EDITIONFLAGHIDDEN","phpdoc":[],"expression":false,"value":"0x05BD"},"EBML_ID_EDITIONFLAGDEFAULT":{"name":"EBML_ID_EDITIONFLAGDEFAULT","phpdoc":[],"expression":false,"value":"0x05DB"},"EBML_ID_EDITIONFLAGORDERED":{"name":"EBML_ID_EDITIONFLAGORDERED","phpdoc":[],"expression":false,"value":"0x05DD"},"EBML_ID_FILEDATA":{"name":"EBML_ID_FILEDATA","phpdoc":[],"expression":false,"value":"0x065C"},"EBML_ID_FILEMIMETYPE":{"name":"EBML_ID_FILEMIMETYPE","phpdoc":[],"expression":false,"value":"0x0660"},"EBML_ID_FILENAME":{"name":"EBML_ID_FILENAME","phpdoc":[],"expression":false,"value":"0x066E"},"EBML_ID_FILEREFERRAL":{"name":"EBML_ID_FILEREFERRAL","phpdoc":[],"expression":false,"value":"0x0675"},"EBML_ID_FILEDESCRIPTION":{"name":"EBML_ID_FILEDESCRIPTION","phpdoc":[],"expression":false,"value":"0x067E"},"EBML_ID_FILEUID":{"name":"EBML_ID_FILEUID","phpdoc":[],"expression":false,"value":"0x06AE"},"EBML_ID_CONTENTENCALGO":{"name":"EBML_ID_CONTENTENCALGO","phpdoc":[],"expression":false,"value":"0x07E1"},"EBML_ID_CONTENTENCKEYID":{"name":"EBML_ID_CONTENTENCKEYID","phpdoc":[],"expression":false,"value":"0x07E2"},"EBML_ID_CONTENTSIGNATURE":{"name":"EBML_ID_CONTENTSIGNATURE","phpdoc":[],"expression":false,"value":"0x07E3"},"EBML_ID_CONTENTSIGKEYID":{"name":"EBML_ID_CONTENTSIGKEYID","phpdoc":[],"expression":false,"value":"0x07E4"},"EBML_ID_CONTENTSIGALGO":{"name":"EBML_ID_CONTENTSIGALGO","phpdoc":[],"expression":false,"value":"0x07E5"},"EBML_ID_CONTENTSIGHASHALGO":{"name":"EBML_ID_CONTENTSIGHASHALGO","phpdoc":[],"expression":false,"value":"0x07E6"},"EBML_ID_MUXINGAPP":{"name":"EBML_ID_MUXINGAPP","phpdoc":[],"expression":false,"value":"0x0D80"},"EBML_ID_SEEK":{"name":"EBML_ID_SEEK","phpdoc":[],"expression":false,"value":"0x0DBB"},"EBML_ID_CONTENTENCODINGORDER":{"name":"EBML_ID_CONTENTENCODINGORDER","phpdoc":[],"expression":false,"value":"0x1031"},"EBML_ID_CONTENTENCODINGSCOPE":{"name":"EBML_ID_CONTENTENCODINGSCOPE","phpdoc":[],"expression":false,"value":"0x1032"},"EBML_ID_CONTENTENCODINGTYPE":{"name":"EBML_ID_CONTENTENCODINGTYPE","phpdoc":[],"expression":false,"value":"0x1033"},"EBML_ID_CONTENTCOMPRESSION":{"name":"EBML_ID_CONTENTCOMPRESSION","phpdoc":[],"expression":false,"value":"0x1034"},"EBML_ID_CONTENTENCRYPTION":{"name":"EBML_ID_CONTENTENCRYPTION","phpdoc":[],"expression":false,"value":"0x1035"},"EBML_ID_CUEREFNUMBER":{"name":"EBML_ID_CUEREFNUMBER","phpdoc":[],"expression":false,"value":"0x135F"},"EBML_ID_NAME":{"name":"EBML_ID_NAME","phpdoc":[],"expression":false,"value":"0x136E"},"EBML_ID_CUEBLOCKNUMBER":{"name":"EBML_ID_CUEBLOCKNUMBER","phpdoc":[],"expression":false,"value":"0x1378"},"EBML_ID_TRACKOFFSET":{"name":"EBML_ID_TRACKOFFSET","phpdoc":[],"expression":false,"value":"0x137F"},"EBML_ID_SEEKID":{"name":"EBML_ID_SEEKID","phpdoc":[],"expression":false,"value":"0x13AB"},"EBML_ID_SEEKPOSITION":{"name":"EBML_ID_SEEKPOSITION","phpdoc":[],"expression":false,"value":"0x13AC"},"EBML_ID_STEREOMODE":{"name":"EBML_ID_STEREOMODE","phpdoc":[],"expression":false,"value":"0x13B8"},"EBML_ID_OLDSTEREOMODE":{"name":"EBML_ID_OLDSTEREOMODE","phpdoc":[],"expression":false,"value":"0x13B9"},"EBML_ID_PIXELCROPBOTTOM":{"name":"EBML_ID_PIXELCROPBOTTOM","phpdoc":[],"expression":false,"value":"0x14AA"},"EBML_ID_DISPLAYWIDTH":{"name":"EBML_ID_DISPLAYWIDTH","phpdoc":[],"expression":false,"value":"0x14B0"},"EBML_ID_DISPLAYUNIT":{"name":"EBML_ID_DISPLAYUNIT","phpdoc":[],"expression":false,"value":"0x14B2"},"EBML_ID_ASPECTRATIOTYPE":{"name":"EBML_ID_ASPECTRATIOTYPE","phpdoc":[],"expression":false,"value":"0x14B3"},"EBML_ID_DISPLAYHEIGHT":{"name":"EBML_ID_DISPLAYHEIGHT","phpdoc":[],"expression":false,"value":"0x14BA"},"EBML_ID_PIXELCROPTOP":{"name":"EBML_ID_PIXELCROPTOP","phpdoc":[],"expression":false,"value":"0x14BB"},"EBML_ID_PIXELCROPLEFT":{"name":"EBML_ID_PIXELCROPLEFT","phpdoc":[],"expression":false,"value":"0x14CC"},"EBML_ID_PIXELCROPRIGHT":{"name":"EBML_ID_PIXELCROPRIGHT","phpdoc":[],"expression":false,"value":"0x14DD"},"EBML_ID_FLAGFORCED":{"name":"EBML_ID_FLAGFORCED","phpdoc":[],"expression":false,"value":"0x15AA"},"EBML_ID_MAXBLOCKADDITIONID":{"name":"EBML_ID_MAXBLOCKADDITIONID","phpdoc":[],"expression":false,"value":"0x15EE"},"EBML_ID_WRITINGAPP":{"name":"EBML_ID_WRITINGAPP","phpdoc":[],"expression":false,"value":"0x1741"},"EBML_ID_CLUSTERSILENTTRACKS":{"name":"EBML_ID_CLUSTERSILENTTRACKS","phpdoc":[],"expression":false,"value":"0x1854"},"EBML_ID_CLUSTERSILENTTRACKNUMBER":{"name":"EBML_ID_CLUSTERSILENTTRACKNUMBER","phpdoc":[],"expression":false,"value":"0x18D7"},"EBML_ID_ATTACHEDFILE":{"name":"EBML_ID_ATTACHEDFILE","phpdoc":[],"expression":false,"value":"0x21A7"},"EBML_ID_CONTENTENCODING":{"name":"EBML_ID_CONTENTENCODING","phpdoc":[],"expression":false,"value":"0x2240"},"EBML_ID_BITDEPTH":{"name":"EBML_ID_BITDEPTH","phpdoc":[],"expression":false,"value":"0x2264"},"EBML_ID_CODECPRIVATE":{"name":"EBML_ID_CODECPRIVATE","phpdoc":[],"expression":false,"value":"0x23A2"},"EBML_ID_TARGETS":{"name":"EBML_ID_TARGETS","phpdoc":[],"expression":false,"value":"0x23C0"},"EBML_ID_CHAPTERPHYSICALEQUIV":{"name":"EBML_ID_CHAPTERPHYSICALEQUIV","phpdoc":[],"expression":false,"value":"0x23C3"},"EBML_ID_TAGCHAPTERUID":{"name":"EBML_ID_TAGCHAPTERUID","phpdoc":[],"expression":false,"value":"0x23C4"},"EBML_ID_TAGTRACKUID":{"name":"EBML_ID_TAGTRACKUID","phpdoc":[],"expression":false,"value":"0x23C5"},"EBML_ID_TAGATTACHMENTUID":{"name":"EBML_ID_TAGATTACHMENTUID","phpdoc":[],"expression":false,"value":"0x23C6"},"EBML_ID_TAGEDITIONUID":{"name":"EBML_ID_TAGEDITIONUID","phpdoc":[],"expression":false,"value":"0x23C9"},"EBML_ID_TARGETTYPE":{"name":"EBML_ID_TARGETTYPE","phpdoc":[],"expression":false,"value":"0x23CA"},"EBML_ID_TRACKTRANSLATE":{"name":"EBML_ID_TRACKTRANSLATE","phpdoc":[],"expression":false,"value":"0x2624"},"EBML_ID_TRACKTRANSLATETRACKID":{"name":"EBML_ID_TRACKTRANSLATETRACKID","phpdoc":[],"expression":false,"value":"0x26A5"},"EBML_ID_TRACKTRANSLATECODEC":{"name":"EBML_ID_TRACKTRANSLATECODEC","phpdoc":[],"expression":false,"value":"0x26BF"},"EBML_ID_TRACKTRANSLATEEDITIONUID":{"name":"EBML_ID_TRACKTRANSLATEEDITIONUID","phpdoc":[],"expression":false,"value":"0x26FC"},"EBML_ID_SIMPLETAG":{"name":"EBML_ID_SIMPLETAG","phpdoc":[],"expression":false,"value":"0x27C8"},"EBML_ID_TARGETTYPEVALUE":{"name":"EBML_ID_TARGETTYPEVALUE","phpdoc":[],"expression":false,"value":"0x28CA"},"EBML_ID_CHAPPROCESSCOMMAND":{"name":"EBML_ID_CHAPPROCESSCOMMAND","phpdoc":[],"expression":false,"value":"0x2911"},"EBML_ID_CHAPPROCESSTIME":{"name":"EBML_ID_CHAPPROCESSTIME","phpdoc":[],"expression":false,"value":"0x2922"},"EBML_ID_CHAPTERTRANSLATE":{"name":"EBML_ID_CHAPTERTRANSLATE","phpdoc":[],"expression":false,"value":"0x2924"},"EBML_ID_CHAPPROCESSDATA":{"name":"EBML_ID_CHAPPROCESSDATA","phpdoc":[],"expression":false,"value":"0x2933"},"EBML_ID_CHAPPROCESS":{"name":"EBML_ID_CHAPPROCESS","phpdoc":[],"expression":false,"value":"0x2944"},"EBML_ID_CHAPPROCESSCODECID":{"name":"EBML_ID_CHAPPROCESSCODECID","phpdoc":[],"expression":false,"value":"0x2955"},"EBML_ID_CHAPTERTRANSLATEID":{"name":"EBML_ID_CHAPTERTRANSLATEID","phpdoc":[],"expression":false,"value":"0x29A5"},"EBML_ID_CHAPTERTRANSLATECODEC":{"name":"EBML_ID_CHAPTERTRANSLATECODEC","phpdoc":[],"expression":false,"value":"0x29BF"},"EBML_ID_CHAPTERTRANSLATEEDITIONUID":{"name":"EBML_ID_CHAPTERTRANSLATEEDITIONUID","phpdoc":[],"expression":false,"value":"0x29FC"},"EBML_ID_CONTENTENCODINGS":{"name":"EBML_ID_CONTENTENCODINGS","phpdoc":[],"expression":false,"value":"0x2D80"},"EBML_ID_MINCACHE":{"name":"EBML_ID_MINCACHE","phpdoc":[],"expression":false,"value":"0x2DE7"},"EBML_ID_MAXCACHE":{"name":"EBML_ID_MAXCACHE","phpdoc":[],"expression":false,"value":"0x2DF8"},"EBML_ID_CHAPTERSEGMENTUID":{"name":"EBML_ID_CHAPTERSEGMENTUID","phpdoc":[],"expression":false,"value":"0x2E67"},"EBML_ID_CHAPTERSEGMENTEDITIONUID":{"name":"EBML_ID_CHAPTERSEGMENTEDITIONUID","phpdoc":[],"expression":false,"value":"0x2EBC"},"EBML_ID_TRACKOVERLAY":{"name":"EBML_ID_TRACKOVERLAY","phpdoc":[],"expression":false,"value":"0x2FAB"},"EBML_ID_TAG":{"name":"EBML_ID_TAG","phpdoc":[],"expression":false,"value":"0x3373"},"EBML_ID_SEGMENTFILENAME":{"name":"EBML_ID_SEGMENTFILENAME","phpdoc":[],"expression":false,"value":"0x3384"},"EBML_ID_SEGMENTUID":{"name":"EBML_ID_SEGMENTUID","phpdoc":[],"expression":false,"value":"0x33A4"},"EBML_ID_CHAPTERUID":{"name":"EBML_ID_CHAPTERUID","phpdoc":[],"expression":false,"value":"0x33C4"},"EBML_ID_TRACKUID":{"name":"EBML_ID_TRACKUID","phpdoc":[],"expression":false,"value":"0x33C5"},"EBML_ID_ATTACHMENTLINK":{"name":"EBML_ID_ATTACHMENTLINK","phpdoc":[],"expression":false,"value":"0x3446"},"EBML_ID_CLUSTERBLOCKADDITIONS":{"name":"EBML_ID_CLUSTERBLOCKADDITIONS","phpdoc":[],"expression":false,"value":"0x35A1"},"EBML_ID_CHANNELPOSITIONS":{"name":"EBML_ID_CHANNELPOSITIONS","phpdoc":[],"expression":false,"value":"0x347B"},"EBML_ID_OUTPUTSAMPLINGFREQUENCY":{"name":"EBML_ID_OUTPUTSAMPLINGFREQUENCY","phpdoc":[],"expression":false,"value":"0x38B5"},"EBML_ID_TITLE":{"name":"EBML_ID_TITLE","phpdoc":[],"expression":false,"value":"0x3BA9"},"EBML_ID_CHAPTERDISPLAY":{"name":"EBML_ID_CHAPTERDISPLAY","phpdoc":[],"expression":false,"value":"0x00"},"EBML_ID_TRACKTYPE":{"name":"EBML_ID_TRACKTYPE","phpdoc":[],"expression":false,"value":"0x03"},"EBML_ID_CHAPSTRING":{"name":"EBML_ID_CHAPSTRING","phpdoc":[],"expression":false,"value":"0x05"},"EBML_ID_CODECID":{"name":"EBML_ID_CODECID","phpdoc":[],"expression":false,"value":"0x06"},"EBML_ID_FLAGDEFAULT":{"name":"EBML_ID_FLAGDEFAULT","phpdoc":[],"expression":false,"value":"0x08"},"EBML_ID_CHAPTERTRACKNUMBER":{"name":"EBML_ID_CHAPTERTRACKNUMBER","phpdoc":[],"expression":false,"value":"0x09"},"EBML_ID_CLUSTERSLICES":{"name":"EBML_ID_CLUSTERSLICES","phpdoc":[],"expression":false,"value":"0x0E"},"EBML_ID_CHAPTERTRACK":{"name":"EBML_ID_CHAPTERTRACK","phpdoc":[],"expression":false,"value":"0x0F"},"EBML_ID_CHAPTERTIMESTART":{"name":"EBML_ID_CHAPTERTIMESTART","phpdoc":[],"expression":false,"value":"0x11"},"EBML_ID_CHAPTERTIMEEND":{"name":"EBML_ID_CHAPTERTIMEEND","phpdoc":[],"expression":false,"value":"0x12"},"EBML_ID_CUEREFTIME":{"name":"EBML_ID_CUEREFTIME","phpdoc":[],"expression":false,"value":"0x16"},"EBML_ID_CUEREFCLUSTER":{"name":"EBML_ID_CUEREFCLUSTER","phpdoc":[],"expression":false,"value":"0x17"},"EBML_ID_CHAPTERFLAGHIDDEN":{"name":"EBML_ID_CHAPTERFLAGHIDDEN","phpdoc":[],"expression":false,"value":"0x18"},"EBML_ID_FLAGINTERLACED":{"name":"EBML_ID_FLAGINTERLACED","phpdoc":[],"expression":false,"value":"0x1A"},"EBML_ID_CLUSTERBLOCKDURATION":{"name":"EBML_ID_CLUSTERBLOCKDURATION","phpdoc":[],"expression":false,"value":"0x1B"},"EBML_ID_FLAGLACING":{"name":"EBML_ID_FLAGLACING","phpdoc":[],"expression":false,"value":"0x1C"},"EBML_ID_CHANNELS":{"name":"EBML_ID_CHANNELS","phpdoc":[],"expression":false,"value":"0x1F"},"EBML_ID_CLUSTERBLOCKGROUP":{"name":"EBML_ID_CLUSTERBLOCKGROUP","phpdoc":[],"expression":false,"value":"0x20"},"EBML_ID_CLUSTERBLOCK":{"name":"EBML_ID_CLUSTERBLOCK","phpdoc":[],"expression":false,"value":"0x21"},"EBML_ID_CLUSTERBLOCKVIRTUAL":{"name":"EBML_ID_CLUSTERBLOCKVIRTUAL","phpdoc":[],"expression":false,"value":"0x22"},"EBML_ID_CLUSTERSIMPLEBLOCK":{"name":"EBML_ID_CLUSTERSIMPLEBLOCK","phpdoc":[],"expression":false,"value":"0x23"},"EBML_ID_CLUSTERCODECSTATE":{"name":"EBML_ID_CLUSTERCODECSTATE","phpdoc":[],"expression":false,"value":"0x24"},"EBML_ID_CLUSTERBLOCKADDITIONAL":{"name":"EBML_ID_CLUSTERBLOCKADDITIONAL","phpdoc":[],"expression":false,"value":"0x25"},"EBML_ID_CLUSTERBLOCKMORE":{"name":"EBML_ID_CLUSTERBLOCKMORE","phpdoc":[],"expression":false,"value":"0x26"},"EBML_ID_CLUSTERPOSITION":{"name":"EBML_ID_CLUSTERPOSITION","phpdoc":[],"expression":false,"value":"0x27"},"EBML_ID_CODECDECODEALL":{"name":"EBML_ID_CODECDECODEALL","phpdoc":[],"expression":false,"value":"0x2A"},"EBML_ID_CLUSTERPREVSIZE":{"name":"EBML_ID_CLUSTERPREVSIZE","phpdoc":[],"expression":false,"value":"0x2B"},"EBML_ID_TRACKENTRY":{"name":"EBML_ID_TRACKENTRY","phpdoc":[],"expression":false,"value":"0x2E"},"EBML_ID_CLUSTERENCRYPTEDBLOCK":{"name":"EBML_ID_CLUSTERENCRYPTEDBLOCK","phpdoc":[],"expression":false,"value":"0x2F"},"EBML_ID_PIXELWIDTH":{"name":"EBML_ID_PIXELWIDTH","phpdoc":[],"expression":false,"value":"0x30"},"EBML_ID_CUETIME":{"name":"EBML_ID_CUETIME","phpdoc":[],"expression":false,"value":"0x33"},"EBML_ID_SAMPLINGFREQUENCY":{"name":"EBML_ID_SAMPLINGFREQUENCY","phpdoc":[],"expression":false,"value":"0x35"},"EBML_ID_CHAPTERATOM":{"name":"EBML_ID_CHAPTERATOM","phpdoc":[],"expression":false,"value":"0x36"},"EBML_ID_CUETRACKPOSITIONS":{"name":"EBML_ID_CUETRACKPOSITIONS","phpdoc":[],"expression":false,"value":"0x37"},"EBML_ID_FLAGENABLED":{"name":"EBML_ID_FLAGENABLED","phpdoc":[],"expression":false,"value":"0x39"},"EBML_ID_PIXELHEIGHT":{"name":"EBML_ID_PIXELHEIGHT","phpdoc":[],"expression":false,"value":"0x3A"},"EBML_ID_CUEPOINT":{"name":"EBML_ID_CUEPOINT","phpdoc":[],"expression":false,"value":"0x3B"},"EBML_ID_CRC32":{"name":"EBML_ID_CRC32","phpdoc":[],"expression":false,"value":"0x3F"},"EBML_ID_CLUSTERBLOCKADDITIONID":{"name":"EBML_ID_CLUSTERBLOCKADDITIONID","phpdoc":[],"expression":false,"value":"0x4B"},"EBML_ID_CLUSTERLACENUMBER":{"name":"EBML_ID_CLUSTERLACENUMBER","phpdoc":[],"expression":false,"value":"0x4C"},"EBML_ID_CLUSTERFRAMENUMBER":{"name":"EBML_ID_CLUSTERFRAMENUMBER","phpdoc":[],"expression":false,"value":"0x4D"},"EBML_ID_CLUSTERDELAY":{"name":"EBML_ID_CLUSTERDELAY","phpdoc":[],"expression":false,"value":"0x4E"},"EBML_ID_CLUSTERDURATION":{"name":"EBML_ID_CLUSTERDURATION","phpdoc":[],"expression":false,"value":"0x4F"},"EBML_ID_TRACKNUMBER":{"name":"EBML_ID_TRACKNUMBER","phpdoc":[],"expression":false,"value":"0x57"},"EBML_ID_CUEREFERENCE":{"name":"EBML_ID_CUEREFERENCE","phpdoc":[],"expression":false,"value":"0x5B"},"EBML_ID_VIDEO":{"name":"EBML_ID_VIDEO","phpdoc":[],"expression":false,"value":"0x60"},"EBML_ID_AUDIO":{"name":"EBML_ID_AUDIO","phpdoc":[],"expression":false,"value":"0x61"},"EBML_ID_CLUSTERTIMESLICE":{"name":"EBML_ID_CLUSTERTIMESLICE","phpdoc":[],"expression":false,"value":"0x68"},"EBML_ID_CUECODECSTATE":{"name":"EBML_ID_CUECODECSTATE","phpdoc":[],"expression":false,"value":"0x6A"},"EBML_ID_CUEREFCODECSTATE":{"name":"EBML_ID_CUEREFCODECSTATE","phpdoc":[],"expression":false,"value":"0x6B"},"EBML_ID_VOID":{"name":"EBML_ID_VOID","phpdoc":[],"expression":false,"value":"0x6C"},"EBML_ID_CLUSTERTIMECODE":{"name":"EBML_ID_CLUSTERTIMECODE","phpdoc":[],"expression":false,"value":"0x67"},"EBML_ID_CLUSTERBLOCKADDID":{"name":"EBML_ID_CLUSTERBLOCKADDID","phpdoc":[],"expression":false,"value":"0x6E"},"EBML_ID_CUECLUSTERPOSITION":{"name":"EBML_ID_CUECLUSTERPOSITION","phpdoc":[],"expression":false,"value":"0x71"},"EBML_ID_CUETRACK":{"name":"EBML_ID_CUETRACK","phpdoc":[],"expression":false,"value":"0x77"},"EBML_ID_CLUSTERREFERENCEPRIORITY":{"name":"EBML_ID_CLUSTERREFERENCEPRIORITY","phpdoc":[],"expression":false,"value":"0x7A"},"EBML_ID_CLUSTERREFERENCEBLOCK":{"name":"EBML_ID_CLUSTERREFERENCEBLOCK","phpdoc":[],"expression":false,"value":"0x7B"},"EBML_ID_CLUSTERREFERENCEVIRTUAL":{"name":"EBML_ID_CLUSTERREFERENCEVIRTUAL","phpdoc":[],"expression":false,"value":"0x7D"},"GETID3_FLV_TAG_AUDIO":{"name":"GETID3_FLV_TAG_AUDIO","phpdoc":[],"expression":false,"value":"8"},"GETID3_FLV_TAG_VIDEO":{"name":"GETID3_FLV_TAG_VIDEO","phpdoc":[],"expression":false,"value":"9"},"GETID3_FLV_TAG_META":{"name":"GETID3_FLV_TAG_META","phpdoc":[],"expression":false,"value":"18"},"GETID3_FLV_VIDEO_H263":{"name":"GETID3_FLV_VIDEO_H263","phpdoc":[],"expression":false,"value":"2"},"GETID3_FLV_VIDEO_SCREEN":{"name":"GETID3_FLV_VIDEO_SCREEN","phpdoc":[],"expression":false,"value":"3"},"GETID3_FLV_VIDEO_VP6FLV":{"name":"GETID3_FLV_VIDEO_VP6FLV","phpdoc":[],"expression":false,"value":"4"},"GETID3_FLV_VIDEO_VP6FLV_ALPHA":{"name":"GETID3_FLV_VIDEO_VP6FLV_ALPHA","phpdoc":[],"expression":false,"value":"5"},"GETID3_FLV_VIDEO_SCREENV2":{"name":"GETID3_FLV_VIDEO_SCREENV2","phpdoc":[],"expression":false,"value":"6"},"GETID3_FLV_VIDEO_H264":{"name":"GETID3_FLV_VIDEO_H264","phpdoc":[],"expression":false,"value":"7"},"H264_AVC_SEQUENCE_HEADER":{"name":"H264_AVC_SEQUENCE_HEADER","phpdoc":[],"expression":false,"value":"0"},"H264_PROFILE_BASELINE":{"name":"H264_PROFILE_BASELINE","phpdoc":[],"expression":false,"value":"66"},"H264_PROFILE_MAIN":{"name":"H264_PROFILE_MAIN","phpdoc":[],"expression":false,"value":"77"},"H264_PROFILE_EXTENDED":{"name":"H264_PROFILE_EXTENDED","phpdoc":[],"expression":false,"value":"88"},"H264_PROFILE_HIGH":{"name":"H264_PROFILE_HIGH","phpdoc":[],"expression":false,"value":"100"},"H264_PROFILE_HIGH10":{"name":"H264_PROFILE_HIGH10","phpdoc":[],"expression":false,"value":"110"},"H264_PROFILE_HIGH422":{"name":"H264_PROFILE_HIGH422","phpdoc":[],"expression":false,"value":"122"},"H264_PROFILE_HIGH444":{"name":"H264_PROFILE_HIGH444","phpdoc":[],"expression":false,"value":"144"},"H264_PROFILE_HIGH444_PREDICTIVE":{"name":"H264_PROFILE_HIGH444_PREDICTIVE","phpdoc":[],"expression":false,"value":"244"},"RANDOM_COMPAT_READ_BUFFER":{"name":"RANDOM_COMPAT_READ_BUFFER","phpdoc":[],"expression":false,"value":"8"},"PO_MAX_LINE_LEN":{"name":"PO_MAX_LINE_LEN","phpdoc":[],"expression":false,"value":"79"},"HEADER_IMAGE":{"name":"HEADER_IMAGE","phpdoc":[],"expression":false,"value":"''"},"HEADER_TEXTCOLOR":{"name":"HEADER_TEXTCOLOR","phpdoc":[],"expression":false,"value":"''"},"NO_HEADER_TEXT":{"name":"NO_HEADER_TEXT","phpdoc":[],"expression":false,"value":"true"}},"functions":{"call_some_i18n_methods":{"name":"call_some_i18n_methods","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[]},"trackback_response":{"name":"trackback_response","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$error","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$error_message","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Response to a trackback.\n *\n * Responds with an error or success XML message.\n *\n * @since 0.71\n *\n * @param mixed  $error         Whether there was an error.\n *                              Default '0'. Accepts '0' or '1', true or false.\n * @param string $error_message Error message if an error occurred.\n *\/"}]},"_get_cron_lock":{"name":"_get_cron_lock","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the cron lock.\n *\n * Returns the uncached `doing_cron` transient.\n *\n * @ignore\n * @since 3.3.0\n *\n * @return string|false Value of the `doing_cron` transient, 0|false otherwise.\n *\/"}]},"do_activate_header":{"name":"do_activate_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds an action hook specific to this page.\n *\n * Fires on {@see 'wp_head'}.\n *\n * @since MU\n *\/"}]},"wpmu_activate_stylesheet":{"name":"wpmu_activate_stylesheet","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Loads styles specific to this page.\n *\n * @since MU\n *\/"}]},"logIO":{"name":"logIO","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$io","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$msg","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * logIO() - Writes logging info to a file.\n *\n * @deprecated 3.4.0 Use error_log()\n * @see error_log()\n *\n * @param string $io Whether input or output\n * @param string $msg Information describing logging reason.\n *\/"}]},"login_header":{"name":"login_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"'Log In'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$wp_error","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output the login page header.\n *\n * @param string   $title    Optional. WordPress login Page title to display in the `<title>` element.\n *                           Default 'Log In'.\n * @param string   $message  Optional. Message to display in header. Default empty.\n * @param WP_Error $wp_error Optional. The error to pass. Default empty.\n *\/"}]},"login_footer":{"name":"login_footer","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$input_id","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the footer for the login page.\n *\n * @param string $input_id Which input to auto-focus\n *\/"}]},"wp_shake_js":{"name":"wp_shake_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 3.0.0\n *\/"}]},"wp_login_viewport_meta":{"name":"wp_login_viewport_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 3.7.0\n *\/"}]},"retrieve_password":{"name":"retrieve_password","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles sending password retrieval email to user.\n *\n * @return bool|WP_Error True: when finish. WP_Error on error\n *\/"}]},"do_signup_header":{"name":"do_signup_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints signup_header via wp_head\n *\n * @since MU\n *\/"}]},"wpmu_signup_stylesheet":{"name":"wpmu_signup_stylesheet","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints styles for front-end Multisite signup pages\n *\n * @since MU\n *\/"}]},"show_blog_form":{"name":"show_blog_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blogname","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_title","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$errors","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Generates and displays the Signup and Create Site forms\n *\n * @since MU\n *\n * @param string          $blogname   The new site name.\n * @param string          $blog_title The new site title.\n * @param WP_Error|string $errors     A WP_Error object containing existing errors. Defaults to empty string.\n *\/"}]},"validate_blog_form":{"name":"validate_blog_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Validate the new site signup\n *\n * @since MU\n *\n * @return array Contains the new site data and error messages.\n *\/"}]},"show_user_form":{"name":"show_user_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_name","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_email","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$errors","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display user registration form\n *\n * @since MU\n *\n * @param string          $user_name  The entered username.\n * @param string          $user_email The entered email address.\n * @param WP_Error|string $errors     A WP_Error object containing existing errors. Defaults to empty string.\n *\/"}]},"validate_user_form":{"name":"validate_user_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Validate user signup name and email\n *\n * @since MU\n *\n * @return array Contains username, email, and error messages.\n *\/"}]},"signup_another_blog":{"name":"signup_another_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blogname","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_title","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$errors","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Allow returning users to sign up for another site\n *\n * @since MU\n *\n * @param string          $blogname   The new site name\n * @param string          $blog_title The new site title.\n * @param WP_Error|string $errors     A WP_Error object containing existing errors. Defaults to empty string.\n *\/"}]},"validate_another_blog_signup":{"name":"validate_another_blog_signup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Validate a new site signup.\n *\n * @since MU\n *\n * @return null|bool True if site signup was validated, false if error.\n *                   The function halts all execution if the user is not logged in.\n *\/"}]},"confirm_another_blog_signup":{"name":"confirm_another_blog_signup","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_title","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_name","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_email","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta","rank":5,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":6,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Confirm a new site signup.\n *\n * @since MU\n * @since 4.4.0 Added the `$blog_id` parameter.\n *\n * @param string $domain     The domain URL.\n * @param string $path       The site root path.\n * @param string $blog_title The site title.\n * @param string $user_name  The username.\n * @param string $user_email The user's email address.\n * @param array  $meta       Any additional meta from the {@see 'add_signup_meta'} filter in validate_blog_signup().\n * @param int    $blog_id    The site ID.\n *\/"}]},"signup_user":{"name":"signup_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_name","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_email","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$errors","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Setup the new user signup process\n *\n * @since MU\n *\n * @param string          $user_name  The username.\n * @param string          $user_email The user's email.\n * @param WP_Error|string $errors     A WP_Error object containing existing errors. Defaults to empty string.\n *\/"}]},"validate_user_signup":{"name":"validate_user_signup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Validate the new user signup\n *\n * @since MU\n *\n * @return bool True if new user signup was validated, false if error\n *\/"}]},"confirm_user_signup":{"name":"confirm_user_signup","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_email","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * New user signup confirmation\n *\n * @since MU\n *\n * @param string $user_name The username\n * @param string $user_email The user's email address\n *\/"}]},"signup_blog":{"name":"signup_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_name","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_email","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blogname","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_title","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$errors","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Setup the new site signup\n *\n * @since MU\n *\n * @param string          $user_name  The username.\n * @param string          $user_email The user's email address.\n * @param string          $blogname   The site name.\n * @param string          $blog_title The site title.\n * @param WP_Error|string $errors     A WP_Error object containing existing errors. Defaults to empty string.\n *\/"}]},"validate_blog_signup":{"name":"validate_blog_signup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Validate new site signup\n *\n * @since MU\n *\n * @return bool True if the site signup was validated, false if error\n *\/"}]},"confirm_blog_signup":{"name":"confirm_blog_signup","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_title","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_name","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_email","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta","rank":5,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * New site signup confirmation\n *\n * @since MU\n *\n * @param string $domain The domain URL\n * @param string $path The site root path\n * @param string $blog_title The new site title\n * @param string $user_name The user's username\n * @param string $user_email The user's email address\n * @param array $meta Any additional meta from the {@see 'add_signup_meta'} filter in validate_blog_signup()\n *\/"}]},"signup_get_available_languages":{"name":"signup_get_available_languages","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves languages available during the site\/user signup process.\n *\n * @since 4.4.0\n *\n * @see get_available_languages()\n *\n * @return array List of available languages.\n *\/"}]},"display_header":{"name":"display_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$body_classes","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display install header.\n *\n * @since 2.5.0\n *\n * @param string $body_classes\n *\/"}]},"display_setup_form":{"name":"display_setup_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$error","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display installer setup form.\n *\n * @since 2.8.0\n *\n * @param string|null $error\n *\/"}]},"maybe_create_table":{"name":"maybe_create_table","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$table_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$create_ddl","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates a table in the database if it doesn't already exist.\n *\n * This method checks for an existing database and creates a new one if it's not\n * already present. It doesn't rely on MySQL's \"IF NOT EXISTS\" statement, but chooses\n * to query all tables first and then run the SQL statement creating the table.\n *\n * @since 1.0.0\n *\n * @global wpdb  $wpdb\n *\n * @param string $table_name Database table name to create.\n * @param string $create_ddl SQL statement to create table.\n * @return bool If table already exists or was created by function.\n *\/"}]},"maybe_add_column":{"name":"maybe_add_column","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$table_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$create_ddl","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds column to a database table if it doesn't already exist.\n *\n * @since 1.3.0\n *\n * @global wpdb  $wpdb\n *\n * @param string $table_name  The table name to modify.\n * @param string $column_name The column name to add to the table.\n * @param string $create_ddl  The SQL statement used to add the column.\n * @return bool True if already exists or on successful completion, false on error.\n *\/"}]},"maybe_drop_column":{"name":"maybe_drop_column","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$table_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$drop_ddl","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Drop column from database table, if it exists.\n *\n * @since 1.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $table_name Table name\n * @param string $column_name Column name\n * @param string $drop_ddl SQL statement to drop column.\n * @return bool False on failure, true on success or doesn't exist.\n *\/"}]},"check_column":{"name":"check_column","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$table_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$col_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$col_type","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$is_null","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default","rank":5,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$extra","rank":6,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check column matches criteria.\n *\n * Uses the SQL DESC for retrieving the table info for the column. It will help\n * understand the parameters, if you do more research on what column information\n * is returned by the SQL statement. Pass in null to skip checking that\n * criteria.\n *\n * Column names returned from DESC table are case sensitive and are listed:\n *      Field\n *      Type\n *      Null\n *      Key\n *      Default\n *      Extra\n *\n * @since 1.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $table_name Table name\n * @param string $col_name   Column name\n * @param string $col_type   Column type\n * @param bool   $is_null    Optional. Check is null.\n * @param mixed  $key        Optional. Key info.\n * @param mixed  $default    Optional. Default value.\n * @param mixed  $extra      Optional. Extra value.\n * @return bool True, if matches. False, if not matching.\n *\/"}]},"export_add_js":{"name":"export_add_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display JavaScript on the page.\n *\n * @since 3.5.0\n *\/"}]},"export_date_options":{"name":"export_date_options","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"'post'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create the date options fields for exporting a given post type.\n *\n * @global wpdb      $wpdb      WordPress database abstraction object.\n * @global WP_Locale $wp_locale Date and Time Locale object.\n *\n * @since 3.1.0\n *\n * @param string $post_type The post type. Default 'post'.\n *\/"}]},"wp_nav_menu_max_depth":{"name":"wp_nav_menu_max_depth","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$classes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @global int $_wp_nav_menu_max_depth\n *\n * @param string $classes\n * @return string\n *\/"}]},"_wp_menu_output":{"name":"_wp_menu_output","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$menu","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$submenu","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$submenu_as_parent","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display menu.\n *\n * @access private\n * @since 2.7.0\n *\n * @global string $self\n * @global string $parent_file\n * @global string $submenu_file\n * @global string $plugin_page\n * @global string $typenow\n *\n * @param array $menu\n * @param array $submenu\n * @param bool  $submenu_as_parent\n *\/"}]},"list_core_update":{"name":"list_core_update","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$update","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @global string $wp_local_package\n * @global wpdb   $wpdb\n *\n * @staticvar bool $first_pass\n *\n * @param object $update\n *\/"}]},"dismissed_updates":{"name":"dismissed_updates","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 2.7.0\n *\/"}]},"core_upgrade_preamble":{"name":"core_upgrade_preamble","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display upgrade WordPress for downloading latest or upgrading automatically form.\n *\n * @since 2.7.0\n *\n * @global string $required_php_version\n * @global string $required_mysql_version\n *\/"}]},"list_plugin_updates":{"name":"list_plugin_updates","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[]},"list_theme_updates":{"name":"list_theme_updates","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 2.9.0\n *\/"}]},"list_translation_updates":{"name":"list_translation_updates","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 3.7.0\n *\/"}]},"do_core_upgrade":{"name":"do_core_upgrade","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$reinstall","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Upgrade WordPress core display.\n *\n * @since 2.7.0\n *\n * @global WP_Filesystem_Base $wp_filesystem Subclass\n *\n * @param bool $reinstall\n *\/"}]},"do_dismiss_core_update":{"name":"do_dismiss_core_update","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 2.7.0\n *\/"}]},"do_undismiss_core_update":{"name":"do_undismiss_core_update","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 2.7.0\n *\/"}]},"setup_config_display_header":{"name":"setup_config_display_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$body_classes","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display setup wp-config.php file header.\n *\n * @ignore\n * @since 2.3.0\n *\n * @global string    $wp_local_package\n * @global WP_Locale $wp_locale\n *\n * @param string|array $body_classes\n *\/"}]},"_add_themes_utility_last":{"name":"_add_themes_utility_last","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds the (theme) 'Editor' link to the bottom of the Appearance menu.\n *\n * @access private\n * @since 3.0.0\n *\/"}]},"startElement":{"name":"startElement","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$parser","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tagName","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attrs","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * XML callback function for the start of a new XML tag.\n *\n * @since 0.71\n * @access private\n *\n * @global array $names\n * @global array $urls\n * @global array $targets\n * @global array $descriptions\n * @global array $feeds\n *\n * @param mixed $parser XML Parser resource.\n * @param string $tagName XML element name.\n * @param array $attrs XML element attributes.\n *\/"}]},"endElement":{"name":"endElement","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$parser","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tagName","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * XML callback function that is called at the end of a XML tag.\n *\n * @since 0.71\n * @access private\n *\n * @param mixed $parser XML Parser resource.\n * @param string $tagName XML tag name.\n *\/"}]},"wp_list_widgets":{"name":"wp_list_widgets","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * WordPress Widgets Administration API\n *\n * @package WordPress\n * @subpackage Administration\n *\/"},{"phpdoc":"\/**\n * Display list of the available widgets.\n *\n * @since 2.5.0\n *\n * @global array $wp_registered_widgets\n * @global array $wp_registered_widget_controls\n *\/"}]},"_sort_name_callback":{"name":"_sort_name_callback","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback to sort array by a 'name' key.\n *\n * @since 3.1.0\n * @access private\n *\n * @return int\n *\/"}]},"wp_list_widget_controls":{"name":"wp_list_widget_controls","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$sidebar","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sidebar_name","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Show the widgets and their settings for a sidebar.\n * Used in the admin widget config screen.\n *\n * @since 2.5.0\n *\n * @param string $sidebar      Sidebar ID.\n * @param string $sidebar_name Optional. Sidebar name. Default empty.\n *\/"}]},"wp_list_widget_controls_dynamic_sidebar":{"name":"wp_list_widget_controls_dynamic_sidebar","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$params","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the widget control arguments.\n *\n * @since 2.5.0\n *\n * @global array $wp_registered_widgets\n *\n * @staticvar int $i\n *\n * @param array $params\n * @return array\n *\/"}]},"next_widget_id_number":{"name":"next_widget_id_number","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id_base","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @global array $wp_registered_widgets\n *\n * @param string $id_base\n * @return int\n *\/"}]},"wp_widget_control":{"name":"wp_widget_control","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$sidebar_args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Meta widget used to display the control form for a widget.\n *\n * Called from dynamic_sidebar().\n *\n * @since 2.5.0\n *\n * @global array $wp_registered_widgets\n * @global array $wp_registered_widget_controls\n * @global array $sidebars_widgets\n *\n * @param array $sidebar_args\n * @return array\n *\/"}]},"wp_widgets_access_body_class":{"name":"wp_widgets_access_body_class","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$classes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @param string $classes\n * @return string\n *\/"}]},"check_upload_size":{"name":"check_upload_size","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine if uploaded file exceeds space quota.\n *\n * @since 3.0.0\n *\n * @param array $file $_FILES array for a given file.\n * @return array $_FILES array with 'error' key set if file exceeds quota. 'error' is empty otherwise.\n *\/"},{"phpdoc":"\/**\n * Multisite administration functions.\n *\n * @package WordPress\n * @subpackage Multisite\n * @since 3.0.0\n *\/"}]},"wpmu_delete_blog":{"name":"wpmu_delete_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$drop","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Delete a site.\n *\n * @since 3.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int  $blog_id Site ID.\n * @param bool $drop    True if site's database tables should be dropped. Default is false.\n *\/"}]},"wpmu_delete_user":{"name":"wpmu_delete_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Delete a user from the network and remove from all sites.\n *\n * @since 3.0.0\n *\n * @todo Merge with wp_delete_user() ?\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int $id The user ID.\n * @return bool True if the user was deleted, otherwise false.\n *\/"}]},"update_option_new_admin_email":{"name":"update_option_new_admin_email","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$old_value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sends an email when a site administrator email address is changed.\n *\n * @since 3.0.0\n *\n * @param string $old_value The old email address. Not currently used.\n * @param string $value     The new email address.\n *\/"}]},"send_confirmation_on_profile_email":{"name":"send_confirmation_on_profile_email","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sends an email when an email address change is requested.\n *\n * @since 3.0.0\n *\n * @global WP_Error $errors WP_Error object.\n * @global wpdb     $wpdb   WordPress database object.\n *\/"}]},"new_user_email_admin_notice":{"name":"new_user_email_admin_notice","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds an admin notice alerting the user to check for confirmation email\n * after email address change.\n *\n * @since 3.0.0\n *\n * @global string $pagenow\n *\/"}]},"upload_is_user_over_quota":{"name":"upload_is_user_over_quota","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$echo","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether a site has used its allotted upload space.\n *\n * @since MU\n *\n * @param bool $echo Optional. If $echo is set and the quota is exceeded, a warning message is echoed. Default is true.\n * @return bool True if user is over upload space quota, otherwise false.\n *\/"}]},"display_space_usage":{"name":"display_space_usage","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the amount of disk space used by the current site. Not used in core.\n *\n * @since MU\n *\/"}]},"fix_import_form_size":{"name":"fix_import_form_size","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$size","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the remaining upload space for this site.\n *\n * @since MU\n *\n * @param int $size Current max size in bytes\n * @return int Max size in bytes\n *\/"}]},"upload_space_setting":{"name":"upload_space_setting","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the site upload space quota setting form on the Edit Site Settings screen.\n *\n * @since 3.0.0\n *\n * @param int $id The ID of the site to display the setting for.\n *\/"}]},"update_user_status":{"name":"update_user_status","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$pref","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update the status of a user in the database.\n *\n * Used in core to mark a user as spam or \"ham\" (not spam) in Multisite.\n *\n * @since 3.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int    $id         The user ID.\n * @param string $pref       The column in the wp_users table to update the user's status\n *                           in (presumably user_status, spam, or deleted).\n * @param int    $value      The new status for the user.\n * @param null   $deprecated Deprecated as of 3.0.2 and should not be used.\n * @return int   The initially passed $value.\n *\/"}]},"refresh_user_details":{"name":"refresh_user_details","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Cleans the user cache for a specific user.\n *\n * @since 3.0.0\n *\n * @param int $id The user ID.\n * @return bool|int The ID of the refreshed user or false if the user does not exist.\n *\/"}]},"format_code_lang":{"name":"format_code_lang","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$code","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the language for a language code.\n *\n * @since 3.0.0\n *\n * @param string $code Optional. The two-letter language code. Default empty.\n * @return string The language corresponding to $code if it exists. If it does not exist,\n *                then the first two letters of $code is returned.\n *\/"}]},"sync_category_tag_slugs":{"name":"sync_category_tag_slugs","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Synchronize category and post tag slugs when global terms are enabled.\n *\n * @since 3.0.0\n *\n * @param object $term     The term.\n * @param string $taxonomy The taxonomy for `$term`. Should be 'category' or 'post_tag', as these are\n *                         the only taxonomies which are processed by this function; anything else\n *                         will be returned untouched.\n * @return object|array Returns `$term`, after filtering the 'slug' field with sanitize_title()\n *                      if $taxonomy is 'category' or 'post_tag'.\n *\/"}]},"_access_denied_splash":{"name":"_access_denied_splash","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays an access denied message when a user tries to view a site's dashboard they\n * do not have access to.\n *\n * @since 3.2.0\n * @access private\n *\/"}]},"check_import_new_users":{"name":"check_import_new_users","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$permission","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks if the current user has permissions to import new users.\n *\n * @since 3.0.0\n *\n * @param string $permission A permission to be checked. Currently not used.\n * @return bool True if the user has proper permissions, false if they do not.\n *\/"}]},"mu_dropdown_languages":{"name":"mu_dropdown_languages","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$lang_files","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$current","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Generates and displays a drop-down of available languages.\n *\n * @since 3.0.0\n *\n * @param array  $lang_files Optional. An array of the language files. Default empty array.\n * @param string $current    Optional. The current language code. Default empty.\n *\/"}]},"site_admin_notice":{"name":"site_admin_notice","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays an admin notice to upgrade all sites after a core upgrade.\n *\n * @since 3.0.0\n *\n * @global int    $wp_db_version The version number of the database.\n * @global string $pagenow\n *\n * @return false False if the current user is not a super admin.\n *\/"}]},"avoid_blog_page_permalink_collision":{"name":"avoid_blog_page_permalink_collision","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$postarr","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Avoids a collision between a site slug and a permalink slug.\n *\n * In a subdirectory install this will make sure that a site and a post do not use the\n * same subdirectory by checking for a site with the same name as a new post.\n *\n * @since 3.0.0\n *\n * @param array $data    An array of post data.\n * @param array $postarr An array of posts. Not currently used.\n * @return array The new array of post data after checking for collisions.\n *\/"}]},"choose_primary_blog":{"name":"choose_primary_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles the display of choosing a user's primary site.\n *\n * This displays the user's primary site and allows the user to choose\n * which site is primary.\n *\n * @since 3.0.0\n *\/"}]},"can_edit_network":{"name":"can_edit_network","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$site_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether or not we can edit this network from this page.\n *\n * By default editing of network is restricted to the Network Admin for that `$site_id`\n * this allows for this to be overridden.\n *\n * @since 3.1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int $site_id The network\/site ID to check.\n * @return bool True if network can be edited, otherwise false.\n *\/"}]},"_thickbox_path_admin_subfolder":{"name":"_thickbox_path_admin_subfolder","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Thickbox image paths for Network Admin.\n *\n * @since 3.1.0\n *\n * @access private\n *\/"}]},"confirm_delete_users":{"name":"confirm_delete_users","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$users","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @param array $users\n *\/"}]},"network_settings_add_js":{"name":"network_settings_add_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print JavaScript in the header on the Network Settings screen.\n *\n * @since 4.1.0\n *\/"}]},"network_edit_site_nav":{"name":"network_edit_site_nav","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the HTML for a network's \"Edit Site\" tabular interface.\n *\n * @since 4.6.0\n *\n * @param $args {\n *     Optional. Array or string of Query parameters. Default empty array.\n *\n *     @type int    $blog_id  The site ID. Default is the current site.\n *     @type array  $links    The tabs to include with (label|url|cap) keys.\n *     @type string $selected The ID of the selected link.\n * }\n *\/"}]},"wp_get_revision_ui_diff":{"name":"wp_get_revision_ui_diff","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$compare_from","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$compare_to","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the revision UI diff.\n *\n * @since 3.6.0\n *\n * @param object|int $post         The post object. Also accepts a post ID.\n * @param int        $compare_from The revision ID to compare from.\n * @param int        $compare_to   The revision ID to come to.\n *\n * @return array|bool Associative array of a post's revisioned fields and their diffs.\n *                    Or, false on failure.\n *\/"},{"phpdoc":"\/**\n * WordPress Administration Revisions API\n *\n * @package WordPress\n * @subpackage Administration\n * @since 3.6.0\n *\/"}]},"wp_prepare_revisions_for_js":{"name":"wp_prepare_revisions_for_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$selected_revision_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$from","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prepare revisions for JavaScript.\n *\n * @since 3.6.0\n *\n * @param object|int $post                 The post object. Also accepts a post ID.\n * @param int        $selected_revision_id The selected revision ID.\n * @param int        $from                 Optional. The revision ID to compare from.\n *\n * @return array An associative array of revision data and related settings.\n *\/"}]},"wp_print_revision_templates":{"name":"wp_print_revision_templates","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print JavaScript templates required for the revisions experience.\n *\n * @since 4.1.0\n *\n * @global WP_Post $post The global `$post` object.\n *\/"}]},"category_exists":{"name":"category_exists","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$cat_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * WordPress Taxonomy Administration API.\n *\n * @package WordPress\n * @subpackage Administration\n *\/"},{"phpdoc":"\/**\n * Check whether a category exists.\n *\n * @since 2.0.0\n *\n * @see term_exists()\n *\n * @param int|string $cat_name Category name.\n * @param int        $parent   Optional. ID of parent term.\n * @return mixed\n *\/"}]},"get_category_to_edit":{"name":"get_category_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get category object for given ID and 'edit' filter context.\n *\n * @since 2.0.0\n *\n * @param int $id\n * @return object\n *\/"}]},"wp_create_category":{"name":"wp_create_category","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$cat_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a new category to the database if it does not already exist.\n *\n * @since 2.0.0\n *\n * @param int|string $cat_name\n * @param int        $parent\n * @return int|WP_Error\n *\/"}]},"wp_create_categories":{"name":"wp_create_categories","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$categories","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create categories for the given post.\n *\n * @since 2.0.0\n *\n * @param array $categories List of categories to create.\n * @param int   $post_id    Optional. The post ID. Default empty.\n * @return array List of categories to create for the given post.\n *\/"}]},"wp_insert_category":{"name":"wp_insert_category","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$catarr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$wp_error","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates an existing Category or creates a new Category.\n *\n * @since 2.0.0\n * @since 2.5.0 $wp_error parameter was added.\n * @since 3.0.0 The 'taxonomy' argument was added.\n *\n * @param array $catarr {\n *     Array of arguments for inserting a new category.\n *\n *     @type int        $cat_ID               Category ID. A non-zero value updates an existing category.\n *                                            Default 0.\n *     @type string     $taxonomy             Taxonomy slug. Default 'category'.\n *     @type string     $cat_name             Category name. Default empty.\n *     @type string     $category_description Category description. Default empty.\n *     @type string     $category_nicename    Category nice (display) name. Default empty.\n *     @type int|string $category_parent      Category parent ID. Default empty.\n * }\n * @param bool  $wp_error Optional. Default false.\n * @return int|object The ID number of the new or updated Category on success. Zero or a WP_Error on failure,\n *                    depending on param $wp_error.\n *\/"}]},"wp_update_category":{"name":"wp_update_category","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$catarr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Aliases wp_insert_category() with minimal args.\n *\n * If you want to update only some fields of an existing category, call this\n * function with only the new values set inside $catarr.\n *\n * @since 2.0.0\n *\n * @param array $catarr The 'cat_ID' value is required. All other keys are optional.\n * @return int|bool The ID number of the new or updated Category on success. Zero or FALSE on failure.\n *\/"}]},"tag_exists":{"name":"tag_exists","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether a post tag with a given name exists.\n *\n * @since 2.3.0\n *\n * @param int|string $tag_name\n * @return mixed\n *\/"}]},"wp_create_tag":{"name":"wp_create_tag","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a new tag to the database if it does not already exist.\n *\n * @since 2.3.0\n *\n * @param int|string $tag_name\n * @return array|WP_Error\n *\/"}]},"get_tags_to_edit":{"name":"get_tags_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"'post_tag'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get comma-separated list of tags available to edit.\n *\n * @since 2.3.0\n *\n * @param int    $post_id\n * @param string $taxonomy Optional. The taxonomy for which to retrieve terms. Default 'post_tag'.\n * @return string|bool|WP_Error\n *\/"}]},"get_terms_to_edit":{"name":"get_terms_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"'post_tag'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get comma-separated list of terms available to edit for the given post ID.\n *\n * @since 2.8.0\n *\n * @param int    $post_id\n * @param string $taxonomy Optional. The taxonomy for which to retrieve terms. Default 'post_tag'.\n * @return string|bool|WP_Error\n *\/"}]},"wp_create_term":{"name":"wp_create_term","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"'post_tag'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a new term to the database if it does not already exist.\n *\n * @since 2.8.0\n *\n * @param int|string $tag_name\n * @param string $taxonomy Optional. The taxonomy for which to retrieve terms. Default 'post_tag'.\n * @return array|WP_Error\n *\/"}]},"get_preferred_from_update_core":{"name":"get_preferred_from_update_core","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Selects the first update version from the update_core option.\n *\n * @return object|array|false The response from the API on success, false on failure.\n *\/"},{"phpdoc":"\/**\n * WordPress Administration Update API\n *\n * @package WordPress\n * @subpackage Administration\n *\/"}]},"get_core_updates":{"name":"get_core_updates","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$options","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get available core updates.\n *\n * @param array $options Set $options['dismissed'] to true to show dismissed upgrades too,\n * \t                     set $options['available'] to false to skip not-dismissed updates.\n * @return array|false Array of the update objects on success, false on failure.\n *\/"}]},"find_core_auto_update":{"name":"find_core_auto_update","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the best available (and enabled) Auto-Update for WordPress Core.\n *\n * If there's 1.2.3 and 1.3 on offer, it'll choose 1.3 if the install allows it, else, 1.2.3\n *\n * @since 3.7.0\n *\n * @return array|false False on failure, otherwise the core update offering.\n *\/"}]},"get_core_checksums":{"name":"get_core_checksums","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$version","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$locale","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets and caches the checksums for the given version of WordPress.\n *\n * @since 3.7.0\n *\n * @param string $version Version string to query.\n * @param string $locale  Locale to query.\n * @return bool|array False on failure. An array of checksums on success.\n *\/"}]},"dismiss_core_update":{"name":"dismiss_core_update","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$update","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @param object $update\n * @return bool\n *\/"}]},"undismiss_core_update":{"name":"undismiss_core_update","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$version","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$locale","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @param string $version\n * @param string $locale\n * @return bool\n *\/"}]},"find_core_update":{"name":"find_core_update","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$version","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$locale","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @param string $version\n * @param string $locale\n * @return object|false\n *\/"}]},"core_update_footer":{"name":"core_update_footer","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$msg","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @param string $msg\n * @return string\n *\/"}]},"update_nag":{"name":"update_nag","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @global string $pagenow\n * @return false|void\n *\/"}]},"update_right_now_message":{"name":"update_right_now_message","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[]},"get_plugin_updates":{"name":"get_plugin_updates","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 2.9.0\n *\n * @return array\n *\/"}]},"wp_plugin_update_rows":{"name":"wp_plugin_update_rows","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 2.9.0\n *\/"}]},"wp_plugin_update_row":{"name":"wp_plugin_update_row","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$plugin_data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays update information for a plugin.\n *\n * @param string $file        Plugin basename.\n * @param array  $plugin_data Plugin information.\n * @return false|void\n *\/"}]},"get_theme_updates":{"name":"get_theme_updates","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @return array\n *\/"}]},"wp_theme_update_rows":{"name":"wp_theme_update_rows","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 3.1.0\n *\/"}]},"wp_theme_update_row":{"name":"wp_theme_update_row","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$theme_key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$theme","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays update information for a theme.\n *\n * @param string   $theme_key Theme stylesheet.\n * @param WP_Theme $theme     Theme object.\n * @return false|void\n *\/"}]},"maintenance_nag":{"name":"maintenance_nag","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @global int $upgrading\n * @return false|void\n *\/"}]},"wp_print_admin_notice_templates":{"name":"wp_print_admin_notice_templates","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints the JavaScript templates for update admin notices.\n *\n * Template takes one argument with four values:\n *\n *     param {object} data {\n *         Arguments for admin notice.\n *\n *         @type string id        ID of the notice.\n *         @type string className Class names for the notice.\n *         @type string message   The notice's message.\n *         @type string type      The type of update the notice is for. Either 'plugin' or 'theme'.\n *     }\n *\n * @since 4.6.0\n *\/"}]},"wp_print_update_row_templates":{"name":"wp_print_update_row_templates","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints the JavaScript templates for update and deletion rows in list tables.\n *\n * The update template takes one argument with four values:\n *\n *     param {object} data {\n *         Arguments for the update row\n *\n *         @type string slug    Plugin slug.\n *         @type string plugin  Plugin base name.\n *         @type string colspan The number of table columns this row spans.\n *         @type string content The row content.\n *     }\n *\n * The delete template takes one argument with four values:\n *\n *     param {object} data {\n *         Arguments for the update row\n *\n *         @type string slug    Plugin slug.\n *         @type string plugin  Plugin base name.\n *         @type string name    Plugin name.\n *         @type string colspan The number of table columns this row spans.\n *     }\n *\n * @since 4.6.0\n *\/"}]},"wp_dashboard_setup":{"name":"wp_dashboard_setup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers dashboard widgets.\n *\n * Handles POST data, sets up filters.\n *\n * @since 2.5.0\n *\n * @global array $wp_registered_widgets\n * @global array $wp_registered_widget_controls\n * @global array $wp_dashboard_control_callbacks\n *\/"},{"phpdoc":"\/**\n * WordPress Dashboard Widget Administration Screen API\n *\n * @package WordPress\n * @subpackage Administration\n *\/"}]},"wp_add_dashboard_widget":{"name":"wp_add_dashboard_widget","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$widget_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$widget_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$control_callback","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback_args","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds a new dashboard widget.\n *\n * @since 2.7.0\n *\n * @global array $wp_dashboard_control_callbacks\n *\n * @param string   $widget_id        Widget ID  (used in the 'id' attribute for the widget).\n * @param string   $widget_name      Title of the widget.\n * @param callable $callback         Function that fills the widget with the desired content.\n *                                   The function should echo its output.\n * @param callable $control_callback Optional. Function that outputs controls for the widget. Default null.\n * @param array    $callback_args    Optional. Data that should be set as the $args property of the widget array\n *                                   (which is the second parameter passed to your callback). Default null.\n *\/"}]},"_wp_dashboard_control_callback":{"name":"_wp_dashboard_control_callback","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$dashboard","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_box","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs controls for the current dashboard widget.\n *\n * @access private\n * @since 2.7.0\n *\n * @param mixed $dashboard\n * @param array $meta_box\n *\/"}]},"wp_dashboard":{"name":"wp_dashboard","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the dashboard.\n *\n * @since 2.5.0\n *\/"}]},"wp_dashboard_right_now":{"name":"wp_dashboard_right_now","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Dashboard widget that displays some basic stats about the site.\n *\n * Formerly 'Right Now'. A streamlined 'At a Glance' as of 3.8.\n *\n * @since 2.7.0\n *\/"}]},"wp_network_dashboard_right_now":{"name":"wp_network_dashboard_right_now","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 3.1.0\n *\/"}]},"wp_dashboard_quick_press":{"name":"wp_dashboard_quick_press","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$error_msg","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * The Quick Draft widget display and creation of drafts.\n *\n * @since 3.8.0\n *\n * @global int $post_ID\n *\n * @param string $error_msg Optional. Error message. Default false.\n *\/"}]},"wp_dashboard_recent_drafts":{"name":"wp_dashboard_recent_drafts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$drafts","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Show recent drafts of the user on the dashboard.\n *\n * @since 2.7.0\n *\n * @param array $drafts\n *\/"}]},"_wp_dashboard_recent_comments_row":{"name":"_wp_dashboard_recent_comments_row","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_date","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs a row for the Recent Comments widget.\n *\n * @access private\n * @since 2.7.0\n *\n * @global WP_Comment $comment\n *\n * @param WP_Comment $comment   The current comment.\n * @param bool       $show_date Optional. Whether to display the date.\n *\/"}]},"wp_dashboard_site_activity":{"name":"wp_dashboard_site_activity","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback function for Activity widget.\n *\n * @since 3.8.0\n *\/"}]},"wp_dashboard_recent_posts":{"name":"wp_dashboard_recent_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Generates Publishing Soon and Recently Published sections.\n *\n * @since 3.8.0\n *\n * @param array $args {\n *     An array of query and display arguments.\n *\n *     @type int    $max     Number of posts to display.\n *     @type string $status  Post status.\n *     @type string $order   Designates ascending ('ASC') or descending ('DESC') order.\n *     @type string $title   Section title.\n *     @type string $id      The container id.\n * }\n * @return bool False if no posts were found. True otherwise.\n *\/"}]},"wp_dashboard_recent_comments":{"name":"wp_dashboard_recent_comments","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$total_items","rank":0,"variadic":false,"reference":false,"default":"5","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Show Comments section.\n *\n * @since 3.8.0\n *\n * @param int $total_items Optional. Number of comments to query. Default 5.\n * @return bool False if no comments were found. True otherwise.\n *\/"}]},"wp_dashboard_rss_output":{"name":"wp_dashboard_rss_output","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$widget_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display generic dashboard RSS widget feed.\n *\n * @since 2.5.0\n *\n * @param string $widget_id\n *\/"}]},"wp_dashboard_cached_rss_widget":{"name":"wp_dashboard_cached_rss_widget","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$widget_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$check_urls","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks to see if all of the feed url in $check_urls are cached.\n *\n * If $check_urls is empty, look for the rss feed url found in the dashboard\n * widget options of $widget_id. If cached, call $callback, a function that\n * echoes out output for this widget. If not cache, echo a \"Loading...\" stub\n * which is later replaced by Ajax call (see top of \/wp-admin\/index.php)\n *\n * @since 2.5.0\n *\n * @param string $widget_id\n * @param callable $callback\n * @param array $check_urls RSS feeds\n * @return bool False on failure. True on success.\n *\/"}]},"wp_dashboard_trigger_widget_control":{"name":"wp_dashboard_trigger_widget_control","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$widget_control_id","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Calls widget control callback.\n *\n * @since 2.5.0\n *\n * @global array $wp_dashboard_control_callbacks\n *\n * @param int $widget_control_id Registered Widget ID.\n *\/"}]},"wp_dashboard_rss_control":{"name":"wp_dashboard_rss_control","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$widget_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$form_inputs","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * The RSS dashboard widget control.\n *\n * Sets up $args to be used as input to wp_widget_rss_form(). Handles POST data\n * from RSS-type widgets.\n *\n * @since 2.5.0\n *\n * @param string $widget_id\n * @param array $form_inputs\n *\/"}]},"wp_dashboard_primary":{"name":"wp_dashboard_primary","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * WordPress News dashboard widget.\n *\n * @since 2.7.0\n *\/"}]},"wp_dashboard_primary_output":{"name":"wp_dashboard_primary_output","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$widget_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feeds","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the WordPress news feeds.\n *\n * @since 3.8.0\n *\n * @param string $widget_id Widget ID.\n * @param array  $feeds     Array of RSS feeds.\n *\/"}]},"wp_dashboard_plugins_output":{"name":"wp_dashboard_plugins_output","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$rss","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display plugins text for the WordPress news widget.\n *\n * @since 2.5.0\n *\n * @param string $rss  The RSS feed URL.\n * @param array  $args Array of arguments for this RSS feed.\n *\/"}]},"wp_dashboard_quota":{"name":"wp_dashboard_quota","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display file upload quota on dashboard.\n *\n * Runs on the {@see 'activity_box_end'} hook in wp_dashboard_right_now().\n *\n * @since 3.0.0\n *\n * @return bool|null True if not multisite, user can't upload files, or the space check option is disabled.\n *\/"}]},"wp_dashboard_browser_nag":{"name":"wp_dashboard_browser_nag","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[]},"dashboard_browser_nag_class":{"name":"dashboard_browser_nag_class","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$classes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 3.2.0\n *\n * @param array $classes\n * @return array\n *\/"}]},"wp_check_browser_version":{"name":"wp_check_browser_version","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if the user needs a browser update\n *\n * @since 3.2.0\n *\n * @return array|bool False on failure, array of browser data on success.\n *\/"}]},"wp_dashboard_empty":{"name":"wp_dashboard_empty","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Empty function usable by plugins to output empty dashboard widget (to be populated later by JS).\n *\/"}]},"wp_welcome_panel":{"name":"wp_welcome_panel","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays a welcome panel to introduce users to WordPress.\n *\n * @since 3.3.0\n *\/"}]},"get_importers":{"name":"get_importers","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * WordPress Administration Importer API.\n *\n * @package WordPress\n * @subpackage Administration\n *\/"},{"phpdoc":"\/**\n * Retrieve list of importers.\n *\n * @since 2.0.0\n *\n * @global array $wp_importers\n * @return array\n *\/"}]},"_usort_by_first_member":{"name":"_usort_by_first_member","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sorts a multidimensional array by first member of each top level member\n *\n * Used by uasort() as a callback, should not be used directly.\n *\n * @since 2.9.0\n * @access private\n *\n * @param array $a\n * @param array $b\n * @return int\n *\/"}]},"register_importer":{"name":"register_importer","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$description","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register importer for WordPress.\n *\n * @since 2.0.0\n *\n * @global array $wp_importers\n *\n * @param string   $id          Importer tag. Used to uniquely identify importer.\n * @param string   $name        Importer name and title.\n * @param string   $description Importer description.\n * @param callable $callback    Callback to run.\n * @return WP_Error Returns WP_Error when $callback is WP_Error.\n *\/"}]},"wp_import_cleanup":{"name":"wp_import_cleanup","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Cleanup importer.\n *\n * Removes attachment based on ID.\n *\n * @since 2.0.0\n *\n * @param string $id Importer ID.\n *\/"}]},"wp_import_handle_upload":{"name":"wp_import_handle_upload","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handle importer uploading and add attachment.\n *\n * @since 2.0.0\n *\n * @return array Uploaded file's details on success, error message on failure\n *\/"}]},"wp_get_popular_importers":{"name":"wp_get_popular_importers","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns a list from WordPress.org of popular importer plugins.\n *\n * @since 3.5.0\n *\n * @return array Importers with metadata for each.\n *\/"}]},"_wp_translate_postdata":{"name":"_wp_translate_postdata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$update","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_data","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * WordPress Post Administration API.\n *\n * @package WordPress\n * @subpackage Administration\n *\/"},{"phpdoc":"\/**\n * Rename $_POST data from form names to DB post columns.\n *\n * Manipulates $_POST directly.\n *\n * @package WordPress\n * @since 2.6.0\n *\n * @param bool $update Are we updating a pre-existing post?\n * @param array $post_data Array of post data. Defaults to the contents of $_POST.\n * @return object|bool WP_Error on failure, true on success.\n *\/"}]},"_wp_get_allowed_postdata":{"name":"_wp_get_allowed_postdata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_data","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns only allowed post data fields\n *\n * @since 4.9.9\n *\n * @param array $post_data Array of post data. Defaults to the contents of $_POST.\n * @return object|bool WP_Error on failure, true on success.\n *\/"}]},"edit_post":{"name":"edit_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_data","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update an existing post with values provided in $_POST.\n *\n * @since 1.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $post_data Optional.\n * @return int Post ID.\n *\/"}]},"bulk_edit_posts":{"name":"bulk_edit_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_data","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Process the post data for the bulk editing of posts.\n *\n * Updates all bulk edited posts\/pages, adding (but not removing) tags and\n * categories. Skips pages when they would be their own parent or child.\n *\n * @since 2.7.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $post_data Optional, the array of post data to process if not provided will use $_POST superglobal.\n * @return array\n *\/"}]},"get_default_post_to_edit":{"name":"get_default_post_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"'post'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$create_in_db","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Default post information to use when populating the \"Write Post\" form.\n *\n * @since 2.0.0\n *\n * @param string $post_type    Optional. A post type string. Default 'post'.\n * @param bool   $create_in_db Optional. Whether to insert the post into database. Default false.\n * @return WP_Post Post object containing all the default post data as attributes\n *\/"}]},"post_exists":{"name":"post_exists","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$content","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$date","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine if a post exists based on title, content, and date\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $title Post title\n * @param string $content Optional post content\n * @param string $date Optional post date\n * @return int Post ID if post exists, 0 otherwise.\n *\/"}]},"wp_write_post":{"name":"wp_write_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates a new post from the \"Write Post\" form using $_POST information.\n *\n * @since 2.1.0\n *\n * @global WP_User $current_user\n *\n * @return int|WP_Error\n *\/"}]},"write_post":{"name":"write_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Calls wp_write_post() and handles the errors.\n *\n * @since 2.0.0\n *\n * @return int|null\n *\/"}]},"add_meta":{"name":"add_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_ID","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add post meta data defined in $_POST superglobal for post with given ID.\n *\n * @since 1.2.0\n *\n * @param int $post_ID\n * @return int|bool\n *\/"}]},"delete_meta":{"name":"delete_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$mid","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Delete post meta data by meta ID.\n *\n * @since 1.2.0\n *\n * @param int $mid\n * @return bool\n *\/"}]},"get_meta_keys":{"name":"get_meta_keys","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get a list of previously defined keys.\n *\n * @since 1.2.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @return mixed\n *\/"}]},"get_post_meta_by_id":{"name":"get_post_meta_by_id","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$mid","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get post meta data by meta ID.\n *\n * @since 2.1.0\n *\n * @param int $mid\n * @return object|bool\n *\/"}]},"has_meta":{"name":"has_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$postid","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get meta data for the given post ID.\n *\n * @since 1.2.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int $postid\n * @return mixed\n *\/"}]},"update_meta":{"name":"update_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$meta_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update post meta data by meta ID.\n *\n * @since 1.2.0\n *\n * @param int    $meta_id\n * @param string $meta_key Expect Slashed\n * @param string $meta_value Expect Slashed\n * @return bool\n *\/"}]},"_fix_attachment_links":{"name":"_fix_attachment_links","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Replace hrefs of attachment anchors with up-to-date permalinks.\n *\n * @since 2.3.0\n * @access private\n *\n * @param int|object $post Post ID or post object.\n * @return void|int|WP_Error Void if nothing fixed. 0 or WP_Error on update failure. The post ID on update success.\n *\/"}]},"get_available_post_statuses":{"name":"get_available_post_statuses","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"'post'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get all the possible statuses for a post_type\n *\n * @since 2.5.0\n *\n * @param string $type The post_type you want the statuses for\n * @return array As array of all the statuses for the supplied post type\n *\/"}]},"wp_edit_posts_query":{"name":"wp_edit_posts_query","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$q","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Run the wp query to fetch the posts for listing on the edit posts page\n *\n * @since 2.5.0\n *\n * @param array|bool $q Array of query variables to use to build the query or false to use $_GET superglobal.\n * @return array\n *\/"}]},"get_available_post_mime_types":{"name":"get_available_post_mime_types","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"'attachment'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get all available post MIME types for a given post type.\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $type\n * @return mixed\n *\/"}]},"wp_edit_attachments_query_vars":{"name":"wp_edit_attachments_query_vars","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$q","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the query variables for the current attachments request.\n *\n * @since 4.2.0\n *\n * @param array|false $q Optional. Array of query variables to use to build the query or false\n *                       to use $_GET superglobal. Default false.\n * @return array The parsed query vars.\n *\/"}]},"wp_edit_attachments_query":{"name":"wp_edit_attachments_query","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$q","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Executes a query for attachments. An array of WP_Query arguments\n * can be passed in, which will override the arguments set by this function.\n *\n * @since 2.5.0\n *\n * @param array|false $q Array of query variables to use to build the query or false to use $_GET superglobal.\n * @return array\n *\/"}]},"postbox_classes":{"name":"postbox_classes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$page","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the list of classes to be used by a meta box.\n *\n * @since 2.5.0\n *\n * @param string $id\n * @param string $page\n * @return string\n *\/"}]},"get_sample_permalink":{"name":"get_sample_permalink","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get a sample permalink based off of the post name.\n *\n * @since 2.5.0\n *\n * @param int    $id    Post ID or post object.\n * @param string $title Optional. Title to override the post's current title when generating the post name. Default null.\n * @param string $name  Optional. Name to override the post name. Default null.\n * @return array Array containing the sample permalink with placeholder for the post name, and the post name.\n *\/"}]},"get_sample_permalink_html":{"name":"get_sample_permalink_html","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$new_title","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$new_slug","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the HTML of the sample permalink slug editor.\n *\n * @since 2.5.0\n *\n * @param int    $id        Post ID or post object.\n * @param string $new_title Optional. New title. Default null.\n * @param string $new_slug  Optional. New slug. Default null.\n * @return string The HTML of the sample permalink slug editor.\n *\/"}]},"_wp_post_thumbnail_html":{"name":"_wp_post_thumbnail_html","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$thumbnail_id","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output HTML for the post thumbnail meta-box.\n *\n * @since 2.9.0\n *\n * @param int $thumbnail_id ID of the attachment used for thumbnail\n * @param mixed $post The post ID or object associated with the thumbnail, defaults to global $post.\n * @return string html\n *\/"}]},"wp_check_post_lock":{"name":"wp_check_post_lock","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check to see if the post is currently being edited by another user.\n *\n * @since 2.5.0\n *\n * @param int $post_id ID of the post to check for editing\n * @return integer False: not locked or locked by current user. Int: user ID of user with lock.\n *\/"}]},"wp_set_post_lock":{"name":"wp_set_post_lock","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Mark the post as currently being edited by the current user\n *\n * @since 2.5.0\n *\n * @param int $post_id ID of the post to being edited\n * @return bool|array Returns false if the post doesn't exist of there is no current user, or\n * \tan array of the lock time and the user ID.\n *\/"}]},"_admin_notice_post_locked":{"name":"_admin_notice_post_locked","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the HTML for the notice to say that someone else is editing or has taken over editing of this post.\n *\n * @since 2.8.5\n * @return none\n *\/"}]},"wp_create_post_autosave":{"name":"wp_create_post_autosave","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates autosave data for the specified post from $_POST data.\n *\n * @package WordPress\n * @subpackage Post_Revisions\n * @since 2.6.0\n *\n * @param mixed $post_data Associative array containing the post data or int post ID.\n * @return mixed The autosave revision ID. WP_Error or 0 on error.\n *\/"}]},"post_preview":{"name":"post_preview","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Save draft or manually autosave for showing preview.\n *\n * @package WordPress\n * @since 2.7.0\n *\n * @return str URL to redirect to show the preview\n *\/"}]},"wp_autosave":{"name":"wp_autosave","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Save a post submitted with XHR\n *\n * Intended for use with heartbeat and autosave.js\n *\n * @since 3.9.0\n *\n * @param array $post_data Associative array of the submitted post data.\n * @return mixed The value 0 or WP_Error on failure. The saved post ID on success.\n *               The ID can be the draft post_id or the autosave revision post_id.\n *\/"}]},"redirect_post":{"name":"redirect_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Redirect to previous page.\n *\n * @param int $post_id Optional. Post ID.\n *\/"}]},"PclZipUtilPathReduction":{"name":"PclZipUtilPathReduction","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$p_dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[]},"PclZipUtilPathInclusion":{"name":"PclZipUtilPathInclusion","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$p_dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_path","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[]},"PclZipUtilCopyBlock":{"name":"PclZipUtilCopyBlock","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$p_src","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_dest","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_size","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_mode","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[]},"PclZipUtilRename":{"name":"PclZipUtilRename","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$p_src","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_dest","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[]},"PclZipUtilOptionText":{"name":"PclZipUtilOptionText","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$p_option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[]},"PclZipUtilTranslateWinPath":{"name":"PclZipUtilTranslateWinPath","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$p_path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_remove_disk_letter","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[]},"get_file_description":{"name":"get_file_description","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the description for standard WordPress theme files and other various standard\n * WordPress files\n *\n * @since 1.5.0\n *\n * @global array $wp_file_descriptions\n * @param string $file Filesystem path or filename\n * @return string Description of file from $wp_file_descriptions or basename of $file if description doesn't exist.\n *                Appends 'Page Template' to basename of $file if the file is a page template\n *\/"}]},"get_home_path":{"name":"get_home_path","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the absolute filesystem path to the root of the WordPress installation\n *\n * @since 1.5.0\n *\n * @return string Full filesystem path to the root of the WordPress installation\n *\/"}]},"list_files":{"name":"list_files","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$folder","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$levels","rank":1,"variadic":false,"reference":false,"default":"100","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns a listing of all files in the specified folder and all subdirectories up to 100 levels deep.\n * The depth of the recursiveness can be controlled by the $levels param.\n *\n * @since 2.6.0\n *\n * @param string $folder Optional. Full path to folder. Default empty.\n * @param int    $levels Optional. Levels of folders to follow, Default 100 (PHP Loop limit).\n * @return bool|array False on failure, Else array of files\n *\/"}]},"wp_tempnam":{"name":"wp_tempnam","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dir","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns a filename of a Temporary unique file.\n * Please note that the calling function must unlink() this itself.\n *\n * The filename is based off the passed parameter or defaults to the current unix timestamp,\n * while the directory can either be passed as well, or by leaving it blank, default to a writable temporary directory.\n *\n * @since 2.6.0\n *\n * @param string $filename Optional. Filename to base the Unique file off. Default empty.\n * @param string $dir      Optional. Directory to store the file in. Default empty.\n * @return string a writable filename\n *\/"}]},"validate_file_to_edit":{"name":"validate_file_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allowed_files","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Make sure that the file that was requested to edit, is allowed to be edited\n *\n * Function will die if you are not allowed to edit the file\n *\n * @since 1.5.0\n *\n * @param string $file file the users is attempting to edit\n * @param array $allowed_files Array of allowed files to edit, $file must match an entry exactly\n * @return string|null\n *\/"}]},"_wp_handle_upload":{"name":"_wp_handle_upload","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$overrides","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$time","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$action","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handle PHP uploads in WordPress, sanitizing file names, checking extensions for mime type,\n * and moving the file to the appropriate directory within the uploads directory.\n *\n * @access private\n * @since 4.0.0\n *\n * @see wp_handle_upload_error\n *\n * @param array       $file      Reference to a single element of $_FILES. Call the function once for each uploaded file.\n * @param array|false $overrides An associative array of names => values to override default variables. Default false.\n * @param string      $time      Time formatted in 'yyyy\/mm'.\n * @param string      $action    Expected value for $_POST['action'].\n * @return array On success, returns an associative array of file attributes. On failure, returns\n *               $overrides['upload_error_handler'](&$file, $message ) or array( 'error'=>$message ).\n *\/"}]},"wp_handle_upload_error":{"name":"wp_handle_upload_error","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[]},"wp_handle_upload":{"name":"wp_handle_upload","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$overrides","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$time","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Wrapper for _wp_handle_upload().\n *\n * Passes the {@see 'wp_handle_upload'} action.\n *\n * @since 2.0.0\n *\n * @see _wp_handle_upload()\n *\n * @param array      $file      Reference to a single element of `$_FILES`. Call the function once for\n *                              each uploaded file.\n * @param array|bool $overrides Optional. An associative array of names=>values to override default\n *                              variables. Default false.\n * @param string     $time      Optional. Time formatted in 'yyyy\/mm'. Default null.\n * @return array On success, returns an associative array of file attributes. On failure, returns\n *               $overrides['upload_error_handler'](&$file, $message ) or array( 'error'=>$message ).\n *\/"}]},"wp_handle_sideload":{"name":"wp_handle_sideload","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$overrides","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$time","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Wrapper for _wp_handle_upload().\n *\n * Passes the {@see 'wp_handle_sideload'} action.\n *\n * @since 2.6.0\n *\n * @see _wp_handle_upload()\n *\n * @param array      $file      An array similar to that of a PHP `$_FILES` POST array\n * @param array|bool $overrides Optional. An associative array of names=>values to override default\n *                              variables. Default false.\n * @param string     $time      Optional. Time formatted in 'yyyy\/mm'. Default null.\n * @return array On success, returns an associative array of file attributes. On failure, returns\n *               $overrides['upload_error_handler'](&$file, $message ) or array( 'error'=>$message ).\n *\/"}]},"download_url":{"name":"download_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$timeout","rank":1,"variadic":false,"reference":false,"default":"300","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Downloads a URL to a local temporary file using the WordPress HTTP Class.\n * Please note, That the calling function must unlink() the file.\n *\n * @since 2.5.0\n *\n * @param string $url the URL of the file to download\n * @param int $timeout The timeout for the request to download the file default 300 seconds\n * @return mixed WP_Error on failure, string Filename on success.\n *\/"}]},"verify_file_md5":{"name":"verify_file_md5","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$expected_md5","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Calculates and compares the MD5 of a file to its expected value.\n *\n * @since 3.7.0\n *\n * @param string $filename The filename to check the MD5 of.\n * @param string $expected_md5 The expected MD5 of the file, either a base64 encoded raw md5, or a hex-encoded md5\n * @return bool|object WP_Error on failure, true on success, false when the MD5 format is unknown\/unexpected\n *\/"}]},"unzip_file":{"name":"unzip_file","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$to","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Unzips a specified ZIP file to a location on the Filesystem via the WordPress Filesystem Abstraction.\n * Assumes that WP_Filesystem() has already been called and set up. Does not extract a root-level __MACOSX directory, if present.\n *\n * Attempts to increase the PHP Memory limit to 256M before uncompressing,\n * However, The most memory required shouldn't be much larger than the Archive itself.\n *\n * @since 2.5.0\n *\n * @global WP_Filesystem_Base $wp_filesystem Subclass\n *\n * @param string $file Full path and filename of zip archive\n * @param string $to Full path on the filesystem to extract archive to\n * @return mixed WP_Error on failure, True on success\n *\/"}]},"_unzip_file_ziparchive":{"name":"_unzip_file_ziparchive","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$to","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$needed_dirs","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the ZipArchive class.\n * Assumes that WP_Filesystem() has already been called and set up.\n *\n * @since 3.0.0\n * @see unzip_file\n * @access private\n *\n * @global WP_Filesystem_Base $wp_filesystem Subclass\n *\n * @param string $file Full path and filename of zip archive\n * @param string $to Full path on the filesystem to extract archive to\n * @param array $needed_dirs A partial list of required folders needed to be created.\n * @return mixed WP_Error on failure, True on success\n *\/"}]},"_unzip_file_pclzip":{"name":"_unzip_file_pclzip","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$to","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$needed_dirs","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the PclZip library.\n * Assumes that WP_Filesystem() has already been called and set up.\n *\n * @since 3.0.0\n * @see unzip_file\n * @access private\n *\n * @global WP_Filesystem_Base $wp_filesystem Subclass\n *\n * @param string $file Full path and filename of zip archive\n * @param string $to Full path on the filesystem to extract archive to\n * @param array $needed_dirs A partial list of required folders needed to be created.\n * @return mixed WP_Error on failure, True on success\n *\/"}]},"copy_dir":{"name":"copy_dir","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$from","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$to","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$skip_list","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Copies a directory from one location to another via the WordPress Filesystem Abstraction.\n * Assumes that WP_Filesystem() has already been called and setup.\n *\n * @since 2.5.0\n *\n * @global WP_Filesystem_Base $wp_filesystem Subclass\n *\n * @param string $from source directory\n * @param string $to destination directory\n * @param array $skip_list a list of files\/folders to skip copying\n * @return mixed WP_Error on failure, True on success.\n *\/"}]},"WP_Filesystem":{"name":"WP_Filesystem","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allow_relaxed_file_ownership","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Initialises and connects the WordPress Filesystem Abstraction classes.\n * This function will include the chosen transport and attempt connecting.\n *\n * Plugins may add extra transports, And force WordPress to use them by returning\n * the filename via the {@see 'filesystem_method_file'} filter.\n *\n * @since 2.5.0\n *\n * @global WP_Filesystem_Base $wp_filesystem Subclass\n *\n * @param array|false  $args                         Optional. Connection args, These are passed directly to\n *                                                   the `WP_Filesystem_*()` classes. Default false.\n * @param string|false $context                      Optional. Context for get_filesystem_method(). Default false.\n * @param bool         $allow_relaxed_file_ownership Optional. Whether to allow Group\/World writable. Default false.\n * @return null|bool false on failure, true on success.\n *\/"}]},"get_filesystem_method":{"name":"get_filesystem_method","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allow_relaxed_file_ownership","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines which method to use for reading, writing, modifying, or deleting\n * files on the filesystem.\n *\n * The priority of the transports are: Direct, SSH2, FTP PHP Extension, FTP Sockets\n * (Via Sockets class, or `fsockopen()`). Valid values for these are: 'direct', 'ssh2',\n * 'ftpext' or 'ftpsockets'.\n *\n * The return value can be overridden by defining the `FS_METHOD` constant in `wp-config.php`,\n * or filtering via {@see 'filesystem_method'}.\n *\n * @link https:\/\/codex.wordpress.org\/Editing_wp-config.php#WordPress_Upgrade_Constants\n *\n * Plugins may define a custom transport handler, See WP_Filesystem().\n *\n * @since 2.5.0\n *\n * @global callable $_wp_filesystem_direct_method\n *\n * @param array  $args                         Optional. Connection details. Default empty array.\n * @param string $context                      Optional. Full path to the directory that is tested\n *                                             for being writable. Default empty.\n * @param bool   $allow_relaxed_file_ownership Optional. Whether to allow Group\/World writable.\n *                                             Default false.\n * @return string The transport to use, see description for valid return values.\n *\/"}]},"request_filesystem_credentials":{"name":"request_filesystem_credentials","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$form_post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$error","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$extra_fields","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allow_relaxed_file_ownership","rank":5,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays a form to the user to request for their FTP\/SSH details in order\n * to connect to the filesystem.\n *\n * All chosen\/entered details are saved, excluding the password.\n *\n * Hostnames may be in the form of hostname:portnumber (eg: wordpress.org:2467)\n * to specify an alternate FTP\/SSH port.\n *\n * Plugins may override this form by returning true|false via the {@see 'request_filesystem_credentials'} filter.\n *\n * @since 2.5.0\n * @since 4.6.0 The `$context` parameter default changed from `false` to an empty string.\n *\n * @global string $pagenow\n *\n * @param string $form_post                    The URL to post the form to.\n * @param string $type                         Optional. Chosen type of filesystem. Default empty.\n * @param bool   $error                        Optional. Whether the current request has failed to connect.\n *                                             Default false.\n * @param string $context                      Optional. Full path to the directory that is tested for being\n *                                             writable. Default empty.\n * @param array  $extra_fields                 Optional. Extra `POST` fields to be checked for inclusion in\n *                                             the post. Default null.\n * @param bool   $allow_relaxed_file_ownership Optional. Whether to allow Group\/World writable. Default false.\n *\n * @return bool False on failure, true on success.\n *\/"}]},"wp_print_request_filesystem_credentials_modal":{"name":"wp_print_request_filesystem_credentials_modal","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print the filesystem credentials modal when needed.\n *\n * @since 4.2.0\n *\/"}]},"export_wp":{"name":"export_wp","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Generates the WXR export file for download.\n *\n * Default behavior is to export all content, however, note that post content will only\n * be exported for post types with the `can_export` argument enabled. Any posts with the\n * 'auto-draft' status will be skipped.\n *\n * @since 2.1.0\n *\n * @global wpdb    $wpdb WordPress database abstraction object.\n * @global WP_Post $post Global `$post`.\n *\n * @param array $args {\n *     Optional. Arguments for generating the WXR export file for download. Default empty array.\n *\n *     @type string $content        Type of content to export. If set, only the post content of this post type\n *                                  will be exported. Accepts 'all', 'post', 'page', 'attachment', or a defined\n *                                  custom post. If an invalid custom post type is supplied, every post type for\n *                                  which `can_export` is enabled will be exported instead. If a valid custom post\n *                                  type is supplied but `can_export` is disabled, then 'posts' will be exported\n *                                  instead. When 'all' is supplied, only post types with `can_export` enabled will\n *                                  be exported. Default 'all'.\n *     @type string $author         Author to export content for. Only used when `$content` is 'post', 'page', or\n *                                  'attachment'. Accepts false (all) or a specific author ID. Default false (all).\n *     @type string $category       Category (slug) to export content for. Used only when `$content` is 'post'. If\n *                                  set, only post content assigned to `$category will be exported. Accepts false\n *                                  or a specific category slug. Default is false (all categories).\n *     @type string $start_date     Start date to export content from. Expected date format is 'Y-m-d'. Used only\n *                                  when `$content` is 'post', 'page' or 'attachment'. Default false (since the\n *                                  beginning of time).\n *     @type string $end_date       End date to export content to. Expected date format is 'Y-m-d'. Used only when\n *                                  `$content` is 'post', 'page' or 'attachment'. Default false (latest publish date).\n *     @type string $status         Post status to export posts for. Used only when `$content` is 'post' or 'page'.\n *                                  Accepts false (all statuses except 'auto-draft'), or a specific status, i.e.\n *                                  'publish', 'pending', 'draft', 'auto-draft', 'future', 'private', 'inherit', or\n *                                  'trash'. Default false (all statuses except 'auto-draft').\n * }\n *\/"}]},"wxr_cdata":{"name":"wxr_cdata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n\t * Wrap given string in XML CDATA tag.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $str String to wrap in XML CDATA tag.\n\t * @return string\n\t *\/"}]},"wxr_site_url":{"name":"wxr_site_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n\t * Return the URL of the site\n\t *\n\t * @since 2.5.0\n\t *\n\t * @return string Site URL.\n\t *\/"}]},"wxr_cat_name":{"name":"wxr_cat_name","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$category","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n\t * Output a cat_name XML tag from a given category object\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param object $category Category Object\n\t *\/"}]},"wxr_category_description":{"name":"wxr_category_description","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$category","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n\t * Output a category_description XML tag from a given category object\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param object $category Category Object\n\t *\/"}]},"wxr_tag_name":{"name":"wxr_tag_name","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n\t * Output a tag_name XML tag from a given tag object\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param object $tag Tag Object\n\t *\/"}]},"wxr_tag_description":{"name":"wxr_tag_description","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n\t * Output a tag_description XML tag from a given tag object\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param object $tag Tag Object\n\t *\/"}]},"wxr_term_name":{"name":"wxr_term_name","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n\t * Output a term_name XML tag from a given term object\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param object $term Term Object\n\t *\/"}]},"wxr_term_description":{"name":"wxr_term_description","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n\t * Output a term_description XML tag from a given term object\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param object $term Term Object\n\t *\/"}]},"wxr_term_meta":{"name":"wxr_term_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n\t * Output term meta XML tags for a given term object.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param WP_Term $term Term object.\n\t *\/"}]},"wxr_authors_list":{"name":"wxr_authors_list","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_ids","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"array"}],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n\t * Output list of authors with posts\n\t *\n\t * @since 3.1.0\n\t *\n\t * @global wpdb $wpdb WordPress database abstraction object.\n\t *\n\t * @param array $post_ids Array of post IDs to filter the query by. Optional.\n\t *\/"}]},"wxr_nav_menu_terms":{"name":"wxr_nav_menu_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n\t * Output all navigation menu terms\n\t *\n\t * @since 3.1.0\n\t *\/"}]},"wxr_post_taxonomy":{"name":"wxr_post_taxonomy","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n\t * Output list of taxonomy terms, in XML tag format, associated with a post\n\t *\n\t * @since 2.3.0\n\t *\/"}]},"wxr_filter_postmeta":{"name":"wxr_filter_postmeta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$return_me","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n\t *\n\t * @param bool   $return_me\n\t * @param string $meta_key\n\t * @return bool\n\t *\/"}]},"get_plugin_data":{"name":"get_plugin_data","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugin_file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$markup","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$translate","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Parses the plugin contents to retrieve plugin's metadata.\n *\n * The metadata of the plugin's data searches for the following in the plugin's\n * header. All plugin data must be on its own line. For plugin description, it\n * must not have any newlines or only parts of the description will be displayed\n * and the same goes for the plugin data. The below is formatted for printing.\n *\n *     \/*\n *     Plugin Name: Name of Plugin\n *     Plugin URI: Link to plugin information\n *     Description: Plugin Description\n *     Author: Plugin author's name\n *     Author URI: Link to the author's web site\n *     Version: Must be set in the plugin for WordPress 2.3+\n *     Text Domain: Optional. Unique identifier, should be same as the one used in\n *    \t\tload_plugin_textdomain()\n *     Domain Path: Optional. Only useful if the translations are located in a\n *    \t\tfolder above the plugin's base path. For example, if .mo files are\n *    \t\tlocated in the locale folder then Domain Path will be \"\/locale\/\" and\n *    \t\tmust have the first slash. Defaults to the base folder the plugin is\n *    \t\tlocated in.\n *     Network: Optional. Specify \"Network: true\" to require that a plugin is activated\n *    \t\tacross all sites in an installation. This will prevent a plugin from being\n *    \t\tactivated on a single site when Multisite is enabled.\n *      * \/ # Remove the space to close comment\n *\n * Some users have issues with opening large files and manipulating the contents\n * for want is usually the first 1kiB or 2kiB. This function stops pulling in\n * the plugin contents when it has all of the required plugin data.\n *\n * The first 8kiB of the file will be pulled in and if the plugin data is not\n * within that first 8kiB, then the plugin author should correct their plugin\n * and move the plugin data headers to the top.\n *\n * The plugin file is assumed to have permissions to allow for scripts to read\n * the file. This is not checked however and the file is only opened for\n * reading.\n *\n * @since 1.5.0\n *\n * @param string $plugin_file Path to the plugin file\n * @param bool   $markup      Optional. If the returned data should have HTML markup applied.\n *                            Default true.\n * @param bool   $translate   Optional. If the returned data should be translated. Default true.\n * @return array {\n *     Plugin data. Values will be empty if not supplied by the plugin.\n *\n *     @type string $Name        Name of the plugin. Should be unique.\n *     @type string $Title       Title of the plugin and link to the plugin's site (if set).\n *     @type string $Description Plugin description.\n *     @type string $Author      Author's name.\n *     @type string $AuthorURI   Author's website address (if set).\n *     @type string $Version     Plugin version.\n *     @type string $TextDomain  Plugin textdomain.\n *     @type string $DomainPath  Plugins relative directory path to .mo files.\n *     @type bool   $Network     Whether the plugin can only be activated network-wide.\n * }\n *\/"},{"phpdoc":"\/**\n * WordPress Plugin Administration API\n *\n * @package WordPress\n * @subpackage Administration\n *\/"}]},"_get_plugin_data_markup_translate":{"name":"_get_plugin_data_markup_translate","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugin_file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$plugin_data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$markup","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$translate","rank":3,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes plugin data, optionally adds markup, optionally translates.\n *\n * @since 2.7.0\n * @access private\n * @see get_plugin_data()\n *\/"}]},"get_plugin_files":{"name":"get_plugin_files","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugin","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get a list of a plugin's files.\n *\n * @since 2.8.0\n *\n * @param string $plugin Plugin ID\n * @return array List of files relative to the plugin root.\n *\/"}]},"get_plugins":{"name":"get_plugins","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugin_folder","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check the plugins directory and retrieve all plugin files with plugin data.\n *\n * WordPress only supports plugin files in the base plugins directory\n * (wp-content\/plugins) and in one directory above the plugins directory\n * (wp-content\/plugins\/my-plugin). The file it looks for has the plugin data\n * and must be found in those two locations. It is recommended to keep your\n * plugin files in their own directories.\n *\n * The file with the plugin data is the file that will be included and therefore\n * needs to have the main execution for the plugin. This does not mean\n * everything must be contained in the file and it is recommended that the file\n * be split for maintainability. Keep everything in one file for extreme\n * optimization purposes.\n *\n * @since 1.5.0\n *\n * @param string $plugin_folder Optional. Relative path to single plugin folder.\n * @return array Key is the plugin file path and the value is an array of the plugin data.\n *\/"}]},"get_mu_plugins":{"name":"get_mu_plugins","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check the mu-plugins directory and retrieve all mu-plugin files with any plugin data.\n *\n * WordPress only includes mu-plugin files in the base mu-plugins directory (wp-content\/mu-plugins).\n *\n * @since 3.0.0\n * @return array Key is the mu-plugin file path and the value is an array of the mu-plugin data.\n *\/"}]},"_sort_uname_callback":{"name":"_sort_uname_callback","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback to sort array by a 'Name' key.\n *\n * @since 3.1.0\n * @access private\n *\/"}]},"get_dropins":{"name":"get_dropins","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check the wp-content directory and retrieve all drop-ins with any plugin data.\n *\n * @since 3.0.0\n * @return array Key is the file path and the value is an array of the plugin data.\n *\/"}]},"_get_dropins":{"name":"_get_dropins","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns drop-ins that WordPress uses.\n *\n * Includes Multisite drop-ins only when is_multisite()\n *\n * @since 3.0.0\n * @return array Key is file name. The value is an array, with the first value the\n *\tpurpose of the drop-in and the second value the name of the constant that must be\n *\ttrue for the drop-in to be used, or true if no constant is required.\n *\/"}]},"is_plugin_active":{"name":"is_plugin_active","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugin","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether a plugin is active.\n *\n * Only plugins installed in the plugins\/ folder can be active.\n *\n * Plugins in the mu-plugins\/ folder can't be \"activated,\" so this function will\n * return false for those plugins.\n *\n * @since 2.5.0\n *\n * @param string $plugin Base plugin path from plugins directory.\n * @return bool True, if in the active plugins list. False, not in the list.\n *\/"}]},"is_plugin_inactive":{"name":"is_plugin_inactive","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugin","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether the plugin is inactive.\n *\n * Reverse of is_plugin_active(). Used as a callback.\n *\n * @since 3.1.0\n * @see is_plugin_active()\n *\n * @param string $plugin Base plugin path from plugins directory.\n * @return bool True if inactive. False if active.\n *\/"}]},"is_plugin_active_for_network":{"name":"is_plugin_active_for_network","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugin","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether the plugin is active for the entire network.\n *\n * Only plugins installed in the plugins\/ folder can be active.\n *\n * Plugins in the mu-plugins\/ folder can't be \"activated,\" so this function will\n * return false for those plugins.\n *\n * @since 3.0.0\n *\n * @param string $plugin Base plugin path from plugins directory.\n * @return bool True, if active for the network, otherwise false.\n *\/"}]},"is_network_only_plugin":{"name":"is_network_only_plugin","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugin","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks for \"Network: true\" in the plugin header to see if this should\n * be activated only as a network wide plugin. The plugin would also work\n * when Multisite is not enabled.\n *\n * Checks for \"Site Wide Only: true\" for backward compatibility.\n *\n * @since 3.0.0\n *\n * @param string $plugin Plugin to check\n * @return bool True if plugin is network only, false otherwise.\n *\/"}]},"activate_plugin":{"name":"activate_plugin","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugin","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$redirect","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$network_wide","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$silent","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Attempts activation of plugin in a \"sandbox\" and redirects on success.\n *\n * A plugin that is already activated will not attempt to be activated again.\n *\n * The way it works is by setting the redirection to the error before trying to\n * include the plugin file. If the plugin fails, then the redirection will not\n * be overwritten with the success message. Also, the options will not be\n * updated and the activation hook will not be called on plugin error.\n *\n * It should be noted that in no way the below code will actually prevent errors\n * within the file. The code should not be used elsewhere to replicate the\n * \"sandbox\", which uses redirection to work.\n * {@source 13 1}\n *\n * If any errors are found or text is outputted, then it will be captured to\n * ensure that the success redirection will update the error redirection.\n *\n * @since 2.5.0\n *\n * @param string $plugin       Plugin path to main plugin file with plugin data.\n * @param string $redirect     Optional. URL to redirect to.\n * @param bool   $network_wide Optional. Whether to enable the plugin for all sites in the network\n *                             or just the current site. Multisite only. Default false.\n * @param bool   $silent       Optional. Whether to prevent calling activation hooks. Default false.\n * @return WP_Error|null WP_Error on invalid file or null on success.\n *\/"}]},"deactivate_plugins":{"name":"deactivate_plugins","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugins","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$silent","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$network_wide","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deactivate a single plugin or multiple plugins.\n *\n * The deactivation hook is disabled by the plugin upgrader by using the $silent\n * parameter.\n *\n * @since 2.5.0\n *\n * @param string|array $plugins Single plugin or list of plugins to deactivate.\n * @param bool $silent Prevent calling deactivation hooks. Default is false.\n * @param mixed $network_wide Whether to deactivate the plugin for all sites in the network.\n * \tA value of null (the default) will deactivate plugins for both the site and the network.\n *\/"}]},"activate_plugins":{"name":"activate_plugins","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugins","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$redirect","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$network_wide","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$silent","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Activate multiple plugins.\n *\n * When WP_Error is returned, it does not mean that one of the plugins had\n * errors. It means that one or more of the plugins file path was invalid.\n *\n * The execution will be halted as soon as one of the plugins has an error.\n *\n * @since 2.6.0\n *\n * @param string|array $plugins Single plugin or list of plugins to activate.\n * @param string $redirect Redirect to page after successful activation.\n * @param bool $network_wide Whether to enable the plugin for all sites in the network.\n * @param bool $silent Prevent calling activation hooks. Default is false.\n * @return bool|WP_Error True when finished or WP_Error if there were errors during a plugin activation.\n *\/"}]},"delete_plugins":{"name":"delete_plugins","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugins","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove directory and files of a plugin for a list of plugins.\n *\n * @since 2.6.0\n *\n * @global WP_Filesystem_Base $wp_filesystem\n *\n * @param array  $plugins    List of plugins to delete.\n * @param string $deprecated Deprecated.\n * @return bool|null|WP_Error True on success, false is $plugins is empty, WP_Error on failure.\n *                            Null if filesystem credentials are required to proceed.\n *\/"}]},"validate_active_plugins":{"name":"validate_active_plugins","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Validate active plugins\n *\n * Validate all active plugins, deactivates invalid and\n * returns an array of deactivated ones.\n *\n * @since 2.5.0\n * @return array invalid plugins, plugin as key, error as value\n *\/"}]},"validate_plugin":{"name":"validate_plugin","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugin","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Validate the plugin path.\n *\n * Checks that the file exists and is a valid file. See validate_file().\n *\n * @since 2.5.0\n *\n * @param string $plugin Plugin Path.\n * @return WP_Error|int 0 on success, WP_Error on failure.\n *\/"}]},"is_uninstallable_plugin":{"name":"is_uninstallable_plugin","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugin","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether the plugin can be uninstalled.\n *\n * @since 2.7.0\n *\n * @param string $plugin Plugin path to check.\n * @return bool Whether plugin can be uninstalled.\n *\/"}]},"uninstall_plugin":{"name":"uninstall_plugin","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugin","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Uninstall a single plugin.\n *\n * Calls the uninstall hook, if it is available.\n *\n * @since 2.7.0\n *\n * @param string $plugin Relative plugin path from Plugin Directory.\n * @return true True if a plugin's uninstall.php file has been found and included.\n *\/"}]},"add_menu_page":{"name":"add_menu_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page_title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capability","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_slug","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$icon_url","rank":5,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$position","rank":6,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a top-level menu page.\n *\n * This function takes a capability which will be used to determine whether\n * or not a page is included in the menu.\n *\n * The function which is hooked in to handle the output of the page must check\n * that the user has the required capability as well.\n *\n * @global array $menu\n * @global array $admin_page_hooks\n * @global array $_registered_pages\n * @global array $_parent_pages\n *\n * @param string   $page_title The text to be displayed in the title tags of the page when the menu is selected.\n * @param string   $menu_title The text to be used for the menu.\n * @param string   $capability The capability required for this menu to be displayed to the user.\n * @param string   $menu_slug  The slug name to refer to this menu by (should be unique for this menu).\n * @param callable $function   The function to be called to output the content for this page.\n * @param string   $icon_url   The URL to the icon to be used for this menu.\n *                             * Pass a base64-encoded SVG using a data URI, which will be colored to match\n *                               the color scheme. This should begin with 'data:image\/svg+xml;base64,'.\n *                             * Pass the name of a Dashicons helper class to use a font icon,\n *                               e.g. 'dashicons-chart-pie'.\n *                             * Pass 'none' to leave div.wp-menu-image empty so an icon can be added via CSS.\n * @param int      $position   The position in the menu order this one should appear.\n * @return string The resulting page's hook_suffix.\n *\/"}]},"add_submenu_page":{"name":"add_submenu_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$parent_slug","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$page_title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_title","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capability","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_slug","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":5,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a submenu page.\n *\n * This function takes a capability which will be used to determine whether\n * or not a page is included in the menu.\n *\n * The function which is hooked in to handle the output of the page must check\n * that the user has the required capability as well.\n *\n * @global array $submenu\n * @global array $menu\n * @global array $_wp_real_parent_file\n * @global bool  $_wp_submenu_nopriv\n * @global array $_registered_pages\n * @global array $_parent_pages\n *\n * @param string   $parent_slug The slug name for the parent menu (or the file name of a standard WordPress admin page).\n * @param string   $page_title  The text to be displayed in the title tags of the page when the menu is selected.\n * @param string   $menu_title  The text to be used for the menu.\n * @param string   $capability  The capability required for this menu to be displayed to the user.\n * @param string   $menu_slug   The slug name to refer to this menu by (should be unique for this menu).\n * @param callable $function    The function to be called to output the content for this page.\n * @return false|string The resulting page's hook_suffix, or false if the user does not have the capability required.\n *\/"}]},"add_management_page":{"name":"add_management_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page_title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capability","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_slug","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add submenu page to the Tools main menu.\n *\n * This function takes a capability which will be used to determine whether\n * or not a page is included in the menu.\n *\n * The function which is hooked in to handle the output of the page must check\n * that the user has the required capability as well.\n *\n * @param string   $page_title The text to be displayed in the title tags of the page when the menu is selected.\n * @param string   $menu_title The text to be used for the menu.\n * @param string   $capability The capability required for this menu to be displayed to the user.\n * @param string   $menu_slug  The slug name to refer to this menu by (should be unique for this menu).\n * @param callable $function   The function to be called to output the content for this page.\n * @return false|string The resulting page's hook_suffix, or false if the user does not have the capability required.\n *\/"}]},"add_options_page":{"name":"add_options_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page_title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capability","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_slug","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add submenu page to the Settings main menu.\n *\n * This function takes a capability which will be used to determine whether\n * or not a page is included in the menu.\n *\n * The function which is hooked in to handle the output of the page must check\n * that the user has the required capability as well.\n *\n * @param string   $page_title The text to be displayed in the title tags of the page when the menu is selected.\n * @param string   $menu_title The text to be used for the menu.\n * @param string   $capability The capability required for this menu to be displayed to the user.\n * @param string   $menu_slug  The slug name to refer to this menu by (should be unique for this menu).\n * @param callable $function   The function to be called to output the content for this page.\n * @return false|string The resulting page's hook_suffix, or false if the user does not have the capability required.\n *\/"}]},"add_theme_page":{"name":"add_theme_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page_title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capability","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_slug","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add submenu page to the Appearance main menu.\n *\n * This function takes a capability which will be used to determine whether\n * or not a page is included in the menu.\n *\n * The function which is hooked in to handle the output of the page must check\n * that the user has the required capability as well.\n *\n * @param string   $page_title The text to be displayed in the title tags of the page when the menu is selected.\n * @param string   $menu_title The text to be used for the menu.\n * @param string   $capability The capability required for this menu to be displayed to the user.\n * @param string   $menu_slug  The slug name to refer to this menu by (should be unique for this menu).\n * @param callable $function   The function to be called to output the content for this page.\n * @return false|string The resulting page's hook_suffix, or false if the user does not have the capability required.\n *\/"}]},"add_plugins_page":{"name":"add_plugins_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page_title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capability","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_slug","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add submenu page to the Plugins main menu.\n *\n * This function takes a capability which will be used to determine whether\n * or not a page is included in the menu.\n *\n * The function which is hooked in to handle the output of the page must check\n * that the user has the required capability as well.\n *\n * @param string   $page_title The text to be displayed in the title tags of the page when the menu is selected.\n * @param string   $menu_title The text to be used for the menu.\n * @param string   $capability The capability required for this menu to be displayed to the user.\n * @param string   $menu_slug  The slug name to refer to this menu by (should be unique for this menu).\n * @param callable $function   The function to be called to output the content for this page.\n * @return false|string The resulting page's hook_suffix, or false if the user does not have the capability required.\n *\/"}]},"add_users_page":{"name":"add_users_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page_title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capability","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_slug","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add submenu page to the Users\/Profile main menu.\n *\n * This function takes a capability which will be used to determine whether\n * or not a page is included in the menu.\n *\n * The function which is hooked in to handle the output of the page must check\n * that the user has the required capability as well.\n *\n * @param string   $page_title The text to be displayed in the title tags of the page when the menu is selected.\n * @param string   $menu_title The text to be used for the menu.\n * @param string   $capability The capability required for this menu to be displayed to the user.\n * @param string   $menu_slug  The slug name to refer to this menu by (should be unique for this menu).\n * @param callable $function   The function to be called to output the content for this page.\n * @return false|string The resulting page's hook_suffix, or false if the user does not have the capability required.\n *\/"}]},"add_dashboard_page":{"name":"add_dashboard_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page_title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capability","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_slug","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add submenu page to the Dashboard main menu.\n *\n * This function takes a capability which will be used to determine whether\n * or not a page is included in the menu.\n *\n * The function which is hooked in to handle the output of the page must check\n * that the user has the required capability as well.\n *\n * @param string   $page_title The text to be displayed in the title tags of the page when the menu is selected.\n * @param string   $menu_title The text to be used for the menu.\n * @param string   $capability The capability required for this menu to be displayed to the user.\n * @param string   $menu_slug  The slug name to refer to this menu by (should be unique for this menu).\n * @param callable $function   The function to be called to output the content for this page.\n * @return false|string The resulting page's hook_suffix, or false if the user does not have the capability required.\n *\/"}]},"add_posts_page":{"name":"add_posts_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page_title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capability","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_slug","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add submenu page to the Posts main menu.\n *\n * This function takes a capability which will be used to determine whether\n * or not a page is included in the menu.\n *\n * The function which is hooked in to handle the output of the page must check\n * that the user has the required capability as well.\n *\n * @param string   $page_title The text to be displayed in the title tags of the page when the menu is selected.\n * @param string   $menu_title The text to be used for the menu.\n * @param string   $capability The capability required for this menu to be displayed to the user.\n * @param string   $menu_slug  The slug name to refer to this menu by (should be unique for this menu).\n * @param callable $function   The function to be called to output the content for this page.\n * @return false|string The resulting page's hook_suffix, or false if the user does not have the capability required.\n *\/"}]},"add_media_page":{"name":"add_media_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page_title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capability","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_slug","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add submenu page to the Media main menu.\n *\n * This function takes a capability which will be used to determine whether\n * or not a page is included in the menu.\n *\n * The function which is hooked in to handle the output of the page must check\n * that the user has the required capability as well.\n *\n * @param string   $page_title The text to be displayed in the title tags of the page when the menu is selected.\n * @param string   $menu_title The text to be used for the menu.\n * @param string   $capability The capability required for this menu to be displayed to the user.\n * @param string   $menu_slug  The slug name to refer to this menu by (should be unique for this menu).\n * @param callable $function   The function to be called to output the content for this page.\n * @return false|string The resulting page's hook_suffix, or false if the user does not have the capability required.\n *\/"}]},"add_links_page":{"name":"add_links_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page_title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capability","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_slug","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add submenu page to the Links main menu.\n *\n * This function takes a capability which will be used to determine whether\n * or not a page is included in the menu.\n *\n * The function which is hooked in to handle the output of the page must check\n * that the user has the required capability as well.\n *\n * @param string   $page_title The text to be displayed in the title tags of the page when the menu is selected.\n * @param string   $menu_title The text to be used for the menu.\n * @param string   $capability The capability required for this menu to be displayed to the user.\n * @param string   $menu_slug  The slug name to refer to this menu by (should be unique for this menu).\n * @param callable $function   The function to be called to output the content for this page.\n * @return false|string The resulting page's hook_suffix, or false if the user does not have the capability required.\n *\/"}]},"add_pages_page":{"name":"add_pages_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page_title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capability","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_slug","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add submenu page to the Pages main menu.\n *\n * This function takes a capability which will be used to determine whether\n * or not a page is included in the menu.\n *\n * The function which is hooked in to handle the output of the page must check\n * that the user has the required capability as well.\n *\n * @param string   $page_title The text to be displayed in the title tags of the page when the menu is selected.\n * @param string   $menu_title The text to be used for the menu.\n * @param string   $capability The capability required for this menu to be displayed to the user.\n * @param string   $menu_slug  The slug name to refer to this menu by (should be unique for this menu).\n * @param callable $function   The function to be called to output the content for this page.\n * @return false|string The resulting page's hook_suffix, or false if the user does not have the capability required.\n *\/"}]},"add_comments_page":{"name":"add_comments_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page_title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capability","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_slug","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add submenu page to the Comments main menu.\n *\n * This function takes a capability which will be used to determine whether\n * or not a page is included in the menu.\n *\n * The function which is hooked in to handle the output of the page must check\n * that the user has the required capability as well.\n *\n * @param string   $page_title The text to be displayed in the title tags of the page when the menu is selected.\n * @param string   $menu_title The text to be used for the menu.\n * @param string   $capability The capability required for this menu to be displayed to the user.\n * @param string   $menu_slug  The slug name to refer to this menu by (should be unique for this menu).\n * @param callable $function   The function to be called to output the content for this page.\n * @return false|string The resulting page's hook_suffix, or false if the user does not have the capability required.\n *\/"}]},"remove_menu_page":{"name":"remove_menu_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$menu_slug","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove a top-level admin menu.\n *\n * @since 3.1.0\n *\n * @global array $menu\n *\n * @param string $menu_slug The slug of the menu.\n * @return array|bool The removed menu on success, false if not found.\n *\/"}]},"remove_submenu_page":{"name":"remove_submenu_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$menu_slug","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$submenu_slug","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove an admin submenu.\n *\n * @since 3.1.0\n *\n * @global array $submenu\n *\n * @param string $menu_slug    The slug for the parent menu.\n * @param string $submenu_slug The slug of the submenu.\n * @return array|bool The removed submenu on success, false if not found.\n *\/"}]},"menu_page_url":{"name":"menu_page_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$menu_slug","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the url to access a particular menu page based on the slug it was registered with.\n *\n * If the slug hasn't been registered properly no url will be returned\n *\n * @since 3.0.0\n *\n * @global array $_parent_pages\n *\n * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu)\n * @param bool $echo Whether or not to echo the url - default is true\n * @return string the url\n *\/"}]},"get_admin_page_parent":{"name":"get_admin_page_parent","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$parent","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @global string $parent_file\n * @global array $menu\n * @global array $submenu\n * @global string $pagenow\n * @global string $typenow\n * @global string $plugin_page\n * @global array $_wp_real_parent_file\n * @global array $_wp_menu_nopriv\n * @global array $_wp_submenu_nopriv\n *\/"}]},"get_admin_page_title":{"name":"get_admin_page_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @global string $title\n * @global array $menu\n * @global array $submenu\n * @global string $pagenow\n * @global string $plugin_page\n * @global string $typenow\n *\/"}]},"get_plugin_page_hook":{"name":"get_plugin_page_hook","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugin_page","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent_page","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 2.3.0\n *\n * @param string $plugin_page\n * @param string $parent_page\n * @return string|null\n *\/"}]},"get_plugin_page_hookname":{"name":"get_plugin_page_hookname","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugin_page","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent_page","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @global array $admin_page_hooks\n * @param string $plugin_page\n * @param string $parent_page\n *\/"}]},"user_can_access_admin_page":{"name":"user_can_access_admin_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @global string $pagenow\n * @global array $menu\n * @global array $submenu\n * @global array $_wp_menu_nopriv\n * @global array $_wp_submenu_nopriv\n * @global string $plugin_page\n * @global array $_registered_pages\n *\/"}]},"option_update_filter":{"name":"option_update_filter","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$options","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Refreshes the value of the options whitelist available via the 'whitelist_options' hook.\n *\n * See the {@see 'whitelist_options'} filter.\n *\n * @since 2.7.0\n *\n * @global array $new_whitelist_options\n *\n * @param array $options\n * @return array\n *\/"}]},"add_option_whitelist":{"name":"add_option_whitelist","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$new_options","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds an array of options to the options whitelist.\n *\n * @since 2.7.0\n *\n * @global array $whitelist_options\n *\n * @param array        $new_options\n * @param string|array $options\n * @return array\n *\/"}]},"remove_option_whitelist":{"name":"remove_option_whitelist","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$del_options","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes a list of options from the options whitelist.\n *\n * @since 2.7.0\n *\n * @global array $whitelist_options\n *\n * @param array        $del_options\n * @param string|array $options\n * @return array\n *\/"}]},"settings_fields":{"name":"settings_fields","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option_group","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output nonce, action, and option_page fields for a settings page.\n *\n * @since 2.7.0\n *\n * @param string $option_group A settings group name. This should match the group name used in register_setting().\n *\/"}]},"wp_clean_plugins_cache":{"name":"wp_clean_plugins_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$clear_update_cache","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Clears the Plugins cache used by get_plugins() and by default, the Plugin Update cache.\n *\n * @since 3.7.0\n *\n * @param bool $clear_update_cache Whether to clear the Plugin updates cache\n *\/"}]},"plugin_sandbox_scrape":{"name":"plugin_sandbox_scrape","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugin","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @param string $plugin\n *\/"}]},"delete_theme":{"name":"delete_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$stylesheet","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$redirect","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * WordPress Theme Administration API\n *\n * @package WordPress\n * @subpackage Administration\n *\/"},{"phpdoc":"\/**\n * Remove a theme\n *\n * @since 2.8.0\n *\n * @global WP_Filesystem_Base $wp_filesystem Subclass\n *\n * @param string $stylesheet Stylesheet of the theme to delete\n * @param string $redirect Redirect to page when complete.\n * @return void|bool|WP_Error When void, echoes content.\n *\/"}]},"get_page_templates":{"name":"get_page_templates","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_type","rank":1,"variadic":false,"reference":false,"default":"'page'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the Page Templates available in this theme\n *\n * @since 1.5.0\n * @since 4.7.0 Added the `$post_type` parameter.\n *\n * @param WP_Post|null $post      Optional. The post being edited, provided for context.\n * @param string       $post_type Optional. Post type to get the templates for. Default 'page'.\n * @return array Key is the template name, value is the filename of the template\n *\/"}]},"_get_template_edit_filename":{"name":"_get_template_edit_filename","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$fullpath","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$containingfolder","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Tidies a filename for url display by the theme editor.\n *\n * @since 2.9.0\n * @access private\n *\n * @param string $fullpath Full path to the theme file\n * @param string $containingfolder Path of the theme parent folder\n * @return string\n *\/"}]},"theme_update_available":{"name":"theme_update_available","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if there is an update for a theme available.\n *\n * Will display link, if there is an update available.\n *\n * @since 2.7.0\n * @see get_theme_update_available()\n *\n * @param WP_Theme $theme Theme data object.\n *\/"}]},"get_theme_update_available":{"name":"get_theme_update_available","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the update link if there is a theme update available.\n *\n * Will return a link if there is an update available.\n *\n * @since 3.8.0\n *\n * @staticvar object $themes_update\n *\n * @param WP_Theme $theme WP_Theme object.\n * @return false|string HTML for the update link, or false if invalid info was passed.\n *\/"}]},"get_theme_feature_list":{"name":"get_theme_feature_list","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$api","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve list of WordPress theme features (aka theme tags)\n *\n * @since 3.1.0\n *\n * @param bool $api Optional. Whether try to fetch tags from the WordPress.org API. Defaults to true.\n * @return array Array of features keyed by category with translations keyed by slug.\n *\/"}]},"themes_api":{"name":"themes_api","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves theme installer pages from the WordPress.org Themes API.\n *\n * It is possible for a theme to override the Themes API result with three\n * filters. Assume this is for themes, which can extend on the Theme Info to\n * offer more choices. This is very powerful and must be used with care, when\n * overriding the filters.\n *\n * The first filter, {@see 'themes_api_args'}, is for the args and gives the action\n * as the second parameter. The hook for {@see 'themes_api_args'} must ensure that\n * an object is returned.\n *\n * The second filter, {@see 'themes_api'}, allows a plugin to override the WordPress.org\n * Theme API entirely. If `$action` is 'query_themes', 'theme_information', or 'feature_list',\n * an object MUST be passed. If `$action` is 'hot_tags', an array should be passed.\n *\n * Finally, the third filter, {@see 'themes_api_result'}, makes it possible to filter the\n * response object or array, depending on the `$action` type.\n *\n * Supported arguments per action:\n *\n * | Argument Name      | 'query_themes' | 'theme_information' | 'hot_tags' | 'feature_list'   |\n * | -------------------| :------------: | :-----------------: | :--------: | :--------------: |\n * | `$slug`            | No             |  Yes                | No         | No               |\n * | `$per_page`        | Yes            |  No                 | No         | No               |\n * | `$page`            | Yes            |  No                 | No         | No               |\n * | `$number`          | No             |  No                 | Yes        | No               |\n * | `$search`          | Yes            |  No                 | No         | No               |\n * | `$tag`             | Yes            |  No                 | No         | No               |\n * | `$author`          | Yes            |  No                 | No         | No               |\n * | `$user`            | Yes            |  No                 | No         | No               |\n * | `$browse`          | Yes            |  No                 | No         | No               |\n * | `$locale`          | Yes            |  Yes                | No         | No               |\n * | `$fields`          | Yes            |  Yes                | No         | No               |\n *\n * @since 2.8.0\n *\n * @param string       $action API action to perform: 'query_themes', 'theme_information',\n *                             'hot_tags' or 'feature_list'.\n * @param array|object $args   {\n *     Optional. Array or object of arguments to serialize for the Themes API.\n *\n *     @type string  $slug     The theme slug. Default empty.\n *     @type int     $per_page Number of themes per page. Default 24.\n *     @type int     $page     Number of current page. Default 1.\n *     @type int     $number   Number of tags to be queried.\n *     @type string  $search   A search term. Default empty.\n *     @type string  $tag      Tag to filter themes. Default empty.\n *     @type string  $author   Username of an author to filter themes. Default empty.\n *     @type string  $user     Username to query for their favorites. Default empty.\n *     @type string  $browse   Browse view: 'featured', 'popular', 'updated', 'favorites'.\n *     @type string  $locale   Locale to provide context-sensitive results. Default is the value of get_locale().\n *     @type array   $fields   {\n *         Array of fields which should or should not be returned.\n *\n *         @type bool $description        Whether to return the theme full description. Default false.\n *         @type bool $sections           Whether to return the theme readme sections: description, installation,\n *                                        FAQ, screenshots, other notes, and changelog. Default false.\n *         @type bool $rating             Whether to return the rating in percent and total number of ratings.\n *                                        Default false.\n *         @type bool $ratings            Whether to return the number of rating for each star (1-5). Default false.\n *         @type bool $downloaded         Whether to return the download count. Default false.\n *         @type bool $downloadlink       Whether to return the download link for the package. Default false.\n *         @type bool $last_updated       Whether to return the date of the last update. Default false.\n *         @type bool $tags               Whether to return the assigned tags. Default false.\n *         @type bool $homepage           Whether to return the theme homepage link. Default false.\n *         @type bool $screenshots        Whether to return the screenshots. Default false.\n *         @type int  $screenshot_count   Number of screenshots to return. Default 1.\n *         @type bool $screenshot_url     Whether to return the URL of the first screenshot. Default false.\n *         @type bool $photon_screenshots Whether to return the screenshots via Photon. Default false.\n *         @type bool $template           Whether to return the slug of the parent theme. Default false.\n *         @type bool $parent             Whether to return the slug, name and homepage of the parent theme. Default false.\n *         @type bool $versions           Whether to return the list of all available versions. Default false.\n *         @type bool $theme_url          Whether to return theme's URL. Default false.\n *         @type bool $extended_author    Whether to return nicename or nicename and display name. Default false.\n *     }\n * }\n * @return object|array|WP_Error Response object or array on success, WP_Error on failure. See the\n *         {@link https:\/\/developer.wordpress.org\/reference\/functions\/themes_api\/ function reference article}\n *         for more information on the make-up of possible return objects depending on the value of `$action`.\n *\/"}]},"wp_prepare_themes_for_js":{"name":"wp_prepare_themes_for_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$themes","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prepare themes for JavaScript.\n *\n * @since 3.8.0\n *\n * @param array $themes Optional. Array of WP_Theme objects to prepare.\n *                      Defaults to all allowed themes.\n *\n * @return array An associative array of theme data, sorted by name.\n *\/"}]},"customize_themes_print_templates":{"name":"customize_themes_print_templates","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print JS templates for the theme-browsing UI in the Customizer.\n *\n * @since 4.2.0\n *\/"}]},"add_user":{"name":"add_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates a new user from the \"Users\" form using $_POST information.\n *\n * @since 2.0.0\n *\n * @return int|WP_Error WP_Error or User ID.\n *\/"},{"phpdoc":"\/**\n * WordPress user administration API.\n *\n * @package WordPress\n * @subpackage Administration\n *\/"}]},"edit_user":{"name":"edit_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Edit user settings based on contents of $_POST\n *\n * Used on user-edit.php and profile.php to manage and process user options, passwords etc.\n *\n * @since 2.0.0\n *\n * @param int $user_id Optional. User ID.\n * @return int|WP_Error user id of the updated user\n *\/"}]},"get_editable_roles":{"name":"get_editable_roles","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Fetch a filtered list of user roles that the current user is\n * allowed to edit.\n *\n * Simple function who's main purpose is to allow filtering of the\n * list of roles in the $wp_roles object so that plugins can remove\n * inappropriate ones depending on the situation or user making edits.\n * Specifically because without filtering anyone with the edit_users\n * capability can edit others to be administrators, even if they are\n * only editors or authors. This filter allows admins to delegate\n * user management.\n *\n * @since 2.8.0\n *\n * @return array\n *\/"}]},"get_user_to_edit":{"name":"get_user_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve user data and filter it.\n *\n * @since 2.0.5\n *\n * @param int $user_id User ID.\n * @return WP_User|bool WP_User object on success, false on failure.\n *\/"}]},"get_users_drafts":{"name":"get_users_drafts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the user's drafts.\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int $user_id User ID.\n * @return array\n *\/"}]},"wp_delete_user":{"name":"wp_delete_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$reassign","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove user and optionally reassign posts and links to another user.\n *\n * If the $reassign parameter is not assigned to a User ID, then all posts will\n * be deleted of that user. The action {@see 'delete_user'} that is passed the User ID\n * being deleted will be run after the posts are either reassigned or deleted.\n * The user meta will also be deleted that are for that User ID.\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int $id User ID.\n * @param int $reassign Optional. Reassign posts and links to new User ID.\n * @return bool True when finished.\n *\/"}]},"wp_revoke_user":{"name":"wp_revoke_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove all capabilities from user.\n *\n * @since 2.1.0\n *\n * @param int $id User ID.\n *\/"}]},"default_password_nag_handler":{"name":"default_password_nag_handler","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$errors","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 2.8.0\n *\n * @global int $user_ID\n *\n * @param false $errors Deprecated.\n *\/"}]},"default_password_nag_edit_user":{"name":"default_password_nag_edit_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_ID","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 2.8.0\n *\n * @param int    $user_ID\n * @param object $old_data\n *\/"}]},"default_password_nag":{"name":"default_password_nag","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 2.8.0\n *\n * @global string $pagenow\n *\/"}]},"delete_users_add_js":{"name":"delete_users_add_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 3.5.0\n * @access private\n *\/"}]},"use_ssl_preference":{"name":"use_ssl_preference","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Optional SSL preference that can be turned on by hooking to the 'personal_options' action.\n *\n * See the {@see 'personal_options'} action.\n *\n * @since 2.7.0\n *\n * @param object $user User data object\n *\/"}]},"admin_created_user_email":{"name":"admin_created_user_email","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @param string $text\n * @return string\n *\/"}]},"update_core":{"name":"update_core","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$from","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$to","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Upgrades the core of WordPress.\n *\n * This will create a .maintenance file at the base of the WordPress directory\n * to ensure that people can not access the web site, when the files are being\n * copied to their locations.\n *\n * The files in the `$_old_files` list will be removed and the new files\n * copied from the zip file after the database is upgraded.\n *\n * The files in the `$_new_bundled_files` list will be added to the installation\n * if the version is greater than or equal to the old version being upgraded.\n *\n * The steps for the upgrader for after the new release is downloaded and\n * unzipped is:\n *   1. Test unzipped location for select files to ensure that unzipped worked.\n *   2. Create the .maintenance file in current WordPress base.\n *   3. Copy new WordPress directory over old WordPress files.\n *   4. Upgrade WordPress to new version.\n *     4.1. Copy all files\/folders other than wp-content\n *     4.2. Copy any language files to WP_LANG_DIR (which may differ from WP_CONTENT_DIR\n *     4.3. Copy any new bundled themes\/plugins to their respective locations\n *   5. Delete new WordPress directory path.\n *   6. Delete .maintenance file.\n *   7. Remove old files.\n *   8. Delete 'update_core' option.\n *\n * There are several areas of failure. For instance if PHP times out before step\n * 6, then you will not be able to access any portion of your site. Also, since\n * the upgrade will not continue where it left off, you will not be able to\n * automatically remove old files and remove the 'update_core' option. This\n * isn't that bad.\n *\n * If the copy of the new WordPress over the old fails, then the worse is that\n * the new WordPress directory will remain.\n *\n * If it is assumed that every file will be copied over, including plugins and\n * themes, then if you edit the default theme, you should rename it, so that\n * your changes remain.\n *\n * @since 2.7.0\n *\n * @global WP_Filesystem_Base $wp_filesystem\n * @global array              $_old_files\n * @global array              $_new_bundled_files\n * @global wpdb               $wpdb\n * @global string             $wp_version\n * @global string             $required_php_version\n * @global string             $required_mysql_version\n *\n * @param string $from New release unzipped path.\n * @param string $to   Path to old WordPress installation.\n * @return WP_Error|null WP_Error on failure, null on success.\n *\/"}]},"_copy_dir":{"name":"_copy_dir","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$from","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$to","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$skip_list","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Copies a directory from one location to another via the WordPress Filesystem Abstraction.\n * Assumes that WP_Filesystem() has already been called and setup.\n *\n * This is a temporary function for the 3.1 -> 3.2 upgrade, as well as for those upgrading to\n * 3.7+\n *\n * @ignore\n * @since 3.2.0\n * @since 3.7.0 Updated not to use a regular expression for the skip list\n * @see copy_dir()\n *\n * @global WP_Filesystem_Base $wp_filesystem\n *\n * @param string $from     source directory\n * @param string $to       destination directory\n * @param array $skip_list a list of files\/folders to skip copying\n * @return mixed WP_Error on failure, True on success.\n *\/"}]},"_redirect_to_about_wordpress":{"name":"_redirect_to_about_wordpress","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$new_version","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Redirect to the About WordPress page after a successful upgrade.\n *\n * This function is only needed when the existing install is older than 3.4.0.\n *\n * @since 3.3.0\n *\n * @global string $wp_version\n * @global string $pagenow\n * @global string $action\n *\n * @param string $new_version\n *\/"}]},"_upgrade_422_remove_genericons":{"name":"_upgrade_422_remove_genericons","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Cleans up Genericons example files.\n *\n * @since 4.2.2\n *\n * @global array              $wp_theme_directories\n * @global WP_Filesystem_Base $wp_filesystem\n *\/"}]},"_upgrade_422_find_genericons_files_in_folder":{"name":"_upgrade_422_find_genericons_files_in_folder","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$directory","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Recursively find Genericons example files in a given folder.\n *\n * @ignore\n * @since 4.2.2\n *\n * @param string $directory Directory path. Expects trailingslashed.\n * @return array\n *\/"}]},"_upgrade_440_force_deactivate_incompatible_plugins":{"name":"_upgrade_440_force_deactivate_incompatible_plugins","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @ignore\n * @since 4.4.0\n *\/"}]},"_get_list_table":{"name":"_get_list_table","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Fetch an instance of a WP_List_Table class.\n *\n * @access private\n * @since 3.1.0\n *\n * @global string $hook_suffix\n *\n * @param string $class The type of the list table, which is the class name.\n * @param array $args Optional. Arguments to pass to the class. Accepts 'screen'.\n * @return object|bool Object on success, false if the class does not exist.\n *\/"},{"phpdoc":"\/**\n * Helper functions for displaying a list of items in an ajaxified HTML table.\n *\n * @package WordPress\n * @subpackage List_Table\n * @since 3.1.0\n *\/"}]},"register_column_headers":{"name":"register_column_headers","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$screen","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$columns","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register column headers for a particular screen.\n *\n * @since 2.7.0\n *\n * @param string $screen The handle for the screen to add help to. This is usually the hook name returned by the add_*_page() functions.\n * @param array $columns An array of columns with column IDs as the keys and translated column names as the values\n * @see get_column_headers(), print_column_headers(), get_hidden_columns()\n *\/"}]},"print_column_headers":{"name":"print_column_headers","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$screen","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$with_id","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints column headers for a particular screen.\n *\n * @since 2.7.0\n *\n * @param string|WP_Screen $screen  The screen hook name or screen object.\n * @param bool             $with_id Whether to set the id attribute or not.\n *\/"}]},"wpmu_menu":{"name":"wpmu_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Multisite: Deprecated admin functions from past versions and WordPress MU\n *\n * These functions should not be used and will be removed in a later version.\n * It is suggested to use for the alternatives instead when available.\n *\n * @package WordPress\n * @subpackage Deprecated\n * @since 3.0.0\n *\/"},{"phpdoc":"\/**\n * Outputs the WPMU menu.\n *\n * @deprecated 3.0.0\n *\/"}]},"wpmu_checkAvailableSpace":{"name":"wpmu_checkAvailableSpace","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines if the available space defined by the admin has been exceeded by the user.\n *\n * @deprecated 3.0.0 Use is_upload_space_available()\n * @see is_upload_space_available()\n *\/"}]},"mu_options":{"name":"mu_options","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$options","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * WPMU options.\n *\n * @deprecated 3.0.0\n *\/"}]},"activate_sitewide_plugin":{"name":"activate_sitewide_plugin","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated functionality for activating a network-only plugin.\n *\n * @deprecated 3.0.0 Use activate_plugin()\n * @see activate_plugin()\n *\/"}]},"deactivate_sitewide_plugin":{"name":"deactivate_sitewide_plugin","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugin","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated functionality for deactivating a network-only plugin.\n *\n * @deprecated 3.0.0 Use deactivate_sitewide_plugin()\n * @see deactivate_sitewide_plugin()\n *\/"}]},"is_wpmu_sitewide_plugin":{"name":"is_wpmu_sitewide_plugin","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated functionality for determining if the current plugin is network-only.\n *\n * @deprecated 3.0.0 Use is_network_only_plugin()\n * @see is_network_only_plugin()\n *\/"}]},"get_site_allowed_themes":{"name":"get_site_allowed_themes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated functionality for getting themes network-enabled themes.\n *\n * @deprecated 3.4.0 Use WP_Theme::get_allowed_on_network()\n * @see WP_Theme::get_allowed_on_network()\n *\/"}]},"wpmu_get_blog_allowedthemes":{"name":"wpmu_get_blog_allowedthemes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated functionality for getting themes allowed on a specific site.\n *\n * @deprecated 3.4.0 Use WP_Theme::get_allowed_on_site()\n * @see WP_Theme::get_allowed_on_site()\n *\/"}]},"ms_deprecated_blogs_file":{"name":"ms_deprecated_blogs_file","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated functionality for determining whether a file is deprecated.\n *\n * @deprecated 3.5.0\n *\/"}]},"post_submit_meta_box":{"name":"post_submit_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays post submit form fields.\n *\n * @since 2.7.0\n *\n * @global string $action\n *\n * @param WP_Post  $post Current post object.\n * @param array    $args {\n *     Array of arguments for building the post submit meta box.\n *\n *     @type string   $id       Meta box 'id' attribute.\n *     @type string   $title    Meta box title.\n *     @type callable $callback Meta box display callback.\n *     @type array    $args     Extra meta box arguments.\n * }\n *\/"}]},"attachment_submit_meta_box":{"name":"attachment_submit_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display attachment submit form fields.\n *\n * @since 3.5.0\n *\n * @param object $post\n *\/"}]},"post_format_meta_box":{"name":"post_format_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$box","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display post format form elements.\n *\n * @since 3.1.0\n *\n * @param WP_Post $post Post object.\n * @param array   $box {\n *     Post formats meta box arguments.\n *\n *     @type string   $id       Meta box 'id' attribute.\n *     @type string   $title    Meta box title.\n *     @type callable $callback Meta box display callback.\n *     @type array    $args     Extra meta box arguments.\n * }\n *\/"}]},"post_tags_meta_box":{"name":"post_tags_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$box","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display post tags form fields.\n *\n * @since 2.6.0\n *\n * @todo Create taxonomy-agnostic wrapper for this.\n *\n * @param WP_Post $post Post object.\n * @param array   $box {\n *     Tags meta box arguments.\n *\n *     @type string   $id       Meta box 'id' attribute.\n *     @type string   $title    Meta box title.\n *     @type callable $callback Meta box display callback.\n *     @type array    $args {\n *         Extra meta box arguments.\n *\n *         @type string $taxonomy Taxonomy. Default 'post_tag'.\n *     }\n * }\n *\/"}]},"post_categories_meta_box":{"name":"post_categories_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$box","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display post categories form fields.\n *\n * @since 2.6.0\n *\n * @todo Create taxonomy-agnostic wrapper for this.\n *\n * @param WP_Post $post Post object.\n * @param array   $box {\n *     Categories meta box arguments.\n *\n *     @type string   $id       Meta box 'id' attribute.\n *     @type string   $title    Meta box title.\n *     @type callable $callback Meta box display callback.\n *     @type array    $args {\n *         Extra meta box arguments.\n *\n *         @type string $taxonomy Taxonomy. Default 'category'.\n *     }\n * }\n *\/"}]},"post_excerpt_meta_box":{"name":"post_excerpt_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display post excerpt form fields.\n *\n * @since 2.6.0\n *\n * @param object $post\n *\/"}]},"post_trackback_meta_box":{"name":"post_trackback_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display trackback links form fields.\n *\n * @since 2.6.0\n *\n * @param object $post\n *\/"}]},"post_custom_meta_box":{"name":"post_custom_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display custom fields form fields.\n *\n * @since 2.6.0\n *\n * @param object $post\n *\/"}]},"post_comment_status_meta_box":{"name":"post_comment_status_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display comments status form fields.\n *\n * @since 2.6.0\n *\n * @param object $post\n *\/"}]},"post_comment_meta_box_thead":{"name":"post_comment_meta_box_thead","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$result","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display comments for post table header\n *\n * @since 3.0.0\n *\n * @param array $result table header rows\n * @return array\n *\/"}]},"post_comment_meta_box":{"name":"post_comment_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display comments for post.\n *\n * @since 2.8.0\n *\n * @param object $post\n *\/"}]},"post_slug_meta_box":{"name":"post_slug_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display slug form fields.\n *\n * @since 2.6.0\n *\n * @param object $post\n *\/"}]},"post_author_meta_box":{"name":"post_author_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display form field with list of authors.\n *\n * @since 2.6.0\n *\n * @global int $user_ID\n *\n * @param object $post\n *\/"}]},"post_revisions_meta_box":{"name":"post_revisions_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display list of revisions.\n *\n * @since 2.6.0\n *\n * @param object $post\n *\/"}]},"page_attributes_meta_box":{"name":"page_attributes_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display page attributes form fields.\n *\n * @since 2.7.0\n *\n * @param object $post\n *\/"}]},"link_submit_meta_box":{"name":"link_submit_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display link create form fields.\n *\n * @since 2.7.0\n *\n * @param object $link\n *\/"}]},"link_categories_meta_box":{"name":"link_categories_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display link categories form fields.\n *\n * @since 2.6.0\n *\n * @param object $link\n *\/"}]},"link_target_meta_box":{"name":"link_target_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display form fields for changing link target.\n *\n * @since 2.6.0\n *\n * @param object $link\n *\/"}]},"xfn_check":{"name":"xfn_check","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display checked checkboxes attribute for xfn microformat options.\n *\n * @since 1.0.1\n *\n * @global object $link\n *\n * @param string $class\n * @param string $value\n * @param mixed $deprecated Never used.\n *\/"}]},"link_xfn_meta_box":{"name":"link_xfn_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display xfn form fields.\n *\n * @since 2.6.0\n *\n * @param object $link\n *\/"}]},"link_advanced_meta_box":{"name":"link_advanced_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display advanced link options form fields.\n *\n * @since 2.6.0\n *\n * @param object $link\n *\/"}]},"post_thumbnail_meta_box":{"name":"post_thumbnail_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display post thumbnail meta box.\n *\n * @since 2.9.0\n *\n * @param WP_Post $post A post object.\n *\/"}]},"attachment_id3_data_meta_box":{"name":"attachment_id3_data_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display fields for ID3 data\n *\n * @since 3.9.0\n *\n * @param WP_Post $post A post object.\n *\/"}]},"wp_install":{"name":"wp_install","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_email","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$public","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_password","rank":5,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$language","rank":6,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Installs the site.\n *\n * Runs the required functions to set up and populate the database,\n * including primary admin user and initial options.\n *\n * @since 2.1.0\n *\n * @param string $blog_title    Site title.\n * @param string $user_name     User's username.\n * @param string $user_email    User's email.\n * @param bool   $public        Whether site is public.\n * @param string $deprecated    Optional. Not used.\n * @param string $user_password Optional. User's chosen password. Default empty (random password).\n * @param string $language      Optional. Language chosen. Default empty.\n * @return array Array keys 'url', 'user_id', 'password', and 'password_message'.\n *\/"}]},"wp_install_defaults":{"name":"wp_install_defaults","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates the initial content for a newly-installed site.\n *\n * Adds the default \"Uncategorized\" category, the first post (with comment),\n * first page, and default widgets for default theme for the current version.\n *\n * @since 2.1.0\n *\n * @global wpdb       $wpdb\n * @global WP_Rewrite $wp_rewrite\n * @global string     $table_prefix\n *\n * @param int $user_id User ID.\n *\/"}]},"wp_install_maybe_enable_pretty_permalinks":{"name":"wp_install_maybe_enable_pretty_permalinks","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Maybe enable pretty permalinks on install.\n *\n * If after enabling pretty permalinks don't work, fallback to query-string permalinks.\n *\n * @since 4.2.0\n *\n * @global WP_Rewrite $wp_rewrite WordPress rewrite component.\n *\n * @return bool Whether pretty permalinks are enabled. False otherwise.\n *\/"}]},"wp_new_blog_notification":{"name":"wp_new_blog_notification","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_url","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_id","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$password","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Notifies the site admin that the setup is complete.\n *\n * Sends an email with wp_mail to the new administrator that the site setup is complete,\n * and provides them with a record of their login credentials.\n *\n * @since 2.1.0\n *\n * @param string $blog_title Site title.\n * @param string $blog_url   Site url.\n * @param int    $user_id    User ID.\n * @param string $password   User's Password.\n *\/"}]},"wp_upgrade":{"name":"wp_upgrade","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Runs WordPress Upgrade functions.\n *\n * Upgrades the database if needed during a site update.\n *\n * @since 2.1.0\n *\n * @global int  $wp_current_db_version\n * @global int  $wp_db_version\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"upgrade_all":{"name":"upgrade_all","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Functions to be called in install and upgrade scripts.\n *\n * Contains conditional checks to determine which upgrade scripts to run,\n * based on database version and WP version being updated-to.\n *\n * @ignore\n * @since 1.0.1\n *\n * @global int $wp_current_db_version\n * @global int $wp_db_version\n *\/"}]},"upgrade_100":{"name":"upgrade_100","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 1.0.\n *\n * @ignore\n * @since 1.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"upgrade_101":{"name":"upgrade_101","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 1.0.1.\n *\n * @ignore\n * @since 1.0.1\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"upgrade_110":{"name":"upgrade_110","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 1.2.\n *\n * @ignore\n * @since 1.2.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"upgrade_130":{"name":"upgrade_130","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 1.5.\n *\n * @ignore\n * @since 1.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"upgrade_160":{"name":"upgrade_160","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 2.0.\n *\n * @ignore\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n * @global int  $wp_current_db_version\n *\/"}]},"upgrade_210":{"name":"upgrade_210","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 2.1.\n *\n * @ignore\n * @since 2.1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n * @global int  $wp_current_db_version\n *\/"}]},"upgrade_230":{"name":"upgrade_230","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 2.3.\n *\n * @ignore\n * @since 2.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n * @global int  $wp_current_db_version\n *\/"}]},"upgrade_230_options_table":{"name":"upgrade_230_options_table","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove old options from the database.\n *\n * @ignore\n * @since 2.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"upgrade_230_old_tables":{"name":"upgrade_230_old_tables","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove old categories, link2cat, and post2cat database tables.\n *\n * @ignore\n * @since 2.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"upgrade_old_slugs":{"name":"upgrade_old_slugs","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Upgrade old slugs made in version 2.2.\n *\n * @ignore\n * @since 2.2.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"upgrade_250":{"name":"upgrade_250","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 2.5.0.\n *\n * @ignore\n * @since 2.5.0\n *\n * @global int $wp_current_db_version\n *\/"}]},"upgrade_252":{"name":"upgrade_252","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 2.5.2.\n *\n * @ignore\n * @since 2.5.2\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"upgrade_260":{"name":"upgrade_260","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 2.6.\n *\n * @ignore\n * @since 2.6.0\n *\n * @global int $wp_current_db_version\n *\/"}]},"upgrade_270":{"name":"upgrade_270","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 2.7.\n *\n * @ignore\n * @since 2.7.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n * @global int  $wp_current_db_version\n *\/"}]},"upgrade_280":{"name":"upgrade_280","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 2.8.\n *\n * @ignore\n * @since 2.8.0\n *\n * @global int  $wp_current_db_version\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"upgrade_290":{"name":"upgrade_290","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 2.9.\n *\n * @ignore\n * @since 2.9.0\n *\n * @global int $wp_current_db_version\n *\/"}]},"upgrade_300":{"name":"upgrade_300","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 3.0.\n *\n * @ignore\n * @since 3.0.0\n *\n * @global int  $wp_current_db_version\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"upgrade_330":{"name":"upgrade_330","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 3.3.\n *\n * @ignore\n * @since 3.3.0\n *\n * @global int   $wp_current_db_version\n * @global wpdb  $wpdb\n * @global array $wp_registered_widgets\n * @global array $sidebars_widgets\n *\/"}]},"upgrade_340":{"name":"upgrade_340","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 3.4.\n *\n * @ignore\n * @since 3.4.0\n *\n * @global int   $wp_current_db_version\n * @global wpdb  $wpdb\n *\/"}]},"upgrade_350":{"name":"upgrade_350","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 3.5.\n *\n * @ignore\n * @since 3.5.0\n *\n * @global int   $wp_current_db_version\n * @global wpdb  $wpdb\n *\/"}]},"upgrade_370":{"name":"upgrade_370","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 3.7.\n *\n * @ignore\n * @since 3.7.0\n *\n * @global int $wp_current_db_version\n *\/"}]},"upgrade_372":{"name":"upgrade_372","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 3.7.2.\n *\n * @ignore\n * @since 3.7.2\n * @since 3.8.0\n *\n * @global int $wp_current_db_version\n *\/"}]},"upgrade_380":{"name":"upgrade_380","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 3.8.0.\n *\n * @ignore\n * @since 3.8.0\n *\n * @global int $wp_current_db_version\n *\/"}]},"upgrade_400":{"name":"upgrade_400","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 4.0.0.\n *\n * @ignore\n * @since 4.0.0\n *\n * @global int $wp_current_db_version\n *\/"}]},"upgrade_420":{"name":"upgrade_420","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute changes made in WordPress 4.2.0.\n *\n * @ignore\n * @since 4.2.0\n *\n * @global int   $wp_current_db_version\n * @global wpdb  $wpdb\n *\/"}]},"upgrade_430":{"name":"upgrade_430","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Executes changes made in WordPress 4.3.0.\n *\n * @ignore\n * @since 4.3.0\n *\n * @global int  $wp_current_db_version Current version.\n * @global wpdb $wpdb                  WordPress database abstraction object.\n *\/"}]},"upgrade_430_fix_comments":{"name":"upgrade_430_fix_comments","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Executes comments changes made in WordPress 4.3.0.\n *\n * @ignore\n * @since 4.3.0\n *\n * @global int  $wp_current_db_version Current version.\n * @global wpdb $wpdb                  WordPress database abstraction object.\n *\/"}]},"upgrade_431":{"name":"upgrade_431","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Executes changes made in WordPress 4.3.1.\n *\n * @ignore\n * @since 4.3.1\n *\/"}]},"upgrade_440":{"name":"upgrade_440","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Executes changes made in WordPress 4.4.0.\n *\n * @ignore\n * @since 4.4.0\n *\n * @global int  $wp_current_db_version Current version.\n * @global wpdb $wpdb                  WordPress database abstraction object.\n *\/"}]},"upgrade_450":{"name":"upgrade_450","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Executes changes made in WordPress 4.5.0.\n *\n * @ignore\n * @since 4.5.0\n *\n * @global int  $wp_current_db_version Current database version.\n * @global wpdb $wpdb                  WordPress database abstraction object.\n *\/"}]},"upgrade_460":{"name":"upgrade_460","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Executes changes made in WordPress 4.6.0.\n *\n * @ignore\n * @since 4.6.0\n *\n * @global int $wp_current_db_version Current database version.\n *\/"}]},"upgrade_network":{"name":"upgrade_network","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Executes network-level upgrade routines.\n *\n * @since 3.0.0\n *\n * @global int   $wp_current_db_version\n * @global wpdb  $wpdb\n *\/"}]},"drop_index":{"name":"drop_index","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$table","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$index","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Drops a specified index from a table.\n *\n * @since 1.0.1\n *\n * @global wpdb  $wpdb\n *\n * @param string $table Database table name.\n * @param string $index Index name to drop.\n * @return true True, when finished.\n *\/"}]},"add_clean_index":{"name":"add_clean_index","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$table","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$index","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds an index to a specified table.\n *\n * @since 1.0.1\n *\n * @global wpdb  $wpdb\n *\n * @param string $table Database table name.\n * @param string $index Database table index column.\n * @return true True, when done with execution.\n *\/"}]},"maybe_convert_table_to_utf8mb4":{"name":"maybe_convert_table_to_utf8mb4","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$table","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * If a table only contains utf8 or utf8mb4 columns, convert it to utf8mb4.\n *\n * @since 4.2.0\n *\n * @global wpdb  $wpdb\n *\n * @param string $table The table to convert.\n * @return bool true if the table was converted, false if it wasn't.\n *\/"}]},"get_alloptions_110":{"name":"get_alloptions_110","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve all options as it was for 1.2.\n *\n * @since 1.2.0\n *\n * @global wpdb  $wpdb\n *\n * @return stdClass List of options.\n *\/"}]},"__get_option":{"name":"__get_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$setting","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Utility version of get_option that is private to install\/upgrade.\n *\n * @ignore\n * @since 1.5.1\n * @access private\n *\n * @global wpdb  $wpdb\n *\n * @param string $setting Option name.\n * @return mixed\n *\/"}]},"deslash":{"name":"deslash","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters for content to remove unnecessary slashes.\n *\n * @since 1.5.0\n *\n * @param string $content The content to modify.\n * @return string The de-slashed content.\n *\/"}]},"dbDelta":{"name":"dbDelta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$queries","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$execute","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Modifies the database based on specified SQL statements.\n *\n * Useful for creating new tables and updating existing tables to a new structure.\n *\n * @since 1.5.0\n *\n * @global wpdb  $wpdb\n *\n * @param string|array $queries Optional. The query to run. Can be multiple queries\n *                              in an array, or a string of queries separated by\n *                              semicolons. Default empty.\n * @param bool         $execute Optional. Whether or not to execute the query right away.\n *                              Default true.\n * @return array Strings containing the results of the various update queries.\n *\/"}]},"make_db_current":{"name":"make_db_current","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tables","rank":0,"variadic":false,"reference":false,"default":"'all'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates the database tables to a new schema.\n *\n * By default, updates all the tables to use the latest defined schema, but can also\n * be used to update a specific set of tables in wp_get_db_schema().\n *\n * @since 1.5.0\n *\n * @uses dbDelta\n *\n * @param string $tables Optional. Which set of tables to update. Default is 'all'.\n *\/"}]},"make_db_current_silent":{"name":"make_db_current_silent","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tables","rank":0,"variadic":false,"reference":false,"default":"'all'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates the database tables to a new schema, but without displaying results.\n *\n * By default, updates all the tables to use the latest defined schema, but can\n * also be used to update a specific set of tables in wp_get_db_schema().\n *\n * @since 1.5.0\n *\n * @see make_db_current()\n *\n * @param string $tables Optional. Which set of tables to update. Default is 'all'.\n *\/"}]},"make_site_theme_from_oldschool":{"name":"make_site_theme_from_oldschool","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$theme_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$template","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates a site theme from an existing theme.\n *\n * {@internal Missing Long Description}}\n *\n * @since 1.5.0\n *\n * @param string $theme_name The name of the theme.\n * @param string $template   The directory name of the theme.\n * @return bool\n *\/"}]},"make_site_theme_from_default":{"name":"make_site_theme_from_default","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$theme_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$template","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates a site theme from the default theme.\n *\n * {@internal Missing Long Description}}\n *\n * @since 1.5.0\n *\n * @param string $theme_name The name of the theme.\n * @param string $template   The directory name of the theme.\n * @return false|void\n *\/"}]},"make_site_theme":{"name":"make_site_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates a site theme.\n *\n * {@internal Missing Long Description}}\n *\n * @since 1.5.0\n *\n * @return false|string\n *\/"}]},"translate_level_to_role":{"name":"translate_level_to_role","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$level","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Translate user level to user role name.\n *\n * @since 2.0.0\n *\n * @param int $level User level.\n * @return string User role name.\n *\/"}]},"wp_check_mysql_version":{"name":"wp_check_mysql_version","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks the version of the installed MySQL binary.\n *\n * @since 2.1.0\n *\n * @global wpdb  $wpdb\n *\/"}]},"maybe_disable_automattic_widgets":{"name":"maybe_disable_automattic_widgets","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Disables the Automattic widgets plugin, which was merged into core.\n *\n * @since 2.2.0\n *\/"}]},"maybe_disable_link_manager":{"name":"maybe_disable_link_manager","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Disables the Link Manager on upgrade if, at the time of upgrade, no links exist in the DB.\n *\n * @since 3.5.0\n *\n * @global int  $wp_current_db_version\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"pre_schema_upgrade":{"name":"pre_schema_upgrade","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Runs before the schema is upgraded.\n *\n * @since 2.9.0\n *\n * @global int  $wp_current_db_version\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"install_global_terms":{"name":"install_global_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[]},"wp_should_upgrade_global_tables":{"name":"wp_should_upgrade_global_tables","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine if global tables should be upgraded.\n *\n * This function performs a series of checks to ensure the environment allows\n * for the safe upgrading of global WordPress database tables. It is necessary\n * because global tables will commonly grow to millions of rows on large\n * installations, and the ability to control their upgrade routines can be\n * critical to the operation of large networks.\n *\n * In a future iteration, this function may use `wp_is_large_network()` to more-\n * intelligently prevent global table upgrades. Until then, we make sure\n * WordPress is on the main site of the main network, to avoid running queries\n * more than once in multi-site or multi-network environments.\n *\n * @since 4.3.0\n *\n * @return bool Whether to run the upgrade routines on global tables.\n *\/"}]},"get_column_headers":{"name":"get_column_headers","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$screen","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the column headers for a screen\n *\n * @since 2.7.0\n *\n * @staticvar array $column_headers\n *\n * @param string|WP_Screen $screen The screen you want the headers for\n * @return array Containing the headers in the format id => UI String\n *\/"},{"phpdoc":"\/**\n * WordPress Administration Screen API.\n *\n * @package WordPress\n * @subpackage Administration\n *\/"}]},"get_hidden_columns":{"name":"get_hidden_columns","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$screen","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get a list of hidden columns.\n *\n * @since 2.7.0\n *\n * @param string|WP_Screen $screen The screen you want the hidden columns for\n * @return array\n *\/"}]},"meta_box_prefs":{"name":"meta_box_prefs","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$screen","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints the meta box preferences for screen meta.\n *\n * @since 2.7.0\n *\n * @global array $wp_meta_boxes\n *\n * @param WP_Screen $screen\n *\/"}]},"get_hidden_meta_boxes":{"name":"get_hidden_meta_boxes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$screen","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get Hidden Meta Boxes\n *\n * @since 2.7.0\n *\n * @param string|WP_Screen $screen Screen identifier\n * @return array Hidden Meta Boxes\n *\/"}]},"add_screen_option":{"name":"add_screen_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register and configure an admin screen option\n *\n * @since 3.1.0\n *\n * @param string $option An option name.\n * @param mixed $args Option-dependent arguments.\n *\/"}]},"get_current_screen":{"name":"get_current_screen","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the current screen object\n *\n * @since 3.1.0\n *\n * @global WP_Screen $current_screen\n *\n * @return WP_Screen|null Current screen object or null when screen not defined.\n *\/"}]},"set_current_screen":{"name":"set_current_screen","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$hook_name","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set the current screen object\n *\n * @since 3.0.0\n *\n * @param mixed $hook_name Optional. The hook name (also known as the hook suffix) used to determine the screen,\n *\t                       or an existing screen object.\n *\/"}]},"add_cssclass":{"name":"add_cssclass","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$add","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$class","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @param string $add\n * @param string $class\n * @return string\n *\/"}]},"add_menu_classes":{"name":"add_menu_classes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$menu","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @param array $menu\n * @return array\n *\/"}]},"sort_menu":{"name":"sort_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n\t *\n\t * @global array $menu_order\n\t * @global array $default_menu_order\n\t *\n\t * @param array $a\n\t * @param array $b\n\t * @return int\n\t *\/"}]},"wp_ajax_nopriv_heartbeat":{"name":"wp_ajax_nopriv_heartbeat","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Administration API: Core Ajax handlers\n *\n * @package WordPress\n * @subpackage Administration\n * @since 2.1.0\n *\/"},{"phpdoc":"\/**\n * Ajax handler for the Heartbeat API in\n * the no-privilege context.\n *\n * Runs when the user is not logged in.\n *\n * @since 3.6.0\n *\/"}]},"wp_ajax_fetch_list":{"name":"wp_ajax_fetch_list","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for fetching a list table.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_ajax_tag_search":{"name":"wp_ajax_ajax_tag_search","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for tag search.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_wp_compression_test":{"name":"wp_ajax_wp_compression_test","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for compression testing.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_imgedit_preview":{"name":"wp_ajax_imgedit_preview","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for image editor previews.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_oembed_cache":{"name":"wp_ajax_oembed_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for oEmbed caching.\n *\n * @since 3.1.0\n *\n * @global WP_Embed $wp_embed\n *\/"}]},"wp_ajax_autocomplete_user":{"name":"wp_ajax_autocomplete_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for user autocomplete.\n *\n * @since 3.4.0\n *\/"}]},"wp_ajax_dashboard_widgets":{"name":"wp_ajax_dashboard_widgets","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for dashboard widgets.\n *\n * @since 3.4.0\n *\/"}]},"wp_ajax_logged_in":{"name":"wp_ajax_logged_in","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for Customizer preview logged-in status.\n *\n * @since 3.4.0\n *\/"}]},"_wp_ajax_delete_comment_response":{"name":"_wp_ajax_delete_comment_response","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$delta","rank":1,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sends back current comment total and new page links if they need to be updated.\n *\n * Contrary to normal success Ajax response (\"1\"), die with time() on success.\n *\n * @access private\n * @since 2.7.0\n *\n * @param int $comment_id\n * @param int $delta\n *\/"}]},"_wp_ajax_add_hierarchical_term":{"name":"_wp_ajax_add_hierarchical_term","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for adding a hierarchical term.\n *\n * @access private\n * @since 3.1.0\n *\/"}]},"wp_ajax_delete_comment":{"name":"wp_ajax_delete_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for deleting a comment.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_delete_tag":{"name":"wp_ajax_delete_tag","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for deleting a tag.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_delete_link":{"name":"wp_ajax_delete_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for deleting a link.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_delete_meta":{"name":"wp_ajax_delete_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for deleting meta.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_delete_post":{"name":"wp_ajax_delete_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for deleting a post.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n *\/"}]},"wp_ajax_trash_post":{"name":"wp_ajax_trash_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for sending a post to the trash.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n *\/"}]},"wp_ajax_untrash_post":{"name":"wp_ajax_untrash_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler to restore a post from the trash.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n *\/"}]},"wp_ajax_delete_page":{"name":"wp_ajax_delete_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 3.1.0\n *\n * @param string $action\n *\/"}]},"wp_ajax_dim_comment":{"name":"wp_ajax_dim_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler to dim a comment.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_add_link_category":{"name":"wp_ajax_add_link_category","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for adding a link category.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n *\/"}]},"wp_ajax_add_tag":{"name":"wp_ajax_add_tag","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler to add a tag.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_get_tagcloud":{"name":"wp_ajax_get_tagcloud","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for getting a tagcloud.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_get_comments":{"name":"wp_ajax_get_comments","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for getting comments.\n *\n * @since 3.1.0\n *\n * @global int           $post_id\n *\n * @param string $action Action to perform.\n *\/"}]},"wp_ajax_replyto_comment":{"name":"wp_ajax_replyto_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for replying to a comment.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n *\/"}]},"wp_ajax_edit_comment":{"name":"wp_ajax_edit_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for editing a comment.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_add_menu_item":{"name":"wp_ajax_add_menu_item","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for adding a menu item.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_add_meta":{"name":"wp_ajax_add_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for adding meta.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_add_user":{"name":"wp_ajax_add_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for adding a user.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n *\/"}]},"wp_ajax_closed_postboxes":{"name":"wp_ajax_closed_postboxes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for closed post boxes.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_hidden_columns":{"name":"wp_ajax_hidden_columns","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for hidden columns.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_update_welcome_panel":{"name":"wp_ajax_update_welcome_panel","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for updating whether to display the welcome panel.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_menu_get_metabox":{"name":"wp_ajax_menu_get_metabox","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for retrieving menu meta boxes.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_wp_link_ajax":{"name":"wp_ajax_wp_link_ajax","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for internal linking.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_menu_locations_save":{"name":"wp_ajax_menu_locations_save","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for menu locations save.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_meta_box_order":{"name":"wp_ajax_meta_box_order","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for saving the meta box order.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_menu_quick_search":{"name":"wp_ajax_menu_quick_search","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for menu quick searching.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_get_permalink":{"name":"wp_ajax_get_permalink","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler to retrieve a permalink.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_sample_permalink":{"name":"wp_ajax_sample_permalink","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler to retrieve a sample permalink.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_inline_save":{"name":"wp_ajax_inline_save","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for Quick Edit saving a post from a list table.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_inline_save_tax":{"name":"wp_ajax_inline_save_tax","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for quick edit saving for a term.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_find_posts":{"name":"wp_ajax_find_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for querying posts for the Find Posts modal.\n *\n * @see window.findPosts\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_widgets_order":{"name":"wp_ajax_widgets_order","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for saving the widgets order.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_save_widget":{"name":"wp_ajax_save_widget","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for saving a widget.\n *\n * @since 3.1.0\n *\n * @global array $wp_registered_widgets\n * @global array $wp_registered_widget_controls\n * @global array $wp_registered_widget_updates\n *\/"}]},"wp_ajax_update_widget":{"name":"wp_ajax_update_widget","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for saving a widget.\n *\n * @since 3.9.0\n *\n * @global WP_Customize_Manager $wp_customize\n *\/"}]},"wp_ajax_delete_inactive_widgets":{"name":"wp_ajax_delete_inactive_widgets","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for removing inactive widgets.\n *\n * @since 4.4.0\n *\/"}]},"wp_ajax_upload_attachment":{"name":"wp_ajax_upload_attachment","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for uploading attachments\n *\n * @since 3.3.0\n *\/"}]},"wp_ajax_image_editor":{"name":"wp_ajax_image_editor","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for image editing.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_set_post_thumbnail":{"name":"wp_ajax_set_post_thumbnail","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for setting the featured image.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_get_post_thumbnail_html":{"name":"wp_ajax_get_post_thumbnail_html","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for retrieving HTML for the featured image.\n *\n * @since 4.6.0\n *\/"}]},"wp_ajax_set_attachment_thumbnail":{"name":"wp_ajax_set_attachment_thumbnail","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for setting the featured image for an attachment.\n *\n * @since 4.0.0\n *\n * @see set_post_thumbnail()\n *\/"}]},"wp_ajax_date_format":{"name":"wp_ajax_date_format","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for date formatting.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_time_format":{"name":"wp_ajax_time_format","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for time formatting.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_wp_fullscreen_save_post":{"name":"wp_ajax_wp_fullscreen_save_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for saving posts from the fullscreen editor.\n *\n * @since 3.1.0\n * @deprecated 4.3.0\n *\/"}]},"wp_ajax_wp_remove_post_lock":{"name":"wp_ajax_wp_remove_post_lock","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for removing a post lock.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_dismiss_wp_pointer":{"name":"wp_ajax_dismiss_wp_pointer","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for dismissing a WordPress pointer.\n *\n * @since 3.1.0\n *\/"}]},"wp_ajax_get_attachment":{"name":"wp_ajax_get_attachment","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for getting an attachment.\n *\n * @since 3.5.0\n *\/"}]},"wp_ajax_query_attachments":{"name":"wp_ajax_query_attachments","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for querying attachments.\n *\n * @since 3.5.0\n *\/"}]},"wp_ajax_save_attachment":{"name":"wp_ajax_save_attachment","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for updating attachment attributes.\n *\n * @since 3.5.0\n *\/"}]},"wp_ajax_save_attachment_compat":{"name":"wp_ajax_save_attachment_compat","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for saving backward compatible attachment attributes.\n *\n * @since 3.5.0\n *\/"}]},"wp_ajax_save_attachment_order":{"name":"wp_ajax_save_attachment_order","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for saving the attachment order.\n *\n * @since 3.5.0\n *\/"}]},"wp_ajax_send_attachment_to_editor":{"name":"wp_ajax_send_attachment_to_editor","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for sending an attachment to the editor.\n *\n * Generates the HTML to send an attachment to the editor.\n * Backward compatible with the {@see 'media_send_to_editor'} filter\n * and the chain of filters that follow.\n *\n * @since 3.5.0\n *\/"}]},"wp_ajax_send_link_to_editor":{"name":"wp_ajax_send_link_to_editor","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for sending a link to the editor.\n *\n * Generates the HTML to send a non-image embed link to the editor.\n *\n * Backward compatible with the following filters:\n * - file_send_to_editor_url\n * - audio_send_to_editor_url\n * - video_send_to_editor_url\n *\n * @since 3.5.0\n *\n * @global WP_Post  $post\n * @global WP_Embed $wp_embed\n *\/"}]},"wp_ajax_heartbeat":{"name":"wp_ajax_heartbeat","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for the Heartbeat API.\n *\n * Runs when the user is logged in.\n *\n * @since 3.6.0\n *\/"}]},"wp_ajax_get_revision_diffs":{"name":"wp_ajax_get_revision_diffs","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for getting revision diffs.\n *\n * @since 3.6.0\n *\/"}]},"wp_ajax_save_user_color_scheme":{"name":"wp_ajax_save_user_color_scheme","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for auto-saving the selected color scheme for\n * a user's own profile.\n *\n * @since 3.8.0\n *\n * @global array $_wp_admin_css_colors\n *\/"}]},"wp_ajax_query_themes":{"name":"wp_ajax_query_themes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for getting themes from themes_api().\n *\n * @since 3.9.0\n *\n * @global array $themes_allowedtags\n * @global array $theme_field_defaults\n *\/"}]},"wp_ajax_parse_embed":{"name":"wp_ajax_parse_embed","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Apply [embed] Ajax handlers to a string.\n *\n * @since 4.0.0\n *\n * @global WP_Post    $post       Global $post.\n * @global WP_Embed   $wp_embed   Embed API instance.\n * @global WP_Scripts $wp_scripts\n *\/"}]},"wp_ajax_parse_media_shortcode":{"name":"wp_ajax_parse_media_shortcode","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 4.0.0\n *\n * @global WP_Post    $post\n * @global WP_Scripts $wp_scripts\n *\/"}]},"wp_ajax_destroy_sessions":{"name":"wp_ajax_destroy_sessions","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for destroying multiple open sessions for a user.\n *\n * @since 4.1.0\n *\/"}]},"wp_ajax_press_this_save_post":{"name":"wp_ajax_press_this_save_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for saving a post from Press This.\n *\n * @since 4.2.0\n *\/"}]},"wp_ajax_press_this_add_category":{"name":"wp_ajax_press_this_add_category","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for creating new category from Press This.\n *\n * @since 4.2.0\n *\/"}]},"wp_ajax_crop_image":{"name":"wp_ajax_crop_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for cropping an image.\n *\n * @since 4.3.0\n *\/"}]},"wp_ajax_generate_password":{"name":"wp_ajax_generate_password","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for generating a password.\n *\n * @since 4.4.0\n *\/"}]},"wp_ajax_save_wporg_username":{"name":"wp_ajax_save_wporg_username","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for saving the user's WordPress.org username.\n *\n * @since 4.4.0\n *\/"}]},"wp_ajax_install_theme":{"name":"wp_ajax_install_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for installing a theme.\n *\n * @since 4.6.0\n *\n * @see Theme_Upgrader\n *\/"}]},"wp_ajax_update_theme":{"name":"wp_ajax_update_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for updating a theme.\n *\n * @since 4.6.0\n *\n * @see Theme_Upgrader\n *\/"}]},"wp_ajax_delete_theme":{"name":"wp_ajax_delete_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for deleting a theme.\n *\n * @since 4.6.0\n *\n * @see delete_theme()\n *\/"}]},"wp_ajax_install_plugin":{"name":"wp_ajax_install_plugin","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for installing a plugin.\n *\n * @since 4.6.0\n *\n * @see Plugin_Upgrader\n *\/"}]},"wp_ajax_update_plugin":{"name":"wp_ajax_update_plugin","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for updating a plugin.\n *\n * @since 4.2.0\n *\n * @see Plugin_Upgrader\n *\/"}]},"wp_ajax_delete_plugin":{"name":"wp_ajax_delete_plugin","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for deleting a plugin.\n *\n * @since 4.6.0\n *\n * @see delete_plugins()\n *\/"}]},"wp_ajax_search_plugins":{"name":"wp_ajax_search_plugins","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for searching plugins.\n *\n * @since 4.6.0\n *\n * @global string $s Search term.\n *\/"}]},"wp_ajax_search_install_plugins":{"name":"wp_ajax_search_install_plugins","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ajax handler for searching plugins to install.\n *\n * @since 4.6.0\n *\/"}]},"add_link":{"name":"add_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a link to using values provided in $_POST.\n *\n * @since 2.0.0\n *\n * @return int|WP_Error Value 0 or WP_Error on failure. The link ID on success.\n *\/"},{"phpdoc":"\/**\n * WordPress Bookmark Administration API\n *\n * @package WordPress\n * @subpackage Administration\n *\/"}]},"edit_link":{"name":"edit_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates or inserts a link using values provided in $_POST.\n *\n * @since 2.0.0\n *\n * @param int $link_id Optional. ID of the link to edit. Default 0.\n * @return int|WP_Error Value 0 or WP_Error on failure. The link ID on success.\n *\/"}]},"get_default_link_to_edit":{"name":"get_default_link_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the default link for editing.\n *\n * @since 2.0.0\n *\n * @return stdClass Default link object.\n *\/"}]},"wp_delete_link":{"name":"wp_delete_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deletes a specified link from the database.\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int $link_id ID of the link to delete\n * @return true Always true.\n *\/"}]},"wp_get_link_cats":{"name":"wp_get_link_cats","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the link categories associated with the link specified.\n *\n * @since 2.1.0\n *\n * @param int $link_id Link ID to look up\n * @return array The requested link's categories\n *\/"}]},"get_link_to_edit":{"name":"get_link_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves link data based on its ID.\n *\n * @since 2.0.0\n *\n * @param int|stdClass $link Link ID or object to retrieve.\n * @return object Link object for editing.\n *\/"}]},"wp_insert_link":{"name":"wp_insert_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$linkdata","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$wp_error","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Inserts\/updates links into\/in the database.\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $linkdata Elements that make up the link to insert.\n * @param bool  $wp_error Optional. Whether to return a WP_Error object on failure. Default false.\n * @return int|WP_Error Value 0 or WP_Error on failure. The link ID on success.\n *\/"}]},"wp_set_link_cats":{"name":"wp_set_link_cats","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$link_categories","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update link with the specified link categories.\n *\n * @since 2.1.0\n *\n * @param int   $link_id         ID of the link to update.\n * @param array $link_categories Array of link categories to add the link to.\n *\/"}]},"wp_update_link":{"name":"wp_update_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$linkdata","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates a link in the database.\n *\n * @since 2.0.0\n *\n * @param array $linkdata Link data to update.\n * @return int|WP_Error Value 0 or WP_Error on failure. The updated link ID on success.\n *\/"}]},"wp_link_manager_disabled_message":{"name":"wp_link_manager_disabled_message","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the 'disabled' message for the WordPress Link Manager.\n *\n * @since 3.5.0\n * @access private\n *\n * @global string $pagenow\n *\/"}]},"install_themes_feature_list":{"name":"install_themes_feature_list","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve list of WordPress theme features (aka theme tags)\n *\n * @since 2.8.0\n *\n * @deprecated since 3.1.0 Use get_theme_feature_list() instead.\n *\n * @return array\n *\/"}]},"install_theme_search_form":{"name":"install_theme_search_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type_selector","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display search form for searching themes.\n *\n * @since 2.8.0\n *\n * @param bool $type_selector\n *\/"}]},"install_themes_dashboard":{"name":"install_themes_dashboard","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display tags filter for themes.\n *\n * @since 2.8.0\n *\/"}]},"install_themes_upload":{"name":"install_themes_upload","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 2.8.0\n *\/"}]},"display_theme":{"name":"display_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints a theme on the Install Themes pages.\n *\n * @deprecated 3.4.0\n *\n * @global WP_Theme_Install_List_Table $wp_list_table\n *\n * @param object $theme\n *\/"}]},"display_themes":{"name":"display_themes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display theme content based on theme list.\n *\n * @since 2.8.0\n *\n * @global WP_Theme_Install_List_Table $wp_list_table\n *\/"}]},"install_theme_information":{"name":"install_theme_information","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display theme information in dialog box form.\n *\n * @since 2.8.0\n *\n * @global WP_Theme_Install_List_Table $wp_list_table\n *\/"}]},"plugins_api":{"name":"plugins_api","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * WordPress Plugin Install Administration API\n *\n * @package WordPress\n * @subpackage Administration\n *\/"},{"phpdoc":"\/**\n * Retrieves plugin installer pages from the WordPress.org Plugins API.\n *\n * It is possible for a plugin to override the Plugin API result with three\n * filters. Assume this is for plugins, which can extend on the Plugin Info to\n * offer more choices. This is very powerful and must be used with care when\n * overriding the filters.\n *\n * The first filter, {@see 'plugins_api_args'}, is for the args and gives the action\n * as the second parameter. The hook for {@see 'plugins_api_args'} must ensure that\n * an object is returned.\n *\n * The second filter, {@see 'plugins_api'}, allows a plugin to override the WordPress.org\n * Plugin Install API entirely. If `$action` is 'query_plugins' or 'plugin_information',\n * an object MUST be passed. If `$action` is 'hot_tags' or 'hot_categories', an array MUST\n * be passed.\n *\n * Finally, the third filter, {@see 'plugins_api_result'}, makes it possible to filter the\n * response object or array, depending on the `$action` type.\n *\n * Supported arguments per action:\n *\n * | Argument Name        | query_plugins | plugin_information | hot_tags | hot_categories |\n * | -------------------- | :-----------: | :----------------: | :------: | :------------: |\n * | `$slug`              | No            |  Yes               | No       | No             |\n * | `$per_page`          | Yes           |  No                | No       | No             |\n * | `$page`              | Yes           |  No                | No       | No             |\n * | `$number`            | No            |  No                | Yes      | Yes            |\n * | `$search`            | Yes           |  No                | No       | No             |\n * | `$tag`               | Yes           |  No                | No       | No             |\n * | `$author`            | Yes           |  No                | No       | No             |\n * | `$user`              | Yes           |  No                | No       | No             |\n * | `$browse`            | Yes           |  No                | No       | No             |\n * | `$locale`            | Yes           |  Yes               | No       | No             |\n * | `$installed_plugins` | Yes           |  No                | No       | No             |\n * | `$is_ssl`            | Yes           |  Yes               | No       | No             |\n * | `$fields`            | Yes           |  Yes               | No       | No             |\n *\n * @since 2.7.0\n *\n * @param string       $action API action to perform: 'query_plugins', 'plugin_information',\n *                             'hot_tags' or 'hot_categories'.\n * @param array|object $args   {\n *     Optional. Array or object of arguments to serialize for the Plugin Info API.\n *\n *     @type string  $slug              The plugin slug. Default empty.\n *     @type int     $per_page          Number of plugins per page. Default 24.\n *     @type int     $page              Number of current page. Default 1.\n *     @type int     $number            Number of tags or categories to be queried.\n *     @type string  $search            A search term. Default empty.\n *     @type string  $tag               Tag to filter plugins. Default empty.\n *     @type string  $author            Username of an plugin author to filter plugins. Default empty.\n *     @type string  $user              Username to query for their favorites. Default empty.\n *     @type string  $browse            Browse view: 'popular', 'new', 'beta', 'recommended'.\n *     @type string  $locale            Locale to provide context-sensitive results. Default is the value\n *                                      of get_locale().\n *     @type string  $installed_plugins Installed plugins to provide context-sensitive results.\n *     @type bool    $is_ssl            Whether links should be returned with https or not. Default false.\n *     @type array   $fields            {\n *         Array of fields which should or should not be returned.\n *\n *         @type bool $short_description Whether to return the plugin short description. Default true.\n *         @type bool $description       Whether to return the plugin full description. Default false.\n *         @type bool $sections          Whether to return the plugin readme sections: description, installation,\n *                                       FAQ, screenshots, other notes, and changelog. Default false.\n *         @type bool $tested            Whether to return the 'Compatible up to' value. Default true.\n *         @type bool $requires          Whether to return the required WordPress version. Default true.\n *         @type bool $rating            Whether to return the rating in percent and total number of ratings.\n *                                       Default true.\n *         @type bool $ratings           Whether to return the number of rating for each star (1-5). Default true.\n *         @type bool $downloaded        Whether to return the download count. Default true.\n *         @type bool $downloadlink      Whether to return the download link for the package. Default true.\n *         @type bool $last_updated      Whether to return the date of the last update. Default true.\n *         @type bool $added             Whether to return the date when the plugin was added to the wordpress.org\n *                                       repository. Default true.\n *         @type bool $tags              Whether to return the assigned tags. Default true.\n *         @type bool $compatibility     Whether to return the WordPress compatibility list. Default true.\n *         @type bool $homepage          Whether to return the plugin homepage link. Default true.\n *         @type bool $versions          Whether to return the list of all available versions. Default false.\n *         @type bool $donate_link       Whether to return the donation link. Default true.\n *         @type bool $reviews           Whether to return the plugin reviews. Default false.\n *         @type bool $banners           Whether to return the banner images links. Default false.\n *         @type bool $icons             Whether to return the icon links. Default false.\n *         @type bool $active_installs   Whether to return the number of active installs. Default false.\n *         @type bool $group             Whether to return the assigned group. Default false.\n *         @type bool $contributors      Whether to return the list of contributors. Default false.\n *     }\n * }\n * @return object|array|WP_Error Response object or array on success, WP_Error on failure. See the\n *         {@link https:\/\/developer.wordpress.org\/reference\/functions\/plugins_api\/ function reference article}\n *         for more information on the make-up of possible return values depending on the value of `$action`.\n *\/"}]},"install_popular_tags":{"name":"install_popular_tags","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve popular WordPress plugin tags.\n *\n * @since 2.7.0\n *\n * @param array $args\n * @return array\n *\/"}]},"install_dashboard":{"name":"install_dashboard","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 2.7.0\n *\/"}]},"install_search_form":{"name":"install_search_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$deprecated","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays a search form for searching plugins.\n *\n * @since 2.7.0\n * @since 4.6.0 The `$type_selector` parameter was deprecated.\n *\n * @param bool $deprecated Not used.\n *\/"}]},"install_plugins_upload":{"name":"install_plugins_upload","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Upload from zip\n * @since 2.8.0\n *\/"}]},"install_plugins_favorites_form":{"name":"install_plugins_favorites_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Show a username form for the favorites page\n * @since 3.5.0\n *\n *\/"}]},"display_plugins_table":{"name":"display_plugins_table","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display plugin content based on plugin list.\n *\n * @since 2.7.0\n *\n * @global WP_List_Table $wp_list_table\n *\/"}]},"install_plugin_install_status":{"name":"install_plugin_install_status","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$api","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$loop","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine the status we can perform on a plugin.\n *\n * @since 3.0.0\n *\n * @param  array|object $api  Data about the plugin retrieved from the API.\n * @param  bool         $loop Optional. Disable further loops. Default false.\n * @return array {\n *     Plugin installation status data.\n *\n *     @type string $status  Status of a plugin. Could be one of 'install', 'update_available', 'latest_installed' or 'newer_installed'.\n *     @type string $url     Plugin installation URL.\n *     @type string $version The most recent version of the plugin.\n *     @type string $file    Plugin filename relative to the plugins directory.\n * }\n *\/"}]},"install_plugin_information":{"name":"install_plugin_information","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display plugin information in dialog box form.\n *\n * @since 2.7.0\n *\n * @global string $tab\n *\/"}]},"comment_exists":{"name":"comment_exists","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_author","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment_date","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$timezone","rank":2,"variadic":false,"reference":false,"default":"'blog'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine if a comment exists based on author and date.\n *\n * For best performance, use `$timezone = 'gmt'`, which queries a field that is properly indexed. The default value\n * for `$timezone` is 'blog' for legacy reasons.\n *\n * @since 2.0.0\n * @since 4.4.0 Added the `$timezone` parameter.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $comment_author Author of the comment.\n * @param string $comment_date   Date of the comment.\n * @param string $timezone       Timezone. Accepts 'blog' or 'gmt'. Default 'blog'.\n *\n * @return mixed Comment post ID on success.\n *\/"},{"phpdoc":"\/**\n * WordPress Comment Administration API.\n *\n * @package WordPress\n * @subpackage Administration\n * @since 2.3.0\n *\/"}]},"edit_comment":{"name":"edit_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update a comment with values provided in $_POST.\n *\n * @since 2.0.0\n *\/"}]},"get_comment_to_edit":{"name":"get_comment_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns a WP_Comment object based on comment ID.\n *\n * @since 2.0.0\n *\n * @param int $id ID of comment to retrieve.\n * @return WP_Comment|false Comment if found. False on failure.\n *\/"}]},"get_pending_comments_num":{"name":"get_pending_comments_num","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the number of pending comments on a post or posts\n *\n * @since 2.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|array $post_id Either a single Post ID or an array of Post IDs\n * @return int|array Either a single Posts pending comments as an int or an array of ints keyed on the Post IDs\n *\/"}]},"floated_admin_avatar":{"name":"floated_admin_avatar","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add avatars to relevant places in admin, or try to.\n *\n * @since 2.5.0\n *\n * @param string $name User name.\n * @return string Avatar with Admin name.\n *\/"}]},"enqueue_comment_hotkeys_js":{"name":"enqueue_comment_hotkeys_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 2.7.0\n *\/"}]},"comment_footer_die":{"name":"comment_footer_die","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$msg","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display error message at bottom of comments.\n *\n * @param string $msg Error Message. Assumed to contain HTML and be sanitized.\n *\/"}]},"_wp_ajax_menu_quick_search":{"name":"_wp_ajax_menu_quick_search","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints the appropriate response to a menu quick search.\n *\n * @since 3.0.0\n *\n * @param array $request The unsanitized request values.\n *\/"}]},"wp_nav_menu_setup":{"name":"wp_nav_menu_setup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register nav menu meta boxes and advanced menu items.\n *\n * @since 3.0.0\n **\/"}]},"wp_initial_nav_menu_meta_boxes":{"name":"wp_initial_nav_menu_meta_boxes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Limit the amount of meta boxes to pages, posts, links, and categories for first time users.\n *\n * @since 3.0.0\n *\n * @global array $wp_meta_boxes\n **\/"}]},"wp_nav_menu_post_type_meta_boxes":{"name":"wp_nav_menu_post_type_meta_boxes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates meta boxes for any post type menu item..\n *\n * @since 3.0.0\n *\/"}]},"wp_nav_menu_taxonomy_meta_boxes":{"name":"wp_nav_menu_taxonomy_meta_boxes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates meta boxes for any taxonomy menu item.\n *\n * @since 3.0.0\n *\/"}]},"wp_nav_menu_disabled_check":{"name":"wp_nav_menu_disabled_check","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$nav_menu_selected_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether to disable the Menu Locations meta box submit button\n *\n * @since 3.6.0\n *\n * @global bool $one_theme_location_no_menus to determine if no menus exist\n *\n * @param int|string $nav_menu_selected_id (id, name or slug) of the currently-selected menu\n * @return string Disabled attribute if at least one menu exists, false if not\n *\/"}]},"wp_nav_menu_item_link_meta_box":{"name":"wp_nav_menu_item_link_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays a meta box for the custom links menu item.\n *\n * @since 3.0.0\n *\n * @global int        $_nav_menu_placeholder\n * @global int|string $nav_menu_selected_id\n *\/"}]},"wp_nav_menu_item_post_type_meta_box":{"name":"wp_nav_menu_item_post_type_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$box","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays a meta box for a post type menu item.\n *\n * @since 3.0.0\n *\n * @global int        $_nav_menu_placeholder\n * @global int|string $nav_menu_selected_id\n *\n * @param string $object Not used.\n * @param array  $box {\n *     Post type menu item meta box arguments.\n *\n *     @type string       $id       Meta box 'id' attribute.\n *     @type string       $title    Meta box title.\n *     @type string       $callback Meta box display callback.\n *     @type WP_Post_Type $args     Extra meta box arguments (the post type object for this meta box).\n * }\n *\/"}]},"wp_nav_menu_item_taxonomy_meta_box":{"name":"wp_nav_menu_item_taxonomy_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$box","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays a meta box for a taxonomy menu item.\n *\n * @since 3.0.0\n *\n * @global int|string $nav_menu_selected_id\n *\n * @param string $object Not used.\n * @param array  $box {\n *     Taxonomy menu item meta box arguments.\n *\n *     @type string $id       Meta box 'id' attribute.\n *     @type string $title    Meta box title.\n *     @type string $callback Meta box display callback.\n *     @type object $args     Extra meta box arguments (the taxonomy object for this meta box).\n * }\n *\/"}]},"wp_save_nav_menu_items":{"name":"wp_save_nav_menu_items","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$menu_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_data","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Save posted nav menu item data.\n *\n * @since 3.0.0\n *\n * @param int $menu_id The menu ID for which to save this item. $menu_id of 0 makes a draft, orphaned menu item.\n * @param array $menu_data The unsanitized posted menu item data.\n * @return array The database IDs of the items saved\n *\/"}]},"_wp_nav_menu_meta_box_object":{"name":"_wp_nav_menu_meta_box_object","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds custom arguments to some of the meta box object types.\n *\n * @since 3.0.0\n *\n * @access private\n *\n * @param object $object The post type or taxonomy meta-object.\n * @return object The post type of taxonomy object.\n *\/"}]},"wp_get_nav_menu_to_edit":{"name":"wp_get_nav_menu_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$menu_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the menu formatted to edit.\n *\n * @since 3.0.0\n *\n * @param int $menu_id Optional. The ID of the menu to format. Default 0.\n * @return string|WP_Error $output The menu formatted to edit or error object on failure.\n *\/"}]},"wp_nav_menu_manage_columns":{"name":"wp_nav_menu_manage_columns","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the columns for the nav menus page.\n *\n * @since 3.0.0\n *\n * @return array Columns.\n *\/"}]},"_wp_delete_orphaned_draft_menu_items":{"name":"_wp_delete_orphaned_draft_menu_items","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deletes orphaned draft menu items\n *\n * @access private\n * @since 3.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"wp_nav_menu_update_menu_items":{"name":"wp_nav_menu_update_menu_items","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$nav_menu_selected_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$nav_menu_selected_title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Saves nav menu items\n *\n * @since 3.6.0\n *\n * @param int|string $nav_menu_selected_id (id, slug, or name ) of the currently-selected menu\n * @param string $nav_menu_selected_title Title of the currently-selected menu\n * @return array $messages The menu updated message\n *\/"}]},"_wp_expand_nav_menu_post_data":{"name":"_wp_expand_nav_menu_post_data","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * If a JSON blob of navigation menu data is in POST data, expand it and inject\n * it into `$_POST` to avoid PHP `max_input_vars` limitations. See #14134.\n *\n * @ignore\n * @since 4.5.3\n * @access private\n *\/"}]},"options_discussion_add_js":{"name":"options_discussion_add_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * WordPress Options Administration API.\n *\n * @package WordPress\n * @subpackage Administration\n * @since 4.4.0\n *\/"},{"phpdoc":"\/**\n * Output JavaScript to toggle display of additional settings if avatars are disabled.\n *\n * @since 4.2.0\n *\/"}]},"options_general_add_js":{"name":"options_general_add_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display JavaScript on the page.\n *\n * @since 3.5.0\n *\/"}]},"options_permalink_add_js":{"name":"options_permalink_add_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display JavaScript on the page.\n *\n * @since 3.5.0\n *\/"}]},"options_reading_add_js":{"name":"options_reading_add_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display JavaScript on the page.\n *\n * @since 3.5.0\n *\/"}]},"options_reading_blog_charset":{"name":"options_reading_blog_charset","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the site charset setting.\n *\n * @since 3.5.0\n *\/"}]},"translations_api":{"name":"translations_api","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * WordPress Translation Install Administration API\n *\n * @package WordPress\n * @subpackage Administration\n *\/"},{"phpdoc":"\/**\n * Retrieve translations from WordPress Translation API.\n *\n * @since 4.0.0\n *\n * @param string       $type Type of translations. Accepts 'plugins', 'themes', 'core'.\n * @param array|object $args Translation API arguments. Optional.\n * @return object|WP_Error On success an object of translations, WP_Error on failure.\n *\/"}]},"wp_get_available_translations":{"name":"wp_get_available_translations","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get available translations from the WordPress.org API.\n *\n * @since 4.0.0\n *\n * @see translations_api()\n *\n * @return array Array of translations, each an array of data. If the API response results\n *               in an error, an empty array will be returned.\n *\/"}]},"wp_install_language_form":{"name":"wp_install_language_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$languages","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output the select form for the language selection on the installation screen.\n *\n * @since 4.0.0\n *\n * @global string $wp_local_package\n *\n * @param array $languages Array of available languages (populated via the Translation API).\n *\/"}]},"wp_download_language_pack":{"name":"wp_download_language_pack","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$download","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Download a language pack.\n *\n * @since 4.0.0\n *\n * @see wp_get_available_translations()\n *\n * @param string $download Language code to download.\n * @return string|bool Returns the language code if successfully downloaded\n *                     (or already installed), or false on failure.\n *\/"}]},"wp_can_install_language_pack":{"name":"wp_can_install_language_pack","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if WordPress has access to the filesystem without asking for\n * credentials.\n *\n * @since 4.0.0\n *\n * @return bool Returns true on success, false on failure.\n *\/"}]},"wp_get_db_schema":{"name":"wp_get_db_schema","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$scope","rank":0,"variadic":false,"reference":false,"default":"'all'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the SQL for creating database tables.\n *\n * @since 3.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $scope Optional. The tables for which to retrieve SQL. Can be all, global, ms_global, or blog tables. Defaults to all.\n * @param int $blog_id Optional. The site ID for which to retrieve SQL. Default is the current site ID.\n * @return string The SQL needed to create the requested tables.\n *\/"}]},"populate_options":{"name":"populate_options","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create WordPress options and set the default values.\n *\n * @since 1.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n * @global int  $wp_db_version\n * @global int  $wp_current_db_version\n *\/"}]},"populate_roles":{"name":"populate_roles","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute WordPress role creation for the various WordPress versions.\n *\n * @since 2.0.0\n *\/"}]},"populate_roles_160":{"name":"populate_roles_160","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create the roles for WordPress 2.0\n *\n * @since 2.0.0\n *\/"}]},"populate_roles_210":{"name":"populate_roles_210","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create and modify WordPress roles for WordPress 2.1.\n *\n * @since 2.1.0\n *\/"}]},"populate_roles_230":{"name":"populate_roles_230","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create and modify WordPress roles for WordPress 2.3.\n *\n * @since 2.3.0\n *\/"}]},"populate_roles_250":{"name":"populate_roles_250","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create and modify WordPress roles for WordPress 2.5.\n *\n * @since 2.5.0\n *\/"}]},"populate_roles_260":{"name":"populate_roles_260","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create and modify WordPress roles for WordPress 2.6.\n *\n * @since 2.6.0\n *\/"}]},"populate_roles_270":{"name":"populate_roles_270","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create and modify WordPress roles for WordPress 2.7.\n *\n * @since 2.7.0\n *\/"}]},"populate_roles_280":{"name":"populate_roles_280","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create and modify WordPress roles for WordPress 2.8.\n *\n * @since 2.8.0\n *\/"}]},"populate_roles_300":{"name":"populate_roles_300","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create and modify WordPress roles for WordPress 3.0.\n *\n * @since 3.0.0\n *\/"}]},"install_network":{"name":"install_network","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[]},"populate_network":{"name":"populate_network","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$network_id","rank":0,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$email","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$site_name","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":4,"variadic":false,"reference":false,"default":"'\/'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$subdomain_install","rank":5,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Populate network settings.\n *\n * @since 3.0.0\n *\n * @global wpdb       $wpdb\n * @global object     $current_site\n * @global int        $wp_db_version\n * @global WP_Rewrite $wp_rewrite\n *\n * @param int    $network_id        ID of network to populate.\n * @param string $domain            The domain name for the network (eg. \"example.com\").\n * @param string $email             Email address for the network administrator.\n * @param string $site_name         The name of the network.\n * @param string $path              Optional. The path to append to the network's domain name. Default '\/'.\n * @param bool   $subdomain_install Optional. Whether the network is a subdomain install or a subdirectory install.\n *                                  Default false, meaning the network is a subdirectory install.\n * @return bool|WP_Error True on success, or WP_Error on warning (with the install otherwise successful,\n *                       so the error code must be checked) or failure.\n *\/"}]},"wp_credits":{"name":"wp_credits","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the contributor credits.\n *\n * @since 3.2.0\n *\n * @return array|false A list of all of the contributors, or false on error.\n *\/"},{"phpdoc":"\/**\n * WordPress Credits Administration API.\n *\n * @package WordPress\n * @subpackage Administration\n * @since 4.4.0\n *\/"}]},"_wp_credits_add_profile_link":{"name":"_wp_credits_add_profile_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$display_name","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$username","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$profiles","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the link to a contributor's WordPress.org profile page.\n *\n * @access private\n * @since 3.2.0\n *\n * @param string $display_name  The contributor's display name, passed by reference.\n * @param string $username      The contributor's username.\n * @param string $profiles      URL to the contributor's WordPress.org profile page.\n *\/"}]},"_wp_credits_build_object_link":{"name":"_wp_credits_build_object_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the link to an external library used in WordPress.\n *\n * @access private\n * @since 3.2.0\n *\n * @param string $data External library data, passed by reference.\n *\/"}]},"network_domain_check":{"name":"network_domain_check","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check for an existing network.\n *\n * @since 3.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @return Whether a network exists.\n *\/"},{"phpdoc":"\/**\n * WordPress Network Administration API.\n *\n * @package WordPress\n * @subpackage Administration\n * @since 4.4.0\n *\/"}]},"allow_subdomain_install":{"name":"allow_subdomain_install","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Allow subdomain install\n *\n * @since 3.0.0\n * @return bool Whether subdomain install is allowed\n *\/"}]},"allow_subdirectory_install":{"name":"allow_subdirectory_install","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Allow subdirectory install.\n *\n * @since 3.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @return bool Whether subdirectory install is allowed\n *\/"}]},"get_clean_basedomain":{"name":"get_clean_basedomain","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get base domain of network.\n *\n * @since 3.0.0\n * @return string Base domain.\n *\/"}]},"network_step1":{"name":"network_step1","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$errors","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints step 1 for Network installation process.\n *\n * @todo Realistically, step 1 should be a welcome screen explaining what a Network is and such. Navigating to Tools > Network\n * \tshould not be a sudden \"Welcome to a new install process! Fill this out and click here.\" See also contextual help todo.\n *\n * @since 3.0.0\n *\n * @global bool $is_apache\n *\n * @param WP_Error $errors\n *\/"}]},"network_step2":{"name":"network_step2","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$errors","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints step 2 for Network installation process.\n *\n * @since 3.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param WP_Error $errors\n *\/"}]},"wp_image_editor":{"name":"wp_image_editor","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$msg","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * WordPress Image Editor\n *\n * @package WordPress\n * @subpackage Administration\n *\/"},{"phpdoc":"\/**\n * Loads the WP image-editing interface.\n *\n * @param int         $post_id Post ID.\n * @param bool|object $msg     Optional. Message to display for image editor updates or errors.\n *                             Default false.\n *\/"}]},"wp_stream_image":{"name":"wp_stream_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$image","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mime_type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Streams image in WP_Image_Editor to browser.\n * Provided for backcompat reasons\n *\n * @param WP_Image_Editor $image\n * @param string $mime_type\n * @param int $post_id\n * @return bool\n *\/"}]},"wp_save_image_file":{"name":"wp_save_image_file","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$image","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mime_type","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Saves Image to File\n *\n * @param string $filename\n * @param WP_Image_Editor $image\n * @param string $mime_type\n * @param int $post_id\n * @return bool\n *\/"}]},"_image_get_preview_ratio":{"name":"_image_get_preview_ratio","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$w","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$h","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Image preview ratio. Internal use only.\n *\n * @since 2.9.0\n *\n * @ignore\n * @param int $w Image width in pixels.\n * @param int $h Image height in pixels.\n * @return float|int Image preview ratio.\n *\/"}]},"_rotate_image_resource":{"name":"_rotate_image_resource","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$img","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$angle","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns an image resource. Internal use only.\n *\n * @since 2.9.0\n *\n * @ignore\n * @param resource  $img   Image resource.\n * @param float|int $angle Image rotation angle, in degrees.\n * @return resource|false GD image resource, false otherwise.\n *\/"}]},"_flip_image_resource":{"name":"_flip_image_resource","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$img","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$horz","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$vert","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Flips an image resource. Internal use only.\n *\n * @since 2.9.0\n *\n * @ignore\n * @param resource $img  Image resource.\n * @param bool     $horz Whether to flip horizontally.\n * @param bool     $vert Whether to flip vertically.\n * @return resource (maybe) flipped image resource.\n *\/"}]},"_crop_image_resource":{"name":"_crop_image_resource","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$img","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$x","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$y","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$w","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$h","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Crops an image resource. Internal use only.\n *\n * @since 2.9.0\n *\n * @ignore\n * @param resource $img Image resource.\n * @param float    $x   Source point x-coordinate.\n * @param float    $y   Source point y-cooredinate.\n * @param float    $w   Source width.\n * @param float    $h   Source height.\n * @return resource (maybe) cropped image resource.\n *\/"}]},"image_edit_apply_changes":{"name":"image_edit_apply_changes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$image","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$changes","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Performs group of changes on Editor specified.\n *\n * @since 2.9.0\n *\n * @param WP_Image_Editor $image   WP_Image_Editor instance.\n * @param array           $changes Array of change operations.\n * @return WP_Image_Editor WP_Image_Editor instance with changes applied.\n *\/"}]},"stream_preview_image":{"name":"stream_preview_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Streams image in post to browser, along with enqueued changes\n * in $_REQUEST['history']\n *\n * @param int $post_id\n * @return bool\n *\/"}]},"wp_restore_image":{"name":"wp_restore_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Restores the metadata for a given attachment.\n *\n * @since 2.9.0\n *\n * @param int $post_id Attachment post ID.\n * @return stdClass Image restoration message object.\n *\/"}]},"wp_save_image":{"name":"wp_save_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Saves image to post along with enqueued changes\n * in $_REQUEST['history']\n *\n * @param int $post_id\n * @return \\stdClass\n *\/"}]},"wp_category_checklist":{"name":"wp_category_checklist","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$descendants_and_self","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$selected_cats","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$popular_cats","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$walker","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$checked_ontop","rank":5,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output an unordered list of checkbox input elements labeled with category names.\n *\n * @since 2.5.1\n *\n * @see wp_terms_checklist()\n *\n * @param int    $post_id              Optional. Post to generate a categories checklist for. Default 0.\n *                                     $selected_cats must not be an array. Default 0.\n * @param int    $descendants_and_self Optional. ID of the category to output along with its descendants.\n *                                     Default 0.\n * @param array  $selected_cats        Optional. List of categories to mark as checked. Default false.\n * @param array  $popular_cats         Optional. List of categories to receive the \"popular-category\" class.\n *                                     Default false.\n * @param object $walker               Optional. Walker object to use to build the output.\n *                                     Default is a Walker_Category_Checklist instance.\n * @param bool   $checked_ontop        Optional. Whether to move checked items out of the hierarchy and to\n *                                     the top of the list. Default true.\n *\/"}]},"wp_terms_checklist":{"name":"wp_terms_checklist","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output an unordered list of checkbox input elements labelled with term names.\n *\n * Taxonomy-independent version of wp_category_checklist().\n *\n * @since 3.0.0\n * @since 4.4.0 Introduced the `$echo` argument.\n *\n * @param int          $post_id Optional. Post ID. Default 0.\n * @param array|string $args {\n *     Optional. Array or string of arguments for generating a terms checklist. Default empty array.\n *\n *     @type int    $descendants_and_self ID of the category to output along with its descendants.\n *                                        Default 0.\n *     @type array  $selected_cats        List of categories to mark as checked. Default false.\n *     @type array  $popular_cats         List of categories to receive the \"popular-category\" class.\n *                                        Default false.\n *     @type object $walker               Walker object to use to build the output.\n *                                        Default is a Walker_Category_Checklist instance.\n *     @type string $taxonomy             Taxonomy to generate the checklist for. Default 'category'.\n *     @type bool   $checked_ontop        Whether to move checked items out of the hierarchy and to\n *                                        the top of the list. Default true.\n *     @type bool   $echo                 Whether to echo the generated markup. False to return the markup instead\n *                                        of echoing it. Default true.\n * }\n *\/"}]},"wp_popular_terms_checklist":{"name":"wp_popular_terms_checklist","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$number","rank":2,"variadic":false,"reference":false,"default":"10","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":3,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve a list of the most popular terms from the specified taxonomy.\n *\n * If the $echo argument is true then the elements for a list of checkbox\n * `<input>` elements labelled with the names of the selected terms is output.\n * If the $post_ID global isn't empty then the terms associated with that\n * post will be marked as checked.\n *\n * @since 2.5.0\n *\n * @param string $taxonomy Taxonomy to retrieve terms from.\n * @param int $default Not used.\n * @param int $number Number of terms to retrieve. Defaults to 10.\n * @param bool $echo Optionally output the list as well. Defaults to true.\n * @return array List of popular term IDs.\n *\/"}]},"wp_link_category_checklist":{"name":"wp_link_category_checklist","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs a link category checklist element.\n *\n * @since 2.5.1\n *\n * @param int $link_id\n *\/"}]},"get_inline_data":{"name":"get_inline_data","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds hidden fields with the data for use in the inline editor for posts and pages.\n *\n * @since 2.7.0\n *\n * @param WP_Post $post Post object.\n *\/"}]},"wp_comment_reply":{"name":"wp_comment_reply","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$position","rank":0,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$checkbox","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mode","rank":2,"variadic":false,"reference":false,"default":"'single'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$table_row","rank":3,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the in-line comment reply-to form in the Comments list table.\n *\n * @since 2.7.0\n *\n * @global WP_List_Table $wp_list_table\n *\n * @param int    $position\n * @param bool   $checkbox\n * @param string $mode\n * @param bool   $table_row\n *\/"}]},"wp_comment_trashnotice":{"name":"wp_comment_trashnotice","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output 'undo move to trash' text for comments\n *\n * @since 2.9.0\n *\/"}]},"list_meta":{"name":"list_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$meta","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs a post's public meta data in the Custom Fields meta box.\n *\n * @since 1.2.0\n *\n * @param array $meta\n *\/"}]},"_list_meta_row":{"name":"_list_meta_row","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$entry","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$count","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs a single row of public meta data in the Custom Fields meta box.\n *\n * @since 2.5.0\n *\n * @staticvar string $update_nonce\n *\n * @param array $entry\n * @param int   $count\n * @return string\n *\/"}]},"meta_form":{"name":"meta_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints the form in the Custom Fields meta box.\n *\n * @since 1.2.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param WP_Post $post Optional. The post being edited.\n *\/"}]},"touch_time":{"name":"touch_time","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$edit","rank":0,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$for_post","rank":1,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tab_index","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$multi","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print out HTML form date elements for editing post or comment publish date.\n *\n * @since 0.71\n * @since 4.4.0 Converted to use get_comment() instead of the global `$comment`.\n *\n * @global WP_Locale  $wp_locale\n *\n * @param int|bool $edit      Accepts 1|true for editing the date, 0|false for adding the date.\n * @param int|bool $for_post  Accepts 1|true for applying the date to a post, 0|false for a comment.\n * @param int      $tab_index The tabindex attribute to add. Default 0.\n * @param int|bool $multi     Optional. Whether the additional fields and buttons should be added.\n *                            Default 0|false.\n *\/"}]},"page_template_dropdown":{"name":"page_template_dropdown","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$default","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_type","rank":1,"variadic":false,"reference":false,"default":"'page'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print out option HTML elements for the page templates drop-down.\n *\n * @since 1.5.0\n * @since 4.7.0 Added the `$post_type` parameter.\n *\n * @param string $default   Optional. The template file name. Default empty.\n * @param string $post_type Optional. Post type to get templates for. Default 'post'.\n *\/"}]},"parent_dropdown":{"name":"parent_dropdown","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$default","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$level","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print out option HTML elements for the page parents drop-down.\n *\n * @since 1.5.0\n * @since 4.4.0 `$post` argument was added.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int         $default Optional. The default page ID to be pre-selected. Default 0.\n * @param int         $parent  Optional. The parent page ID. Default 0.\n * @param int         $level   Optional. Page depth level. Default 0.\n * @param int|WP_Post $post    Post ID or WP_Post object.\n *\n * @return null|false Boolean False if page has no children, otherwise print out html elements\n *\/"}]},"wp_dropdown_roles":{"name":"wp_dropdown_roles","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$selected","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print out option html elements for role selectors.\n *\n * @since 2.1.0\n *\n * @param string $selected Slug for the role that should be already selected.\n *\/"}]},"wp_import_upload_form":{"name":"wp_import_upload_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the form used by the importers to accept the data to be imported\n *\n * @since 2.0.0\n *\n * @param string $action The action attribute for the form.\n *\/"}]},"add_meta_box":{"name":"add_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$screen","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":4,"variadic":false,"reference":false,"default":"'advanced'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$priority","rank":5,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback_args","rank":6,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds a meta box to one or more screens.\n *\n * @since 2.5.0\n * @since 4.4.0 The `$screen` parameter now accepts an array of screen IDs.\n *\n * @global array $wp_meta_boxes\n *\n * @param string                 $id            Meta box ID (used in the 'id' attribute for the meta box).\n * @param string                 $title         Title of the meta box.\n * @param callable               $callback      Function that fills the box with the desired content.\n *                                              The function should echo its output.\n * @param string|array|WP_Screen $screen        Optional. The screen or screens on which to show the box\n *                                              (such as a post type, 'link', or 'comment'). Accepts a single\n *                                              screen ID, WP_Screen object, or array of screen IDs. Default\n *                                              is the current screen.\n * @param string                 $context       Optional. The context within the screen where the boxes\n *                                              should display. Available contexts vary from screen to\n *                                              screen. Post edit screen contexts include 'normal', 'side',\n *                                              and 'advanced'. Comments screen contexts include 'normal'\n *                                              and 'side'. Menus meta boxes (accordion sections) all use\n *                                              the 'side' context. Global default is 'advanced'.\n * @param string                 $priority      Optional. The priority within the context where the boxes\n *                                              should show ('high', 'low'). Default 'default'.\n * @param array                  $callback_args Optional. Data that should be set as the $args property\n *                                              of the box array (which is the second parameter passed\n *                                              to your callback). Default null.\n *\/"}]},"do_meta_boxes":{"name":"do_meta_boxes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$screen","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Meta-Box template function\n *\n * @since 2.5.0\n *\n * @global array $wp_meta_boxes\n *\n * @staticvar bool $already_sorted\n * @param string|WP_Screen $screen  Screen identifier\n * @param string           $context box context\n * @param mixed            $object  gets passed to the box callback function as first parameter\n * @return int number of meta_boxes\n *\/"}]},"remove_meta_box":{"name":"remove_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$screen","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes a meta box from one or more screens.\n *\n * @since 2.6.0\n * @since 4.4.0 The `$screen` parameter now accepts an array of screen IDs.\n *\n * @global array $wp_meta_boxes\n *\n * @param string                 $id      Meta box ID (used in the 'id' attribute for the meta box).\n * @param string|array|WP_Screen $screen  The screen or screens on which the meta box is shown (such as a\n *                                        post type, 'link', or 'comment'). Accepts a single screen ID,\n *                                        WP_Screen object, or array of screen IDs.\n * @param string                 $context The context within the screen where the box is set to display.\n *                                        Contexts vary from screen to screen. Post edit screen contexts\n *                                        include 'normal', 'side', and 'advanced'. Comments screen contexts\n *                                        include 'normal' and 'side'. Menus meta boxes (accordion sections)\n *                                        all use the 'side' context.\n *\/"}]},"do_accordion_sections":{"name":"do_accordion_sections","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$screen","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Meta Box Accordion Template Function\n *\n * Largely made up of abstracted code from do_meta_boxes(), this\n * function serves to build meta boxes as list items for display as\n * a collapsible accordion.\n *\n * @since 3.6.0\n *\n * @uses global $wp_meta_boxes Used to retrieve registered meta boxes.\n *\n * @param string|object $screen  The screen identifier.\n * @param string        $context The meta box context.\n * @param mixed         $object  gets passed to the section callback function as first parameter.\n * @return int number of meta boxes as accordion sections.\n *\/"}]},"add_settings_section":{"name":"add_settings_section","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$page","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a new section to a settings page.\n *\n * Part of the Settings API. Use this to define new settings sections for an admin page.\n * Show settings sections in your admin page callback function with do_settings_sections().\n * Add settings fields to your section with add_settings_field()\n *\n * The $callback argument should be the name of a function that echoes out any\n * content you want to show at the top of the settings section before the actual\n * fields. It can output nothing if you want.\n *\n * @since 2.7.0\n *\n * @global $wp_settings_sections Storage array of all settings sections added to admin pages\n *\n * @param string   $id       Slug-name to identify the section. Used in the 'id' attribute of tags.\n * @param string   $title    Formatted title of the section. Shown as the heading for the section.\n * @param callable $callback Function that echos out any content at the top of the section (between heading and fields).\n * @param string   $page     The slug-name of the settings page on which to show the section. Built-in pages include\n *                           'general', 'reading', 'writing', 'discussion', 'media', etc. Create your own using\n *                           add_options_page();\n *\/"}]},"add_settings_field":{"name":"add_settings_field","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$page","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$section","rank":4,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":5,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a new field to a section of a settings page\n *\n * Part of the Settings API. Use this to define a settings field that will show\n * as part of a settings section inside a settings page. The fields are shown using\n * do_settings_fields() in do_settings-sections()\n *\n * The $callback argument should be the name of a function that echoes out the\n * html input tags for this setting field. Use get_option() to retrieve existing\n * values to show.\n *\n * @since 2.7.0\n * @since 4.2.0 The `$class` argument was added.\n *\n * @global $wp_settings_fields Storage array of settings fields and info about their pages\/sections\n *\n * @param string   $id       Slug-name to identify the field. Used in the 'id' attribute of tags.\n * @param string   $title    Formatted title of the field. Shown as the label for the field\n *                           during output.\n * @param callable $callback Function that fills the field with the desired form inputs. The\n *                           function should echo its output.\n * @param string   $page     The slug-name of the settings page on which to show the section\n *                           (general, reading, writing, ...).\n * @param string   $section  Optional. The slug-name of the section of the settings page\n *                           in which to show the box. Default 'default'.\n * @param array    $args {\n *     Optional. Extra arguments used when outputting the field.\n *\n *     @type string $label_for When supplied, the setting title will be wrapped\n *                             in a `<label>` element, its `for` attribute populated\n *                             with this value.\n *     @type string $class     CSS Class to be added to the `<tr>` element when the\n *                             field is output.\n * }\n *\/"}]},"do_settings_sections":{"name":"do_settings_sections","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints out all settings sections added to a particular settings page\n *\n * Part of the Settings API. Use this in a settings page callback function\n * to output all the sections and fields that were added to that $page with\n * add_settings_section() and add_settings_field()\n *\n * @global $wp_settings_sections Storage array of all settings sections added to admin pages\n * @global $wp_settings_fields Storage array of settings fields and info about their pages\/sections\n * @since 2.7.0\n *\n * @param string $page The slug name of the page whose settings sections you want to output\n *\/"}]},"do_settings_fields":{"name":"do_settings_fields","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$section","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print out the settings fields for a particular settings section\n *\n * Part of the Settings API. Use this in a settings page to output\n * a specific section. Should normally be called by do_settings_sections()\n * rather than directly.\n *\n * @global $wp_settings_fields Storage array of settings fields and their pages\/sections\n *\n * @since 2.7.0\n *\n * @param string $page Slug title of the admin page who's settings fields you want to show.\n * @param string $section Slug title of the settings section who's fields you want to show.\n *\/"}]},"add_settings_error":{"name":"add_settings_error","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$setting","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$code","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":3,"variadic":false,"reference":false,"default":"'error'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register a settings error to be displayed to the user\n *\n * Part of the Settings API. Use this to show messages to users about settings validation\n * problems, missing settings or anything else.\n *\n * Settings errors should be added inside the $sanitize_callback function defined in\n * register_setting() for a given setting to give feedback about the submission.\n *\n * By default messages will show immediately after the submission that generated the error.\n * Additional calls to settings_errors() can be used to show errors even when the settings\n * page is first accessed.\n *\n * @since 3.0.0\n *\n * @global array $wp_settings_errors Storage array of errors registered during this pageload\n *\n * @param string $setting Slug title of the setting to which this error applies\n * @param string $code    Slug-name to identify the error. Used as part of 'id' attribute in HTML output.\n * @param string $message The formatted message text to display to the user (will be shown inside styled\n *                        `<div>` and `<p>` tags).\n * @param string $type    Optional. Message type, controls HTML class. Accepts 'error' or 'updated'.\n *                        Default 'error'.\n *\/"}]},"get_settings_errors":{"name":"get_settings_errors","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$setting","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sanitize","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Fetch settings errors registered by add_settings_error()\n *\n * Checks the $wp_settings_errors array for any errors declared during the current\n * pageload and returns them.\n *\n * If changes were just submitted ($_GET['settings-updated']) and settings errors were saved\n * to the 'settings_errors' transient then those errors will be returned instead. This\n * is used to pass errors back across pageloads.\n *\n * Use the $sanitize argument to manually re-sanitize the option before returning errors.\n * This is useful if you have errors or notices you want to show even when the user\n * hasn't submitted data (i.e. when they first load an options page, or in the {@see 'admin_notices'}\n * action hook).\n *\n * @since 3.0.0\n *\n * @global array $wp_settings_errors Storage array of errors registered during this pageload\n *\n * @param string $setting Optional slug title of a specific setting who's errors you want.\n * @param boolean $sanitize Whether to re-sanitize the setting value before returning errors.\n * @return array Array of settings errors\n *\/"}]},"settings_errors":{"name":"settings_errors","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$setting","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sanitize","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$hide_on_update","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display settings errors registered by add_settings_error().\n *\n * Part of the Settings API. Outputs a div for each error retrieved by\n * get_settings_errors().\n *\n * This is called automatically after a settings page based on the\n * Settings API is submitted. Errors should be added during the validation\n * callback function for a setting defined in register_setting().\n *\n * The $sanitize option is passed into get_settings_errors() and will\n * re-run the setting sanitization\n * on its current value.\n *\n * The $hide_on_update option will cause errors to only show when the settings\n * page is first loaded. if the user has already saved new values it will be\n * hidden to avoid repeating messages already shown in the default error\n * reporting after submission. This is useful to show general errors like\n * missing settings when the user arrives at the settings page.\n *\n * @since 3.0.0\n *\n * @param string $setting        Optional slug title of a specific setting who's errors you want.\n * @param bool   $sanitize       Whether to re-sanitize the setting value before returning errors.\n * @param bool   $hide_on_update If set to true errors will not be shown if the settings page has\n *                               already been submitted.\n *\/"}]},"find_posts_div":{"name":"find_posts_div","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$found_action","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the modal window used for attaching media to posts or pages in the media-listing screen.\n *\n * @since 2.7.0\n *\n * @param string $found_action\n *\/"}]},"the_post_password":{"name":"the_post_password","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the post password.\n *\n * The password is passed through esc_attr() to ensure that it is safe for placing in an html attribute.\n *\n * @since 2.7.0\n *\/"}]},"_draft_or_post_title":{"name":"_draft_or_post_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the post title.\n *\n * The post title is fetched and if it is blank then a default string is\n * returned.\n *\n * @since 2.7.0\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @return string The post title if set.\n *\/"}]},"_admin_search_query":{"name":"_admin_search_query","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the search query.\n *\n * A simple wrapper to display the \"s\" parameter in a `GET` URI. This function\n * should only be used when the_search_query() cannot.\n *\n * @since 2.7.0\n *\/"}]},"iframe_header":{"name":"iframe_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Generic Iframe header for use with Thickbox\n *\n * @since 2.7.0\n *\n * @global string    $hook_suffix\n * @global string    $admin_body_class\n * @global WP_Locale $wp_locale\n *\n * @param string $title      Optional. Title of the Iframe page. Default empty.\n * @param bool   $deprecated Not used.\n *\/"}]},"iframe_footer":{"name":"iframe_footer","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Generic Iframe footer for use with Thickbox\n *\n * @since 2.7.0\n *\/"}]},"_post_states":{"name":"_post_states","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @param WP_Post $post\n *\/"}]},"_media_states":{"name":"_media_states","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @param WP_Post $post\n *\/"}]},"compression_test":{"name":"compression_test","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Test support for compressing JavaScript from PHP\n *\n * Outputs JavaScript that tests if compression from PHP works as expected\n * and sets an option with the result. Has no effect when the current user\n * is not an administrator. To run the test again the option 'can_compress_scripts'\n * has to be deleted.\n *\n * @since 2.8.0\n *\/"}]},"submit_button":{"name":"submit_button","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":1,"variadic":false,"reference":false,"default":"'primary'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":2,"variadic":false,"reference":false,"default":"'submit'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$wrap","rank":3,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$other_attributes","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Echoes a submit button, with provided text and appropriate class(es).\n *\n * @since 3.1.0\n *\n * @see get_submit_button()\n *\n * @param string       $text             The text of the button (defaults to 'Save Changes')\n * @param string       $type             Optional. The type and CSS class(es) of the button. Core values\n *                                       include 'primary', 'secondary', 'delete'. Default 'primary'\n * @param string       $name             The HTML name of the submit button. Defaults to \"submit\". If no\n *                                       id attribute is given in $other_attributes below, $name will be\n *                                       used as the button's id.\n * @param bool         $wrap             True if the output button should be wrapped in a paragraph tag,\n *                                       false otherwise. Defaults to true\n * @param array|string $other_attributes Other attributes that should be output with the button, mapping\n *                                       attributes to their values, such as setting tabindex to 1, etc.\n *                                       These key\/value attribute pairs will be output as attribute=\"value\",\n *                                       where attribute is the key. Other attributes can also be provided\n *                                       as a string such as 'tabindex=\"1\"', though the array format is\n *                                       preferred. Default null.\n *\/"}]},"get_submit_button":{"name":"get_submit_button","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":1,"variadic":false,"reference":false,"default":"'primary large'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":2,"variadic":false,"reference":false,"default":"'submit'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$wrap","rank":3,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$other_attributes","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns a submit button, with provided text and appropriate class\n *\n * @since 3.1.0\n *\n * @param string       $text             Optional. The text of the button. Default 'Save Changes'.\n * @param string       $type             Optional. The type of button. Accepts 'primary', 'secondary',\n *                                       or 'delete'. Default 'primary large'.\n * @param string       $name             Optional. The HTML name of the submit button. Defaults to \"submit\".\n *                                       If no id attribute is given in $other_attributes below, `$name` will\n *                                       be used as the button's id. Default 'submit'.\n * @param bool         $wrap             Optional. True if the output button should be wrapped in a paragraph\n *                                       tag, false otherwise. Default true.\n * @param array|string $other_attributes Optional. Other attributes that should be output with the button,\n *                                       mapping attributes to their values, such as `array( 'tabindex' => '1' )`.\n *                                       These attributes will be output as `attribute=\"value\"`, such as\n *                                       `tabindex=\"1\"`. Other attributes can also be provided as a string such\n *                                       as `tabindex=\"1\"`, though the array format is typically cleaner.\n *                                       Default empty.\n * @return string Submit button HTML.\n *\/"}]},"_wp_admin_html_begin":{"name":"_wp_admin_html_begin","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @global bool $is_IE\n *\/"}]},"convert_to_screen":{"name":"convert_to_screen","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$hook_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert a screen string to a screen object\n *\n * @since 3.0.0\n *\n * @param string $hook_name The hook name (also known as the hook suffix) used to determine the screen.\n * @return WP_Screen Screen object.\n *\/"}]},"_local_storage_notice":{"name":"_local_storage_notice","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output the HTML for restoring the post data from DOM storage\n *\n * @since 3.6.0\n * @access private\n *\/"}]},"wp_star_rating":{"name":"wp_star_rating","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output a HTML element with a star rating for a given rating.\n *\n * Outputs a HTML element with the star rating exposed on a 0..5 scale in\n * half star increments (ie. 1, 1.5, 2 stars). Optionally, if specified, the\n * number of ratings may also be displayed by passing the $number parameter.\n *\n * @since 3.8.0\n * @since 4.4.0 Introduced the `echo` parameter.\n *\n * @param array $args {\n *     Optional. Array of star ratings arguments.\n *\n *     @type int    $rating The rating to display, expressed in either a 0.5 rating increment,\n *                          or percentage. Default 0.\n *     @type string $type   Format that the $rating is in. Valid values are 'rating' (default),\n *                          or, 'percent'. Default 'rating'.\n *     @type int    $number The number of ratings that makes up this rating. Default 0.\n *     @type bool   $echo   Whether to echo the generated markup. False to return the markup instead\n *                          of echoing it. Default true.\n * }\n *\/"}]},"_wp_posts_page_notice":{"name":"_wp_posts_page_notice","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output a notice when editing the page for posts (internal use only).\n *\n * @ignore\n * @since 4.2.0\n *\/"}]},"media_upload_tabs":{"name":"media_upload_tabs","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Defines the default media upload tabs\n *\n * @since 2.5.0\n *\n * @return array default tabs\n *\/"},{"phpdoc":"\/**\n * WordPress Administration Media API.\n *\n * @package WordPress\n * @subpackage Administration\n *\/"}]},"update_gallery_tab":{"name":"update_gallery_tab","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tabs","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds the gallery tab back to the tabs array if post has image attachments\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $tabs\n * @return array $tabs with gallery if post has image attachment\n *\/"}]},"the_media_upload_tabs":{"name":"the_media_upload_tabs","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the legacy media upload tabs UI.\n *\n * @since 2.5.0\n *\n * @global string $redir_tab\n *\/"}]},"get_image_send_to_editor":{"name":"get_image_send_to_editor","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$caption","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$align","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$rel","rank":5,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":6,"variadic":false,"reference":false,"default":"'medium'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$alt","rank":7,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the image HTML to send to the editor.\n *\n * @since 2.5.0\n *\n * @param int          $id      Image attachment id.\n * @param string       $caption Image caption.\n * @param string       $title   Image title attribute.\n * @param string       $align   Image CSS alignment property.\n * @param string       $url     Optional. Image src URL. Default empty.\n * @param bool|string  $rel     Optional. Value for rel attribute or whether to add a default value. Default false.\n * @param string|array $size    Optional. Image size. Accepts any valid image size, or an array of width\n *                              and height values in pixels (in that order). Default 'medium'.\n * @param string       $alt     Optional. Image alt attribute. Default empty.\n * @return string The HTML output to insert into the editor.\n *\/"}]},"image_add_caption":{"name":"image_add_caption","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$html","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$caption","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$align","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":5,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":6,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$alt","rank":7,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds image shortcode with caption to editor\n *\n * @since 2.6.0\n *\n * @param string $html\n * @param integer $id\n * @param string $caption image caption\n * @param string $title image title attribute\n * @param string $align image css alignment property\n * @param string $url image src url\n * @param string $size image size (thumbnail, medium, large, full or added with add_image_size() )\n * @param string $alt image alt attribute\n * @return string\n *\/"}]},"_cleanup_image_add_caption":{"name":"_cleanup_image_add_caption","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Private preg_replace callback used in image_add_caption()\n *\n * @access private\n * @since 3.4.0\n *\/"}]},"media_send_to_editor":{"name":"media_send_to_editor","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$html","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds image html to editor\n *\n * @since 2.5.0\n *\n * @param string $html\n *\/"}]},"media_handle_upload":{"name":"media_handle_upload","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_data","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$overrides","rank":3,"variadic":false,"reference":false,"default":"array('test_form' => false)","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Save a file submitted from a POST request and create an attachment post for it.\n *\n * @since 2.5.0\n *\n * @param string $file_id   Index of the `$_FILES` array that the file was sent. Required.\n * @param int    $post_id   The post ID of a post to attach the media item to. Required, but can\n *                          be set to 0, creating a media item that has no relationship to a post.\n * @param array  $post_data Overwrite some of the attachment. Optional.\n * @param array  $overrides Override the wp_handle_upload() behavior. Optional.\n * @return int|WP_Error ID of the attachment or a WP_Error object on failure.\n *\/"}]},"media_handle_sideload":{"name":"media_handle_sideload","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file_array","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$desc","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_data","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles a side-loaded file in the same way as an uploaded file is handled by media_handle_upload().\n *\n * @since 2.6.0\n *\n * @param array  $file_array Array similar to a `$_FILES` upload array.\n * @param int    $post_id    The post ID the media is associated with.\n * @param string $desc       Optional. Description of the side-loaded file. Default null.\n * @param array  $post_data  Optional. Post data to override. Default empty array.\n * @return int|object The ID of the attachment or a WP_Error on failure.\n *\/"}]},"wp_iframe":{"name":"wp_iframe","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content_func","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds the iframe to display content for the media upload page\n *\n * @since 2.5.0\n *\n * @global int $body_id\n *\n * @param string|callable $content_func\n *\/"}]},"media_buttons":{"name":"media_buttons","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$editor_id","rank":0,"variadic":false,"reference":false,"default":"'content'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds the media button to the editor\n *\n * @since 2.5.0\n *\n * @global int $post_ID\n *\n * @staticvar int $instance\n *\n * @param string $editor_id\n *\/"}]},"get_upload_iframe_src":{"name":"get_upload_iframe_src","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tab","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @global int $post_ID\n * @param string $type\n * @param int $post_id\n * @param string $tab\n * @return string\n *\/"}]},"media_upload_form_handler":{"name":"media_upload_form_handler","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles form submissions for the legacy media uploader.\n *\n * @since 2.5.0\n *\n * @return mixed void|object WP_Error on failure\n *\/"}]},"wp_media_upload_handler":{"name":"wp_media_upload_handler","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles the process of uploading media.\n *\n * @since 2.5.0\n *\n * @return null|string\n *\/"}]},"media_sideload_image":{"name":"media_sideload_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$desc","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$return","rank":3,"variadic":false,"reference":false,"default":"'html'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Downloads an image from the specified URL and attaches it to a post.\n *\n * @since 2.6.0\n * @since 4.2.0 Introduced the `$return` parameter.\n *\n * @param string $file    The URL of the image to download.\n * @param int    $post_id The post ID the media is to be associated with.\n * @param string $desc    Optional. Description of the image.\n * @param string $return  Optional. Accepts 'html' (image tag html) or 'src' (URL). Default 'html'.\n * @return string|WP_Error Populated HTML img tag on success, WP_Error object otherwise.\n *\/"}]},"media_upload_gallery":{"name":"media_upload_gallery","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the legacy media uploader form in an iframe.\n *\n * @since 2.5.0\n *\n * @return string|null\n *\/"}]},"media_upload_library":{"name":"media_upload_library","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the legacy media library form in an iframe.\n *\n * @since 2.5.0\n *\n * @return string|null\n *\/"}]},"image_align_input_fields":{"name":"image_align_input_fields","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$checked","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve HTML for the image alignment radio buttons with the specified one checked.\n *\n * @since 2.7.0\n *\n * @param WP_Post $post\n * @param string $checked\n * @return string\n *\/"}]},"image_size_input_fields":{"name":"image_size_input_fields","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$check","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve HTML for the size radio buttons with the specified one checked.\n *\n * @since 2.7.0\n *\n * @param WP_Post $post\n * @param bool|string $check\n * @return array\n *\/"}]},"image_link_input_fields":{"name":"image_link_input_fields","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url_type","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve HTML for the Link URL buttons with the default link type as specified.\n *\n * @since 2.7.0\n *\n * @param WP_Post $post\n * @param string $url_type\n * @return string\n *\/"}]},"wp_caption_input_textarea":{"name":"wp_caption_input_textarea","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$edit_post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output a textarea element for inputting an attachment caption.\n *\n * @since 3.4.0\n *\n * @param WP_Post $edit_post Attachment WP_Post object.\n * @return string HTML markup for the textarea element.\n *\/"}]},"image_attachment_fields_to_edit":{"name":"image_attachment_fields_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$form_fields","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the image attachment fields to edit form fields.\n *\n * @since 2.5.0\n *\n * @param array $form_fields\n * @param object $post\n * @return array\n *\/"}]},"media_single_attachment_fields_to_edit":{"name":"media_single_attachment_fields_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$form_fields","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the single non-image attachment fields to edit form fields.\n *\n * @since 2.5.0\n *\n * @param array   $form_fields An array of attachment form fields.\n * @param WP_Post $post        The WP_Post attachment object.\n * @return array Filtered attachment form fields.\n *\/"}]},"media_post_single_attachment_fields_to_edit":{"name":"media_post_single_attachment_fields_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$form_fields","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the post non-image attachment fields to edito form fields.\n *\n * @since 2.8.0\n *\n * @param array   $form_fields An array of attachment form fields.\n * @param WP_Post $post        The WP_Post attachment object.\n * @return array Filtered attachment form fields.\n *\/"}]},"image_attachment_fields_to_save":{"name":"image_attachment_fields_to_save","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attachment","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters input from media_upload_form_handler() and assigns a default\n * post_title from the file name if none supplied.\n *\n * Illustrates the use of the {@see 'attachment_fields_to_save'} filter\n * which can be used to add default values to any field before saving to DB.\n *\n * @since 2.5.0\n *\n * @param array $post       The WP_Post attachment object converted to an array.\n * @param array $attachment An array of attachment metadata.\n * @return array Filtered attachment post object.\n *\/"}]},"image_media_send_to_editor":{"name":"image_media_send_to_editor","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$html","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attachment_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attachment","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the media element HTML to send to the editor.\n *\n * @since 2.5.0\n *\n * @param string $html\n * @param integer $attachment_id\n * @param array $attachment\n * @return string\n *\/"}]},"get_attachment_fields_to_edit":{"name":"get_attachment_fields_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$errors","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the attachment fields to edit form fields.\n *\n * @since 2.5.0\n *\n * @param WP_Post $post\n * @param array $errors\n * @return array\n *\/"}]},"get_media_items":{"name":"get_media_items","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$errors","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve HTML for media items of post gallery.\n *\n * The HTML markup retrieved will be created for the progress of SWF Upload\n * component. Will also create link for showing and hiding the form to modify\n * the image attachment.\n *\n * @since 2.5.0\n *\n * @global WP_Query $wp_the_query\n *\n * @param int $post_id Optional. Post ID.\n * @param array $errors Errors for attachment, if any.\n * @return string\n *\/"}]},"get_media_item":{"name":"get_media_item","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attachment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve HTML form for modifying the image attachment.\n *\n * @since 2.5.0\n *\n * @global string $redir_tab\n *\n * @param int $attachment_id Attachment ID for modification.\n * @param string|array $args Optional. Override defaults.\n * @return string HTML form for attachment.\n *\/"}]},"get_compat_media_markup":{"name":"get_compat_media_markup","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attachment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 3.5.0\n *\n * @param int   $attachment_id\n * @param array $args\n * @return array\n *\/"}]},"media_upload_header":{"name":"media_upload_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the legacy media upload header.\n *\n * @since 2.5.0\n *\/"}]},"media_upload_form":{"name":"media_upload_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$errors","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the legacy media upload form.\n *\n * @since 2.5.0\n *\n * @global string $type\n * @global string $tab\n * @global bool   $is_IE\n * @global bool   $is_opera\n *\n * @param array $errors\n *\/"}]},"media_upload_type_form":{"name":"media_upload_type_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"'file'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$errors","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the legacy media upload form for a given media type.\n *\n * @since 2.5.0\n *\n * @param string $type\n * @param object $errors\n * @param integer $id\n *\/"}]},"media_upload_type_url_form":{"name":"media_upload_type_url_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$errors","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the legacy media upload form for external media.\n *\n * @since 2.7.0\n *\n * @param string $type\n * @param object $errors\n * @param integer $id\n *\/"}]},"media_upload_gallery_form":{"name":"media_upload_gallery_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$errors","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds gallery form to upload iframe\n *\n * @since 2.5.0\n *\n * @global string $redir_tab\n * @global string $type\n * @global string $tab\n *\n * @param array $errors\n *\/"}]},"media_upload_library_form":{"name":"media_upload_library_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$errors","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the legacy media upload form for the media library.\n *\n * @since 2.5.0\n *\n * @global wpdb      $wpdb\n * @global WP_Query  $wp_query\n * @global WP_Locale $wp_locale\n * @global string    $type\n * @global string    $tab\n * @global array     $post_mime_types\n *\n * @param array $errors\n *\/"}]},"wp_media_insert_url_form":{"name":"wp_media_insert_url_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$default_view","rank":0,"variadic":false,"reference":false,"default":"'image'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates the form for external url\n *\n * @since 2.7.0\n *\n * @param string $default_view\n * @return string the form html\n *\/"}]},"media_upload_flash_bypass":{"name":"media_upload_flash_bypass","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the multi-file uploader message.\n *\n * @since 2.6.0\n *\n * @global int $post_ID\n *\/"}]},"media_upload_html_bypass":{"name":"media_upload_html_bypass","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the browser's built-in uploader message.\n *\n * @since 2.6.0\n *\/"}]},"media_upload_text_after":{"name":"media_upload_text_after","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Used to display a \"After a file has been uploaded...\" help message.\n *\n * @since 3.3.0\n *\/"}]},"media_upload_max_image_resize":{"name":"media_upload_max_image_resize","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the checkbox to scale images.\n *\n * @since 3.3.0\n *\/"}]},"multisite_over_quota_message":{"name":"multisite_over_quota_message","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the out of storage quota message in Multisite.\n *\n * @since 3.5.0\n *\/"}]},"edit_form_image_editor":{"name":"edit_form_image_editor","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the image and editor in the post editor\n *\n * @since 3.5.0\n *\n * @param WP_Post $post A post object.\n *\/"}]},"attachment_submitbox_metadata":{"name":"attachment_submitbox_metadata","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays non-editable attachment metadata in the publish meta box.\n *\n * @since 3.5.0\n *\/"}]},"wp_add_id3_tag_data":{"name":"wp_add_id3_tag_data","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$metadata","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Parse ID3v2, ID3v1, and getID3 comments to extract usable data\n *\n * @since 3.6.0\n *\n * @param array $metadata An existing array with data\n * @param array $data Data supplied by ID3 tags\n *\/"}]},"wp_read_video_metadata":{"name":"wp_read_video_metadata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve metadata from a video file's ID3 tags\n *\n * @since 3.6.0\n *\n * @param string $file Path to file.\n * @return array|bool Returns array of metadata, if found.\n *\/"}]},"wp_read_audio_metadata":{"name":"wp_read_audio_metadata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve metadata from a audio file's ID3 tags\n *\n * @since 3.6.0\n *\n * @param string $file Path to file.\n * @return array|bool Returns array of metadata, if found.\n *\/"}]},"wp_media_attach_action":{"name":"wp_media_attach_action","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$parent_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$action","rank":1,"variadic":false,"reference":false,"default":"'attach'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Encapsulate logic for Attach\/Detach actions\n *\n * @since 4.2.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int    $parent_id Attachment parent ID.\n * @param string $action    Optional. Attach\/detach action. Accepts 'attach' or 'detach'.\n *                          Default 'attach'.\n *\/"}]},"got_mod_rewrite":{"name":"got_mod_rewrite","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns whether the server is running Apache with the mod_rewrite module loaded.\n *\n * @since 2.0.0\n *\n * @return bool\n *\/"},{"phpdoc":"\/**\n * Misc WordPress Administration API.\n *\n * @package WordPress\n * @subpackage Administration\n *\/"}]},"got_url_rewrite":{"name":"got_url_rewrite","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns whether the server supports URL rewriting.\n *\n * Detects Apache's mod_rewrite, IIS 7.0+ permalink support, and nginx.\n *\n * @since 3.7.0\n *\n * @global bool $is_nginx\n *\n * @return bool Whether the server supports URL rewriting.\n *\/"}]},"extract_from_markers":{"name":"extract_from_markers","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$marker","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Extracts strings from between the BEGIN and END markers in the .htaccess file.\n *\n * @since 1.5.0\n *\n * @param string $filename\n * @param string $marker\n * @return array An array of strings from a file (.htaccess ) from between BEGIN and END markers.\n *\/"}]},"insert_with_markers":{"name":"insert_with_markers","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$marker","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$insertion","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Inserts an array of strings into a file (.htaccess ), placing it between\n * BEGIN and END markers.\n *\n * Replaces existing marked info. Retains surrounding\n * data. Creates file if none exists.\n *\n * @since 1.5.0\n *\n * @param string       $filename  Filename to alter.\n * @param string       $marker    The marker to alter.\n * @param array|string $insertion The new content to insert.\n * @return bool True on write success, false on failure.\n *\/"}]},"save_mod_rewrite_rules":{"name":"save_mod_rewrite_rules","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates the htaccess file with the current rules if it is writable.\n *\n * Always writes to the file if it exists and is writable to ensure that we\n * blank out old rules.\n *\n * @since 1.5.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\/"}]},"iis7_save_url_rewrite_rules":{"name":"iis7_save_url_rewrite_rules","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates the IIS web.config file with the current rules if it is writable.\n * If the permalinks do not require rewrite rules then the rules are deleted from the web.config file.\n *\n * @since 2.8.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @return bool True if web.config was updated successfully\n *\/"}]},"update_recently_edited":{"name":"update_recently_edited","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update the \"recently-edited\" file for the plugin or theme editor.\n *\n * @since 1.5.0\n *\n * @param string $file\n *\/"}]},"update_home_siteurl":{"name":"update_home_siteurl","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$old_value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Flushes rewrite rules if siteurl, home or page_on_front changed.\n *\n * @since 2.1.0\n *\n * @param string $old_value\n * @param string $value\n *\/"}]},"wp_reset_vars":{"name":"wp_reset_vars","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$vars","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Resets global variables based on $_GET and $_POST\n *\n * This function resets global variables based on the names passed\n * in the $vars array to the value of $_POST[$var] or $_GET[$var] or ''\n * if neither is defined.\n *\n * @since 2.0.0\n *\n * @param array $vars An array of globals to reset.\n *\/"}]},"show_message":{"name":"show_message","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$message","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the given administration message.\n *\n * @since 2.1.0\n *\n * @param string|WP_Error $message\n *\/"}]},"wp_doc_link_parse":{"name":"wp_doc_link_parse","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 2.8.0\n *\n * @param string $content\n * @return array\n *\/"}]},"set_screen_options":{"name":"set_screen_options","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Saves option for number of rows when listing posts, pages, comments, etc.\n *\n * @since 2.8.0\n *\/"}]},"iis7_rewrite_rule_exists":{"name":"iis7_rewrite_rule_exists","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if rewrite rule for WordPress already exists in the IIS 7+ configuration file\n *\n * @since 2.8.0\n *\n * @return bool\n * @param string $filename The file path to the configuration file\n *\/"}]},"iis7_delete_rewrite_rule":{"name":"iis7_delete_rewrite_rule","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Delete WordPress rewrite rule from web.config file if it exists there\n *\n * @since 2.8.0\n *\n * @param string $filename Name of the configuration file\n * @return bool\n *\/"}]},"iis7_add_rewrite_rule":{"name":"iis7_add_rewrite_rule","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$rewrite_rule","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add WordPress rewrite rule to the IIS 7+ configuration file.\n *\n * @since 2.8.0\n *\n * @param string $filename The file path to the configuration file\n * @param string $rewrite_rule The XML fragment with URL Rewrite rule\n * @return bool\n *\/"}]},"saveDomDocument":{"name":"saveDomDocument","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$doc","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filename","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Saves the XML document into a file\n *\n * @since 2.8.0\n *\n * @param DOMDocument $doc\n * @param string $filename\n *\/"}]},"admin_color_scheme_picker":{"name":"admin_color_scheme_picker","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the default admin color scheme picker (Used in user-edit.php)\n *\n * @since 3.0.0\n *\n * @global array $_wp_admin_css_colors\n *\n * @param int $user_id User ID.\n *\/"}]},"wp_color_scheme_settings":{"name":"wp_color_scheme_settings","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *\n * @global array $_wp_admin_css_colors\n *\/"}]},"_ipad_meta":{"name":"_ipad_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @since 3.3.0\n *\/"}]},"wp_check_locked_posts":{"name":"wp_check_locked_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$screen_id","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check lock status for posts displayed on the Posts screen\n *\n * @since 3.6.0\n *\n * @param array  $response  The Heartbeat response.\n * @param array  $data      The $_POST data sent.\n * @param string $screen_id The screen id.\n * @return array The Heartbeat response.\n *\/"}]},"wp_refresh_post_lock":{"name":"wp_refresh_post_lock","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$screen_id","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check lock status on the New\/Edit Post screen and refresh the lock\n *\n * @since 3.6.0\n *\n * @param array  $response  The Heartbeat response.\n * @param array  $data      The $_POST data sent.\n * @param string $screen_id The screen id.\n * @return array The Heartbeat response.\n *\/"}]},"wp_refresh_post_nonces":{"name":"wp_refresh_post_nonces","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$screen_id","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check nonce expiration on the New\/Edit Post screen and refresh if needed\n *\n * @since 3.6.0\n *\n * @param array  $response  The Heartbeat response.\n * @param array  $data      The $_POST data sent.\n * @param string $screen_id The screen id.\n * @return array The Heartbeat response.\n *\/"}]},"wp_heartbeat_set_suspension":{"name":"wp_heartbeat_set_suspension","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$settings","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Disable suspension of Heartbeat on the Add\/Edit Post screens.\n *\n * @since 3.8.0\n *\n * @global string $pagenow\n *\n * @param array $settings An array of Heartbeat settings.\n * @return array Filtered Heartbeat settings.\n *\/"}]},"heartbeat_autosave":{"name":"heartbeat_autosave","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Autosave with heartbeat\n *\n * @since 3.9.0\n *\n * @param array $response The Heartbeat response.\n * @param array $data     The $_POST data sent.\n * @return array The Heartbeat response.\n *\/"}]},"wp_admin_canonical_url":{"name":"wp_admin_canonical_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove single-use URL parameters and create canonical link based on new URL.\n *\n * Remove specific query string parameters from a URL, create the canonical link,\n * put it in the admin header, and change the current URL to match.\n *\n * @since 4.2.0\n *\/"}]},"wp_page_reload_on_back_button_js":{"name":"wp_page_reload_on_back_button_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs JS that reloads the page if the user navigated to it with the Back or Forward button.\n *\n * Used on the Edit Post and Add New Post screens. Needed to ensure the page is not loaded from browser cache,\n * so the post title and editor content are the last saved versions. Ideally this script should run first in the head.\n *\n * @since 4.6.0\n *\/"}]},"__":{"name":"__","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":1,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the translation of $text.\n *\n * If there is no translation, or the text domain isn't loaded, the original text is returned.\n *\n * @since 2.1.0\n *\n * @param string $text   Text to translate.\n * @param string $domain Optional. Text domain. Unique identifier for retrieving translated strings.\n *                       Default 'default'.\n * @return string Translated text.\n *\/"}]},"_x":{"name":"_x","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":2,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve translated string with gettext context.\n *\n * Quite a few times, there will be collisions with similar translatable text\n * found in more than two places, but with different translated context.\n *\n * By including the context in the pot file, translators can translate the two\n * strings differently.\n *\n * @since 2.8.0\n *\n * @param string $text    Text to translate.\n * @param string $context Context information for the translators.\n * @param string $domain  Optional. Text domain. Unique identifier for retrieving translated strings.\n *                        Default 'default'.\n * @return string Translated context string without pipe.\n *\/"}]},"add_filter":{"name":"add_filter","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function_to_add","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$priority","rank":2,"variadic":false,"reference":false,"default":"10","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$accepted_args","rank":3,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Hook a function or method to a specific filter action.\n *\n * WordPress offers filter hooks to allow plugins to modify\n * various types of internal data at runtime.\n *\n * A plugin can modify data by binding a callback to a filter hook. When the filter\n * is later applied, each bound callback is run in order of priority, and given\n * the opportunity to modify a value by returning a new value.\n *\n * The following example shows how a callback function is bound to a filter hook.\n *\n * Note that `$example` is passed to the callback, (maybe) modified, then returned:\n *\n *     function example_callback( $example ) {\n *         \/\/ Maybe modify $example in some way.\n *         return $example;\n *     }\n *     add_filter( 'example_filter', 'example_callback' );\n *\n * Bound callbacks can accept from none to the total number of arguments passed as parameters\n * in the corresponding apply_filters() call.\n *\n * In other words, if an apply_filters() call passes four total arguments, callbacks bound to\n * it can accept none (the same as 1) of the arguments or up to four. The important part is that\n * the `$accepted_args` value must reflect the number of arguments the bound callback *actually*\n * opted to accept. If no arguments were accepted by the callback that is considered to be the\n * same as accepting 1 argument. For example:\n *\n *     \/\/ Filter call.\n *     $value = apply_filters( 'hook', $value, $arg2, $arg3 );\n *\n *     \/\/ Accepting zero\/one arguments.\n *     function example_callback() {\n *         ...\n *         return 'some value';\n *     }\n *     add_filter( 'hook', 'example_callback' ); \/\/ Where $priority is default 10, $accepted_args is default 1.\n *\n *     \/\/ Accepting two arguments (three possible).\n *     function example_callback( $value, $arg2 ) {\n *         ...\n *         return $maybe_modified_value;\n *     }\n *     add_filter( 'hook', 'example_callback', 10, 2 ); \/\/ Where $priority is 10, $accepted_args is 2.\n *\n * *Note:* The function will return true whether or not the callback is valid.\n * It is up to you to take care. This is done for optimization purposes, so\n * everything is as quick as possible.\n *\n * @since 0.71\n *\n * @global array $wp_filter      A multidimensional array of all hooks and the callbacks hooked to them.\n *\n * @param string   $tag             The name of the filter to hook the $function_to_add callback to.\n * @param callable $function_to_add The callback to be run when the filter is applied.\n * @param int      $priority        Optional. Used to specify the order in which the functions\n *                                  associated with a particular action are executed. Default 10.\n *                                  Lower numbers correspond with earlier execution,\n *                                  and functions with the same priority are executed\n *                                  in the order in which they were added to the action.\n * @param int      $accepted_args   Optional. The number of arguments the function accepts. Default 1.\n * @return true\n *\/"}]},"esc_attr":{"name":"esc_attr","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Escaping for HTML attributes.\n *\n * @since 2.8.0\n *\n * @param string $text\n * @return string\n *\/"}]},"apply_filters":{"name":"apply_filters","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Call the functions added to a filter hook.\n *\n * The callback functions attached to filter hook $tag are invoked by calling\n * this function. This function can be used to create a new filter hook by\n * simply calling this function with the name of the new hook specified using\n * the $tag parameter.\n *\n * The function allows for additional arguments to be added and passed to hooks.\n *\n *     \/\/ Our filter callback function\n *     function example_callback( $string, $arg1, $arg2 ) {\n *         \/\/ (maybe) modify $string\n *         return $string;\n *     }\n *     add_filter( 'example_filter', 'example_callback', 10, 3 );\n *\n *     \/*\n *      * Apply the filters by calling the 'example_callback' function we\n *      * \"hooked\" to 'example_filter' using the add_filter() function above.\n *      * - 'example_filter' is the filter hook $tag\n *      * - 'filter me' is the value being filtered\n *      * - $arg1 and $arg2 are the additional arguments passed to the callback.\n *     $value = apply_filters( 'example_filter', 'filter me', $arg1, $arg2 );\n *\n * @since 0.71\n *\n * @global array $wp_filter         Stores all of the filters.\n * @global array $wp_current_filter Stores the list of current filters with the current one last.\n *\n * @param string $tag     The name of the filter hook.\n * @param mixed  $value   The value on which the filters hooked to `$tag` are applied on.\n * @param mixed  $var,... Additional variables passed to the functions hooked to `$tag`.\n * @return mixed The filtered value after all hooked functions are applied to it.\n *\/"}]},"get_option":{"name":"get_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves an option value based on an option name.\n *\n * If the option does not exist or does not have a value, then the return value\n * will be false. This is useful to check whether you need to install an option\n * and is commonly used during installation of plugin options and to test\n * whether upgrading is required.\n *\n * If the option was serialized then it will be unserialized when it is returned.\n *\n * Any scalar values will be returned as strings. You may coerce the return type of\n * a given option by registering an {@see 'option_$option'} filter callback.\n *\n * @since 1.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $option  Name of option to retrieve. Expected to not be SQL-escaped.\n * @param mixed  $default Optional. Default value to return if the option does not exist.\n * @return mixed Value set for the option.\n *\/"},{"phpdoc":"\/**\n * Option API\n *\n * @package WordPress\n * @subpackage Option\n *\/"}]},"is_lighttpd_before_150":{"name":"is_lighttpd_before_150","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the server running earlier than 1.5.0 version of lighttpd?\n *\n * @since 2.5.0\n *\n * @return bool Whether the server is running lighttpd < 1.5.0.\n *\/"}]},"add_action":{"name":"add_action","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function_to_add","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$priority","rank":2,"variadic":false,"reference":false,"default":"10","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$accepted_args","rank":3,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Hooks a function on to a specific action.\n *\n * Actions are the hooks that the WordPress core launches at specific points\n * during execution, or when specific events occur. Plugins can specify that\n * one or more of its PHP functions are executed at these points, using the\n * Action API.\n *\n * @since 1.2.0\n *\n * @param string   $tag             The name of the action to which the $function_to_add is hooked.\n * @param callable $function_to_add The name of the function you wish to be called.\n * @param int      $priority        Optional. Used to specify the order in which the functions\n *                                  associated with a particular action are executed. Default 10.\n *                                  Lower numbers correspond with earlier execution,\n *                                  and functions with the same priority are executed\n *                                  in the order in which they were added to the action.\n * @param int      $accepted_args   Optional. The number of arguments the function accepts. Default 1.\n * @return true Will always return true.\n *\/"}]},"did_action":{"name":"did_action","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the number of times an action is fired.\n *\n * @since 2.1.0\n *\n * @global array $wp_actions Increments the amount of times action was triggered.\n *\n * @param string $tag The name of the action hook.\n * @return int The number of times action hook $tag is fired.\n *\/"}]},"do_action_ref_array":{"name":"do_action_ref_array","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute functions hooked on a specific action hook, specifying arguments in an array.\n *\n * @since 2.1.0\n *\n * @see do_action() This function is identical, but the arguments passed to the\n *                  functions hooked to $tag< are supplied using an array.\n * @global array $wp_filter         Stores all of the filters\n * @global array $wp_actions        Increments the amount of times action was triggered.\n * @global array $wp_current_filter Stores the list of current filters with the current one last\n *\n * @param string $tag  The name of the action to be executed.\n * @param array  $args The arguments supplied to the functions hooked to `$tag`.\n *\/"}]},"get_bloginfo":{"name":"get_bloginfo","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$show","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filter","rank":1,"variadic":false,"reference":false,"default":"'raw'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves information about the current site.\n *\n * Possible values for `$show` include:\n *\n * - 'name' - Site title (set in Settings > General)\n * - 'description' - Site tagline (set in Settings > General)\n * - 'wpurl' - The WordPress address (URL) (set in Settings > General)\n * - 'url' - The Site address (URL) (set in Settings > General)\n * - 'admin_email' - Admin email (set in Settings > General)\n * - 'charset' - The \"Encoding for pages and feeds\"  (set in Settings > Reading)\n * - 'version' - The current WordPress version\n * - 'html_type' - The content-type (default: \"text\/html\"). Themes and plugins\n *   can override the default value using the {@see 'pre_option_html_type'} filter\n * - 'text_direction' - The text direction determined by the site's language. is_rtl()\n *   should be used instead\n * - 'language' - Language code for the current site\n * - 'stylesheet_url' - URL to the stylesheet for the active theme. An active child theme\n *   will take precedence over this value\n * - 'stylesheet_directory' - Directory path for the active theme.  An active child theme\n *   will take precedence over this value\n * - 'template_url' \/ 'template_directory' - URL of the active theme's directory. An active\n *   child theme will NOT take precedence over this value\n * - 'pingback_url' - The pingback XML-RPC file URL (xmlrpc.php)\n * - 'atom_url' - The Atom feed URL (\/feed\/atom)\n * - 'rdf_url' - The RDF\/RSS 1.0 feed URL (\/feed\/rfd)\n * - 'rss_url' - The RSS 0.92 feed URL (\/feed\/rss)\n * - 'rss2_url' - The RSS 2.0 feed URL (\/feed)\n * - 'comments_atom_url' - The comments Atom feed URL (\/comments\/feed)\n * - 'comments_rss2_url' - The comments RSS 2.0 feed URL (\/comments\/feed)\n *\n * Some `$show` values are deprecated and will be removed in future versions.\n * These options will trigger the _deprecated_argument() function.\n *\n * Deprecated arguments include:\n *\n * - 'siteurl' - Use 'url' instead\n * - 'home' - Use 'url' instead\n *\n * @since 0.71\n *\n * @global string $wp_version\n *\n * @param string $show   Optional. Site info to retrieve. Default empty (site name).\n * @param string $filter Optional. How to filter what is retrieved. Default 'raw'.\n * @return string Mostly string values, might be empty.\n *\/"}]},"is_admin":{"name":"is_admin","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether the current request is for an administrative interface page.\n *\n * Does not check if the user is an administrator; current_user_can()\n * for checking roles and capabilities.\n *\n * @since 1.5.1\n *\n * @global WP_Screen $current_screen\n *\n * @return bool True if inside WordPress administration interface, false otherwise.\n *\/"}]},"site_url":{"name":"site_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL for the current site where WordPress application files\n * (e.g. wp-blog-header.php or the wp-admin\/ folder) are accessible.\n *\n * Returns the 'site_url' option with the appropriate protocol, 'https' if\n * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is\n * overridden.\n *\n * @since 3.0.0\n *\n * @param string $path   Optional. Path relative to the site URL. Default empty.\n * @param string $scheme Optional. Scheme to give the site URL context. See set_url_scheme().\n * @return string Site URL link with optional path appended.\n *\/"}]},"admin_url":{"name":"admin_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":1,"variadic":false,"reference":false,"default":"'admin'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL to the admin area for the current site.\n *\n * @since 2.6.0\n *\n * @param string $path   Optional path relative to the admin URL.\n * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl().\n *                       'http' or 'https' can be passed to force those schemes.\n * @return string Admin URL link with optional path appended.\n *\/"}]},"home_url":{"name":"home_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL for the current site where the front end is accessible.\n *\n * Returns the 'home' option with the appropriate protocol. The protocol will be 'https'\n * if is_ssl() evaluates to true; otherwise, it will be the same as the 'home' option.\n * If `$scheme` is 'http' or 'https', is_ssl() is overridden.\n *\n * @since 3.0.0\n *\n * @param  string      $path   Optional. Path relative to the home URL. Default empty.\n * @param  string|null $scheme Optional. Scheme to give the home URL context. Accepts\n *                             'http', 'https', 'relative', 'rest', or null. Default null.\n * @return string Home URL link with optional path appended.\n *\/"}]},"includes_url":{"name":"includes_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL to the includes directory.\n *\n * @since 2.6.0\n *\n * @param string $path   Optional. Path relative to the includes URL. Default empty.\n * @param string $scheme Optional. Scheme to give the includes URL context. Accepts\n *                       'http', 'https', or 'relative'. Default null.\n * @return string Includes URL link with optional path appended.\n *\/"}]},"wp_guess_url":{"name":"wp_guess_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Guess the URL for the site.\n *\n * Will remove wp-admin links to retrieve only return URLs not in the wp-admin\n * directory.\n *\n * @since 2.6.0\n *\n * @return string The guessed URL.\n *\/"}]},"json_encode":{"name":"json_encode","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @ignore\n *\/"}]},"get_file":{"name":"get_file","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[]},"wp_crop_image":{"name":"wp_crop_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$src","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src_x","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src_y","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src_w","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src_h","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dst_w","rank":5,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dst_h","rank":6,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src_abs","rank":7,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dst_file","rank":8,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Crop an Image to a given size.\n *\n * @since 2.1.0\n *\n * @param string|int $src The source file or Attachment ID.\n * @param int $src_x The start x position to crop from.\n * @param int $src_y The start y position to crop from.\n * @param int $src_w The width to crop.\n * @param int $src_h The height to crop.\n * @param int $dst_w The destination width.\n * @param int $dst_h The destination height.\n * @param int $src_abs Optional. If the source crop points are absolute.\n * @param string $dst_file Optional. The destination file to write to.\n * @return string|WP_Error New filepath on success, WP_Error on failure.\n *\/"},{"phpdoc":"\/**\n * File contains all the administration image manipulation functions.\n *\n * @package WordPress\n * @subpackage Administration\n *\/"}]},"wp_generate_attachment_metadata":{"name":"wp_generate_attachment_metadata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attachment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$file","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Generate post thumbnail attachment meta data.\n *\n * @since 2.1.0\n *\n * @param int $attachment_id Attachment Id to process.\n * @param string $file Filepath of the Attached image.\n * @return mixed Metadata for attachment.\n *\/"}]},"wp_exif_frac2dec":{"name":"wp_exif_frac2dec","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert a fraction string to a decimal.\n *\n * @since 2.5.0\n *\n * @param string $str\n * @return int|float\n *\/"}]},"wp_exif_date2ts":{"name":"wp_exif_date2ts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert the exif date format to a unix timestamp.\n *\n * @since 2.5.0\n *\n * @param string $str\n * @return int\n *\/"}]},"wp_read_image_metadata":{"name":"wp_read_image_metadata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get extended image metadata, exif or iptc as available.\n *\n * Retrieves the EXIF metadata aperture, credit, camera, caption, copyright, iso\n * created_timestamp, focal_length, shutter_speed, and title.\n *\n * The IPTC metadata that is retrieved is APP13, credit, byline, created date\n * and time, caption, copyright, and title. Also includes FNumber, Model,\n * DateTimeDigitized, FocalLength, ISOSpeedRatings, and ExposureTime.\n *\n * @todo Try other exif libraries if available.\n * @since 2.5.0\n *\n * @param string $file\n * @return bool|array False on failure. Image metadata array on success.\n *\/"}]},"file_is_valid_image":{"name":"file_is_valid_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Validate that file is an image.\n *\n * @since 2.5.0\n *\n * @param string $path File path to test if valid image.\n * @return bool True if valid image, false if not valid image.\n *\/"}]},"file_is_displayable_image":{"name":"file_is_displayable_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Validate that file is suitable for displaying within a web page.\n *\n * @since 2.5.0\n *\n * @param string $path File path to test.\n * @return bool True if suitable, false if not suitable.\n *\/"}]},"load_image_to_edit":{"name":"load_image_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attachment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mime_type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":2,"variadic":false,"reference":false,"default":"'full'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load an image resource for editing.\n *\n * @since 2.9.0\n *\n * @param string $attachment_id Attachment ID.\n * @param string $mime_type Image mime type.\n * @param string $size Optional. Image size, defaults to 'full'.\n * @return resource|false The resulting image resource on success, false on failure.\n *\/"}]},"_load_image_to_edit_path":{"name":"_load_image_to_edit_path","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attachment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":1,"variadic":false,"reference":false,"default":"'full'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the path or url of an attachment's attached file.\n *\n * If the attached file is not present on the local filesystem (usually due to replication plugins),\n * then the url of the file is returned if url fopen is supported.\n *\n * @since 3.4.0\n * @access private\n *\n * @param string $attachment_id Attachment ID.\n * @param string $size Optional. Image size, defaults to 'full'.\n * @return string|false File path or url on success, false on failure.\n *\/"}]},"_copy_image_file":{"name":"_copy_image_file","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attachment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Copy an existing image file.\n *\n * @since 3.4.0\n * @access private\n *\n * @param string $attachment_id Attachment ID.\n * @return string|false New file path on success, false on failure.\n *\/"}]},"tinymce_include":{"name":"tinymce_include","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated admin functions from past WordPress versions. You shouldn't use these\n * functions and look for the alternatives instead. The functions will be removed\n * in a later version.\n *\n * @package WordPress\n * @subpackage Deprecated\n *\/"},{"phpdoc":"\/**\n * @since 2.1.0\n * @deprecated 2.1.0 Use wp_editor()\n * @see wp_editor()\n *\/"}]},"documentation_link":{"name":"documentation_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Unused Admin function.\n *\n * @since 2.0.0\n * @deprecated 2.5.0\n *\n *\/"}]},"wp_shrink_dimensions":{"name":"wp_shrink_dimensions","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$width","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$height","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$wmax","rank":2,"variadic":false,"reference":false,"default":"128","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$hmax","rank":3,"variadic":false,"reference":false,"default":"96","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Calculates the new dimensions for a downsampled image.\n *\n * @since 2.0.0\n * @deprecated 3.0.0 Use wp_constrain_dimensions()\n * @see wp_constrain_dimensions()\n *\n * @param int $width Current width of the image\n * @param int $height Current height of the image\n * @param int $wmax Maximum wanted width\n * @param int $hmax Maximum wanted height\n * @return array Shrunk dimensions (width, height).\n *\/"}]},"get_udims":{"name":"get_udims","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$width","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$height","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Calculated the new dimensions for a downsampled image.\n *\n * @since 2.0.0\n * @deprecated 3.5.0 Use wp_constrain_dimensions()\n * @see wp_constrain_dimensions()\n *\n * @param int $width Current width of the image\n * @param int $height Current height of the image\n * @return array Shrunk dimensions (width, height).\n *\/"}]},"dropdown_categories":{"name":"dropdown_categories","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$default","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$popular_ids","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Legacy function used to generate the categories checklist control.\n *\n * @since 0.71\n * @deprecated 2.6.0 Use wp_category_checklist()\n * @see wp_category_checklist()\n *\n * @param int $default       Unused.\n * @param int $parent        Unused.\n * @param array $popular_ids Unused.\n *\/"}]},"dropdown_link_categories":{"name":"dropdown_link_categories","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$default","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Legacy function used to generate a link categories checklist control.\n *\n * @since 2.1.0\n * @deprecated 2.6.0 Use wp_link_category_checklist()\n * @see wp_link_category_checklist()\n *\n * @param int $default Unused.\n *\/"}]},"get_real_file_to_edit":{"name":"get_real_file_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the real filesystem path to a file to edit within the admin.\n *\n * @since 1.5.0\n * @deprecated 2.9.0\n * @uses WP_CONTENT_DIR Full filesystem path to the wp-content directory.\n *\n * @param string $file Filesystem path relative to the wp-content directory.\n * @return string Full filesystem path to edit.\n *\/"}]},"wp_dropdown_cats":{"name":"wp_dropdown_cats","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$currentcat","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$currentparent","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$level","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$categories","rank":4,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Legacy function used for generating a categories drop-down control.\n *\n * @since 1.2.0\n * @deprecated 3.0.0 Use wp_dropdown_categories()\n * @see wp_dropdown_categories()\n *\n * @param int $currentcat    Optional. ID of the current category. Default 0.\n * @param int $currentparent Optional. Current parent category ID. Default 0.\n * @param int $parent        Optional. Parent ID to retrieve categories for. Default 0.\n * @param int $level         Optional. Number of levels deep to display. Default 0.\n * @param array $categories  Optional. Categories to include in the control. Default 0.\n * @return bool|null False if no categories were found.\n *\/"}]},"add_option_update_handler":{"name":"add_option_update_handler","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option_group","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$option_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sanitize_callback","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register a setting and its sanitization callback\n *\n * @since 2.7.0\n * @deprecated 3.0.0 Use register_setting()\n * @see register_setting()\n *\n * @param string $option_group A settings group name. Should correspond to a whitelisted option key name.\n * \tDefault whitelisted option key names include \"general,\" \"discussion,\" and \"reading,\" among others.\n * @param string $option_name The name of an option to sanitize and save.\n * @param callable $sanitize_callback A callback function that sanitizes the option's value.\n *\/"}]},"remove_option_update_handler":{"name":"remove_option_update_handler","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option_group","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$option_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sanitize_callback","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Unregister a setting\n *\n * @since 2.7.0\n * @deprecated 3.0.0 Use unregister_setting()\n * @see unregister_setting()\n *\n * @param string $option_group\n * @param string $option_name\n * @param callable $sanitize_callback\n *\/"}]},"codepress_get_lang":{"name":"codepress_get_lang","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines the language to use for CodePress syntax highlighting.\n *\n * @since 2.8.0\n * @deprecated 3.0.0\n *\n * @param string $filename\n**\/"}]},"codepress_footer_js":{"name":"codepress_footer_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds JavaScript required to make CodePress work on the theme\/plugin editors.\n *\n * @since 2.8.0\n * @deprecated 3.0.0\n**\/"}]},"use_codepress":{"name":"use_codepress","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine whether to use CodePress.\n *\n * @since 2.8.0\n * @deprecated 3.0.0\n**\/"}]},"get_author_user_ids":{"name":"get_author_user_ids","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get all user IDs.\n *\n * @deprecated 3.1.0 Use get_users()\n *\n * @return array List of user IDs.\n *\/"}]},"get_editable_authors":{"name":"get_editable_authors","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets author users who can edit posts.\n *\n * @deprecated 3.1.0 Use get_users()\n *\n * @param int $user_id User ID.\n * @return array|bool List of editable authors. False if no editable users.\n *\/"}]},"get_editable_user_ids":{"name":"get_editable_user_ids","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$exclude_zeros","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_type","rank":2,"variadic":false,"reference":false,"default":"'post'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the IDs of any users who can edit posts.\n *\n * @deprecated 3.1.0 Use get_users()\n *\n * @param int  $user_id       User ID.\n * @param bool $exclude_zeros Optional. Whether to exclude zeroes. Default true.\n * @return array Array of editable user IDs, empty array otherwise.\n *\/"}]},"get_nonauthor_user_ids":{"name":"get_nonauthor_user_ids","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets all users who are not authors.\n *\n * @deprecated 3.1.0 Use get_users()\n *\/"}]},"get_others_unpublished_posts":{"name":"get_others_unpublished_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":1,"variadic":false,"reference":false,"default":"'any'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves editable posts from other users.\n *\n * @since 2.3.0\n * @deprecated 3.1.0 Use get_posts()\n * @see get_posts()\n *\n * @param int    $user_id User ID to not retrieve posts from.\n * @param string $type    Optional. Post type to retrieve. Accepts 'draft', 'pending' or 'any' (all).\n *                        Default 'any'.\n * @return array List of posts from others.\n *\/"}]},"get_others_drafts":{"name":"get_others_drafts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve drafts from other users.\n *\n * @deprecated 3.1.0 Use get_posts()\n * @see get_posts()\n *\n * @param int $user_id User ID.\n * @return array List of drafts from other users.\n *\/"}]},"get_others_pending":{"name":"get_others_pending","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve pending review posts from other users.\n *\n * @deprecated 3.1.0 Use get_posts()\n * @see get_posts()\n *\n * @param int $user_id User ID.\n * @return array List of posts with pending review post type from other users.\n *\/"}]},"wp_dashboard_quick_press_output":{"name":"wp_dashboard_quick_press_output","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output the QuickPress dashboard widget.\n *\n * @since 3.0.0\n * @deprecated 3.2.0 Use wp_dashboard_quick_press()\n * @see wp_dashboard_quick_press()\n *\/"}]},"wp_tiny_mce":{"name":"wp_tiny_mce","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$teeny","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$settings","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the TinyMCE editor.\n *\n * @since 2.7.0\n * @deprecated 3.3.0 Use wp_editor()\n * @see wp_editor()\n *\n * @staticvar int $num\n *\/"}]},"wp_preload_dialogs":{"name":"wp_preload_dialogs","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Preloads TinyMCE dialogs.\n *\n * @deprecated 3.3.0 Use wp_editor()\n * @see wp_editor()\n *\/"}]},"wp_print_editor_js":{"name":"wp_print_editor_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints TinyMCE editor JS.\n *\n * @deprecated 3.3.0 Use wp_editor()\n * @see wp_editor()\n *\/"}]},"wp_quicktags":{"name":"wp_quicktags","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles quicktags.\n *\n * @deprecated 3.3.0 Use wp_editor()\n * @see wp_editor()\n *\/"}]},"screen_layout":{"name":"screen_layout","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$screen","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the screen layout options.\n *\n * @since 2.8.0\n * @deprecated 3.3.0 WP_Screen::render_screen_layout()\n * @see WP_Screen::render_screen_layout()\n *\/"}]},"screen_options":{"name":"screen_options","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$screen","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the screen's per-page options.\n *\n * @since 2.8.0\n * @deprecated 3.3.0 Use WP_Screen::render_per_page_options()\n * @see WP_Screen::render_per_page_options()\n *\/"}]},"screen_meta":{"name":"screen_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$screen","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Renders the screen's help.\n *\n * @since 2.7.0\n * @deprecated 3.3.0 Use WP_Screen::render_screen_meta()\n * @see WP_Screen::render_screen_meta()\n *\/"}]},"favorite_actions":{"name":"favorite_actions","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Favorite actions were deprecated in version 3.2. Use the admin bar instead.\n *\n * @since 2.7.0\n * @deprecated 3.2.0 Use WP_Admin_Bar\n * @see WP_Admin_Bar\n *\/"}]},"media_upload_image":{"name":"media_upload_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles uploading an image.\n *\n * @deprecated 3.3.0 Use wp_media_upload_handler()\n * @see wp_media_upload_handler()\n *\n * @return null|string\n *\/"}]},"media_upload_audio":{"name":"media_upload_audio","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles uploading an audio file.\n *\n * @deprecated 3.3.0 Use wp_media_upload_handler()\n * @see wp_media_upload_handler()\n *\n * @return null|string\n *\/"}]},"media_upload_video":{"name":"media_upload_video","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles uploading a video file.\n *\n * @deprecated 3.3.0 Use wp_media_upload_handler()\n * @see wp_media_upload_handler()\n *\n * @return null|string\n *\/"}]},"media_upload_file":{"name":"media_upload_file","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles uploading a generic file.\n *\n * @deprecated 3.3.0 Use wp_media_upload_handler()\n * @see wp_media_upload_handler()\n *\n * @return null|string\n *\/"}]},"type_url_form_image":{"name":"type_url_form_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles retrieving the insert-from-URL form for an image.\n *\n * @deprecated 3.3.0 Use wp_media_insert_url_form()\n * @see wp_media_insert_url_form()\n *\n * @return string\n *\/"}]},"type_url_form_audio":{"name":"type_url_form_audio","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles retrieving the insert-from-URL form for an audio file.\n *\n * @deprecated 3.3.0 Use wp_media_insert_url_form()\n * @see wp_media_insert_url_form()\n *\n * @return string\n *\/"}]},"type_url_form_video":{"name":"type_url_form_video","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles retrieving the insert-from-URL form for a video file.\n *\n * @deprecated 3.3.0 Use wp_media_insert_url_form()\n * @see wp_media_insert_url_form()\n *\n * @return string\n *\/"}]},"type_url_form_file":{"name":"type_url_form_file","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles retrieving the insert-from-URL form for a generic file.\n *\n * @deprecated 3.3.0 Use wp_media_insert_url_form()\n * @see wp_media_insert_url_form()\n *\n * @return string\n *\/"}]},"add_contextual_help":{"name":"add_contextual_help","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$screen","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$help","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add contextual help text for a page.\n *\n * Creates an 'Overview' help tab.\n *\n * @since 2.7.0\n * @deprecated 3.3.0 Use WP_Screen::add_help_tab()\n * @see WP_Screen::add_help_tab()\n *\n * @param string    $screen The handle for the screen to add help to. This is usually the hook name returned by the add_*_page() functions.\n * @param string    $help   The content of an 'Overview' help tab.\n *\/"}]},"get_allowed_themes":{"name":"get_allowed_themes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the allowed themes for the current site.\n *\n * @since 3.0.0\n * @deprecated 3.4.0 Use wp_get_themes()\n * @see wp_get_themes()\n *\n * @return array $themes Array of allowed themes.\n *\/"}]},"get_broken_themes":{"name":"get_broken_themes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a list of broken themes.\n *\n * @since 1.5.0\n * @deprecated 3.4.0 Use wp_get_themes()\n * @see wp_get_themes()\n *\n * @return array\n *\/"}]},"current_theme_info":{"name":"current_theme_info","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves information on the current active theme.\n *\n * @since 2.0.0\n * @deprecated 3.4.0 Use wp_get_theme()\n * @see wp_get_theme()\n *\n * @return WP_Theme\n *\/"}]},"_insert_into_post_button":{"name":"_insert_into_post_button","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * This was once used to display an 'Insert into Post' button.\n *\n * Now it is deprecated and stubbed.\n *\n * @deprecated 3.5.0\n *\/"}]},"_media_button":{"name":"_media_button","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$icon","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * This was once used to display a media button.\n *\n * Now it is deprecated and stubbed.\n *\n * @deprecated 3.5.0\n *\/"}]},"get_post_to_edit":{"name":"get_post_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets an existing post and format it for editing.\n *\n * @since 2.0.0\n * @deprecated 3.5.0 Use get_post()\n * @see get_post()\n *\n * @param int $id\n * @return object\n *\/"}]},"get_default_page_to_edit":{"name":"get_default_page_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the default page information to use.\n *\n * @since 2.5.0\n * @deprecated 3.5.0 Use get_default_post_to_edit()\n * @see get_default_post_to_edit()\n *\n * @return WP_Post Post object containing all the default post data as attributes\n *\/"}]},"wp_create_thumbnail":{"name":"wp_create_thumbnail","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_side","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * This was once used to create a thumbnail from an Image given a maximum side size.\n *\n * @since 1.2.0\n * @deprecated 3.5.0 Use image_resize()\n * @see image_resize()\n *\n * @param mixed $file Filename of the original image, Or attachment id.\n * @param int $max_side Maximum length of a single side for the thumbnail.\n * @param mixed $deprecated Never used.\n * @return string Thumbnail path on success, Error string on failure.\n *\/"}]},"wp_nav_menu_locations_meta_box":{"name":"wp_nav_menu_locations_meta_box","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * This was once used to display a meta box for the nav menu theme locations.\n *\n * Deprecated in favor of a 'Manage Locations' tab added to nav menus management screen.\n *\n * @since 3.0.0\n * @deprecated 3.6.0\n *\/"}]},"wp_update_core":{"name":"wp_update_core","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$current","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feedback","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * This was once used to kick-off the Core Updater.\n *\n * Deprecated in favor of instantating a Core_Upgrader instance directly,\n * and calling the 'upgrade' method.\n *\n * @since 2.7.0\n * @deprecated 3.7.0 Use Core_Upgrader\n * @see Core_Upgrader\n *\/"}]},"wp_update_plugin":{"name":"wp_update_plugin","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$plugin","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feedback","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * This was once used to kick-off the Plugin Updater.\n *\n * Deprecated in favor of instantating a Plugin_Upgrader instance directly,\n * and calling the 'upgrade' method.\n * Unused since 2.8.0.\n *\n * @since 2.5.0\n * @deprecated 3.7.0 Use Plugin_Upgrader\n * @see Plugin_Upgrader\n *\/"}]},"wp_update_theme":{"name":"wp_update_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feedback","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * This was once used to kick-off the Theme Updater.\n *\n * Deprecated in favor of instantiating a Theme_Upgrader instance directly,\n * and calling the 'upgrade' method.\n * Unused since 2.8.0.\n *\n * @since 2.7.0\n * @deprecated 3.7.0 Use Theme_Upgrader\n * @see Theme_Upgrader\n *\/"}]},"the_attachment_links":{"name":"the_attachment_links","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * This was once used to display attachment links. Now it is deprecated and stubbed.\n *\n * @since 2.0.0\n * @deprecated 3.7.0\n *\n * @param int|bool $id\n *\/"}]},"screen_icon":{"name":"screen_icon","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays a screen icon.\n *\n * @since 2.7.0\n * @since 3.8.0 Screen icons are no longer used in WordPress. This function no longer produces output.\n * @deprecated 3.8.0 Use get_screen_icon()\n * @see get_screen_icon()\n *\/"}]},"get_screen_icon":{"name":"get_screen_icon","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the screen icon (no longer used in 3.8+).\n *\n * @deprecated 3.8.0\n *\n * @return string\n *\/"}]},"wp_dashboard_incoming_links_output":{"name":"wp_dashboard_incoming_links_output","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated dashboard widget controls.\n *\n * @since 2.5.0\n * @deprecated 3.8.0\n *\/"}]},"wp_dashboard_secondary_output":{"name":"wp_dashboard_secondary_output","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated dashboard secondary output.\n *\n * @deprecated 3.8.0\n *\/"}]},"wp_dashboard_incoming_links":{"name":"wp_dashboard_incoming_links","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated dashboard widget controls.\n *\n * @since 2.7.0\n * @deprecated 3.8.0\n *\/"}]},"wp_dashboard_incoming_links_control":{"name":"wp_dashboard_incoming_links_control","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated dashboard incoming links control.\n *\n * @deprecated 3.8.0\n *\/"}]},"wp_dashboard_plugins":{"name":"wp_dashboard_plugins","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated dashboard plugins control.\n *\n * @deprecated 3.8.0\n *\/"}]},"wp_dashboard_primary_control":{"name":"wp_dashboard_primary_control","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated dashboard primary control.\n *\n * @deprecated 3.8.0\n *\/"}]},"wp_dashboard_recent_comments_control":{"name":"wp_dashboard_recent_comments_control","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated dashboard recent comments control.\n *\n * @deprecated 3.8.0\n *\/"}]},"wp_dashboard_secondary":{"name":"wp_dashboard_secondary","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated dashboard secondary section.\n *\n * @deprecated 3.8.0\n *\/"}]},"wp_dashboard_secondary_control":{"name":"wp_dashboard_secondary_control","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated dashboard secondary control.\n *\n * @deprecated 3.8.0\n *\/"}]},"_relocate_children":{"name":"_relocate_children","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$old_ID","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$new_ID","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * This was once used to move child posts to a new parent.\n *\n * @since 2.3.0\n * @deprecated 3.9.0\n * @access private\n *\n * @param int $old_ID\n * @param int $new_ID\n *\/"}]},"add_object_page":{"name":"add_object_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page_title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capability","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_slug","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$icon_url","rank":5,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a top-level menu page in the 'objects' section.\n *\n * This function takes a capability which will be used to determine whether\n * or not a page is included in the menu.\n *\n * The function which is hooked in to handle the output of the page must check\n * that the user has the required capability as well.\n *\n * @since 2.7.0\n *\n * @deprecated 4.5.0 Use add_menu_page()\n * @see add_menu_page()\n * @global int $_wp_last_object_menu\n *\n * @param string   $page_title The text to be displayed in the title tags of the page when the menu is selected.\n * @param string   $menu_title The text to be used for the menu.\n * @param string   $capability The capability required for this menu to be displayed to the user.\n * @param string   $menu_slug  The slug name to refer to this menu by (should be unique for this menu).\n * @param callable $function   The function to be called to output the content for this page.\n * @param string   $icon_url   The url to the icon to be used for this menu.\n * @return string The resulting page's hook_suffix.\n *\/"}]},"add_utility_page":{"name":"add_utility_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page_title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capability","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_slug","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$icon_url","rank":5,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a top-level menu page in the 'utility' section.\n *\n * This function takes a capability which will be used to determine whether\n * or not a page is included in the menu.\n *\n * The function which is hooked in to handle the output of the page must check\n * that the user has the required capability as well.\n *\n * @since 2.7.0\n *\n * @deprecated 4.5.0 Use add_menu_page()\n * @see add_menu_page()\n * @global int $_wp_last_utility_menu\n *\n * @param string   $page_title The text to be displayed in the title tags of the page when the menu is selected.\n * @param string   $menu_title The text to be used for the menu.\n * @param string   $capability The capability required for this menu to be displayed to the user.\n * @param string   $menu_slug  The slug name to refer to this menu by (should be unique for this menu).\n * @param callable $function   The function to be called to output the content for this page.\n * @param string   $icon_url   The url to the icon to be used for this menu.\n * @return string The resulting page's hook_suffix.\n *\/"}]},"post_form_autocomplete_off":{"name":"post_form_autocomplete_off","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Disables autocomplete on the 'post' form (Add\/Edit Post screens) for WebKit browsers,\n * as they disregard the autocomplete setting on the editor textarea. That can break the editor\n * when the user navigates to it with the browser's Back button. See #28037\n *\n * Replaced with wp_page_reload_on_back_button_js() that also fixes this problem.\n *\n * @since 4.0.0\n * $deprecated 4.6.0\n *\n * @global bool $is_safari\n * @global bool $is_chrome\n *\/"}]},"mysql2date":{"name":"mysql2date","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$format","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$date","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$translate","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert given date string into a different format.\n *\n * $format should be either a PHP date format string, e.g. 'U' for a Unix\n * timestamp, or 'G' for a Unix timestamp assuming that $date is GMT.\n *\n * If $translate is true then the given date and format string will\n * be passed to date_i18n() for translation.\n *\n * @since 0.71\n *\n * @param string $format    Format of the date to return.\n * @param string $date      Date string to convert.\n * @param bool   $translate Whether the return date should be translated. Default true.\n * @return string|int|bool Formatted date string or Unix timestamp. False if $date is empty.\n *\/"}]},"current_time":{"name":"current_time","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$gmt","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the current time based on specified type.\n *\n * The 'mysql' type will return the time in the format for MySQL DATETIME field.\n * The 'timestamp' type will return the current timestamp.\n * Other strings will be interpreted as PHP date formats (e.g. 'Y-m-d').\n *\n * If $gmt is set to either '1' or 'true', then both types will use GMT time.\n * if $gmt is false, the output is adjusted with the GMT offset in the WordPress option.\n *\n * @since 1.0.0\n *\n * @param string   $type Type of time to retrieve. Accepts 'mysql', 'timestamp', or PHP date\n *                       format string (e.g. 'Y-m-d').\n * @param int|bool $gmt  Optional. Whether to use GMT timezone. Default false.\n * @return int|string Integer if $type is 'timestamp', string otherwise.\n *\/"}]},"date_i18n":{"name":"date_i18n","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$dateformatstring","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$unixtimestamp","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$gmt","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the date in localized format, based on timestamp.\n *\n * If the locale specifies the locale month and weekday, then the locale will\n * take over the format for the date. If it isn't, then the date format string\n * will be used instead.\n *\n * @since 0.71\n *\n * @global WP_Locale $wp_locale\n *\n * @param string   $dateformatstring Format to display the date.\n * @param bool|int $unixtimestamp    Optional. Unix timestamp. Default false.\n * @param bool     $gmt              Optional. Whether to use GMT timezone. Default false.\n *\n * @return string The date, translated if locale specifies it.\n *\/"}]},"wp_maybe_decline_date":{"name":"wp_maybe_decline_date","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$date","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines if the date should be declined.\n *\n * If the locale specifies that month names require a genitive case in certain\n * formats (like 'j F Y'), the month name will be replaced with a correct form.\n *\n * @since 4.4.0\n *\n * @param string $date Formatted date string.\n * @return string The date, declined if locale specifies it.\n *\/"}]},"number_format_i18n":{"name":"number_format_i18n","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$number","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$decimals","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert float number to format based on the locale.\n *\n * @since 2.3.0\n *\n * @global WP_Locale $wp_locale\n *\n * @param float $number   The number to convert based on locale.\n * @param int   $decimals Optional. Precision of the number of decimal places. Default 0.\n * @return string Converted number in string format.\n *\/"}]},"size_format":{"name":"size_format","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$bytes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$decimals","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert number of bytes largest unit bytes will fit into.\n *\n * It is easier to read 1 KB than 1024 bytes and 1 MB than 1048576 bytes. Converts\n * number of bytes to human readable number by taking the number of that unit\n * that the bytes will go into it. Supports TB value.\n *\n * Please note that integers in PHP are limited to 32 bits, unless they are on\n * 64 bit architecture, then they have 64 bit size. If you need to place the\n * larger size then what PHP integer type will hold, then use a string. It will\n * be converted to a double, which should always have 64 bit length.\n *\n * Technically the correct unit names for powers of 1024 are KiB, MiB etc.\n *\n * @since 2.3.0\n *\n * @param int|string $bytes    Number of bytes. Note max integer size for integers.\n * @param int        $decimals Optional. Precision of number of decimal places. Default 0.\n * @return string|false False on failure. Number string on success.\n *\/"}]},"get_weekstartend":{"name":"get_weekstartend","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$mysqlstring","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$start_of_week","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the week start and end from the datetime or date string from MySQL.\n *\n * @since 0.71\n *\n * @param string     $mysqlstring   Date or datetime field type from MySQL.\n * @param int|string $start_of_week Optional. Start of the week as an integer. Default empty string.\n * @return array Keys are 'start' and 'end'.\n *\/"}]},"maybe_unserialize":{"name":"maybe_unserialize","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$original","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Unserialize value only if it was serialized.\n *\n * @since 2.0.0\n *\n * @param string $original Maybe unserialized original, if is needed.\n * @return mixed Unserialized data can be any type.\n *\/"}]},"is_serialized":{"name":"is_serialized","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$strict","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check value to find if it was serialized.\n *\n * If $data is not an string, then returned value will always be false.\n * Serialized data is always a string.\n *\n * @since 2.0.5\n *\n * @param string $data   Value to check to see if was serialized.\n * @param bool   $strict Optional. Whether to be strict about the end of the string. Default true.\n * @return bool False if not serialized and true if it was.\n *\/"}]},"is_serialized_string":{"name":"is_serialized_string","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether serialized data is of string type.\n *\n * @since 2.0.5\n *\n * @param string $data Serialized data.\n * @return bool False if not a serialized string, true if it is.\n *\/"}]},"maybe_serialize":{"name":"maybe_serialize","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Serialize data, if needed.\n *\n * @since 2.0.5\n *\n * @param string|array|object $data Data that might be serialized.\n * @return mixed A scalar data\n *\/"}]},"xmlrpc_getposttitle":{"name":"xmlrpc_getposttitle","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve post title from XMLRPC XML.\n *\n * If the title element is not part of the XML, then the default post title from\n * the $post_default_title will be used instead.\n *\n * @since 0.71\n *\n * @global string $post_default_title Default XML-RPC post title.\n *\n * @param string $content XMLRPC XML Request content\n * @return string Post title\n *\/"}]},"xmlrpc_getpostcategory":{"name":"xmlrpc_getpostcategory","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the post category or categories from XMLRPC XML.\n *\n * If the category element is not found, then the default post category will be\n * used. The return type then would be what $post_default_category. If the\n * category is found, then it will always be an array.\n *\n * @since 0.71\n *\n * @global string $post_default_category Default XML-RPC post category.\n *\n * @param string $content XMLRPC XML Request content\n * @return string|array List of categories or category name.\n *\/"}]},"xmlrpc_removepostdata":{"name":"xmlrpc_removepostdata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * XMLRPC XML content without title and category elements.\n *\n * @since 0.71\n *\n * @param string $content XML-RPC XML Request content.\n * @return string XMLRPC XML Request content without title and category elements.\n *\/"}]},"wp_extract_urls":{"name":"wp_extract_urls","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Use RegEx to extract URLs from arbitrary content.\n *\n * @since 3.7.0\n *\n * @param string $content Content to extract URLs from.\n * @return array URLs found in passed string.\n *\/"}]},"do_enclose":{"name":"do_enclose","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_ID","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check content for video and audio links to add as enclosures.\n *\n * Will not add enclosures that have already been added and will\n * remove enclosures that are no longer in the post. This is called as\n * pingbacks and trackbacks.\n *\n * @since 1.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $content Post Content.\n * @param int    $post_ID Post ID.\n *\/"}]},"wp_get_http_headers":{"name":"wp_get_http_headers","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve HTTP Headers from URL.\n *\n * @since 1.5.1\n *\n * @param string $url        URL to retrieve HTTP headers from.\n * @param bool   $deprecated Not Used.\n * @return bool|string False on failure, headers on success.\n *\/"}]},"is_new_day":{"name":"is_new_day","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether the publish date of the current post in the loop is different from the\n * publish date of the previous post in the loop.\n *\n * @since 0.71\n *\n * @global string $currentday  The day of the current post in the loop.\n * @global string $previousday The day of the previous post in the loop.\n *\n * @return int 1 when new day, 0 if not a new day.\n *\/"}]},"build_query":{"name":"build_query","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Build URL query based on an associative and, or indexed array.\n *\n * This is a convenient function for easily building url queries. It sets the\n * separator to '&' and uses _http_build_query() function.\n *\n * @since 2.3.0\n *\n * @see _http_build_query() Used to build the query\n * @link https:\/\/secure.php.net\/manual\/en\/function.http-build-query.php for more on what\n *\t\t http_build_query() does.\n *\n * @param array $data URL-encode key\/value pairs.\n * @return string URL-encoded string.\n *\/"}]},"_http_build_query":{"name":"_http_build_query","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$prefix","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sep","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$urlencode","rank":4,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * From php.net (modified by Mark Jaquith to behave like the native PHP5 function).\n *\n * @since 3.2.0\n * @access private\n *\n * @see https:\/\/secure.php.net\/manual\/en\/function.http-build-query.php\n *\n * @param array|object  $data       An array or object of data. Converted to array.\n * @param string        $prefix     Optional. Numeric index. If set, start parameter numbering with it.\n *                                  Default null.\n * @param string        $sep        Optional. Argument separator; defaults to 'arg_separator.output'.\n *                                  Default null.\n * @param string        $key        Optional. Used to prefix key name. Default empty.\n * @param bool          $urlencode  Optional. Whether to use urlencode() in the result. Default true.\n *\n * @return string The query string.\n *\/"}]},"add_query_arg":{"name":"add_query_arg","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a modified URL query string.\n *\n * You can rebuild the URL and append query variables to the URL query by using this function.\n * There are two ways to use this function; either a single key and value, or an associative array.\n *\n * Using a single key and value:\n *\n *     add_query_arg( 'key', 'value', 'http:\/\/example.com' );\n *\n * Using an associative array:\n *\n *     add_query_arg( array(\n *         'key1' => 'value1',\n *         'key2' => 'value2',\n *     ), 'http:\/\/example.com' );\n *\n * Omitting the URL from either use results in the current URL being used\n * (the value of `$_SERVER['REQUEST_URI']`).\n *\n * Values are expected to be encoded appropriately with urlencode() or rawurlencode().\n *\n * Setting any query variable's value to boolean false removes the key (see remove_query_arg()).\n *\n * Important: The return value of add_query_arg() is not escaped by default. Output should be\n * late-escaped with esc_url() or similar to help prevent vulnerability to cross-site scripting\n * (XSS) attacks.\n *\n * @since 1.5.0\n *\n * @param string|array $key   Either a query variable key, or an associative array of query variables.\n * @param string       $value Optional. Either a query variable value, or a URL to act upon.\n * @param string       $url   Optional. A URL to act upon.\n * @return string New URL query string (unescaped).\n *\/"}]},"remove_query_arg":{"name":"remove_query_arg","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$query","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes an item or items from a query string.\n *\n * @since 1.5.0\n *\n * @param string|array $key   Query key or keys to remove.\n * @param bool|string  $query Optional. When false uses the current URL. Default false.\n * @return string New URL query string.\n *\/"}]},"wp_removable_query_args":{"name":"wp_removable_query_args","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns an array of single-use query variable names that can be removed from a URL.\n *\n * @since 4.4.0\n *\n * @return array An array of parameters to remove from the URL.\n *\/"}]},"add_magic_quotes":{"name":"add_magic_quotes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$array","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Walks the array while sanitizing the contents.\n *\n * @since 0.71\n *\n * @param array $array Array to walk while sanitizing contents.\n * @return array Sanitized $array.\n *\/"}]},"wp_remote_fopen":{"name":"wp_remote_fopen","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$uri","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * HTTP request for URI to retrieve content.\n *\n * @since 1.5.1\n *\n * @see wp_safe_remote_get()\n *\n * @param string $uri URI\/URL of web page to retrieve.\n * @return false|string HTTP content. False on failure.\n *\/"}]},"wp":{"name":"wp","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$query_vars","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set up the WordPress query.\n *\n * @since 2.0.0\n *\n * @global WP       $wp_locale\n * @global WP_Query $wp_query\n * @global WP_Query $wp_the_query\n *\n * @param string|array $query_vars Default WP_Query arguments.\n *\/"}]},"get_status_header_desc":{"name":"get_status_header_desc","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$code","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the description for the HTTP status.\n *\n * @since 2.3.0\n *\n * @global array $wp_header_to_desc\n *\n * @param int $code HTTP status code.\n * @return string Empty string if not found, or description if found.\n *\/"}]},"status_header":{"name":"status_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$code","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$description","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set HTTP status header.\n *\n * @since 2.0.0\n * @since 4.4.0 Added the `$description` parameter.\n *\n * @see get_status_header_desc()\n *\n * @param int    $code        HTTP status code.\n * @param string $description Optional. A custom description for the HTTP status.\n *\/"}]},"wp_get_nocache_headers":{"name":"wp_get_nocache_headers","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the header information to prevent caching.\n *\n * The several different headers cover the different ways cache prevention\n * is handled by different browsers\n *\n * @since 2.8.0\n *\n * @return array The associative array of header names and field values.\n *\/"}]},"nocache_headers":{"name":"nocache_headers","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set the headers to prevent caching for the different browsers.\n *\n * Different browsers support different nocache headers, so several\n * headers must be sent so that all of them get the point that no\n * caching should occur.\n *\n * @since 2.0.0\n *\n * @see wp_get_nocache_headers()\n *\/"}]},"cache_javascript_headers":{"name":"cache_javascript_headers","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set the headers for caching for 10 days with JavaScript content type.\n *\n * @since 2.1.0\n *\/"}]},"get_num_queries":{"name":"get_num_queries","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the number of database queries during the WordPress execution.\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @return int Number of database queries.\n *\/"}]},"bool_from_yn":{"name":"bool_from_yn","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$yn","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether input is yes or no.\n *\n * Must be 'y' to be true.\n *\n * @since 1.0.0\n *\n * @param string $yn Character string containing either 'y' (yes) or 'n' (no).\n * @return bool True if yes, false on anything else.\n *\/"}]},"do_feed":{"name":"do_feed","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load the feed template from the use of an action hook.\n *\n * If the feed action does not have a hook, then the function will die with a\n * message telling the visitor that the feed is not valid.\n *\n * It is better to only have one hook for each feed.\n *\n * @since 2.1.0\n *\n * @global WP_Query $wp_query Used to tell if the use a comment feed.\n *\/"}]},"do_feed_rdf":{"name":"do_feed_rdf","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load the RDF RSS 0.91 Feed template.\n *\n * @since 2.1.0\n *\n * @see load_template()\n *\/"}]},"do_feed_rss":{"name":"do_feed_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load the RSS 1.0 Feed Template.\n *\n * @since 2.1.0\n *\n * @see load_template()\n *\/"}]},"do_feed_rss2":{"name":"do_feed_rss2","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$for_comments","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load either the RSS2 comment feed or the RSS2 posts feed.\n *\n * @since 2.1.0\n *\n * @see load_template()\n *\n * @param bool $for_comments True for the comment feed, false for normal feed.\n *\/"}]},"do_feed_atom":{"name":"do_feed_atom","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$for_comments","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load either Atom comment feed or Atom posts feed.\n *\n * @since 2.1.0\n *\n * @see load_template()\n *\n * @param bool $for_comments True for the comment feed, false for normal feed.\n *\/"}]},"do_robots":{"name":"do_robots","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the robots.txt file content.\n *\n * The echo content should be with usage of the permalinks or for creating the\n * robots.txt file.\n *\n * @since 2.1.0\n *\/"}]},"is_blog_installed":{"name":"is_blog_installed","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Test whether WordPress is already installed.\n *\n * The cache will be checked first. If you have a cache plugin, which saves\n * the cache values, then this will work. If you use the default WordPress\n * cache, and the database goes away, then you might have problems.\n *\n * Checks for the 'siteurl' option for whether WordPress is installed.\n *\n * @since 2.1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @return bool Whether the site is already installed.\n *\/"}]},"wp_nonce_url":{"name":"wp_nonce_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$actionurl","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$action","rank":1,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":2,"variadic":false,"reference":false,"default":"'_wpnonce'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve URL with nonce added to URL query.\n *\n * @since 2.0.4\n *\n * @param string     $actionurl URL to add nonce action.\n * @param int|string $action    Optional. Nonce action name. Default -1.\n * @param string     $name      Optional. Nonce name. Default '_wpnonce'.\n * @return string Escaped URL with nonce action added.\n *\/"}]},"wp_nonce_field":{"name":"wp_nonce_field","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"\"_wpnonce\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$referer","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":3,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve or display nonce hidden field for forms.\n *\n * The nonce field is used to validate that the contents of the form came from\n * the location on the current site and not somewhere else. The nonce does not\n * offer absolute protection, but should protect against most cases. It is very\n * important to use nonce field in forms.\n *\n * The $action and $name are optional, but if you want to have better security,\n * it is strongly suggested to set those two parameters. It is easier to just\n * call the function without any parameters, because validation of the nonce\n * doesn't require any parameters, but since crackers know what the default is\n * it won't be difficult for them to find a way around your nonce and cause\n * damage.\n *\n * The input name will be whatever $name value you gave. The input value will be\n * the nonce creation value.\n *\n * @since 2.0.4\n *\n * @param int|string $action  Optional. Action name. Default -1.\n * @param string     $name    Optional. Nonce name. Default '_wpnonce'.\n * @param bool       $referer Optional. Whether to set the referer field for validation. Default true.\n * @param bool       $echo    Optional. Whether to display or return hidden form field. Default true.\n * @return string Nonce field HTML markup.\n *\/"}]},"wp_referer_field":{"name":"wp_referer_field","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$echo","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve or display referer hidden field for forms.\n *\n * The referer link is the current Request URI from the server super global. The\n * input name is '_wp_http_referer', in case you wanted to check manually.\n *\n * @since 2.0.4\n *\n * @param bool $echo Optional. Whether to echo or return the referer field. Default true.\n * @return string Referer field HTML markup.\n *\/"}]},"wp_original_referer_field":{"name":"wp_original_referer_field","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$echo","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$jump_back_to","rank":1,"variadic":false,"reference":false,"default":"'current'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve or display original referer hidden field for forms.\n *\n * The input name is '_wp_original_http_referer' and will be either the same\n * value of wp_referer_field(), if that was posted already or it will be the\n * current page, if it doesn't exist.\n *\n * @since 2.0.4\n *\n * @param bool   $echo         Optional. Whether to echo the original http referer. Default true.\n * @param string $jump_back_to Optional. Can be 'previous' or page you want to jump back to.\n *                             Default 'current'.\n * @return string Original referer field.\n *\/"}]},"wp_get_referer":{"name":"wp_get_referer","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve referer from '_wp_http_referer' or HTTP referer.\n *\n * If it's the same as the current request URL, will return false.\n *\n * @since 2.0.4\n *\n * @return false|string False on failure. Referer URL on success.\n *\/"}]},"wp_get_raw_referer":{"name":"wp_get_raw_referer","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves unvalidated referer from '_wp_http_referer' or HTTP referer.\n *\n * Do not use for redirects, use wp_get_referer() instead.\n *\n * @since 4.5.0\n *\n * @return string|false Referer URL on success, false on failure.\n *\/"}]},"wp_get_original_referer":{"name":"wp_get_original_referer","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve original referer that was posted, if it exists.\n *\n * @since 2.0.4\n *\n * @return string|false False if no original referer or original referer if set.\n *\/"}]},"wp_mkdir_p":{"name":"wp_mkdir_p","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$target","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Recursive directory creation based on full path.\n *\n * Will attempt to set permissions on folders.\n *\n * @since 2.0.1\n *\n * @param string $target Full path to attempt to create.\n * @return bool Whether the path was created. True if path already exists.\n *\/"}]},"path_is_absolute":{"name":"path_is_absolute","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Test if a give filesystem path is absolute.\n *\n * For example, '\/foo\/bar', or 'c:\\windows'.\n *\n * @since 2.5.0\n *\n * @param string $path File path.\n * @return bool True if path is absolute, false is not absolute.\n *\/"}]},"path_join":{"name":"path_join","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$base","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Join two filesystem paths together.\n *\n * For example, 'give me $path relative to $base'. If the $path is absolute,\n * then it the full path is returned.\n *\n * @since 2.5.0\n *\n * @param string $base Base path.\n * @param string $path Path relative to $base.\n * @return string The path with the base or absolute path.\n *\/"}]},"wp_normalize_path":{"name":"wp_normalize_path","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Normalize a filesystem path.\n *\n * On windows systems, replaces backslashes with forward slashes\n * and forces upper-case drive letters.\n * Allows for two leading slashes for Windows network shares, but\n * ensures that all other duplicate slashes are reduced to a single.\n *\n * @since 3.9.0\n * @since 4.4.0 Ensures upper-case drive letters on Windows systems.\n * @since 4.5.0 Allows for Windows network shares.\n * @since 4.9.7 Allows for PHP file wrappers.\n *\n * @param string $path Path to normalize.\n * @return string Normalized path.\n *\/"}]},"get_temp_dir":{"name":"get_temp_dir","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine a writable directory for temporary files.\n *\n * Function's preference is the return value of sys_get_temp_dir(),\n * followed by your PHP temporary upload directory, followed by WP_CONTENT_DIR,\n * before finally defaulting to \/tmp\/\n *\n * In the event that this function does not find a writable location,\n * It may be overridden by the WP_TEMP_DIR constant in your wp-config.php file.\n *\n * @since 2.5.0\n *\n * @staticvar string $temp\n *\n * @return string Writable temporary directory.\n *\/"}]},"wp_is_writable":{"name":"wp_is_writable","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine if a directory is writable.\n *\n * This function is used to work around certain ACL issues in PHP primarily\n * affecting Windows Servers.\n *\n * @since 3.6.0\n *\n * @see win_is_writable()\n *\n * @param string $path Path to check for write-ability.\n * @return bool Whether the path is writable.\n *\/"}]},"win_is_writable":{"name":"win_is_writable","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Workaround for Windows bug in is_writable() function\n *\n * PHP has issues with Windows ACL's for determine if a\n * directory is writable or not, this works around them by\n * checking the ability to open files rather than relying\n * upon PHP to interprate the OS ACL.\n *\n * @since 2.8.0\n *\n * @see https:\/\/bugs.php.net\/bug.php?id=27609\n * @see https:\/\/bugs.php.net\/bug.php?id=30931\n *\n * @param string $path Windows path to check for write-ability.\n * @return bool Whether the path is writable.\n *\/"}]},"wp_get_upload_dir":{"name":"wp_get_upload_dir","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves uploads directory information.\n *\n * Same as wp_upload_dir() but \"light weight\" as it doesn't attempt to create the uploads directory.\n * Intended for use in themes, when only 'basedir' and 'baseurl' are needed, generally in all cases\n * when not uploading files.\n *\n * @since 4.5.0\n *\n * @see wp_upload_dir()\n *\n * @return array See wp_upload_dir() for description.\n *\/"}]},"wp_upload_dir":{"name":"wp_upload_dir","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$time","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$create_dir","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$refresh_cache","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get an array containing the current upload directory's path and url.\n *\n * Checks the 'upload_path' option, which should be from the web root folder,\n * and if it isn't empty it will be used. If it is empty, then the path will be\n * 'WP_CONTENT_DIR\/uploads'. If the 'UPLOADS' constant is defined, then it will\n * override the 'upload_path' option and 'WP_CONTENT_DIR\/uploads' path.\n *\n * The upload URL path is set either by the 'upload_url_path' option or by using\n * the 'WP_CONTENT_URL' constant and appending '\/uploads' to the path.\n *\n * If the 'uploads_use_yearmonth_folders' is set to true (checkbox if checked in\n * the administration settings panel), then the time will be used. The format\n * will be year first and then month.\n *\n * If the path couldn't be created, then an error will be returned with the key\n * 'error' containing the error message. The error suggests that the parent\n * directory is not writable by the server.\n *\n * On success, the returned array will have many indices:\n * 'path' - base directory and sub directory or full path to upload directory.\n * 'url' - base url and sub directory or absolute URL to upload directory.\n * 'subdir' - sub directory if uploads use year\/month folders option is on.\n * 'basedir' - path without subdir.\n * 'baseurl' - URL path without subdir.\n * 'error' - false or error message.\n *\n * @since 2.0.0\n * @uses _wp_upload_dir()\n *\n * @param string $time Optional. Time formatted in 'yyyy\/mm'. Default null.\n * @param bool   $create_dir Optional. Whether to check and create the uploads directory.\n *                           Default true for backward compatibility.\n * @param bool   $refresh_cache Optional. Whether to refresh the cache. Default false.\n * @return array See above for description.\n *\/"}]},"_wp_upload_dir":{"name":"_wp_upload_dir","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$time","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * A non-filtered, non-cached version of wp_upload_dir() that doesn't check the path.\n *\n * @access private\n *\n * @param string $time Optional. Time formatted in 'yyyy\/mm'. Default null.\n * @return array See wp_upload_dir()\n *\/"}]},"wp_unique_filename":{"name":"wp_unique_filename","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filename","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$unique_filename_callback","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get a filename that is sanitized and unique for the given directory.\n *\n * If the filename is not unique, then a number will be added to the filename\n * before the extension, and will continue adding numbers until the filename is\n * unique.\n *\n * The callback is passed three parameters, the first one is the directory, the\n * second is the filename, and the third is the extension.\n *\n * @since 2.5.0\n *\n * @param string   $dir                      Directory.\n * @param string   $filename                 File name.\n * @param callable $unique_filename_callback Callback. Default null.\n * @return string New filename, if given wasn't unique.\n *\/"}]},"wp_upload_bits":{"name":"wp_upload_bits","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$bits","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$time","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create a file in the upload folder with given content.\n *\n * If there is an error, then the key 'error' will exist with the error message.\n * If success, then the key 'file' will have the unique file path, the 'url' key\n * will have the link to the new file. and the 'error' key will be set to false.\n *\n * This function will not move an uploaded file to the upload folder. It will\n * create a new file with the content in $bits parameter. If you move the upload\n * file, read the content of the uploaded file, and then you can give the\n * filename and content to this function, which will add it to the upload\n * folder.\n *\n * The permissions will be set on the new file automatically by this function.\n *\n * @since 2.0.0\n *\n * @param string       $name       Filename.\n * @param null|string  $deprecated Never used. Set to null.\n * @param mixed        $bits       File content\n * @param string       $time       Optional. Time formatted in 'yyyy\/mm'. Default null.\n * @return array\n *\/"}]},"wp_ext2type":{"name":"wp_ext2type","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$ext","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the file type based on the extension name.\n *\n * @since 2.5.0\n *\n * @param string $ext The extension to search.\n * @return string|void The file type, example: audio, video, document, spreadsheet, etc.\n *\/"}]},"wp_check_filetype":{"name":"wp_check_filetype","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mimes","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the file type from the file name.\n *\n * You can optionally define the mime array, if needed.\n *\n * @since 2.0.4\n *\n * @param string $filename File name or path.\n * @param array  $mimes    Optional. Key is the file extension with value as the mime type.\n * @return array Values with extension first and mime type.\n *\/"}]},"wp_check_filetype_and_ext":{"name":"wp_check_filetype_and_ext","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filename","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mimes","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Attempt to determine the real file type of a file.\n *\n * If unable to, the file name extension will be used to determine type.\n *\n * If it's determined that the extension does not match the file's real type,\n * then the \"proper_filename\" value will be set with a proper filename and extension.\n *\n * Currently this function only supports renaming images validated via wp_get_image_mime().\n *\n * @since 3.0.0\n *\n * @param string $file     Full path to the file.\n * @param string $filename The name of the file (may differ from $file due to $file being\n *                         in a tmp directory).\n * @param array   $mimes   Optional. Key is the file extension with value as the mime type.\n * @return array Values for the extension, MIME, and either a corrected filename or false\n *               if original $filename is valid.\n *\/"}]},"wp_get_image_mime":{"name":"wp_get_image_mime","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the real mime type of an image file.\n *\n * This depends on exif_imagetype() or getimagesize() to determine real mime types.\n *\n * @since 4.7.1\n *\n * @param string $file Full path to the file.\n * @return string|false The actual mime type or false if the type cannot be determined.\n *\/"}]},"wp_get_mime_types":{"name":"wp_get_mime_types","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve list of mime types and file extensions.\n *\n * @since 3.5.0\n * @since 4.2.0 Support was added for GIMP (xcf) files.\n *\n * @return array Array of mime types keyed by the file extension regex corresponding to those types.\n *\/"}]},"wp_get_ext_types":{"name":"wp_get_ext_types","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the list of common file extensions and their types.\n *\n * @since 4.6.0\n *\n * @return array Array of file extensions types keyed by the type of file.\n *\/"}]},"get_allowed_mime_types":{"name":"get_allowed_mime_types","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve list of allowed mime types and file extensions.\n *\n * @since 2.8.6\n *\n * @param int|WP_User $user Optional. User to check. Defaults to current user.\n * @return array Array of mime types keyed by the file extension regex corresponding\n *               to those types.\n *\/"}]},"wp_nonce_ays":{"name":"wp_nonce_ays","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display \"Are You Sure\" message to confirm the action being taken.\n *\n * If the action has the nonce explain message, then it will be displayed\n * along with the \"Are you sure?\" message.\n *\n * @since 2.0.4\n *\n * @param string $action The nonce action.\n *\/"}]},"wp_die":{"name":"wp_die","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$message","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Kill WordPress execution and display HTML message with error message.\n *\n * This function complements the `die()` PHP function. The difference is that\n * HTML will be displayed to the user. It is recommended to use this function\n * only when the execution should not continue any further. It is not recommended\n * to call this function very often, and try to handle as many errors as possible\n * silently or more gracefully.\n *\n * As a shorthand, the desired HTTP response code may be passed as an integer to\n * the `$title` parameter (the default title would apply) or the `$args` parameter.\n *\n * @since 2.0.4\n * @since 4.1.0 The `$title` and `$args` parameters were changed to optionally accept\n *              an integer to be used as the response code.\n *\n * @param string|WP_Error  $message Optional. Error message. If this is a WP_Error object,\n *                                  and not an Ajax or XML-RPC request, the error's messages are used.\n *                                  Default empty.\n * @param string|int       $title   Optional. Error title. If `$message` is a `WP_Error` object,\n *                                  error data with the key 'title' may be used to specify the title.\n *                                  If `$title` is an integer, then it is treated as the response\n *                                  code. Default empty.\n * @param string|array|int $args {\n *     Optional. Arguments to control behavior. If `$args` is an integer, then it is treated\n *     as the response code. Default empty array.\n *\n *     @type int    $response       The HTTP response code. Default 200 for Ajax requests, 500 otherwise.\n *     @type bool   $back_link      Whether to include a link to go back. Default false.\n *     @type string $text_direction The text direction. This is only useful internally, when WordPress\n *                                  is still loading and the site's locale is not set up yet. Accepts 'rtl'.\n *                                  Default is the value of is_rtl().\n * }\n *\/"}]},"_default_wp_die_handler":{"name":"_default_wp_die_handler","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$message","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Kills WordPress execution and display HTML message with error message.\n *\n * This is the default handler for wp_die if you want a custom one for your\n * site then you can overload using the {@see 'wp_die_handler'} filter in wp_die().\n *\n * @since 3.0.0\n * @access private\n *\n * @param string|WP_Error $message Error message or WP_Error object.\n * @param string          $title   Optional. Error title. Default empty.\n * @param string|array    $args    Optional. Arguments to control behavior. Default empty array.\n *\/"}]},"_xmlrpc_wp_die_handler":{"name":"_xmlrpc_wp_die_handler","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$message","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Kill WordPress execution and display XML message with error message.\n *\n * This is the handler for wp_die when processing XMLRPC requests.\n *\n * @since 3.2.0\n * @access private\n *\n * @global wp_xmlrpc_server $wp_xmlrpc_server\n *\n * @param string       $message Error message.\n * @param string       $title   Optional. Error title. Default empty.\n * @param string|array $args    Optional. Arguments to control behavior. Default empty array.\n *\/"}]},"_ajax_wp_die_handler":{"name":"_ajax_wp_die_handler","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$message","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Kill WordPress ajax execution.\n *\n * This is the handler for wp_die when processing Ajax requests.\n *\n * @since 3.4.0\n * @access private\n *\n * @param string       $message Error message.\n * @param string       $title   Optional. Error title (unused). Default empty.\n * @param string|array $args    Optional. Arguments to control behavior. Default empty array.\n *\/"}]},"_scalar_wp_die_handler":{"name":"_scalar_wp_die_handler","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$message","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Kill WordPress execution.\n *\n * This is the handler for wp_die when processing APP requests.\n *\n * @since 3.4.0\n * @access private\n *\n * @param string $message Optional. Response to print. Default empty.\n *\/"}]},"wp_json_encode":{"name":"wp_json_encode","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"512","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Encode a variable into JSON, with some sanity checks.\n *\n * @since 4.1.0\n *\n * @param mixed $data    Variable (usually an array or object) to encode as JSON.\n * @param int   $options Optional. Options to be passed to json_encode(). Default 0.\n * @param int   $depth   Optional. Maximum depth to walk through $data. Must be\n *                       greater than 0. Default 512.\n * @return string|false The JSON encoded string, or false if it cannot be encoded.\n *\/"}]},"_wp_json_sanity_check":{"name":"_wp_json_sanity_check","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Perform sanity checks on data that shall be encoded to JSON.\n *\n * @ignore\n * @since 4.1.0\n * @access private\n *\n * @see wp_json_encode()\n *\n * @param mixed $data  Variable (usually an array or object) to encode as JSON.\n * @param int   $depth Maximum depth to walk through $data. Must be greater than 0.\n * @return mixed The sanitized data that shall be encoded to JSON.\n *\/"}]},"_wp_json_convert_string":{"name":"_wp_json_convert_string","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert a string to UTF-8, so that it can be safely encoded to JSON.\n *\n * @ignore\n * @since 4.1.0\n * @access private\n *\n * @see _wp_json_sanity_check()\n *\n * @staticvar bool $use_mb\n *\n * @param string $string The string which is to be converted.\n * @return string The checked string.\n *\/"}]},"_wp_json_prepare_data":{"name":"_wp_json_prepare_data","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prepares response data to be serialized to JSON.\n *\n * This supports the JsonSerializable interface for PHP 5.2-5.3 as well.\n *\n * @ignore\n * @since 4.4.0\n * @access private\n *\n * @param mixed $data Native representation.\n * @return bool|int|float|null|string|array Data ready for `json_encode()`.\n *\/"}]},"wp_send_json":{"name":"wp_send_json","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$status_code","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Send a JSON response back to an Ajax request.\n *\n * @since 3.5.0\n * @since 4.7.0 The `$status_code` parameter was added.\n *\n * @param mixed $response    Variable (usually an array or object) to encode as JSON,\n *                           then print and die.\n * @param int   $status_code The HTTP status code to output.\n *\/"}]},"wp_send_json_success":{"name":"wp_send_json_success","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$status_code","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Send a JSON response back to an Ajax request, indicating success.\n *\n * @since 3.5.0\n * @since 4.7.0 The `$status_code` parameter was added.\n *\n * @param mixed $data        Data to encode as JSON, then print and die.\n * @param int   $status_code The HTTP status code to output.\n *\/"}]},"wp_send_json_error":{"name":"wp_send_json_error","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$status_code","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Send a JSON response back to an Ajax request, indicating failure.\n *\n * If the `$data` parameter is a WP_Error object, the errors\n * within the object are processed and output as an array of error\n * codes and corresponding messages. All other types are output\n * without further processing.\n *\n * @since 3.5.0\n * @since 4.1.0 The `$data` parameter is now processed if a WP_Error object is passed in.\n * @since 4.7.0 The `$status_code` parameter was added.\n *\n * @param mixed $data        Data to encode as JSON, then print and die.\n * @param int   $status_code The HTTP status code to output.\n *\/"}]},"wp_check_jsonp_callback":{"name":"wp_check_jsonp_callback","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$callback","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks that a JSONP callback is a valid JavaScript callback.\n *\n * Only allows alphanumeric characters and the dot character in callback\n * function names. This helps to mitigate XSS attacks caused by directly\n * outputting user input.\n *\n * @since 4.6.0\n *\n * @param string $callback Supplied JSONP callback function.\n * @return bool True if valid callback, otherwise false.\n *\/"}]},"_config_wp_home":{"name":"_config_wp_home","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the WordPress home page URL.\n *\n * If the constant named 'WP_HOME' exists, then it will be used and returned\n * by the function. This can be used to counter the redirection on your local\n * development environment.\n *\n * @since 2.2.0\n * @access private\n *\n * @see WP_HOME\n *\n * @param string $url URL for the home location.\n * @return string Homepage location.\n *\/"}]},"_config_wp_siteurl":{"name":"_config_wp_siteurl","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the WordPress site URL.\n *\n * If the constant named 'WP_SITEURL' is defined, then the value in that\n * constant will always be returned. This can be used for debugging a site\n * on your localhost while not having to change the database to your URL.\n *\n * @since 2.2.0\n * @access private\n *\n * @see WP_SITEURL\n *\n * @param string $url URL to set the WordPress site location.\n * @return string The WordPress Site URL.\n *\/"}]},"_delete_option_fresh_site":{"name":"_delete_option_fresh_site","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Delete the fresh site option.\n *\n * @since 4.7.0\n * @access private\n *\/"}]},"_mce_set_direction":{"name":"_mce_set_direction","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$mce_init","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set the localized direction for MCE plugin.\n *\n * Will only set the direction to 'rtl', if the WordPress locale has\n * the text direction set to 'rtl'.\n *\n * Fills in the 'directionality' setting, enables the 'directionality'\n * plugin, and adds the 'ltr' button to 'toolbar1', formerly\n * 'theme_advanced_buttons1' array keys. These keys are then returned\n * in the $mce_init (TinyMCE settings) array.\n *\n * @since 2.1.0\n * @access private\n *\n * @param array $mce_init MCE settings array.\n * @return array Direction set for 'rtl', if needed by locale.\n *\/"}]},"smilies_init":{"name":"smilies_init","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert smiley code to the icon graphic file equivalent.\n *\n * You can turn off smilies, by going to the write setting screen and unchecking\n * the box, or by setting 'use_smilies' option to false or removing the option.\n *\n * Plugins may override the default smiley list by setting the $wpsmiliestrans\n * to an array, with the key the code the blogger types in and the value the\n * image file.\n *\n * The $wp_smiliessearch global is for the regular expression and is set each\n * time the function is called.\n *\n * The full list of smilies can be found in the function and won't be listed in\n * the description. Probably should create a Codex page for it, so that it is\n * available.\n *\n * @global array $wpsmiliestrans\n * @global array $wp_smiliessearch\n *\n * @since 2.2.0\n *\/"}]},"wp_parse_args":{"name":"wp_parse_args","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$defaults","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Merge user defined arguments into defaults array.\n *\n * This function is used throughout WordPress to allow for both string or array\n * to be merged into another array.\n *\n * @since 2.2.0\n * @since 2.3.0 `$args` can now also be an object.\n *\n * @param string|array|object $args     Value to merge with $defaults.\n * @param array               $defaults Optional. Array that serves as the defaults. Default empty.\n * @return array Merged user defined values with defaults.\n *\/"}]},"wp_parse_id_list":{"name":"wp_parse_id_list","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$list","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Clean up an array, comma- or space-separated list of IDs.\n *\n * @since 3.0.0\n *\n * @param array|string $list List of ids.\n * @return array Sanitized array of IDs.\n *\/"}]},"wp_parse_slug_list":{"name":"wp_parse_slug_list","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$list","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Clean up an array, comma- or space-separated list of slugs.\n *\n * @since 4.7.0\n *\n * @param  array|string $list List of slugs.\n * @return array Sanitized array of slugs.\n *\/"}]},"wp_array_slice_assoc":{"name":"wp_array_slice_assoc","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$array","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$keys","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Extract a slice of an array, given a list of keys.\n *\n * @since 3.1.0\n *\n * @param array $array The original array.\n * @param array $keys  The list of keys.\n * @return array The array slice.\n *\/"}]},"wp_is_numeric_array":{"name":"wp_is_numeric_array","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines if the variable is a numeric-indexed array.\n *\n * @since 4.4.0\n *\n * @param mixed $data Variable to check.\n * @return bool Whether the variable is a list.\n *\/"}]},"wp_filter_object_list":{"name":"wp_filter_object_list","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$list","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$operator","rank":2,"variadic":false,"reference":false,"default":"'and'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$field","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters a list of objects, based on a set of key => value arguments.\n *\n * @since 3.0.0\n * @since 4.7.0 Uses WP_List_Util class.\n *\n * @param array       $list     An array of objects to filter\n * @param array       $args     Optional. An array of key => value arguments to match\n *                              against each object. Default empty array.\n * @param string      $operator Optional. The logical operation to perform. 'or' means\n *                              only one element from the array needs to match; 'and'\n *                              means all elements must match; 'not' means no elements may\n *                              match. Default 'and'.\n * @param bool|string $field    A field from the object to place instead of the entire object.\n *                              Default false.\n * @return array A list of objects or object fields.\n *\/"}]},"wp_list_filter":{"name":"wp_list_filter","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$list","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$operator","rank":2,"variadic":false,"reference":false,"default":"'AND'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters a list of objects, based on a set of key => value arguments.\n *\n * @since 3.1.0\n * @since 4.7.0 Uses WP_List_Util class.\n *\n * @param array  $list     An array of objects to filter.\n * @param array  $args     Optional. An array of key => value arguments to match\n *                         against each object. Default empty array.\n * @param string $operator Optional. The logical operation to perform. 'AND' means\n *                         all elements from the array must match. 'OR' means only\n *                         one element needs to match. 'NOT' means no elements may\n *                         match. Default 'AND'.\n * @return array Array of found values.\n *\/"}]},"wp_list_pluck":{"name":"wp_list_pluck","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$list","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$field","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$index_key","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Pluck a certain field out of each object in a list.\n *\n * This has the same functionality and prototype of\n * array_column() (PHP 5.5) but also supports objects.\n *\n * @since 3.1.0\n * @since 4.0.0 $index_key parameter added.\n * @since 4.7.0 Uses WP_List_Util class.\n *\n * @param array      $list      List of objects or arrays\n * @param int|string $field     Field from the object to place instead of the entire object\n * @param int|string $index_key Optional. Field from the object to use as keys for the new array.\n *                              Default null.\n * @return array Array of found values. If `$index_key` is set, an array of found values with keys\n *               corresponding to `$index_key`. If `$index_key` is null, array keys from the original\n *               `$list` will be preserved in the results.\n *\/"}]},"wp_list_sort":{"name":"wp_list_sort","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$list","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$orderby","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$order","rank":2,"variadic":false,"reference":false,"default":"'ASC'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$preserve_keys","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sorts a list of objects, based on one or more orderby arguments.\n *\n * @since 4.7.0\n *\n * @param array        $list          An array of objects to filter.\n * @param string|array $orderby       Optional. Either the field name to order by or an array\n *                                    of multiple orderby fields as $orderby => $order.\n * @param string       $order         Optional. Either 'ASC' or 'DESC'. Only used if $orderby\n *                                    is a string.\n * @param bool         $preserve_keys Optional. Whether to preserve keys. Default false.\n * @return array The sorted array.\n *\/"}]},"wp_maybe_load_widgets":{"name":"wp_maybe_load_widgets","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines if Widgets library should be loaded.\n *\n * Checks to make sure that the widgets library hasn't already been loaded.\n * If it hasn't, then it will load the widgets library and run an action hook.\n *\n * @since 2.2.0\n *\/"}]},"wp_widgets_add_menu":{"name":"wp_widgets_add_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Append the Widgets menu to the themes main menu.\n *\n * @since 2.2.0\n *\n * @global array $submenu\n *\/"}]},"wp_ob_end_flush_all":{"name":"wp_ob_end_flush_all","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Flush all output buffers for PHP 5.2.\n *\n * Make sure all output buffers are flushed before our singletons are destroyed.\n *\n * @since 2.2.0\n *\/"}]},"dead_db":{"name":"dead_db","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load custom DB error or display WordPress DB error.\n *\n * If a file exists in the wp-content directory named db-error.php, then it will\n * be loaded instead of displaying the WordPress DB error. If it is not found,\n * then the WordPress DB error will be displayed instead.\n *\n * The WordPress DB error sets the HTTP status header to 500 to try to prevent\n * search engines from caching the message. Custom DB messages should do the\n * same.\n *\n * This function was backported to WordPress 2.3.2, but originally was added\n * in WordPress 2.5.0.\n *\n * @since 2.3.2\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"absint":{"name":"absint","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$maybeint","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert a value to non-negative integer.\n *\n * @since 2.5.0\n *\n * @param mixed $maybeint Data you wish to have converted to a non-negative integer.\n * @return int A non-negative integer.\n *\/"}]},"_deprecated_function":{"name":"_deprecated_function","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$function","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$version","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$replacement","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Mark a function as deprecated and inform when it has been used.\n *\n * There is a {@see 'hook deprecated_function_run'} that will be called that can be used\n * to get the backtrace up to what file and function called the deprecated\n * function.\n *\n * The current behavior is to trigger a user error if `WP_DEBUG` is true.\n *\n * This function is to be used in every function that is deprecated.\n *\n * @since 2.5.0\n * @access private\n *\n * @param string $function    The function that was called.\n * @param string $version     The version of WordPress that deprecated the function.\n * @param string $replacement Optional. The function that should have been called. Default null.\n *\/"}]},"_deprecated_constructor":{"name":"_deprecated_constructor","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$version","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent_class","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Marks a constructor as deprecated and informs when it has been used.\n *\n * Similar to _deprecated_function(), but with different strings. Used to\n * remove PHP4 style constructors.\n *\n * The current behavior is to trigger a user error if `WP_DEBUG` is true.\n *\n * This function is to be used in every PHP4 style constructor method that is deprecated.\n *\n * @since 4.3.0\n * @since 4.5.0 Added the `$parent_class` parameter.\n *\n * @access private\n *\n * @param string $class        The class containing the deprecated constructor.\n * @param string $version      The version of WordPress that deprecated the function.\n * @param string $parent_class Optional. The parent class calling the deprecated constructor.\n *                             Default empty string.\n *\/"}]},"_deprecated_file":{"name":"_deprecated_file","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$version","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$replacement","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Mark a file as deprecated and inform when it has been used.\n *\n * There is a hook {@see 'deprecated_file_included'} that will be called that can be used\n * to get the backtrace up to what file and function included the deprecated\n * file.\n *\n * The current behavior is to trigger a user error if `WP_DEBUG` is true.\n *\n * This function is to be used in every file that is deprecated.\n *\n * @since 2.5.0\n * @access private\n *\n * @param string $file        The file that was included.\n * @param string $version     The version of WordPress that deprecated the file.\n * @param string $replacement Optional. The file that should have been included based on ABSPATH.\n *                            Default null.\n * @param string $message     Optional. A message regarding the change. Default empty.\n *\/"}]},"_deprecated_argument":{"name":"_deprecated_argument","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$function","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$version","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Mark a function argument as deprecated and inform when it has been used.\n *\n * This function is to be used whenever a deprecated function argument is used.\n * Before this function is called, the argument must be checked for whether it was\n * used by comparing it to its default value or evaluating whether it is empty.\n * For example:\n *\n *     if ( ! empty( $deprecated ) ) {\n *         _deprecated_argument( __FUNCTION__, '3.0.0' );\n *     }\n *\n *\n * There is a hook deprecated_argument_run that will be called that can be used\n * to get the backtrace up to what file and function used the deprecated\n * argument.\n *\n * The current behavior is to trigger a user error if WP_DEBUG is true.\n *\n * @since 3.0.0\n * @access private\n *\n * @param string $function The function that was called.\n * @param string $version  The version of WordPress that deprecated the argument used.\n * @param string $message  Optional. A message regarding the change. Default null.\n *\/"}]},"_deprecated_hook":{"name":"_deprecated_hook","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$hook","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$version","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$replacement","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Marks a deprecated action or filter hook as deprecated and throws a notice.\n *\n * Use the {@see 'deprecated_hook_run'} action to get the backtrace describing where\n * the deprecated hook was called.\n *\n * Default behavior is to trigger a user error if `WP_DEBUG` is true.\n *\n * This function is called by the do_action_deprecated() and apply_filters_deprecated()\n * functions, and so generally does not need to be called directly.\n *\n * @since 4.6.0\n * @access private\n *\n * @param string $hook        The hook that was used.\n * @param string $version     The version of WordPress that deprecated the hook.\n * @param string $replacement Optional. The hook that should have been used.\n * @param string $message     Optional. A message regarding the change.\n *\/"}]},"_doing_it_wrong":{"name":"_doing_it_wrong","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$function","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$version","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Mark something as being incorrectly called.\n *\n * There is a hook {@see 'doing_it_wrong_run'} that will be called that can be used\n * to get the backtrace up to what file and function called the deprecated\n * function.\n *\n * The current behavior is to trigger a user error if `WP_DEBUG` is true.\n *\n * @since 3.1.0\n * @access private\n *\n * @param string $function The function that was called.\n * @param string $message  A message explaining what has been done incorrectly.\n * @param string $version  The version of WordPress where the message was added.\n *\/"}]},"apache_mod_loaded":{"name":"apache_mod_loaded","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$mod","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Does the specified module exist in the Apache config?\n *\n * @since 2.5.0\n *\n * @global bool $is_apache\n *\n * @param string $mod     The module, e.g. mod_rewrite.\n * @param bool   $default Optional. The default return value if the module is not found. Default false.\n * @return bool Whether the specified module is loaded.\n *\/"}]},"iis7_supports_permalinks":{"name":"iis7_supports_permalinks","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if IIS 7+ supports pretty permalinks.\n *\n * @since 2.8.0\n *\n * @global bool $is_iis7\n *\n * @return bool Whether IIS7 supports permalinks.\n *\/"}]},"validate_file":{"name":"validate_file","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allowed_files","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * File validates against allowed set of defined rules.\n *\n * A return value of '1' means that the $file contains either '..' or '.\/'. A\n * return value of '2' means that the $file contains ':' after the first\n * character. A return value of '3' means that the file is not in the allowed\n * files list.\n *\n * @since 1.2.0\n *\n * @param string $file File path.\n * @param array  $allowed_files List of allowed files.\n * @return int 0 means nothing is wrong, greater than 0 means something was wrong.\n *\/"}]},"force_ssl_admin":{"name":"force_ssl_admin","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$force","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether to force SSL used for the Administration Screens.\n *\n * @since 2.6.0\n *\n * @staticvar bool $forced\n *\n * @param string|bool $force Optional. Whether to force SSL in admin screens. Default null.\n * @return bool True if forced, false if not forced.\n *\/"}]},"wp_suspend_cache_addition":{"name":"wp_suspend_cache_addition","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$suspend","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Temporarily suspend cache additions.\n *\n * Stops more data being added to the cache, but still allows cache retrieval.\n * This is useful for actions, such as imports, when a lot of data would otherwise\n * be almost uselessly added to the cache.\n *\n * Suspension lasts for a single page load at most. Remember to call this\n * function again if you wish to re-enable cache adds earlier.\n *\n * @since 3.3.0\n *\n * @staticvar bool $_suspend\n *\n * @param bool $suspend Optional. Suspends additions if true, re-enables them if false.\n * @return bool The current suspend setting\n *\/"}]},"wp_suspend_cache_invalidation":{"name":"wp_suspend_cache_invalidation","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$suspend","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Suspend cache invalidation.\n *\n * Turns cache invalidation on and off. Useful during imports where you don't wont to do\n * invalidations every time a post is inserted. Callers must be sure that what they are\n * doing won't lead to an inconsistent cache when invalidation is suspended.\n *\n * @since 2.7.0\n *\n * @global bool $_wp_suspend_cache_invalidation\n *\n * @param bool $suspend Optional. Whether to suspend or enable cache invalidation. Default true.\n * @return bool The current suspend setting.\n *\/"}]},"is_main_site":{"name":"is_main_site","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$site_id","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine whether a site is the main site of the current network.\n *\n * @since 3.0.0\n *\n * @param int $site_id Optional. Site ID to test. Defaults to current site.\n * @return bool True if $site_id is the main site of the network, or if not\n *              running Multisite.\n *\/"}]},"is_main_network":{"name":"is_main_network","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$network_id","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine whether a network is the main network of the Multisite install.\n *\n * @since 3.7.0\n *\n * @param int $network_id Optional. Network ID to test. Defaults to current network.\n * @return bool True if $network_id is the main network, or if not running Multisite.\n *\/"}]},"get_main_network_id":{"name":"get_main_network_id","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the main network ID.\n *\n * @since 4.3.0\n *\n * @return int The ID of the main network.\n *\/"}]},"global_terms_enabled":{"name":"global_terms_enabled","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine whether global terms are enabled.\n *\n * @since 3.0.0\n *\n * @staticvar bool $global_terms\n *\n * @return bool True if multisite and global terms enabled.\n *\/"}]},"wp_timezone_override_offset":{"name":"wp_timezone_override_offset","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * gmt_offset modification for smart timezone handling.\n *\n * Overrides the gmt_offset option if we have a timezone_string available.\n *\n * @since 2.8.0\n *\n * @return float|false Timezone GMT offset, false otherwise.\n *\/"}]},"_wp_timezone_choice_usort_callback":{"name":"_wp_timezone_choice_usort_callback","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sort-helper for timezones.\n *\n * @since 2.9.0\n * @access private\n *\n * @param array $a\n * @param array $b\n * @return int\n *\/"}]},"wp_timezone_choice":{"name":"wp_timezone_choice","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$selected_zone","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$locale","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gives a nicely-formatted list of timezone strings.\n *\n * @since 2.9.0\n * @since 4.7.0 Added the `$locale` parameter.\n *\n * @staticvar bool $mo_loaded\n * @staticvar string $locale_loaded\n *\n * @param string $selected_zone Selected timezone.\n * @param string $locale        Optional. Locale to load the timezones in. Default current site locale.\n * @return string\n *\/"}]},"_cleanup_header_comment":{"name":"_cleanup_header_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Strip close comment and close php tags from file headers used by WP.\n *\n * @since 2.8.0\n * @access private\n *\n * @see https:\/\/core.trac.wordpress.org\/ticket\/8497\n *\n * @param string $str Header comment to clean up.\n * @return string\n *\/"}]},"wp_scheduled_delete":{"name":"wp_scheduled_delete","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Permanently delete comments or posts of any type that have held a status\n * of 'trash' for the number of days defined in EMPTY_TRASH_DAYS.\n *\n * The default value of `EMPTY_TRASH_DAYS` is 30 (days).\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"get_file_data":{"name":"get_file_data","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default_headers","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve metadata from a file.\n *\n * Searches for metadata in the first 8kiB of a file, such as a plugin or theme.\n * Each piece of metadata must be on its own line. Fields can not span multiple\n * lines, the value will get cut at the end of the first line.\n *\n * If the file data is not within that first 8kiB, then the author should correct\n * their plugin file and move the data headers to the top.\n *\n * @link https:\/\/codex.wordpress.org\/File_Header\n *\n * @since 2.9.0\n *\n * @param string $file            Path to the file.\n * @param array  $default_headers List of headers, in the format array('HeaderKey' => 'Header Name').\n * @param string $context         Optional. If specified adds filter hook {@see 'extra_$context_headers'}.\n *                                Default empty.\n * @return array Array of file headers in `HeaderKey => Header Value` format.\n *\/"}]},"__return_true":{"name":"__return_true","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns true.\n *\n * Useful for returning true to filters easily.\n *\n * @since 3.0.0\n *\n * @see __return_false()\n *\n * @return true True.\n *\/"}]},"__return_false":{"name":"__return_false","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns false.\n *\n * Useful for returning false to filters easily.\n *\n * @since 3.0.0\n *\n * @see __return_true()\n *\n * @return false False.\n *\/"}]},"__return_zero":{"name":"__return_zero","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns 0.\n *\n * Useful for returning 0 to filters easily.\n *\n * @since 3.0.0\n *\n * @return int 0.\n *\/"}]},"__return_empty_array":{"name":"__return_empty_array","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns an empty array.\n *\n * Useful for returning an empty array to filters easily.\n *\n * @since 3.0.0\n *\n * @return array Empty array.\n *\/"}]},"__return_null":{"name":"__return_null","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns null.\n *\n * Useful for returning null to filters easily.\n *\n * @since 3.4.0\n *\n * @return null Null value.\n *\/"}]},"__return_empty_string":{"name":"__return_empty_string","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns an empty string.\n *\n * Useful for returning an empty string to filters easily.\n *\n * @since 3.7.0\n *\n * @see __return_null()\n *\n * @return string Empty string.\n *\/"}]},"send_nosniff_header":{"name":"send_nosniff_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Send a HTTP header to disable content type sniffing in browsers which support it.\n *\n * @since 3.0.0\n *\n * @see https:\/\/blogs.msdn.com\/ie\/archive\/2008\/07\/02\/ie8-security-part-v-comprehensive-protection.aspx\n * @see https:\/\/src.chromium.org\/viewvc\/chrome?view=rev&revision=6985\n *\/"}]},"_wp_mysql_week":{"name":"_wp_mysql_week","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$column","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return a MySQL expression for selecting the week number based on the start_of_week option.\n *\n * @ignore\n * @since 3.0.0\n *\n * @param string $column Database column.\n * @return string SQL clause.\n *\/"}]},"wp_find_hierarchy_loop":{"name":"wp_find_hierarchy_loop","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$callback","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$start","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$start_parent","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback_args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Find hierarchy loops using a callback function that maps object IDs to parent IDs.\n *\n * @since 3.1.0\n * @access private\n *\n * @param callable $callback      Function that accepts ( ID, $callback_args ) and outputs parent_ID.\n * @param int      $start         The ID to start the loop check at.\n * @param int      $start_parent  The parent_ID of $start to use instead of calling $callback( $start ).\n *                                Use null to always use $callback\n * @param array    $callback_args Optional. Additional arguments to send to $callback.\n * @return array IDs of all members of loop.\n *\/"}]},"wp_find_hierarchy_loop_tortoise_hare":{"name":"wp_find_hierarchy_loop_tortoise_hare","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$callback","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$start","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$override","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback_args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$_return_loop","rank":4,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Use the \"The Tortoise and the Hare\" algorithm to detect loops.\n *\n * For every step of the algorithm, the hare takes two steps and the tortoise one.\n * If the hare ever laps the tortoise, there must be a loop.\n *\n * @since 3.1.0\n * @access private\n *\n * @param callable $callback      Function that accepts ( ID, callback_arg, ... ) and outputs parent_ID.\n * @param int      $start         The ID to start the loop check at.\n * @param array    $override      Optional. An array of ( ID => parent_ID, ... ) to use instead of $callback.\n *                                Default empty array.\n * @param array    $callback_args Optional. Additional arguments to send to $callback. Default empty array.\n * @param bool     $_return_loop  Optional. Return loop members or just detect presence of loop? Only set\n *                                to true if you already know the given $start is part of a loop (otherwise\n *                                the returned array might include branches). Default false.\n * @return mixed Scalar ID of some arbitrary member of the loop, or array of IDs of all members of loop if\n *               $_return_loop\n *\/"}]},"send_frame_options_header":{"name":"send_frame_options_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Send a HTTP header to limit rendering of pages to same origin iframes.\n *\n * @since 3.1.3\n *\n * @see https:\/\/developer.mozilla.org\/en\/the_x-frame-options_response_header\n *\/"}]},"wp_allowed_protocols":{"name":"wp_allowed_protocols","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve a list of protocols to allow in HTML attributes.\n *\n * @since 3.3.0\n * @since 4.3.0 Added 'webcal' to the protocols array.\n * @since 4.7.0 Added 'urn' to the protocols array.\n *\n * @see wp_kses()\n * @see esc_url()\n *\n * @staticvar array $protocols\n *\n * @return array Array of allowed protocols. Defaults to an array containing 'http', 'https',\n *               'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet',\n *               'mms', 'rtsp', 'svn', 'tel', 'fax', 'xmpp', 'webcal', and 'urn'.\n *\/"}]},"wp_debug_backtrace_summary":{"name":"wp_debug_backtrace_summary","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$ignore_class","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$skip_frames","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$pretty","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return a comma-separated string of functions that have been called to get\n * to the current point in code.\n *\n * @since 3.4.0\n *\n * @see https:\/\/core.trac.wordpress.org\/ticket\/19589\n *\n * @param string $ignore_class Optional. A class to ignore all function calls within - useful\n *                             when you want to just give info about the callee. Default null.\n * @param int    $skip_frames  Optional. A number of stack frames to skip - useful for unwinding\n *                             back to the source of the issue. Default 0.\n * @param bool   $pretty       Optional. Whether or not you want a comma separated string or raw\n *                             array returned. Default true.\n * @return string|array Either a string containing a reversed comma separated trace or an array\n *                      of individual calls.\n *\/"}]},"_get_non_cached_ids":{"name":"_get_non_cached_ids","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cache_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve ids that are not already present in the cache.\n *\n * @since 3.4.0\n * @access private\n *\n * @param array  $object_ids ID list.\n * @param string $cache_key  The cache bucket to check against.\n *\n * @return array List of ids not present in the cache.\n *\/"}]},"_device_can_upload":{"name":"_device_can_upload","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Test if the current device has the capability to upload files.\n *\n * @since 3.4.0\n * @access private\n *\n * @return bool Whether the device is able to upload files.\n *\/"}]},"wp_is_stream":{"name":"wp_is_stream","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Test if a given path is a stream URL\n *\n * @param string $path The resource path or URL.\n * @return bool True if the path is a stream URL.\n *\/"}]},"wp_checkdate":{"name":"wp_checkdate","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$month","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$day","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$year","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$source_date","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Test if the supplied date is valid for the Gregorian calendar.\n *\n * @since 3.5.0\n *\n * @see checkdate()\n *\n * @param  int    $month       Month number.\n * @param  int    $day         Day number.\n * @param  int    $year        Year number.\n * @param  string $source_date The date to filter.\n * @return bool True if valid date, false if not valid date.\n *\/"}]},"wp_auth_check_load":{"name":"wp_auth_check_load","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load the auth check for monitoring whether the user is still logged in.\n *\n * Can be disabled with remove_action( 'admin_enqueue_scripts', 'wp_auth_check_load' );\n *\n * This is disabled for certain screens where a login screen could cause an\n * inconvenient interruption. A filter called {@see 'wp_auth_check_load'} can be used\n * for fine-grained control.\n *\n * @since 3.6.0\n *\/"}]},"wp_auth_check_html":{"name":"wp_auth_check_html","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output the HTML that shows the wp-login dialog when the user is no longer logged in.\n *\n * @since 3.6.0\n *\/"}]},"wp_auth_check":{"name":"wp_auth_check","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether a user is still logged in, for the heartbeat.\n *\n * Send a result that shows a log-in box if the user is no longer logged in,\n * or if their cookie is within the grace period.\n *\n * @since 3.6.0\n *\n * @global int $login_grace_period\n *\n * @param array $response  The Heartbeat response.\n * @return array $response The Heartbeat response with 'wp-auth-check' value set.\n *\/"}]},"get_tag_regex":{"name":"get_tag_regex","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return RegEx body to liberally match an opening HTML tag.\n *\n * Matches an opening HTML tag that:\n * 1. Is self-closing or\n * 2. Has no body but has a closing tag of the same name or\n * 3. Contains a body and a closing tag of the same name\n *\n * Note: this RegEx does not balance inner tags and does not attempt\n * to produce valid HTML\n *\n * @since 3.6.0\n *\n * @param string $tag An HTML tag name. Example: 'video'.\n * @return string Tag RegEx.\n *\/"}]},"_canonical_charset":{"name":"_canonical_charset","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$charset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve a canonical form of the provided charset appropriate for passing to PHP\n * functions such as htmlspecialchars() and charset html attributes.\n *\n * @since 3.6.0\n * @access private\n *\n * @see https:\/\/core.trac.wordpress.org\/ticket\/23688\n *\n * @param string $charset A charset name.\n * @return string The canonical form of the charset.\n *\/"}]},"mbstring_binary_safe_encoding":{"name":"mbstring_binary_safe_encoding","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$reset","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set the mbstring internal encoding to a binary safe encoding when func_overload\n * is enabled.\n *\n * When mbstring.func_overload is in use for multi-byte encodings, the results from\n * strlen() and similar functions respect the utf8 characters, causing binary data\n * to return incorrect lengths.\n *\n * This function overrides the mbstring encoding to a binary-safe encoding, and\n * resets it to the users expected encoding afterwards through the\n * `reset_mbstring_encoding` function.\n *\n * It is safe to recursively call this function, however each\n * `mbstring_binary_safe_encoding()` call must be followed up with an equal number\n * of `reset_mbstring_encoding()` calls.\n *\n * @since 3.7.0\n *\n * @see reset_mbstring_encoding()\n *\n * @staticvar array $encodings\n * @staticvar bool  $overloaded\n *\n * @param bool $reset Optional. Whether to reset the encoding back to a previously-set encoding.\n *                    Default false.\n *\/"}]},"reset_mbstring_encoding":{"name":"reset_mbstring_encoding","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Reset the mbstring internal encoding to a users previously set encoding.\n *\n * @see mbstring_binary_safe_encoding()\n *\n * @since 3.7.0\n *\/"}]},"wp_validate_boolean":{"name":"wp_validate_boolean","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$var","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filter\/validate a variable as a boolean.\n *\n * Alternative to `filter_var( $var, FILTER_VALIDATE_BOOLEAN )`.\n *\n * @since 4.0.0\n *\n * @param mixed $var Boolean value to validate.\n * @return bool Whether the value is validated.\n *\/"}]},"wp_delete_file":{"name":"wp_delete_file","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Delete a file\n *\n * @since 4.2.0\n *\n * @param string $file The path to the file to delete.\n *\/"}]},"wp_delete_file_from_directory":{"name":"wp_delete_file_from_directory","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$directory","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deletes a file if its path is within the given directory.\n *\n * @since 4.9.7\n *\n * @param string $file      Absolute path to the file to delete.\n * @param string $directory Absolute path to a directory.\n * @return bool True on success, false on failure.\n *\/"}]},"wp_post_preview_js":{"name":"wp_post_preview_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs a small JS snippet on preview tabs\/windows to remove `window.name` on unload.\n *\n * This prevents reusing the same tab for a preview when the user has navigated away.\n *\n * @since 4.3.0\n *\/"}]},"mysql_to_rfc3339":{"name":"mysql_to_rfc3339","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$date_string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Parses and formats a MySQL datetime (Y-m-d H:i:s) for ISO8601\/RFC3339.\n *\n * Explicitly strips timezones, as datetimes are not saved with any timezone\n * information. Including any information on the offset could be misleading.\n *\n * @since 4.4.0\n *\n * @param string $date_string Date string to parse and format.\n * @return string Date formatted for ISO8601\/RFC3339.\n *\/"}]},"wp_raise_memory_limit":{"name":"wp_raise_memory_limit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$context","rank":0,"variadic":false,"reference":false,"default":"'admin'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Attempts to raise the PHP memory limit for memory intensive processes.\n *\n * Only allows raising the existing limit and prevents lowering it.\n *\n * @since 4.6.0\n *\n * @param string $context Optional. Context in which the function is called. Accepts either 'admin',\n *                        'image', or an arbitrary other context. If an arbitrary context is passed,\n *                        the similarly arbitrary {@see '{$context}_memory_limit'} filter will be\n *                        invoked. Default 'admin'.\n * @return bool|int|string The limit that was set or false on failure.\n *\/"}]},"wp_generate_uuid4":{"name":"wp_generate_uuid4","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Generate a random UUID (version 4).\n *\n * @since 4.7.0\n *\n * @return string UUID.\n *\/"}]},"wp_cache_get_last_changed":{"name":"wp_cache_get_last_changed","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$group","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get last changed date for the specified cache group.\n *\n * @since 4.7.0\n *\n * @param $group Where the cache contents are grouped.\n *\n * @return string $last_changed UNIX timestamp with microseconds representing when the group was last changed.\n *\/"}]},"fetch_rss":{"name":"fetch_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Build Magpie object based on RSS from URL.\n *\n * @since 1.5.0\n * @package External\n * @subpackage MagpieRSS\n *\n * @param string $url URL to retrieve feed\n * @return bool|MagpieRSS false on failure or MagpieRSS object on success.\n *\/"}]},"_fetch_remote_file":{"name":"_fetch_remote_file","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"\"\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve URL headers and content using WP HTTP Request API.\n *\n * @since 1.5.0\n * @package External\n * @subpackage MagpieRSS\n *\n * @param string $url URL to retrieve\n * @param array $headers Optional. Headers to send to the URL.\n * @return Snoopy style response\n *\/"}]},"_response_to_rss":{"name":"_response_to_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$resp","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve\n *\n * @since 1.5.0\n * @package External\n * @subpackage MagpieRSS\n *\n * @param array $resp\n * @return MagpieRSS|bool\n *\/"}]},"init":{"name":"init","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set up constants with default values, unless user overrides.\n *\n * @since 1.5.0\n * @package External\n * @subpackage MagpieRSS\n *\/"}]},"is_info":{"name":"is_info","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$sc","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[]},"is_success":{"name":"is_success","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$sc","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[]},"is_redirect":{"name":"is_redirect","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$sc","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[]},"is_error":{"name":"is_error","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$sc","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[]},"is_client_error":{"name":"is_client_error","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$sc","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[]},"is_server_error":{"name":"is_server_error","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$sc","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[]},"parse_w3cdtf":{"name":"parse_w3cdtf","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$date_str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[]},"wp_rss":{"name":"wp_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$num_items","rank":1,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display all RSS items in a HTML ordered list.\n *\n * @since 1.5.0\n * @package External\n * @subpackage MagpieRSS\n *\n * @param string $url URL of feed to display. Will not auto sense feed URL.\n * @param int $num_items Optional. Number of items to display, default is all.\n *\/"}]},"get_rss":{"name":"get_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$num_items","rank":1,"variadic":false,"reference":false,"default":"5","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display RSS items in HTML list items.\n *\n * You have to specify which HTML list you want, either ordered or unordered\n * before using the function. You also have to specify how many items you wish\n * to display. You can't display all of them like you can with wp_rss()\n * function.\n *\n * @since 1.5.0\n * @package External\n * @subpackage MagpieRSS\n *\n * @param string $url URL of feed to display. Will not auto sense feed URL.\n * @param int $num_items Optional. Number of items to display, default is all.\n * @return bool False on failure.\n *\/"}]},"add_shortcode":{"name":"add_shortcode","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$func","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add hook for shortcode tag.\n *\n * There can only be one hook for each shortcode. Which means that if another\n * plugin has a similar shortcode, it will override yours or yours will override\n * theirs depending on which order the plugins are included and\/or ran.\n *\n * Simplest example of a shortcode tag using the API:\n *\n *     \/\/ [footag foo=\"bar\"]\n *     function footag_func( $atts ) {\n *         return \"foo = {\n *             $atts[foo]\n *         }\";\n *     }\n *     add_shortcode( 'footag', 'footag_func' );\n *\n * Example with nice attribute defaults:\n *\n *     \/\/ [bartag foo=\"bar\"]\n *     function bartag_func( $atts ) {\n *         $args = shortcode_atts( array(\n *             'foo' => 'no foo',\n *             'baz' => 'default baz',\n *         ), $atts );\n *\n *         return \"foo = {$args['foo']}\";\n *     }\n *     add_shortcode( 'bartag', 'bartag_func' );\n *\n * Example with enclosed content:\n *\n *     \/\/ [baztag]content[\/baztag]\n *     function baztag_func( $atts, $content = '' ) {\n *         return \"content = $content\";\n *     }\n *     add_shortcode( 'baztag', 'baztag_func' );\n *\n * @since 2.5.0\n *\n * @global array $shortcode_tags\n *\n * @param string   $tag  Shortcode tag to be searched in post content.\n * @param callable $func Hook to run when shortcode is found.\n *\/"}]},"remove_shortcode":{"name":"remove_shortcode","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes hook for shortcode.\n *\n * @since 2.5.0\n *\n * @global array $shortcode_tags\n *\n * @param string $tag Shortcode tag to remove hook for.\n *\/"}]},"remove_all_shortcodes":{"name":"remove_all_shortcodes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Clear all shortcodes.\n *\n * This function is simple, it clears all of the shortcode tags by replacing the\n * shortcodes global by a empty array. This is actually a very efficient method\n * for removing all shortcodes.\n *\n * @since 2.5.0\n *\n * @global array $shortcode_tags\n *\/"}]},"shortcode_exists":{"name":"shortcode_exists","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether a registered shortcode exists named $tag\n *\n * @since 3.6.0\n *\n * @global array $shortcode_tags List of shortcode tags and their callback hooks.\n *\n * @param string $tag Shortcode tag to check.\n * @return bool Whether the given shortcode exists.\n *\/"}]},"has_shortcode":{"name":"has_shortcode","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tag","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether the passed content contains the specified shortcode\n *\n * @since 3.6.0\n *\n * @global array $shortcode_tags\n *\n * @param string $content Content to search for shortcodes.\n * @param string $tag     Shortcode tag to check.\n * @return bool Whether the passed content contains the given shortcode.\n *\/"}]},"do_shortcode":{"name":"do_shortcode","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ignore_html","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Search content for shortcodes and filter shortcodes through their hooks.\n *\n * If there are no shortcode tags defined, then the content will be returned\n * without any filtering. This might cause issues when plugins are disabled but\n * the shortcode will still show up in the post or content.\n *\n * @since 2.5.0\n *\n * @global array $shortcode_tags List of shortcode tags and their callback hooks.\n *\n * @param string $content Content to search for shortcodes.\n * @param bool $ignore_html When true, shortcodes inside HTML elements will be skipped.\n * @return string Content with shortcodes filtered out.\n *\/"}]},"get_shortcode_regex":{"name":"get_shortcode_regex","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tagnames","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the shortcode regular expression for searching.\n *\n * The regular expression combines the shortcode tags in the regular expression\n * in a regex class.\n *\n * The regular expression contains 6 different sub matches to help with parsing.\n *\n * 1 - An extra [ to allow for escaping shortcodes with double [[]]\n * 2 - The shortcode name\n * 3 - The shortcode argument list\n * 4 - The self closing \/\n * 5 - The content of a shortcode when it wraps some content.\n * 6 - An extra ] to allow for escaping shortcodes with double [[]]\n *\n * @since 2.5.0\n * @since 4.4.0 Added the `$tagnames` parameter.\n *\n * @global array $shortcode_tags\n *\n * @param array $tagnames Optional. List of shortcodes to find. Defaults to all registered shortcodes.\n * @return string The shortcode search regular expression\n *\/"}]},"do_shortcode_tag":{"name":"do_shortcode_tag","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$m","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Regular Expression callable for do_shortcode() for calling shortcode hook.\n * @see get_shortcode_regex for details of the match array contents.\n *\n * @since 2.5.0\n * @access private\n *\n * @global array $shortcode_tags\n *\n * @param array $m Regular expression match array\n * @return string|false False on failure.\n *\/"}]},"do_shortcodes_in_html_tags":{"name":"do_shortcodes_in_html_tags","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ignore_html","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tagnames","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Search only inside HTML elements for shortcodes and process them.\n *\n * Any [ or ] characters remaining inside elements will be HTML encoded\n * to prevent interference with shortcodes that are outside the elements.\n * Assumes $content processed by KSES already.  Users with unfiltered_html\n * capability may get unexpected output if angle braces are nested in tags.\n *\n * @since 4.2.3\n *\n * @param string $content Content to search for shortcodes\n * @param bool $ignore_html When true, all square braces inside elements will be encoded.\n * @param array $tagnames List of shortcodes to find.\n * @return string Content with shortcodes filtered out.\n *\/"}]},"unescape_invalid_shortcodes":{"name":"unescape_invalid_shortcodes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove placeholders added by do_shortcodes_in_html_tags().\n *\n * @since 4.2.3\n *\n * @param string $content Content to search for placeholders.\n * @return string Content with placeholders removed.\n *\/"}]},"get_shortcode_atts_regex":{"name":"get_shortcode_atts_regex","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the shortcode attributes regex.\n *\n * @since 4.4.0\n *\n * @return string The shortcode attribute regular expression\n *\/"}]},"shortcode_parse_atts":{"name":"shortcode_parse_atts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve all attributes from the shortcodes tag.\n *\n * The attributes list has the attribute name as the key and the value of the\n * attribute as the value in the key\/value pair. This allows for easier\n * retrieval of the attributes, since all attributes have to be known.\n *\n * @since 2.5.0\n *\n * @param string $text\n * @return array|string List of attribute values.\n *                      Returns empty array if trim( $text ) == '\"\"'.\n *                      Returns empty string if trim( $text ) == ''.\n *                      All other matches are checked for not empty().\n *\/"}]},"shortcode_atts":{"name":"shortcode_atts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$pairs","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$atts","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$shortcode","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Combine user attributes with known attributes and fill in defaults when needed.\n *\n * The pairs should be considered to be all of the attributes which are\n * supported by the caller and given as a list. The returned attributes will\n * only contain the attributes in the $pairs list.\n *\n * If the $atts list has unsupported attributes, then they will be ignored and\n * removed from the final returned list.\n *\n * @since 2.5.0\n *\n * @param array  $pairs     Entire list of supported attributes and their defaults.\n * @param array  $atts      User defined attributes in shortcode tag.\n * @param string $shortcode Optional. The name of the shortcode, provided for context to enable filtering\n * @return array Combined and filtered attribute list.\n *\/"}]},"strip_shortcodes":{"name":"strip_shortcodes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove all shortcode tags from the given content.\n *\n * @since 2.5.0\n *\n * @global array $shortcode_tags\n *\n * @param string $content Content to remove shortcode tags.\n * @return string Content without shortcode tags.\n *\/"}]},"strip_shortcode_tag":{"name":"strip_shortcode_tag","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$m","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Strips a shortcode tag based on RegEx matches against post content.\n *\n * @since 3.3.0\n *\n * @param array $m RegEx matches against post content.\n * @return string|false The content stripped of the tag, otherwise false.\n *\/"}]},"register_widget":{"name":"register_widget","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$widget_class","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register a widget\n *\n * Registers a WP_Widget widget\n *\n * @since 2.8.0\n *\n * @see WP_Widget\n *\n * @global WP_Widget_Factory $wp_widget_factory\n *\n * @param string $widget_class The name of a class that extends WP_Widget\n *\/"}]},"unregister_widget":{"name":"unregister_widget","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$widget_class","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Unregisters a widget.\n *\n * Unregisters a WP_Widget widget. Useful for un-registering default widgets.\n * Run within a function hooked to the {@see 'widgets_init'} action.\n *\n * @since 2.8.0\n *\n * @see WP_Widget\n *\n * @global WP_Widget_Factory $wp_widget_factory\n *\n * @param string $widget_class The name of a class that extends WP_Widget.\n *\/"}]},"register_sidebars":{"name":"register_sidebars","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$number","rank":0,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates multiple sidebars.\n *\n * If you wanted to quickly create multiple sidebars for a theme or internally.\n * This function will allow you to do so. If you don't pass the 'name' and\/or\n * 'id' in `$args`, then they will be built for you.\n *\n * @since 2.2.0\n *\n * @see register_sidebar() The second parameter is documented by register_sidebar() and is the same here.\n *\n * @global array $wp_registered_sidebars\n *\n * @param int          $number Optional. Number of sidebars to create. Default 1.\n * @param array|string $args {\n *     Optional. Array or string of arguments for building a sidebar.\n *\n *     @type string $id   The base string of the unique identifier for each sidebar. If provided, and multiple\n *                        sidebars are being defined, the id will have \"-2\" appended, and so on.\n *                        Default 'sidebar-' followed by the number the sidebar creation is currently at.\n *     @type string $name The name or title for the sidebars displayed in the admin dashboard. If registering\n *                        more than one sidebar, include '%d' in the string as a placeholder for the uniquely\n *                        assigned number for each sidebar.\n *                        Default 'Sidebar' for the first sidebar, otherwise 'Sidebar %d'.\n * }\n *\/"}]},"register_sidebar":{"name":"register_sidebar","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Builds the definition for a single sidebar and returns the ID.\n *\n * Accepts either a string or an array and then parses that against a set\n * of default arguments for the new sidebar. WordPress will automatically\n * generate a sidebar ID and name based on the current number of registered\n * sidebars if those arguments are not included.\n *\n * When allowing for automatic generation of the name and ID parameters, keep\n * in mind that the incrementor for your sidebar can change over time depending\n * on what other plugins and themes are installed.\n *\n * If theme support for 'widgets' has not yet been added when this function is\n * called, it will be automatically enabled through the use of add_theme_support()\n *\n * @since 2.2.0\n *\n * @global array $wp_registered_sidebars Stores the new sidebar in this array by sidebar ID.\n *\n * @param array|string $args {\n *     Optional. Array or string of arguments for the sidebar being registered.\n *\n *     @type string $name          The name or title of the sidebar displayed in the Widgets\n *                                 interface. Default 'Sidebar $instance'.\n *     @type string $id            The unique identifier by which the sidebar will be called.\n *                                 Default 'sidebar-$instance'.\n *     @type string $description   Description of the sidebar, displayed in the Widgets interface.\n *                                 Default empty string.\n *     @type string $class         Extra CSS class to assign to the sidebar in the Widgets interface.\n *                                 Default empty.\n *     @type string $before_widget HTML content to prepend to each widget's HTML output when\n *                                 assigned to this sidebar. Default is an opening list item element.\n *     @type string $after_widget  HTML content to append to each widget's HTML output when\n *                                 assigned to this sidebar. Default is a closing list item element.\n *     @type string $before_title  HTML content to prepend to the sidebar title when displayed.\n *                                 Default is an opening h2 element.\n *     @type string $after_title   HTML content to append to the sidebar title when displayed.\n *                                 Default is a closing h2 element.\n * }\n * @return string Sidebar ID added to $wp_registered_sidebars global.\n *\/"}]},"unregister_sidebar":{"name":"unregister_sidebar","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes a sidebar from the list.\n *\n * @since 2.2.0\n *\n * @global array $wp_registered_sidebars Stores the new sidebar in this array by sidebar ID.\n *\n * @param string $name The ID of the sidebar when it was added.\n *\/"}]},"is_registered_sidebar":{"name":"is_registered_sidebar","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$sidebar_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks if a sidebar is registered.\n *\n * @since 4.4.0\n *\n * @global array $wp_registered_sidebars Registered sidebars.\n *\n * @param string|int $sidebar_id The ID of the sidebar when it was registered.\n * @return bool True if the sidebar is registered, false otherwise.\n *\/"}]},"wp_register_sidebar_widget":{"name":"wp_register_sidebar_widget","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output_callback","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register an instance of a widget.\n *\n * The default widget option is 'classname' that can be overridden.\n *\n * The function can also be used to un-register widgets when `$output_callback`\n * parameter is an empty string.\n *\n * @since 2.2.0\n *\n * @global array $wp_registered_widgets       Uses stored registered widgets.\n * @global array $wp_register_widget_defaults Retrieves widget defaults.\n * @global array $wp_registered_widget_updates\n * @global array $_wp_deprecated_widgets_callbacks\n *\n * @param int|string $id              Widget ID.\n * @param string     $name            Widget display title.\n * @param callable   $output_callback Run when widget is called.\n * @param array      $options {\n *     Optional. An array of supplementary widget options for the instance.\n *\n *     @type string $classname   Class name for the widget's HTML container. Default is a shortened\n *                               version of the output callback name.\n *     @type string $description Widget description for display in the widget administration\n *                               panel and\/or theme.\n * }\n *\/"}]},"wp_widget_description":{"name":"wp_widget_description","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve description for widget.\n *\n * When registering widgets, the options can also include 'description' that\n * describes the widget for display on the widget administration panel or\n * in the theme.\n *\n * @since 2.5.0\n *\n * @global array $wp_registered_widgets\n *\n * @param int|string $id Widget ID.\n * @return string|void Widget description, if available.\n *\/"}]},"wp_sidebar_description":{"name":"wp_sidebar_description","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve description for a sidebar.\n *\n * When registering sidebars a 'description' parameter can be included that\n * describes the sidebar for display on the widget administration panel.\n *\n * @since 2.9.0\n *\n * @global array $wp_registered_sidebars\n *\n * @param string $id sidebar ID.\n * @return string|void Sidebar description, if available.\n *\/"}]},"wp_unregister_sidebar_widget":{"name":"wp_unregister_sidebar_widget","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove widget from sidebar.\n *\n * @since 2.2.0\n *\n * @param int|string $id Widget ID.\n *\/"}]},"wp_register_widget_control":{"name":"wp_register_widget_control","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$control_callback","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers widget control callback for customizing options.\n *\n * @since 2.2.0\n *\n * @todo `$params` parameter?\n *\n * @global array $wp_registered_widget_controls\n * @global array $wp_registered_widget_updates\n * @global array $wp_registered_widgets\n * @global array $_wp_deprecated_widgets_callbacks\n *\n * @param int|string   $id               Sidebar ID.\n * @param string       $name             Sidebar display name.\n * @param callable     $control_callback Run when sidebar is displayed.\n * @param array $options {\n *     Optional. Array or string of control options. Default empty array.\n *\n *     @type int        $height  Never used. Default 200.\n *     @type int        $width   Width of the fully expanded control form (but try hard to use the default width).\n *                               Default 250.\n *     @type int|string $id_base Required for multi-widgets, i.e widgets that allow multiple instances such as the\n *                               text widget. The widget id will end up looking like `{$id_base}-{$unique_number}`.\n * }\n *\/"}]},"_register_widget_update_callback":{"name":"_register_widget_update_callback","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id_base","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$update_callback","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers the update callback for a widget.\n *\n * @since 2.8.0\n *\n * @global array $wp_registered_widget_updates\n *\n * @param string   $id_base         The base ID of a widget created by extending WP_Widget.\n * @param callable $update_callback Update callback method for the widget.\n * @param array    $options         Optional. Widget control options. See wp_register_widget_control().\n *                                  Default empty array.\n *\/"}]},"_register_widget_form_callback":{"name":"_register_widget_form_callback","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$form_callback","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers the form callback for a widget.\n *\n * @since 2.8.0\n *\n * @global array $wp_registered_widget_controls\n *\n * @param int|string $id            Widget ID.\n * @param string     $name          Name attribute for the widget.\n * @param callable   $form_callback Form callback.\n * @param array      $options       Optional. Widget control options. See wp_register_widget_control().\n *                                  Default empty array.\n *\/"}]},"wp_unregister_widget_control":{"name":"wp_unregister_widget_control","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove control callback for widget.\n *\n * @since 2.2.0\n *\n * @param int|string $id Widget ID.\n *\/"}]},"dynamic_sidebar":{"name":"dynamic_sidebar","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$index","rank":0,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display dynamic sidebar.\n *\n * By default this displays the default sidebar or 'sidebar-1'. If your theme specifies the 'id' or\n * 'name' parameter for its registered sidebars you can pass an id or name as the $index parameter.\n * Otherwise, you can pass in a numerical index to display the sidebar at that index.\n *\n * @since 2.2.0\n *\n * @global array $wp_registered_sidebars\n * @global array $wp_registered_widgets\n *\n * @param int|string $index Optional, default is 1. Index, name or ID of dynamic sidebar.\n * @return bool True, if widget sidebar was found and called. False if not found or not called.\n *\/"}]},"is_active_widget":{"name":"is_active_widget","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$callback","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$widget_id","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id_base","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$skip_inactive","rank":3,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether widget is displayed on the front end.\n *\n * Either $callback or $id_base can be used\n * $id_base is the first argument when extending WP_Widget class\n * Without the optional $widget_id parameter, returns the ID of the first sidebar\n * in which the first instance of the widget with the given callback or $id_base is found.\n * With the $widget_id parameter, returns the ID of the sidebar where\n * the widget with that callback\/$id_base AND that ID is found.\n *\n * NOTE: $widget_id and $id_base are the same for single widgets. To be effective\n * this function has to run after widgets have initialized, at action {@see 'init'} or later.\n *\n * @since 2.2.0\n *\n * @global array $wp_registered_widgets\n *\n * @param string|false $callback      Optional, Widget callback to check. Default false.\n * @param int|false    $widget_id     Optional. Widget ID. Optional, but needed for checking. Default false.\n * @param string|false $id_base       Optional. The base ID of a widget created by extending WP_Widget. Default false.\n * @param bool         $skip_inactive Optional. Whether to check in 'wp_inactive_widgets'. Default true.\n * @return string|false False if widget is not active or id of sidebar in which the widget is active.\n *\/"}]},"is_dynamic_sidebar":{"name":"is_dynamic_sidebar","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether the dynamic sidebar is enabled and used by theme.\n *\n * @since 2.2.0\n *\n * @global array $wp_registered_widgets\n * @global array $wp_registered_sidebars\n *\n * @return bool True, if using widgets. False, if not using widgets.\n *\/"}]},"is_active_sidebar":{"name":"is_active_sidebar","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$index","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether a sidebar is in use.\n *\n * @since 2.8.0\n *\n * @param string|int $index Sidebar name, id or number to check.\n * @return bool true if the sidebar is in use, false otherwise.\n *\/"}]},"wp_get_sidebars_widgets":{"name":"wp_get_sidebars_widgets","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$deprecated","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve full list of sidebars and their widget instance IDs.\n *\n * Will upgrade sidebar widget list, if needed. Will also save updated list, if\n * needed.\n *\n * @since 2.2.0\n * @access private\n *\n * @global array $_wp_sidebars_widgets\n * @global array $sidebars_widgets\n *\n * @param bool $deprecated Not used (argument deprecated).\n * @return array Upgraded list of widgets to version 3 array format when called from the admin.\n *\/"}]},"wp_set_sidebars_widgets":{"name":"wp_set_sidebars_widgets","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$sidebars_widgets","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set the sidebar widget option to update sidebars.\n *\n * @since 2.2.0\n * @access private\n *\n * @param array $sidebars_widgets Sidebar widgets and their settings.\n *\/"}]},"wp_get_widget_defaults":{"name":"wp_get_widget_defaults","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve default registered sidebars list.\n *\n * @since 2.2.0\n * @access private\n *\n * @global array $wp_registered_sidebars\n *\n * @return array\n *\/"}]},"wp_convert_widget_settings":{"name":"wp_convert_widget_settings","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$base_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$option_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$settings","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert the widget settings from single to multi-widget format.\n *\n * @since 2.8.0\n *\n * @global array $_wp_sidebars_widgets\n *\n * @param string $base_name\n * @param string $option_name\n * @param array  $settings\n * @return array\n *\/"}]},"the_widget":{"name":"the_widget","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$widget","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$instance","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output an arbitrary widget as a template tag.\n *\n * @since 2.8.0\n *\n * @global WP_Widget_Factory $wp_widget_factory\n *\n * @param string $widget   The widget's PHP class name (see class-wp-widget.php).\n * @param array  $instance Optional. The widget's instance settings. Default empty array.\n * @param array  $args {\n *     Optional. Array of arguments to configure the display of the widget.\n *\n *     @type string $before_widget HTML content that will be prepended to the widget's HTML output.\n *                                 Default `<div class=\"widget %s\">`, where `%s` is the widget's class name.\n *     @type string $after_widget  HTML content that will be appended to the widget's HTML output.\n *                                 Default `<\/div>`.\n *     @type string $before_title  HTML content that will be prepended to the widget's title when displayed.\n *                                 Default `<h2 class=\"widgettitle\">`.\n *     @type string $after_title   HTML content that will be appended to the widget's title when displayed.\n *                                 Default `<\/h2>`.\n * }\n *\/"}]},"_get_widget_id_base":{"name":"_get_widget_id_base","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the widget ID base value.\n *\n * @since 2.8.0\n *\n * @param string $id Widget ID.\n * @return string Widget ID base.\n *\/"}]},"_wp_sidebars_changed":{"name":"_wp_sidebars_changed","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handle sidebars config after theme change\n *\n * @access private\n * @since 3.3.0\n *\n * @global array $sidebars_widgets\n *\/"}]},"retrieve_widgets":{"name":"retrieve_widgets","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$theme_changed","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Look for \"lost\" widgets, this has to run at least on each theme change.\n *\n * @since 2.8.0\n *\n * @global array $wp_registered_sidebars\n * @global array $sidebars_widgets\n * @global array $wp_registered_widgets\n *\n * @param string|bool $theme_changed Whether the theme was changed as a boolean. A value\n *                                   of 'customize' defers updates for the Customizer.\n * @return array|void\n *\/"}]},"wp_widget_rss_output":{"name":"wp_widget_rss_output","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$rss","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the RSS entries in a list.\n *\n * @since 2.5.0\n *\n * @param string|array|object $rss RSS url.\n * @param array $args Widget arguments.\n *\/"}]},"wp_widget_rss_form":{"name":"wp_widget_rss_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$inputs","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display RSS widget options form.\n *\n * The options for what fields are displayed for the RSS form are all booleans\n * and are as follows: 'url', 'title', 'items', 'show_summary', 'show_author',\n * 'show_date'.\n *\n * @since 2.5.0\n *\n * @param array|string $args Values for input fields.\n * @param array $inputs Override default display options.\n *\/"}]},"wp_widget_rss_process":{"name":"wp_widget_rss_process","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$widget_rss","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$check_feed","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Process RSS feed widget data and optionally retrieve feed items.\n *\n * The feed widget can not have more than 20 items or it will reset back to the\n * default, which is 10.\n *\n * The resulting array has the feed title, feed url, feed link (from channel),\n * feed items, error (if any), and whether to show summary, author, and date.\n * All respectively in the order of the array elements.\n *\n * @since 2.5.0\n *\n * @param array $widget_rss RSS widget feed data. Expects unescaped data.\n * @param bool $check_feed Optional, default is true. Whether to check feed for errors.\n * @return array\n *\/"}]},"wp_widgets_init":{"name":"wp_widgets_init","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers all of the default WordPress widgets on startup.\n *\n * Calls {@see 'widgets_init'} action after all of the WordPress widgets have been registered.\n *\n * @since 2.2.0\n *\/"}]},"get_comment_author":{"name":"get_comment_author","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Comment template functions\n *\n * These functions are meant to live inside of the WordPress loop.\n *\n * @package WordPress\n * @subpackage Template\n *\/"},{"phpdoc":"\/**\n * Retrieve the author of the current comment.\n *\n * If the comment has an empty comment_author field, then 'Anonymous' person is\n * assumed.\n *\n * @since 1.5.0\n * @since 4.4.0 Added the ability for `$comment_ID` to also accept a WP_Comment object.\n *\n * @param int|WP_Comment $comment_ID Optional. WP_Comment or the ID of the comment for which to retrieve the author.\n *\t\t\t\t\t\t\t\t\t Default current comment.\n * @return string The comment author\n *\/"}]},"comment_author":{"name":"comment_author","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the author of the current comment.\n *\n * @since 0.71\n * @since 4.4.0 Added the ability for `$comment_ID` to also accept a WP_Comment object.\n *\n * @param int|WP_Comment $comment_ID Optional. WP_Comment or the ID of the comment for which to print the author.\n *\t\t\t\t\t\t\t\t\t Default current comment.\n *\/"}]},"get_comment_author_email":{"name":"get_comment_author_email","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the email of the author of the current comment.\n *\n * @since 1.5.0\n * @since 4.4.0 Added the ability for `$comment_ID` to also accept a WP_Comment object.\n *\n * @param int|WP_Comment $comment_ID Optional. WP_Comment or the ID of the comment for which to get the author's email.\n *\t\t\t\t\t\t\t\t\t Default current comment.\n * @return string The current comment author's email\n *\/"}]},"comment_author_email":{"name":"comment_author_email","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the email of the author of the current global $comment.\n *\n * Care should be taken to protect the email address and assure that email\n * harvesters do not capture your commentors' email address. Most assume that\n * their email address will not appear in raw form on the site. Doing so will\n * enable anyone, including those that people don't want to get the email\n * address and use it for their own means good and bad.\n *\n * @since 0.71\n * @since 4.4.0 Added the ability for `$comment_ID` to also accept a WP_Comment object.\n *\n * @param int|WP_Comment $comment_ID Optional. WP_Comment or the ID of the comment for which to print the author's email.\n *\t\t\t\t\t\t\t\t\t Default current comment.\n *\/"}]},"comment_author_email_link":{"name":"comment_author_email_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$linktext","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the html email link to the author of the current comment.\n *\n * Care should be taken to protect the email address and assure that email\n * harvesters do not capture your commentors' email address. Most assume that\n * their email address will not appear in raw form on the site. Doing so will\n * enable anyone, including those that people don't want to get the email\n * address and use it for their own means good and bad.\n *\n * @since 0.71\n * @since 4.6.0 Added the `$comment` parameter.\n *\n * @param string         $linktext Optional. Text to display instead of the comment author's email address.\n *                                 Default empty.\n * @param string         $before   Optional. Text or HTML to display before the email link. Default empty.\n * @param string         $after    Optional. Text or HTML to display after the email link. Default empty.\n * @param int|WP_Comment $comment  Optional. Comment ID or WP_Comment object. Default is the current comment.\n *\/"}]},"get_comment_author_email_link":{"name":"get_comment_author_email_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$linktext","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return the html email link to the author of the current comment.\n *\n * Care should be taken to protect the email address and assure that email\n * harvesters do not capture your commentors' email address. Most assume that\n * their email address will not appear in raw form on the site. Doing so will\n * enable anyone, including those that people don't want to get the email\n * address and use it for their own means good and bad.\n *\n * @since 2.7.0\n * @since 4.6.0 Added the `$comment` parameter.\n *\n * @param string         $linktext Optional. Text to display instead of the comment author's email address.\n *                                 Default empty.\n * @param string         $before   Optional. Text or HTML to display before the email link. Default empty.\n * @param string         $after    Optional. Text or HTML to display after the email link. Default empty.\n * @param int|WP_Comment $comment  Optional. Comment ID or WP_Comment object. Default is the current comment.\n * @return string HTML markup for the comment author email link. By default, the email address is obfuscated\n *                via the {@see 'comment_email'} filter with antispambot().\n *\/"}]},"get_comment_author_link":{"name":"get_comment_author_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the HTML link to the URL of the author of the current comment.\n *\n * Both get_comment_author_url() and get_comment_author() rely on get_comment(),\n * which falls back to the global comment variable if the $comment_ID argument is empty.\n *\n * @since 1.5.0\n * @since 4.4.0 Added the ability for `$comment_ID` to also accept a WP_Comment object.\n *\n * @param int|WP_Comment $comment_ID Optional. WP_Comment or the ID of the comment for which to get the author's link.\n *\t\t\t\t\t\t\t\t\t Default current comment.\n * @return string The comment author name or HTML link for author's URL.\n *\/"}]},"comment_author_link":{"name":"comment_author_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the html link to the url of the author of the current comment.\n *\n * @since 0.71\n * @since 4.4.0 Added the ability for `$comment_ID` to also accept a WP_Comment object.\n *\n * @param int|WP_Comment $comment_ID Optional. WP_Comment or the ID of the comment for which to print the author's link.\n *\t\t\t\t\t\t\t\t\t Default current comment.\n *\/"}]},"get_comment_author_IP":{"name":"get_comment_author_IP","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the IP address of the author of the current comment.\n *\n * @since 1.5.0\n * @since 4.4.0 Added the ability for `$comment_ID` to also accept a WP_Comment object.\n *\n * @param int|WP_Comment $comment_ID Optional. WP_Comment or the ID of the comment for which to get the author's IP address.\n *\t\t\t\t\t\t\t\t\t Default current comment.\n * @return string Comment author's IP address.\n *\/"}]},"comment_author_IP":{"name":"comment_author_IP","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the IP address of the author of the current comment.\n *\n * @since 0.71\n * @since 4.4.0 Added the ability for `$comment_ID` to also accept a WP_Comment object.\n *\n * @param int|WP_Comment $comment_ID Optional. WP_Comment or the ID of the comment for which to print the author's IP address.\n *\t\t\t\t\t\t\t\t\t Default current comment.\n *\/"}]},"get_comment_author_url":{"name":"get_comment_author_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the url of the author of the current comment.\n *\n * @since 1.5.0\n * @since 4.4.0 Added the ability for `$comment_ID` to also accept a WP_Comment object.\n *\n * @param int|WP_Comment $comment_ID Optional. WP_Comment or the ID of the comment for which to get the author's URL.\n *\t\t\t\t\t\t\t\t\t Default current comment.\n * @return string Comment author URL.\n *\/"}]},"comment_author_url":{"name":"comment_author_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the url of the author of the current comment.\n *\n * @since 0.71\n * @since 4.4.0 Added the ability for `$comment_ID` to also accept a WP_Comment object.\n *\n * @param int|WP_Comment $comment_ID Optional. WP_Comment or the ID of the comment for which to print the author's URL.\n *\t\t\t\t\t\t\t\t\t Default current comment.\n *\/"}]},"get_comment_author_url_link":{"name":"get_comment_author_url_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$linktext","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the HTML link of the url of the author of the current comment.\n *\n * $linktext parameter is only used if the URL does not exist for the comment\n * author. If the URL does exist then the URL will be used and the $linktext\n * will be ignored.\n *\n * Encapsulate the HTML link between the $before and $after. So it will appear\n * in the order of $before, link, and finally $after.\n *\n * @since 1.5.0\n * @since 4.6.0 Added the `$comment` parameter.\n *\n * @param string         $linktext Optional. The text to display instead of the comment\n *                                 author's email address. Default empty.\n * @param string         $before   Optional. The text or HTML to display before the email link.\n *                                 Default empty.\n * @param string         $after    Optional. The text or HTML to display after the email link.\n *                                 Default empty.\n * @param int|WP_Comment $comment  Optional. Comment ID or WP_Comment object.\n *                                 Default is the current comment.\n * @return string The HTML link between the $before and $after parameters.\n *\/"}]},"comment_author_url_link":{"name":"comment_author_url_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$linktext","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the HTML link of the url of the author of the current comment.\n *\n * @since 0.71\n * @since 4.6.0 Added the `$comment` parameter.\n *\n * @param string         $linktext Optional. Text to display instead of the comment author's\n *                                 email address. Default empty.\n * @param string         $before   Optional. Text or HTML to display before the email link.\n *                                 Default empty.\n * @param string         $after    Optional. Text or HTML to display after the email link.\n *                                 Default empty.\n * @param int|WP_Comment $comment  Optional. Comment ID or WP_Comment object.\n *                                 Default is the current comment.\n *\/"}]},"comment_class":{"name":"comment_class","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":3,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Generates semantic classes for each comment element.\n *\n * @since 2.7.0\n * @since 4.4.0 Added the ability for `$comment` to also accept a WP_Comment object.\n *\n * @param string|array   $class    Optional. One or more classes to add to the class list.\n *                                 Default empty.\n * @param int|WP_Comment $comment  Comment ID or WP_Comment object. Default current comment.\n * @param int|WP_Post    $post_id  Post ID or WP_Post object. Default current post.\n * @param bool           $echo     Optional. Whether to cho or return the output.\n *                                 Default true.\n * @return string If `$echo` is false, the class will be returned. Void otherwise.\n *\/"}]},"get_comment_class":{"name":"get_comment_class","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment_id","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the classes for the comment div as an array.\n *\n * @since 2.7.0\n * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.\n *\n * @global int $comment_alt\n * @global int $comment_depth\n * @global int $comment_thread_alt\n *\n * @param string|array   $class      Optional. One or more classes to add to the class list. Default empty.\n * @param int|WP_Comment $comment_id Comment ID or WP_Comment object. Default current comment.\n * @param int|WP_Post    $post_id    Post ID or WP_Post object. Default current post.\n * @return array An array of classes.\n *\/"}]},"get_comment_date":{"name":"get_comment_date","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$d","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment_ID","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the comment date of the current comment.\n *\n * @since 1.5.0\n * @since 4.4.0 Added the ability for `$comment_ID` to also accept a WP_Comment object.\n *\n * @param string          $d          Optional. The format of the date. Default user's setting.\n * @param int|WP_Comment  $comment_ID WP_Comment or ID of the comment for which to get the date.\n *                                    Default current comment.\n * @return string The comment's date.\n *\/"}]},"comment_date":{"name":"comment_date","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$d","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment_ID","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the comment date of the current comment.\n *\n * @since 0.71\n * @since 4.4.0 Added the ability for `$comment_ID` to also accept a WP_Comment object.\n *\n * @param string         $d          Optional. The format of the date. Default user's settings.\n * @param int|WP_Comment $comment_ID WP_Comment or ID of the comment for which to print the date.\n *                                   Default current comment.\n *\/"}]},"get_comment_excerpt":{"name":"get_comment_excerpt","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the excerpt of the current comment.\n *\n * Will cut each word and only output the first 20 words with '&hellip;' at the end.\n * If the word count is less than 20, then no truncating is done and no '&hellip;'\n * will appear.\n *\n * @since 1.5.0\n * @since 4.4.0 Added the ability for `$comment_ID` to also accept a WP_Comment object.\n *\n * @param int|WP_Comment $comment_ID  WP_Comment or ID of the comment for which to get the excerpt.\n *                                    Default current comment.\n * @return string The maybe truncated comment with 20 words or less.\n *\/"}]},"comment_excerpt":{"name":"comment_excerpt","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the excerpt of the current comment.\n *\n * @since 1.2.0\n * @since 4.4.0 Added the ability for `$comment_ID` to also accept a WP_Comment object.\n *\n * @param int|WP_Comment $comment_ID  WP_Comment or ID of the comment for which to print the excerpt.\n *                                    Default current comment.\n *\/"}]},"get_comment_ID":{"name":"get_comment_ID","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the comment id of the current comment.\n *\n * @since 1.5.0\n *\n * @return int The comment ID.\n *\/"}]},"comment_ID":{"name":"comment_ID","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the comment id of the current comment.\n *\n * @since 0.71\n *\/"}]},"get_comment_link":{"name":"get_comment_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the link to a given comment.\n *\n * @since 1.5.0\n * @since 4.4.0 Added the ability for `$comment` to also accept a WP_Comment object. Added `$cpage` argument.\n *\n * @see get_page_of_comment()\n *\n * @global WP_Rewrite $wp_rewrite\n * @global bool       $in_comment_loop\n *\n * @param WP_Comment|int|null $comment Comment to retrieve. Default current comment.\n * @param array               $args {\n *     An array of optional arguments to override the defaults.\n *\n *     @type string     $type      Passed to get_page_of_comment().\n *     @type int        $page      Current page of comments, for calculating comment pagination.\n *     @type int        $per_page  Per-page value for comment pagination.\n *     @type int        $max_depth Passed to get_page_of_comment().\n *     @type int|string $cpage     Value to use for the comment's \"comment-page\" or \"cpage\" value.\n *                                 If provided, this value overrides any value calculated from `$page`\n *                                 and `$per_page`.\n * }\n * @return string The permalink to the given comment.\n *\/"}]},"get_comments_link":{"name":"get_comments_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the link to the current post comments.\n *\n * @since 1.5.0\n *\n * @param int|WP_Post $post_id Optional. Post ID or WP_Post object. Default is global $post.\n * @return string The link to the comments.\n *\/"}]},"comments_link":{"name":"comments_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$deprecated","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated_2","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the link to the current post comments.\n *\n * @since 0.71\n *\n * @param string $deprecated   Not Used.\n * @param string $deprecated_2 Not Used.\n *\/"}]},"get_comments_number":{"name":"get_comments_number","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the amount of comments a post has.\n *\n * @since 1.5.0\n *\n * @param int|WP_Post $post_id Optional. Post ID or WP_Post object. Default is global $post.\n * @return int The number of comments a post has.\n *\/"}]},"comments_number":{"name":"comments_number","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$zero","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$one","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$more","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the language string for the number of comments the current post has.\n *\n * @since 0.71\n *\n * @param string $zero       Optional. Text for no comments. Default false.\n * @param string $one        Optional. Text for one comment. Default false.\n * @param string $more       Optional. Text for more than one comment. Default false.\n * @param string $deprecated Not used.\n *\/"}]},"get_comments_number_text":{"name":"get_comments_number_text","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$zero","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$one","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$more","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the language string for the number of comments the current post has.\n *\n * @since 4.0.0\n *\n * @param string $zero Optional. Text for no comments. Default false.\n * @param string $one  Optional. Text for one comment. Default false.\n * @param string $more Optional. Text for more than one comment. Default false.\n *\/"}]},"get_comment_text":{"name":"get_comment_text","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the text of the current comment.\n *\n * @since 1.5.0\n * @since 4.4.0 Added the ability for `$comment_ID` to also accept a WP_Comment object.\n *\n * @see Walker_Comment::comment()\n *\n * @param int|WP_Comment  $comment_ID WP_Comment or ID of the comment for which to get the text.\n *                                    Default current comment.\n * @param array           $args       Optional. An array of arguments. Default empty.\n * @return string The comment content.\n *\/"}]},"comment_text":{"name":"comment_text","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the text of the current comment.\n *\n * @since 0.71\n * @since 4.4.0 Added the ability for `$comment_ID` to also accept a WP_Comment object.\n *\n * @see Walker_Comment::comment()\n *\n * @param int|WP_Comment  $comment_ID WP_Comment or ID of the comment for which to print the text.\n *                                    Default current comment.\n * @param array           $args       Optional. An array of arguments. Default empty array. Default empty.\n *\/"}]},"get_comment_time":{"name":"get_comment_time","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$d","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$gmt","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$translate","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the comment time of the current comment.\n *\n * @since 1.5.0\n *\n * @param string $d         Optional. The format of the time. Default user's settings.\n * @param bool   $gmt       Optional. Whether to use the GMT date. Default false.\n * @param bool   $translate Optional. Whether to translate the time (for use in feeds).\n *                          Default true.\n * @return string The formatted time.\n *\/"}]},"comment_time":{"name":"comment_time","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$d","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the comment time of the current comment.\n *\n * @since 0.71\n *\n * @param string $d Optional. The format of the time. Default user's settings.\n *\/"}]},"get_comment_type":{"name":"get_comment_type","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the comment type of the current comment.\n *\n * @since 1.5.0\n * @since 4.4.0 Added the ability for `$comment_ID` to also accept a WP_Comment object.\n *\n * @param int|WP_Comment $comment_ID Optional. WP_Comment or ID of the comment for which to get the type.\n *                                   Default current comment.\n * @return string The comment type.\n *\/"}]},"comment_type":{"name":"comment_type","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$commenttxt","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$trackbacktxt","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$pingbacktxt","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the comment type of the current comment.\n *\n * @since 0.71\n *\n * @param string $commenttxt   Optional. String to display for comment type. Default false.\n * @param string $trackbacktxt Optional. String to display for trackback type. Default false.\n * @param string $pingbacktxt  Optional. String to display for pingback type. Default false.\n *\/"}]},"get_trackback_url":{"name":"get_trackback_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve The current post's trackback URL.\n *\n * There is a check to see if permalink's have been enabled and if so, will\n * retrieve the pretty path. If permalinks weren't enabled, the ID of the\n * current post is used and appended to the correct page to go to.\n *\n * @since 1.5.0\n *\n * @return string The trackback URL after being filtered.\n *\/"}]},"trackback_url":{"name":"trackback_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$deprecated_echo","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the current post's trackback URL.\n *\n * @since 0.71\n *\n * @param bool $deprecated_echo Not used.\n * @return void|string Should only be used to echo the trackback URL, use get_trackback_url()\n *                     for the result instead.\n *\/"}]},"trackback_rdf":{"name":"trackback_rdf","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$deprecated","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Generate and display the RDF for the trackback information of current post.\n *\n * Deprecated in 3.0.0, and restored in 3.0.1.\n *\n * @since 0.71\n *\n * @param int $deprecated Not used (Was $timezone = 0).\n *\/"}]},"comments_open":{"name":"comments_open","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether the current post is open for comments.\n *\n * @since 1.5.0\n *\n * @param int|WP_Post $post_id Post ID or WP_Post object. Default current post.\n * @return bool True if the comments are open.\n *\/"}]},"pings_open":{"name":"pings_open","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether the current post is open for pings.\n *\n * @since 1.5.0\n *\n * @param int|WP_Post $post_id Post ID or WP_Post object. Default current post.\n * @return bool True if pings are accepted\n *\/"}]},"wp_comment_form_unfiltered_html_nonce":{"name":"wp_comment_form_unfiltered_html_nonce","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display form token for unfiltered comments.\n *\n * Will only display nonce token if the current user has permissions for\n * unfiltered html. Won't display the token for other users.\n *\n * The function was backported to 2.0.10 and was added to versions 2.1.3 and\n * above. Does not exist in versions prior to 2.0.10 in the 2.0 branch and in\n * the 2.1 branch, prior to 2.1.3. Technically added in 2.2.0.\n *\n * Backported to 2.0.10.\n *\n * @since 2.1.3\n *\/"}]},"comments_template":{"name":"comments_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"'\/comments.php'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$separate_comments","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load the comment template specified in $file.\n *\n * Will not display the comments template if not on single post or page, or if\n * the post does not have comments.\n *\n * Uses the WordPress database object to query for the comments. The comments\n * are passed through the {@see 'comments_array'} filter hook with the list of comments\n * and the post ID respectively.\n *\n * The `$file` path is passed through a filter hook called {@see 'comments_template'},\n * which includes the TEMPLATEPATH and $file combined. Tries the $filtered path\n * first and if it fails it will require the default comment template from the\n * default theme. If either does not exist, then the WordPress process will be\n * halted. It is advised for that reason, that the default theme is not deleted.\n *\n * Will not try to get the comments if the post has none.\n *\n * @since 1.5.0\n *\n * @global WP_Query   $wp_query\n * @global WP_Post    $post\n * @global wpdb       $wpdb\n * @global int        $id\n * @global WP_Comment $comment\n * @global string     $user_login\n * @global int        $user_ID\n * @global string     $user_identity\n * @global bool       $overridden_cpage\n * @global bool       $withcomments\n *\n * @param string $file              Optional. The file to load. Default '\/comments.php'.\n * @param bool   $separate_comments Optional. Whether to separate the comments by comment type.\n *                                  Default false.\n *\/"}]},"comments_popup_link":{"name":"comments_popup_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$zero","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$one","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$more","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$css_class","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$none","rank":4,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the link to the comments for the current post ID.\n *\n * @since 0.71\n *\n * @param string $zero      Optional. String to display when no comments. Default false.\n * @param string $one       Optional. String to display when only one comment is available.\n *                          Default false.\n * @param string $more      Optional. String to display when there are more than one comment.\n *                          Default false.\n * @param string $css_class Optional. CSS class to use for comments. Default empty.\n * @param string $none      Optional. String to display when comments have been turned off.\n *                          Default false.\n *\/"}]},"get_comment_reply_link":{"name":"get_comment_reply_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve HTML content for reply to comment link.\n *\n * @since 2.7.0\n * @since 4.4.0 Added the ability for `$comment` to also accept a WP_Comment object.\n *\n * @param array $args {\n *     Optional. Override default arguments.\n *\n *     @type string $add_below  The first part of the selector used to identify the comment to respond below.\n *                              The resulting value is passed as the first parameter to addComment.moveForm(),\n *                              concatenated as $add_below-$comment->comment_ID. Default 'comment'.\n *     @type string $respond_id The selector identifying the responding comment. Passed as the third parameter\n *                              to addComment.moveForm(), and appended to the link URL as a hash value.\n *                              Default 'respond'.\n *     @type string $reply_text The text of the Reply link. Default 'Reply'.\n *     @type string $login_text The text of the link to reply if logged out. Default 'Log in to Reply'.\n *     @type int    $max_depth  The max depth of the comment tree. Default 0.\n *     @type int    $depth      The depth of the new comment. Must be greater than 0 and less than the value\n *                              of the 'thread_comments_depth' option set in Settings > Discussion. Default 0.\n *     @type string $before     The text or HTML to add before the reply link. Default empty.\n *     @type string $after      The text or HTML to add after the reply link. Default empty.\n * }\n * @param int|WP_Comment $comment Comment being replied to. Default current comment.\n * @param int|WP_Post    $post    Post ID or WP_Post object the comment is going to be displayed on.\n *                                Default current post.\n * @return void|false|string Link to show comment form, if successful. False, if comments are closed.\n *\/"}]},"comment_reply_link":{"name":"comment_reply_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the HTML content for reply to comment link.\n *\n * @since 2.7.0\n *\n * @see get_comment_reply_link()\n *\n * @param array       $args    Optional. Override default options.\n * @param int         $comment Comment being replied to. Default current comment.\n * @param int|WP_Post $post    Post ID or WP_Post object the comment is going to be displayed on.\n *                             Default current post.\n * @return mixed Link to show comment form, if successful. False, if comments are closed.\n *\/"}]},"get_post_reply_link":{"name":"get_post_reply_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve HTML content for reply to post link.\n *\n * @since 2.7.0\n *\n * @param array $args {\n *     Optional. Override default arguments.\n *\n *     @type string $add_below  The first part of the selector used to identify the comment to respond below.\n *                              The resulting value is passed as the first parameter to addComment.moveForm(),\n *                              concatenated as $add_below-$comment->comment_ID. Default is 'post'.\n *     @type string $respond_id The selector identifying the responding comment. Passed as the third parameter\n *                              to addComment.moveForm(), and appended to the link URL as a hash value.\n *                              Default 'respond'.\n *     @type string $reply_text Text of the Reply link. Default is 'Leave a Comment'.\n *     @type string $login_text Text of the link to reply if logged out. Default is 'Log in to leave a Comment'.\n *     @type string $before     Text or HTML to add before the reply link. Default empty.\n *     @type string $after      Text or HTML to add after the reply link. Default empty.\n * }\n * @param int|WP_Post $post    Optional. Post ID or WP_Post object the comment is going to be displayed on.\n *                             Default current post.\n * @return false|null|string Link to show comment form, if successful. False, if comments are closed.\n *\/"}]},"post_reply_link":{"name":"post_reply_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the HTML content for reply to post link.\n *\n * @since 2.7.0\n *\n * @see get_post_reply_link()\n *\n * @param array       $args Optional. Override default options,\n * @param int|WP_Post $post Post ID or WP_Post object the comment is going to be displayed on.\n *                          Default current post.\n * @return string|bool|null Link to show comment form, if successful. False, if comments are closed.\n *\/"}]},"get_cancel_comment_reply_link":{"name":"get_cancel_comment_reply_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve HTML content for cancel comment reply link.\n *\n * @since 2.7.0\n *\n * @param string $text Optional. Text to display for cancel reply link. Default empty.\n * @return string\n *\/"}]},"cancel_comment_reply_link":{"name":"cancel_comment_reply_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display HTML content for cancel comment reply link.\n *\n * @since 2.7.0\n *\n * @param string $text Optional. Text to display for cancel reply link. Default empty.\n *\/"}]},"get_comment_id_fields":{"name":"get_comment_id_fields","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve hidden input HTML for replying to comments.\n *\n * @since 3.0.0\n *\n * @param int $id Optional. Post ID. Default current post ID.\n * @return string Hidden input HTML for replying to comments\n *\/"}]},"comment_id_fields":{"name":"comment_id_fields","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output hidden input HTML for replying to comments.\n *\n * @since 2.7.0\n *\n * @param int $id Optional. Post ID. Default current post ID.\n *\/"}]},"comment_form_title":{"name":"comment_form_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$noreplytext","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$replytext","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$linktoparent","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display text based on comment reply status.\n *\n * Only affects users with JavaScript disabled.\n *\n * @internal The $comment global must be present to allow template tags access to the current\n *           comment. See https:\/\/core.trac.wordpress.org\/changeset\/36512.\n *\n * @since 2.7.0\n *\n * @global WP_Comment $comment Current comment.\n *\n * @param string $noreplytext  Optional. Text to display when not replying to a comment.\n *                             Default false.\n * @param string $replytext    Optional. Text to display when replying to a comment.\n *                             Default false. Accepts \"%s\" for the author of the comment\n *                             being replied to.\n * @param string $linktoparent Optional. Boolean to control making the author's name a link\n *                             to their comment. Default true.\n *\/"}]},"wp_list_comments":{"name":"wp_list_comments","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comments","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * List comments.\n *\n * Used in the comments.php template to list comments for a particular post.\n *\n * @since 2.7.0\n *\n * @see WP_Query->comments\n *\n * @global WP_Query $wp_query\n * @global int      $comment_alt\n * @global int      $comment_depth\n * @global int      $comment_thread_alt\n * @global bool     $overridden_cpage\n * @global bool     $in_comment_loop\n *\n * @param string|array $args {\n *     Optional. Formatting options.\n *\n *     @type object $walker            Instance of a Walker class to list comments. Default null.\n *     @type int    $max_depth         The maximum comments depth. Default empty.\n *     @type string $style             The style of list ordering. Default 'ul'. Accepts 'ul', 'ol'.\n *     @type string $callback          Callback function to use. Default null.\n *     @type string $end-callback      Callback function to use at the end. Default null.\n *     @type string $type              Type of comments to list.\n *                                     Default 'all'. Accepts 'all', 'comment', 'pingback', 'trackback', 'pings'.\n *     @type int    $page              Page ID to list comments for. Default empty.\n *     @type int    $per_page          Number of comments to list per page. Default empty.\n *     @type int    $avatar_size       Height and width dimensions of the avatar size. Default 32.\n *     @type bool   $reverse_top_level Ordering of the listed comments. If true, will display newest comments first.\n *     @type bool   $reverse_children  Whether to reverse child comments in the list. Default null.\n *     @type string $format            How to format the comments list.\n *                                     Default 'html5' if the theme supports it. Accepts 'html5', 'xhtml'.\n *     @type bool   $short_ping        Whether to output short pings. Default false.\n *     @type bool   $echo              Whether to echo the output or return it. Default true.\n * }\n * @param array $comments Optional. Array of WP_Comment objects.\n *\/"}]},"comment_form":{"name":"comment_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs a complete commenting form for use within a template.\n *\n * Most strings and form fields may be controlled through the $args array passed\n * into the function, while you may also choose to use the {@see 'comment_form_default_fields'}\n * filter to modify the array of default fields if you'd just like to add a new\n * one or remove a single field. All fields are also individually passed through\n * a filter of the {@see 'comment_form_field_$name'} where $name is the key used\n * in the array of fields.\n *\n * @since 3.0.0\n * @since 4.1.0 Introduced the 'class_submit' argument.\n * @since 4.2.0 Introduced the 'submit_button' and 'submit_fields' arguments.\n * @since 4.4.0 Introduced the 'class_form', 'title_reply_before', 'title_reply_after',\n *              'cancel_reply_before', and 'cancel_reply_after' arguments.\n * @since 4.5.0 The 'author', 'email', and 'url' form fields are limited to 245, 100,\n *              and 200 characters, respectively.\n * @since 4.6.0 Introduced the 'action' argument.\n *\n * @param array       $args {\n *     Optional. Default arguments and form fields to override.\n *\n *     @type array $fields {\n *         Default comment fields, filterable by default via the {@see 'comment_form_default_fields'} hook.\n *\n *         @type string $author Comment author field HTML.\n *         @type string $email  Comment author email field HTML.\n *         @type string $url    Comment author URL field HTML.\n *     }\n *     @type string $comment_field        The comment textarea field HTML.\n *     @type string $must_log_in          HTML element for a 'must be logged in to comment' message.\n *     @type string $logged_in_as         HTML element for a 'logged in as [user]' message.\n *     @type string $comment_notes_before HTML element for a message displayed before the comment fields\n *                                        if the user is not logged in.\n *                                        Default 'Your email address will not be published.'.\n *     @type string $comment_notes_after  HTML element for a message displayed after the textarea field.\n *     @type string $action               The comment form element action attribute. Default '\/wp-comments-post.php'.\n *     @type string $id_form              The comment form element id attribute. Default 'commentform'.\n *     @type string $id_submit            The comment submit element id attribute. Default 'submit'.\n *     @type string $class_form           The comment form element class attribute. Default 'comment-form'.\n *     @type string $class_submit         The comment submit element class attribute. Default 'submit'.\n *     @type string $name_submit          The comment submit element name attribute. Default 'submit'.\n *     @type string $title_reply          The translatable 'reply' button label. Default 'Leave a Reply'.\n *     @type string $title_reply_to       The translatable 'reply-to' button label. Default 'Leave a Reply to %s',\n *                                        where %s is the author of the comment being replied to.\n *     @type string $title_reply_before   HTML displayed before the comment form title.\n *                                        Default: '<h3 id=\"reply-title\" class=\"comment-reply-title\">'.\n *     @type string $title_reply_after    HTML displayed after the comment form title.\n *                                        Default: '<\/h3>'.\n *     @type string $cancel_reply_before  HTML displayed before the cancel reply link.\n *     @type string $cancel_reply_after   HTML displayed after the cancel reply link.\n *     @type string $cancel_reply_link    The translatable 'cancel reply' button label. Default 'Cancel reply'.\n *     @type string $label_submit         The translatable 'submit' button label. Default 'Post a comment'.\n *     @type string $submit_button        HTML format for the Submit button.\n *                                        Default: '<input name=\"%1$s\" type=\"submit\" id=\"%2$s\" class=\"%3$s\" value=\"%4$s\" \/>'.\n *     @type string $submit_field         HTML format for the markup surrounding the Submit button and comment hidden\n *                                        fields. Default: '<p class=\"form-submit\">%1$s %2$s<\/a>', where %1$s is the\n *                                        submit button markup and %2$s is the comment hidden fields.\n *     @type string $format               The comment form format. Default 'xhtml'. Accepts 'xhtml', 'html5'.\n * }\n * @param int|WP_Post $post_id Post ID or WP_Post object to generate the form for. Default current post.\n *\/"}]},"_wp_post_revision_fields":{"name":"_wp_post_revision_fields","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines which fields of posts are to be saved in revisions.\n *\n * @since 2.6.0\n * @since 4.5.0 A `WP_Post` object can now be passed to the `$post` parameter.\n * @since 4.5.0 The optional `$autosave` parameter was deprecated and renamed to `$deprecated`.\n * @access private\n *\n * @staticvar array $fields\n *\n * @param array|WP_Post $post       Optional. A post array or a WP_Post object being processed\n *                                  for insertion as a post revision. Default empty array.\n * @param bool          $deprecated Not used.\n * @return array Array of fields that can be versioned.\n *\/"},{"phpdoc":"\/**\n * Post revision functions.\n *\n * @package WordPress\n * @subpackage Post_Revisions\n *\/"}]},"_wp_post_revision_data":{"name":"_wp_post_revision_data","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$autosave","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns a post array ready to be inserted into the posts table as a post revision.\n *\n * @since 4.5.0\n * @access private\n *\n * @param array|WP_Post $post     Optional. A post array or a WP_Post object to be processed\n *                                for insertion as a post revision. Default empty array.\n * @param bool          $autosave Optional. Is the revision an autosave? Default false.\n * @return array Post array ready to be inserted as a post revision.\n *\/"}]},"wp_save_post_revision":{"name":"wp_save_post_revision","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates a revision for the current version of a post.\n *\n * Typically used immediately after a post update, as every update is a revision,\n * and the most recent revision always matches the current post.\n *\n * @since 2.6.0\n *\n * @param int $post_id The ID of the post to save as a revision.\n * @return int|WP_Error|void Void or 0 if error, new revision ID, if success.\n *\/"}]},"wp_get_post_autosave":{"name":"wp_get_post_autosave","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_id","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the autosaved data of the specified post.\n *\n * Returns a post object containing the information that was autosaved for the\n * specified post. If the optional $user_id is passed, returns the autosave for that user\n * otherwise returns the latest autosave.\n *\n * @since 2.6.0\n *\n * @param int $post_id The post ID.\n * @param int $user_id Optional The post author ID.\n * @return WP_Post|false The autosaved data or false on failure or when no autosave exists.\n *\/"}]},"wp_is_post_revision":{"name":"wp_is_post_revision","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines if the specified post is a revision.\n *\n * @since 2.6.0\n *\n * @param int|WP_Post $post Post ID or post object.\n * @return false|int False if not a revision, ID of revision's parent otherwise.\n *\/"}]},"wp_is_post_autosave":{"name":"wp_is_post_autosave","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines if the specified post is an autosave.\n *\n * @since 2.6.0\n *\n * @param int|WP_Post $post Post ID or post object.\n * @return false|int False if not a revision, ID of autosave's parent otherwise\n *\/"}]},"_wp_put_post_revision":{"name":"_wp_put_post_revision","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$autosave","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Inserts post data into the posts table as a post revision.\n *\n * @since 2.6.0\n * @access private\n *\n * @param int|WP_Post|array|null $post     Post ID, post object OR post array.\n * @param bool                   $autosave Optional. Is the revision an autosave?\n * @return int|WP_Error WP_Error or 0 if error, new revision ID if success.\n *\/"}]},"wp_get_post_revision":{"name":"wp_get_post_revision","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"OBJECT","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filter","rank":2,"variadic":false,"reference":false,"default":"'raw'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets a post revision.\n *\n * @since 2.6.0\n *\n * @param int|WP_Post $post   The post ID or object.\n * @param string      $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                            a WP_Post object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @param string      $filter Optional sanitation filter. See sanitize_post().\n * @return WP_Post|array|null WP_Post (or array) on success, or null on failure.\n *\/"}]},"wp_restore_post_revision":{"name":"wp_restore_post_revision","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$revision_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fields","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Restores a post to the specified revision.\n *\n * Can restore a past revision using all fields of the post revision, or only selected fields.\n *\n * @since 2.6.0\n *\n * @param int|WP_Post $revision_id Revision ID or revision object.\n * @param array       $fields      Optional. What fields to restore from. Defaults to all.\n * @return int|false|null Null if error, false if no fields to restore, (int) post ID if success.\n *\/"}]},"wp_delete_post_revision":{"name":"wp_delete_post_revision","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$revision_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deletes a revision.\n *\n * Deletes the row from the posts table corresponding to the specified revision.\n *\n * @since 2.6.0\n *\n * @param int|WP_Post $revision_id Revision ID or revision object.\n * @return array|false|WP_Post|WP_Error|null Null or WP_Error if error, deleted post if success.\n *\/"}]},"wp_get_post_revisions":{"name":"wp_get_post_revisions","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns all revisions of specified post.\n *\n * @since 2.6.0\n *\n * @see get_children()\n *\n * @param int|WP_Post $post_id Optional. Post ID or WP_Post object. Default is global `$post`.\n * @param array|null  $args    Optional. Arguments for retrieving post revisions. Default null.\n * @return array An array of revisions, or an empty array if none.\n *\/"}]},"wp_revisions_enabled":{"name":"wp_revisions_enabled","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine if revisions are enabled for a given post.\n *\n * @since 3.6.0\n *\n * @param WP_Post $post The post object.\n * @return bool True if number of revisions to keep isn't zero, false otherwise.\n *\/"}]},"wp_revisions_to_keep":{"name":"wp_revisions_to_keep","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine how many revisions to retain for a given post.\n *\n * By default, an infinite number of revisions are kept.\n *\n * The constant WP_POST_REVISIONS can be set in wp-config to specify the limit\n * of revisions to keep.\n *\n * @since 3.6.0\n *\n * @param WP_Post $post The post object.\n * @return int The number of revisions to keep.\n *\/"}]},"_set_preview":{"name":"_set_preview","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sets up the post object for preview based on the post autosave.\n *\n * @since 2.7.0\n * @access private\n *\n * @param WP_Post $post\n * @return WP_Post|false\n *\/"}]},"_show_post_preview":{"name":"_show_post_preview","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters the latest content for preview from the post autosave.\n *\n * @since 2.7.0\n * @access private\n *\/"}]},"_wp_preview_terms_filter":{"name":"_wp_preview_terms_filter","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$terms","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters terms lookup to set the post format.\n *\n * @since 3.6.0\n * @access private\n *\n * @param array  $terms\n * @param int    $post_id\n * @param string $taxonomy\n * @return array\n *\/"}]},"_wp_preview_post_thumbnail_filter":{"name":"_wp_preview_post_thumbnail_filter","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters post thumbnail lookup to set the post thumbnail.\n *\n * @since 4.6.0\n * @access private\n *\n * @param null|array|string $value    The value to return - a single metadata value, or an array of values.\n * @param int               $post_id  Post ID.\n * @param string            $meta_key Meta key.\n * @return null|array The default return value or the post thumbnail meta array.\n *\/"}]},"_wp_get_post_revision_version":{"name":"_wp_get_post_revision_version","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$revision","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the post revision version.\n *\n * @since 3.6.0\n * @access private\n *\n * @param WP_Post $revision\n * @return int|false\n *\/"}]},"_wp_upgrade_revisions_of_post":{"name":"_wp_upgrade_revisions_of_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$revisions","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Upgrade the revisions author, add the current post as a revision and set the revisions version to 1\n *\n * @since 3.6.0\n * @access private\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param WP_Post $post      Post object\n * @param array   $revisions Current revisions of the post\n * @return bool true if the revisions were upgraded, false if problems\n *\/"}]},"create_initial_taxonomies":{"name":"create_initial_taxonomies","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Core Taxonomy API\n *\n * @package WordPress\n * @subpackage Taxonomy\n *\/"},{"phpdoc":"\/**\n * Creates the initial taxonomies.\n *\n * This function fires twice: in wp-settings.php before plugins are loaded (for\n * backward compatibility reasons), and again on the {@see 'init'} action. We must\n * avoid registering rewrite rules before the {@see 'init'} action.\n *\n * @since 2.8.0\n *\n * @global WP_Rewrite $wp_rewrite The WordPress rewrite class.\n *\/"}]},"get_taxonomies":{"name":"get_taxonomies","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"'names'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$operator","rank":2,"variadic":false,"reference":false,"default":"'and'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a list of registered taxonomy names or objects.\n *\n * @since 3.0.0\n *\n * @global array $wp_taxonomies The registered taxonomies.\n *\n * @param array  $args     Optional. An array of `key => value` arguments to match against the taxonomy objects.\n *                         Default empty array.\n * @param string $output   Optional. The type of output to return in the array. Accepts either taxonomy 'names'\n *                         or 'objects'. Default 'names'.\n * @param string $operator Optional. The logical operation to perform. Accepts 'and' or 'or'. 'or' means only\n *                         one element from the array needs to match; 'and' means all elements must match.\n *                         Default 'and'.\n * @return array A list of taxonomy names or objects.\n *\/"}]},"get_object_taxonomies":{"name":"get_object_taxonomies","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"'names'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return the names or objects of the taxonomies which are registered for the requested object or object type, such as\n * a post object or post type name.\n *\n * Example:\n *\n *     $taxonomies = get_object_taxonomies( 'post' );\n *\n * This results in:\n *\n *     Array( 'category', 'post_tag' )\n *\n * @since 2.3.0\n *\n * @global array $wp_taxonomies The registered taxonomies.\n *\n * @param array|string|WP_Post $object Name of the type of taxonomy object, or an object (row from posts)\n * @param string               $output Optional. The type of output to return in the array. Accepts either\n *                                     taxonomy 'names' or 'objects'. Default 'names'.\n * @return array The names of all taxonomy of $object_type.\n *\/"}]},"get_taxonomy":{"name":"get_taxonomy","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the taxonomy object of $taxonomy.\n *\n * The get_taxonomy function will first check that the parameter string given\n * is a taxonomy object and if it is, it will return it.\n *\n * @since 2.3.0\n *\n * @global array $wp_taxonomies The registered taxonomies.\n *\n * @param string $taxonomy Name of taxonomy object to return.\n * @return WP_Taxonomy|false The Taxonomy Object or false if $taxonomy doesn't exist.\n *\/"}]},"taxonomy_exists":{"name":"taxonomy_exists","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks that the taxonomy name exists.\n *\n * Formerly is_taxonomy(), introduced in 2.3.0.\n *\n * @since 3.0.0\n *\n * @global array $wp_taxonomies The registered taxonomies.\n *\n * @param string $taxonomy Name of taxonomy object.\n * @return bool Whether the taxonomy exists.\n *\/"}]},"is_taxonomy_hierarchical":{"name":"is_taxonomy_hierarchical","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether the taxonomy object is hierarchical.\n *\n * Checks to make sure that the taxonomy is an object first. Then Gets the\n * object, and finally returns the hierarchical value in the object.\n *\n * A false return value might also mean that the taxonomy does not exist.\n *\n * @since 2.3.0\n *\n * @param string $taxonomy Name of taxonomy object.\n * @return bool Whether the taxonomy is hierarchical.\n *\/"}]},"register_taxonomy":{"name":"register_taxonomy","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates or modifies a taxonomy object.\n *\n * Note: Do not use before the {@see 'init'} hook.\n *\n * A simple function for creating or modifying a taxonomy object based on the\n * parameters given. The function will accept an array (third optional\n * parameter), along with strings for the taxonomy name and another string for\n * the object type.\n *\n * @since 2.3.0\n * @since 4.2.0 Introduced `show_in_quick_edit` argument.\n * @since 4.4.0 The `show_ui` argument is now enforced on the term editing screen.\n * @since 4.4.0 The `public` argument now controls whether the taxonomy can be queried on the front end.\n * @since 4.5.0 Introduced `publicly_queryable` argument.\n * @since 4.7.0 Introduced `show_in_rest`, 'rest_base' and 'rest_controller_class'\n *              arguments to register the Taxonomy in REST API.\n *\n * @global array $wp_taxonomies Registered taxonomies.\n *\n * @param string       $taxonomy    Taxonomy key, must not exceed 32 characters.\n * @param array|string $object_type Object type or array of object types with which the taxonomy should be associated.\n * @param array|string $args        {\n *     Optional. Array or query string of arguments for registering a taxonomy.\n *\n *     @type array         $labels                An array of labels for this taxonomy. By default, Tag labels are\n *                                                used for non-hierarchical taxonomies, and Category labels are used\n *                                                for hierarchical taxonomies. See accepted values in\n *                                                get_taxonomy_labels(). Default empty array.\n *     @type string        $description           A short descriptive summary of what the taxonomy is for. Default empty.\n *     @type bool          $public                Whether a taxonomy is intended for use publicly either via\n *                                                the admin interface or by front-end users. The default settings\n *                                                of `$publicly_queryable`, `$show_ui`, and `$show_in_nav_menus`\n *                                                are inherited from `$public`.\n *     @type bool          $publicly_queryable    Whether the taxonomy is publicly queryable.\n *                                                If not set, the default is inherited from `$public`\n *     @type bool          $hierarchical          Whether the taxonomy is hierarchical. Default false.\n *     @type bool          $show_ui               Whether to generate and allow a UI for managing terms in this taxonomy in\n *                                                the admin. If not set, the default is inherited from `$public`\n *                                                (default true).\n *     @type bool          $show_in_menu          Whether to show the taxonomy in the admin menu. If true, the taxonomy is\n *                                                shown as a submenu of the object type menu. If false, no menu is shown.\n *                                                `$show_ui` must be true. If not set, default is inherited from `$show_ui`\n *                                                (default true).\n *     @type bool          $show_in_nav_menus     Makes this taxonomy available for selection in navigation menus. If not\n *                                                set, the default is inherited from `$public` (default true).\n *     @type bool          $show_in_rest          Whether to include the taxonomy in the REST API.\n *     @type string        $rest_base             To change the base url of REST API route. Default is $taxonomy.\n *     @type string        $rest_controller_class REST API Controller class name. Default is 'WP_REST_Terms_Controller'.\n *     @type bool          $show_tagcloud         Whether to list the taxonomy in the Tag Cloud Widget controls. If not set,\n *                                                the default is inherited from `$show_ui` (default true).\n *     @type bool          $show_in_quick_edit    Whether to show the taxonomy in the quick\/bulk edit panel. It not set,\n *                                                the default is inherited from `$show_ui` (default true).\n *     @type bool          $show_admin_column     Whether to display a column for the taxonomy on its post type listing\n *                                                screens. Default false.\n *     @type bool|callable $meta_box_cb           Provide a callback function for the meta box display. If not set,\n *                                                post_categories_meta_box() is used for hierarchical taxonomies, and\n *                                                post_tags_meta_box() is used for non-hierarchical. If false, no meta\n *                                                box is shown.\n *     @type array         $capabilities {\n *         Array of capabilities for this taxonomy.\n *\n *         @type string $manage_terms Default 'manage_categories'.\n *         @type string $edit_terms   Default 'manage_categories'.\n *         @type string $delete_terms Default 'manage_categories'.\n *         @type string $assign_terms Default 'edit_posts'.\n *     }\n *     @type bool|array    $rewrite {\n *         Triggers the handling of rewrites for this taxonomy. Default true, using $taxonomy as slug. To prevent\n *         rewrite, set to false. To specify rewrite rules, an array can be passed with any of these keys:\n *\n *         @type string $slug         Customize the permastruct slug. Default `$taxonomy` key.\n *         @type bool   $with_front   Should the permastruct be prepended with WP_Rewrite::$front. Default true.\n *         @type bool   $hierarchical Either hierarchical rewrite tag or not. Default false.\n *         @type int    $ep_mask      Assign an endpoint mask. Default `EP_NONE`.\n *     }\n *     @type string        $query_var             Sets the query var key for this taxonomy. Default `$taxonomy` key. If\n *                                                false, a taxonomy cannot be loaded at `?{query_var}={term_slug}`. If a\n *                                                string, the query `?{query_var}={term_slug}` will be valid.\n *     @type callable      $update_count_callback Works much like a hook, in that it will be called when the count is\n *                                                updated. Default _update_post_term_count() for taxonomies attached\n *                                                to post types, which confirms that the objects are published before\n *                                                counting them. Default _update_generic_term_count() for taxonomies\n *                                                attached to other object types, such as users.\n *     @type bool          $_builtin              This taxonomy is a \"built-in\" taxonomy. INTERNAL USE ONLY!\n *                                                Default false.\n * }\n * @return WP_Error|void WP_Error, if errors.\n *\/"}]},"unregister_taxonomy":{"name":"unregister_taxonomy","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Unregisters a taxonomy.\n *\n * Can not be used to unregister built-in taxonomies.\n *\n * @since 4.5.0\n *\n * @global WP    $wp            Current WordPress environment instance.\n * @global array $wp_taxonomies List of taxonomies.\n *\n * @param string $taxonomy Taxonomy name.\n * @return bool|WP_Error True on success, WP_Error on failure or if the taxonomy doesn't exist.\n *\/"}]},"get_taxonomy_labels":{"name":"get_taxonomy_labels","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tax","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Builds an object with all taxonomy labels out of a taxonomy object\n *\n * Accepted keys of the label array in the taxonomy object:\n *\n * - name - general name for the taxonomy, usually plural. The same as and overridden by $tax->label. Default is Tags\/Categories\n * - singular_name - name for one object of this taxonomy. Default is Tag\/Category\n * - search_items - Default is Search Tags\/Search Categories\n * - popular_items - This string isn't used on hierarchical taxonomies. Default is Popular Tags\n * - all_items - Default is All Tags\/All Categories\n * - parent_item - This string isn't used on non-hierarchical taxonomies. In hierarchical ones the default is Parent Category\n * - parent_item_colon - The same as `parent_item`, but with colon `:` in the end\n * - edit_item - Default is Edit Tag\/Edit Category\n * - view_item - Default is View Tag\/View Category\n * - update_item - Default is Update Tag\/Update Category\n * - add_new_item - Default is Add New Tag\/Add New Category\n * - new_item_name - Default is New Tag Name\/New Category Name\n * - separate_items_with_commas - This string isn't used on hierarchical taxonomies. Default is \"Separate tags with commas\", used in the meta box.\n * - add_or_remove_items - This string isn't used on hierarchical taxonomies. Default is \"Add or remove tags\", used in the meta box when JavaScript is disabled.\n * - choose_from_most_used - This string isn't used on hierarchical taxonomies. Default is \"Choose from the most used tags\", used in the meta box.\n * - not_found - Default is \"No tags found\"\/\"No categories found\", used in the meta box and taxonomy list table.\n * - no_terms - Default is \"No tags\"\/\"No categories\", used in the posts and media list tables.\n * - items_list_navigation - String for the table pagination hidden heading.\n * - items_list - String for the table hidden heading.\n *\n * Above, the first default value is for non-hierarchical taxonomies (like tags) and the second one is for hierarchical taxonomies (like categories).\n *\n * @todo Better documentation for the labels array.\n *\n * @since 3.0.0\n * @since 4.3.0 Added the `no_terms` label.\n * @since 4.4.0 Added the `items_list_navigation` and `items_list` labels.\n *\n * @param WP_Taxonomy $tax Taxonomy object.\n * @return object object with all the labels as member variables.\n *\/"}]},"register_taxonomy_for_object_type":{"name":"register_taxonomy_for_object_type","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add an already registered taxonomy to an object type.\n *\n * @since 3.0.0\n *\n * @global array $wp_taxonomies The registered taxonomies.\n *\n * @param string $taxonomy    Name of taxonomy object.\n * @param string $object_type Name of the object type.\n * @return bool True if successful, false if not.\n *\/"}]},"unregister_taxonomy_for_object_type":{"name":"unregister_taxonomy_for_object_type","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove an already registered taxonomy from an object type.\n *\n * @since 3.7.0\n *\n * @global array $wp_taxonomies The registered taxonomies.\n *\n * @param string $taxonomy    Name of taxonomy object.\n * @param string $object_type Name of the object type.\n * @return bool True if successful, false if not.\n *\/"}]},"get_objects_in_term":{"name":"get_objects_in_term","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomies","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve object_ids of valid taxonomy and term.\n *\n * The strings of $taxonomies must exist before this function will continue. On\n * failure of finding a valid taxonomy, it will return an WP_Error class, kind\n * of like Exceptions in PHP 5, except you can't catch them. Even so, you can\n * still test for the WP_Error class and get the error message.\n *\n * The $terms aren't checked the same as $taxonomies, but still need to exist\n * for $object_ids to be returned.\n *\n * It is possible to change the order that object_ids is returned by either\n * using PHP sort family functions or using the database by using $args with\n * either ASC or DESC array. The value should be in the key named 'order'.\n *\n * @since 2.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|array    $term_ids   Term id or array of term ids of terms that will be used.\n * @param string|array $taxonomies String of taxonomy name or Array of string values of taxonomy names.\n * @param array|string $args       Change the order of the object_ids, either ASC or DESC.\n * @return WP_Error|array If the taxonomy does not exist, then WP_Error will be returned. On success.\n *\tthe array can be empty meaning that there are no $object_ids found or it will return the $object_ids found.\n *\/"}]},"get_tax_sql":{"name":"get_tax_sql","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tax_query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$primary_table","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$primary_id_column","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Given a taxonomy query, generates SQL to be appended to a main query.\n *\n * @since 3.1.0\n *\n * @see WP_Tax_Query\n *\n * @param array  $tax_query         A compact tax query\n * @param string $primary_table\n * @param string $primary_id_column\n * @return array\n *\/"}]},"get_term":{"name":"get_term","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":2,"variadic":false,"reference":false,"default":"OBJECT","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filter","rank":3,"variadic":false,"reference":false,"default":"'raw'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get all Term data from database by Term ID.\n *\n * The usage of the get_term function is to apply filters to a term object. It\n * is possible to get a term object from the database before applying the\n * filters.\n *\n * $term ID must be part of $taxonomy, to get from the database. Failure, might\n * be able to be captured by the hooks. Failure would be the same value as $wpdb\n * returns for the get_row method.\n *\n * There are two hooks, one is specifically for each term, named 'get_term', and\n * the second is for the taxonomy name, 'term_$taxonomy'. Both hooks gets the\n * term object, and the taxonomy name as parameters. Both hooks are expected to\n * return a Term object.\n *\n * {@see 'get_term'} hook - Takes two parameters the term Object and the taxonomy name.\n * Must return term object. Used in get_term() as a catch-all filter for every\n * $term.\n *\n * {@see 'get_$taxonomy'} hook - Takes two parameters the term Object and the taxonomy\n * name. Must return term object. $taxonomy will be the taxonomy name, so for\n * example, if 'category', it would be 'get_category' as the filter name. Useful\n * for custom taxonomies or plugging into default taxonomies.\n *\n * @todo Better formatting for DocBlock\n *\n * @since 2.3.0\n * @since 4.4.0 Converted to return a WP_Term object if `$output` is `OBJECT`.\n *              The `$taxonomy` parameter was made optional.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n * @see sanitize_term_field() The $context param lists the available values for get_term_by() $filter param.\n *\n * @param int|WP_Term|object $term If integer, term data will be fetched from the database, or from the cache if\n *                                 available. If stdClass object (as in the results of a database query), will apply\n *                                 filters and return a `WP_Term` object corresponding to the `$term` data. If `WP_Term`,\n *                                 will return `$term`.\n * @param string     $taxonomy Optional. Taxonomy name that $term is part of.\n * @param string     $output   Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                             a WP_Term object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @param string     $filter   Optional, default is raw or no WordPress defined filter will applied.\n * @return array|WP_Term|WP_Error|null Object of the type specified by `$output` on success. When `$output` is 'OBJECT',\n *                                     a WP_Term instance is returned. If taxonomy does not exist, a WP_Error is\n *                                     returned. Returns null for miscellaneous failure.\n *\/"}]},"get_term_by":{"name":"get_term_by","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$field","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":3,"variadic":false,"reference":false,"default":"OBJECT","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filter","rank":4,"variadic":false,"reference":false,"default":"'raw'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get all Term data from database by Term field and data.\n *\n * Warning: $value is not escaped for 'name' $field. You must do it yourself, if\n * required.\n *\n * The default $field is 'id', therefore it is possible to also use null for\n * field, but not recommended that you do so.\n *\n * If $value does not exist, the return value will be false. If $taxonomy exists\n * and $field and $value combinations exist, the Term will be returned.\n *\n * This function will always return the first term that matches the `$field`-\n * `$value`-`$taxonomy` combination specified in the parameters. If your query\n * is likely to match more than one term (as is likely to be the case when\n * `$field` is 'name', for example), consider using get_terms() instead; that\n * way, you will get all matching terms, and can provide your own logic for\n * deciding which one was intended.\n *\n * @todo Better formatting for DocBlock.\n *\n * @since 2.3.0\n * @since 4.4.0 `$taxonomy` is optional if `$field` is 'term_taxonomy_id'. Converted to return\n *              a WP_Term object if `$output` is `OBJECT`.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n * @see sanitize_term_field() The $context param lists the available values for get_term_by() $filter param.\n *\n * @param string     $field    Either 'slug', 'name', 'id' (term_id), or 'term_taxonomy_id'\n * @param string|int $value    Search for this term value\n * @param string     $taxonomy Taxonomy name. Optional, if `$field` is 'term_taxonomy_id'.\n * @param string     $output   Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                             a WP_Term object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @param string     $filter   Optional, default is raw or no WordPress defined filter will applied.\n * @return WP_Term|array|false WP_Term instance (or array) on success. Will return false if `$taxonomy` does not exist\n *                             or `$term` was not found.\n *\/"}]},"get_term_children":{"name":"get_term_children","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Merge all term children into a single array of their IDs.\n *\n * This recursive function will merge all of the children of $term into the same\n * array of term IDs. Only useful for taxonomies which are hierarchical.\n *\n * Will return an empty array if $term does not exist in $taxonomy.\n *\n * @since 2.3.0\n *\n * @param string $term_id  ID of Term to get children.\n * @param string $taxonomy Taxonomy Name.\n * @return array|WP_Error List of Term IDs. WP_Error returned if `$taxonomy` does not exist.\n *\/"}]},"get_term_field":{"name":"get_term_field","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$field","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$term","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":3,"variadic":false,"reference":false,"default":"'display'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get sanitized Term field.\n *\n * The function is for contextual reasons and for simplicity of usage.\n *\n * @since 2.3.0\n * @since 4.4.0 The `$taxonomy` parameter was made optional. `$term` can also now accept a WP_Term object.\n *\n * @see sanitize_term_field()\n *\n * @param string      $field    Term field to fetch.\n * @param int|WP_Term $term     Term ID or object.\n * @param string      $taxonomy Optional. Taxonomy Name. Default empty.\n * @param string      $context  Optional, default is display. Look at sanitize_term_field() for available options.\n * @return string|int|null|WP_Error Will return an empty string if $term is not an object or if $field is not set in $term.\n *\/"}]},"get_term_to_edit":{"name":"get_term_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes Term for editing.\n *\n * Return value is sanitize_term() and usage is for sanitizing the term for\n * editing. Function is for contextual and simplicity.\n *\n * @since 2.3.0\n *\n * @param int|object $id       Term ID or object.\n * @param string     $taxonomy Taxonomy name.\n * @return string|int|null|WP_Error Will return empty string if $term is not an object.\n *\/"}]},"get_terms":{"name":"get_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the terms in a given taxonomy or list of taxonomies.\n *\n * You can fully inject any customizations to the query before it is sent, as\n * well as control the output with a filter.\n *\n * The {@see 'get_terms'} filter will be called when the cache has the term and will\n * pass the found term along with the array of $taxonomies and array of $args.\n * This filter is also called before the array of terms is passed and will pass\n * the array of terms, along with the $taxonomies and $args.\n *\n * The {@see 'list_terms_exclusions'} filter passes the compiled exclusions along with\n * the $args.\n *\n * The {@see 'get_terms_orderby'} filter passes the `ORDER BY` clause for the query\n * along with the $args array.\n *\n * Prior to 4.5.0, the first parameter of `get_terms()` was a taxonomy or list of taxonomies:\n *\n *     $terms = get_terms( 'post_tag', array(\n *         'hide_empty' => false,\n *     ) );\n *\n * Since 4.5.0, taxonomies should be passed via the 'taxonomy' argument in the `$args` array:\n *\n *     $terms = get_terms( array(\n *         'taxonomy' => 'post_tag',\n *         'hide_empty' => false,\n *     ) );\n *\n * @since 2.3.0\n * @since 4.2.0 Introduced 'name' and 'childless' parameters.\n * @since 4.4.0 Introduced the ability to pass 'term_id' as an alias of 'id' for the `orderby` parameter.\n *              Introduced the 'meta_query' and 'update_term_meta_cache' parameters. Converted to return\n *              a list of WP_Term objects.\n * @since 4.5.0 Changed the function signature so that the `$args` array can be provided as the first parameter.\n *              Introduced 'meta_key' and 'meta_value' parameters. Introduced the ability to order results by metadata.\n *\n * @internal The `$deprecated` parameter is parsed for backward compatibility only.\n *\n * @global wpdb  $wpdb WordPress database abstraction object.\n * @global array $wp_filter\n *\n * @param array|string $args {\n *     Optional. Array or string of arguments to get terms.\n *\n *     @type string|array $taxonomy               Taxonomy name, or array of taxonomies, to which results should\n *                                                be limited.\n *     @type string       $orderby                Field(s) to order terms by. Accepts term fields ('name', 'slug',\n *                                                'term_group', 'term_id', 'id', 'description'), 'count' for term\n *                                                taxonomy count, 'include' to match the 'order' of the $include param,\n *                                                'meta_value', 'meta_value_num', the value of `$meta_key`, the array\n *                                                keys of `$meta_query`, or 'none' to omit the ORDER BY clause.\n *                                                Defaults to 'name'.\n *     @type string       $order                  Whether to order terms in ascending or descending order.\n *                                                Accepts 'ASC' (ascending) or 'DESC' (descending).\n *                                                Default 'ASC'.\n *     @type bool|int     $hide_empty             Whether to hide terms not assigned to any posts. Accepts\n *                                                1|true or 0|false. Default 1|true.\n *     @type array|string $include                Array or comma\/space-separated string of term ids to include.\n *                                                Default empty array.\n *     @type array|string $exclude                Array or comma\/space-separated string of term ids to exclude.\n *                                                If $include is non-empty, $exclude is ignored.\n *                                                Default empty array.\n *     @type array|string $exclude_tree           Array or comma\/space-separated string of term ids to exclude\n *                                                along with all of their descendant terms. If $include is\n *                                                non-empty, $exclude_tree is ignored. Default empty array.\n *     @type int|string   $number                 Maximum number of terms to return. Accepts ''|0 (all) or any\n *                                                positive number. Default ''|0 (all).\n *     @type int          $offset                 The number by which to offset the terms query. Default empty.\n *     @type string       $fields                 Term fields to query for. Accepts 'all' (returns an array of complete\n *                                                term objects), 'ids' (returns an array of ids), 'id=>parent' (returns\n *                                                an associative array with ids as keys, parent term IDs as values),\n *                                                'names' (returns an array of term names), 'count' (returns the number\n *                                                of matching terms), 'id=>name' (returns an associative array with ids\n *                                                as keys, term names as values), or 'id=>slug' (returns an associative\n *                                                array with ids as keys, term slugs as values). Default 'all'.\n *     @type string|array $name                   Optional. Name or array of names to return term(s) for. Default empty.\n *     @type string|array $slug                   Optional. Slug or array of slugs to return term(s) for. Default empty.\n *     @type bool         $hierarchical           Whether to include terms that have non-empty descendants (even\n *                                                if $hide_empty is set to true). Default true.\n *     @type string       $search                 Search criteria to match terms. Will be SQL-formatted with\n *                                                wildcards before and after. Default empty.\n *     @type string       $name__like             Retrieve terms with criteria by which a term is LIKE $name__like.\n *                                                Default empty.\n *     @type string       $description__like      Retrieve terms where the description is LIKE $description__like.\n *                                                Default empty.\n *     @type bool         $pad_counts             Whether to pad the quantity of a term's children in the quantity\n *                                                of each term's \"count\" object variable. Default false.\n *     @type string       $get                    Whether to return terms regardless of ancestry or whether the terms\n *                                                are empty. Accepts 'all' or empty (disabled). Default empty.\n *     @type int          $child_of               Term ID to retrieve child terms of. If multiple taxonomies\n *                                                are passed, $child_of is ignored. Default 0.\n *     @type int|string   $parent                 Parent term ID to retrieve direct-child terms of. Default empty.\n *     @type bool         $childless              True to limit results to terms that have no children. This parameter\n *                                                has no effect on non-hierarchical taxonomies. Default false.\n *     @type string       $cache_domain           Unique cache key to be produced when this query is stored in an\n *                                                object cache. Default is 'core'.\n *     @type bool         $update_term_meta_cache Whether to prime meta caches for matched terms. Default true.\n *     @type array        $meta_query             Meta query clauses to limit retrieved terms by.\n *                                                See `WP_Meta_Query`. Default empty.\n *     @type string       $meta_key               Limit terms to those matching a specific metadata key. Can be used in\n *                                                conjunction with `$meta_value`.\n *     @type string       $meta_value             Limit terms to those matching a specific metadata value. Usually used\n *                                                in conjunction with `$meta_key`.\n * }\n * @param array $deprecated Argument array, when using the legacy function parameter format. If present, this\n *                          parameter will be interpreted as `$args`, and the first function parameter will\n *                          be parsed as a taxonomy or array of taxonomies.\n * @return array|int|WP_Error List of WP_Term instances and their children. Will return WP_Error, if any of $taxonomies\n *                            do not exist.\n *\/"}]},"add_term_meta":{"name":"add_term_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$unique","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds metadata to a term.\n *\n * @since 4.4.0\n *\n * @param int    $term_id    Term ID.\n * @param string $meta_key   Metadata name.\n * @param mixed  $meta_value Metadata value.\n * @param bool   $unique     Optional. Whether to bail if an entry with the same key is found for the term.\n *                           Default false.\n * @return int|WP_Error|bool Meta ID on success. WP_Error when term_id is ambiguous between taxonomies.\n *                           False on failure.\n *\/"}]},"delete_term_meta":{"name":"delete_term_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes metadata matching criteria from a term.\n *\n * @since 4.4.0\n *\n * @param int    $term_id    Term ID.\n * @param string $meta_key   Metadata name.\n * @param mixed  $meta_value Optional. Metadata value. If provided, rows will only be removed that match the value.\n * @return bool True on success, false on failure.\n *\/"}]},"get_term_meta":{"name":"get_term_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$single","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves metadata for a term.\n *\n * @since 4.4.0\n *\n * @param int    $term_id Term ID.\n * @param string $key     Optional. The meta key to retrieve. If no key is provided, fetches all metadata for the term.\n * @param bool   $single  Whether to return a single value. If false, an array of all values matching the\n *                        `$term_id`\/`$key` pair will be returned. Default: false.\n * @return mixed If `$single` is false, an array of metadata values. If `$single` is true, a single metadata value.\n *\/"}]},"update_term_meta":{"name":"update_term_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$prev_value","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates term metadata.\n *\n * Use the `$prev_value` parameter to differentiate between meta fields with the same key and term ID.\n *\n * If the meta field for the term does not exist, it will be added.\n *\n * @since 4.4.0\n *\n * @param int    $term_id    Term ID.\n * @param string $meta_key   Metadata key.\n * @param mixed  $meta_value Metadata value.\n * @param mixed  $prev_value Optional. Previous value to check before removing.\n * @return int|WP_Error|bool Meta ID if the key didn't previously exist. True on successful update.\n *                           WP_Error when term_id is ambiguous between taxonomies. False on failure.\n *\/"}]},"update_termmeta_cache":{"name":"update_termmeta_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates metadata cache for list of term IDs.\n *\n * Performs SQL query to retrieve all metadata for the terms matching `$term_ids` and stores them in the cache.\n * Subsequent calls to `get_term_meta()` will not need to query the database.\n *\n * @since 4.4.0\n *\n * @param array $term_ids List of term IDs.\n * @return array|false Returns false if there is nothing to update. Returns an array of metadata on success.\n *\/"}]},"term_exists":{"name":"term_exists","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if Term exists.\n *\n * Formerly is_term(), introduced in 2.3.0.\n *\n * @since 3.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|string $term     The term to check. Accepts term ID, slug, or name.\n * @param string     $taxonomy The taxonomy name to use\n * @param int        $parent   Optional. ID of parent term under which to confine the exists search.\n * @return mixed Returns null if the term does not exist. Returns the term ID\n *               if no taxonomy is specified and the term ID exists. Returns\n *               an array of the term ID and the term taxonomy ID the taxonomy\n *               is specified and the pairing exists.\n *\/"}]},"term_is_ancestor_of":{"name":"term_is_ancestor_of","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term1","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$term2","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if a term is an ancestor of another term.\n *\n * You can use either an id or the term object for both parameters.\n *\n * @since 3.4.0\n *\n * @param int|object $term1    ID or object to check if this is the parent term.\n * @param int|object $term2    The child term.\n * @param string     $taxonomy Taxonomy name that $term1 and `$term2` belong to.\n * @return bool Whether `$term2` is a child of `$term1`.\n *\/"}]},"sanitize_term":{"name":"sanitize_term","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":2,"variadic":false,"reference":false,"default":"'display'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize Term all fields.\n *\n * Relies on sanitize_term_field() to sanitize the term. The difference is that\n * this function will sanitize <strong>all<\/strong> fields. The context is based\n * on sanitize_term_field().\n *\n * The $term is expected to be either an array or an object.\n *\n * @since 2.3.0\n *\n * @param array|object $term     The term to check.\n * @param string       $taxonomy The taxonomy name to use.\n * @param string       $context  Optional. Context in which to sanitize the term. Accepts 'edit', 'db',\n *                               'display', 'attribute', or 'js'. Default 'display'.\n * @return array|object Term with all fields sanitized.\n *\/"}]},"sanitize_term_field":{"name":"sanitize_term_field","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$field","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$term_id","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Cleanse the field value in the term based on the context.\n *\n * Passing a term field value through the function should be assumed to have\n * cleansed the value for whatever context the term field is going to be used.\n *\n * If no context or an unsupported context is given, then default filters will\n * be applied.\n *\n * There are enough filters for each context to support a custom filtering\n * without creating your own filter function. Simply create a function that\n * hooks into the filter you need.\n *\n * @since 2.3.0\n *\n * @param string $field    Term field to sanitize.\n * @param string $value    Search for this term value.\n * @param int    $term_id  Term ID.\n * @param string $taxonomy Taxonomy Name.\n * @param string $context  Context in which to sanitize the term field. Accepts 'edit', 'db', 'display',\n *                         'attribute', or 'js'.\n * @return mixed Sanitized field.\n *\/"}]},"wp_count_terms":{"name":"wp_count_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Count how many terms are in Taxonomy.\n *\n * Default $args is 'hide_empty' which can be 'hide_empty=true' or array('hide_empty' => true).\n *\n * @since 2.3.0\n *\n * @param string       $taxonomy Taxonomy name.\n * @param array|string $args     Optional. Array of arguments that get passed to get_terms().\n *                               Default empty array.\n * @return array|int|WP_Error Number of terms in that taxonomy or WP_Error if the taxonomy does not exist.\n *\/"}]},"wp_delete_object_term_relationships":{"name":"wp_delete_object_term_relationships","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomies","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Will unlink the object from the taxonomy or taxonomies.\n *\n * Will remove all relationships between the object and any terms in\n * a particular taxonomy or taxonomies. Does not remove the term or\n * taxonomy itself.\n *\n * @since 2.3.0\n *\n * @param int          $object_id  The term Object Id that refers to the term.\n * @param string|array $taxonomies List of Taxonomy Names or single Taxonomy name.\n *\/"}]},"wp_delete_term":{"name":"wp_delete_term","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes a term from the database.\n *\n * If the term is a parent of other terms, then the children will be updated to\n * that term's parent.\n *\n * Metadata associated with the term will be deleted.\n *\n * @since 2.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int          $term     Term ID.\n * @param string       $taxonomy Taxonomy Name.\n * @param array|string $args {\n *     Optional. Array of arguments to override the default term ID. Default empty array.\n *\n *     @type int  $default       The term ID to make the default term. This will only override\n *                               the terms found if there is only one term found. Any other and\n *                               the found terms are used.\n *     @type bool $force_default Optional. Whether to force the supplied term as default to be\n *                               assigned even if the object was not going to be term-less.\n *                               Default false.\n * }\n * @return bool|int|WP_Error True on success, false if term does not exist. Zero on attempted\n *                           deletion of default Category. WP_Error if the taxonomy does not exist.\n *\/"}]},"wp_delete_category":{"name":"wp_delete_category","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$cat_ID","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deletes one existing category.\n *\n * @since 2.0.0\n *\n * @param int $cat_ID\n * @return bool|int|WP_Error Returns true if completes delete action; false if term doesn't exist;\n * \tZero on attempted deletion of default Category; WP_Error object is also a possibility.\n *\/"}]},"wp_get_object_terms":{"name":"wp_get_object_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomies","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the terms associated with the given object(s), in the supplied taxonomies.\n *\n * @since 2.3.0\n * @since 4.2.0 Added support for 'taxonomy', 'parent', and 'term_taxonomy_id' values of `$orderby`.\n *              Introduced `$parent` argument.\n * @since 4.4.0 Introduced `$meta_query` and `$update_term_meta_cache` arguments. When `$fields` is 'all' or\n *              'all_with_object_id', an array of `WP_Term` objects will be returned.\n * @since 4.7.0 Refactored to use WP_Term_Query, and to support any WP_Term_Query arguments.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|array    $object_ids The ID(s) of the object(s) to retrieve.\n * @param string|array $taxonomies The taxonomies to retrieve terms from.\n * @param array|string $args       See WP_Term_Query::__construct() for supported arguments.\n * @return array|WP_Error The requested term data or empty array if no terms found.\n *                        WP_Error if any of the $taxonomies don't exist.\n *\/"}]},"wp_insert_term":{"name":"wp_insert_term","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a new term to the database.\n *\n * A non-existent term is inserted in the following sequence:\n * 1. The term is added to the term table, then related to the taxonomy.\n * 2. If everything is correct, several actions are fired.\n * 3. The 'term_id_filter' is evaluated.\n * 4. The term cache is cleaned.\n * 5. Several more actions are fired.\n * 6. An array is returned containing the term_id and term_taxonomy_id.\n *\n * If the 'slug' argument is not empty, then it is checked to see if the term\n * is invalid. If it is not a valid, existing term, it is added and the term_id\n * is given.\n *\n * If the taxonomy is hierarchical, and the 'parent' argument is not empty,\n * the term is inserted and the term_id will be given.\n *\n * Error handling:\n * If $taxonomy does not exist or $term is empty,\n * a WP_Error object will be returned.\n *\n * If the term already exists on the same hierarchical level,\n * or the term slug and name are not unique, a WP_Error object will be returned.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @since 2.3.0\n *\n * @param string       $term     The term to add or update.\n * @param string       $taxonomy The taxonomy to which to add the term.\n * @param array|string $args {\n *     Optional. Array or string of arguments for inserting a term.\n *\n *     @type string $alias_of    Slug of the term to make this term an alias of.\n *                               Default empty string. Accepts a term slug.\n *     @type string $description The term description. Default empty string.\n *     @type int    $parent      The id of the parent term. Default 0.\n *     @type string $slug        The term slug to use. Default empty string.\n * }\n * @return array|WP_Error An array containing the `term_id` and `term_taxonomy_id`,\n *                        WP_Error otherwise.\n *\/"}]},"wp_set_object_terms":{"name":"wp_set_object_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$terms","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$append","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create Term and Taxonomy Relationships.\n *\n * Relates an object (post, link etc) to a term and taxonomy type. Creates the\n * term and taxonomy relationship if it doesn't already exist. Creates a term if\n * it doesn't exist (using the slug).\n *\n * A relationship means that the term is grouped in or belongs to the taxonomy.\n * A term has no meaning until it is given context by defining which taxonomy it\n * exists under.\n *\n * @since 2.3.0\n *\n * @global wpdb $wpdb The WordPress database abstraction object.\n *\n * @param int              $object_id The object to relate to.\n * @param array|int|string $terms     A single term slug, single term id, or array of either term slugs or ids.\n *                                    Will replace all existing related terms in this taxonomy.\n * @param string           $taxonomy  The context in which to relate the term to the object.\n * @param bool             $append    Optional. If false will delete difference of terms. Default false.\n * @return array|WP_Error Term taxonomy IDs of the affected terms.\n *\/"}]},"wp_add_object_terms":{"name":"wp_add_object_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$terms","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add term(s) associated with a given object.\n *\n * @since 3.6.0\n *\n * @param int              $object_id The ID of the object to which the terms will be added.\n * @param array|int|string $terms     The slug(s) or ID(s) of the term(s) to add.\n * @param array|string     $taxonomy  Taxonomy name.\n * @return array|WP_Error Term taxonomy IDs of the affected terms.\n *\/"}]},"wp_remove_object_terms":{"name":"wp_remove_object_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$terms","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove term(s) associated with a given object.\n *\n * @since 3.6.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int              $object_id The ID of the object from which the terms will be removed.\n * @param array|int|string $terms     The slug(s) or ID(s) of the term(s) to remove.\n * @param array|string     $taxonomy  Taxonomy name.\n * @return bool|WP_Error True on success, false or WP_Error on failure.\n *\/"}]},"wp_unique_term_slug":{"name":"wp_unique_term_slug","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$slug","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$term","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Will make slug unique, if it isn't already.\n *\n * The `$slug` has to be unique global to every taxonomy, meaning that one\n * taxonomy term can't have a matching slug with another taxonomy term. Each\n * slug has to be globally unique for every taxonomy.\n *\n * The way this works is that if the taxonomy that the term belongs to is\n * hierarchical and has a parent, it will append that parent to the $slug.\n *\n * If that still doesn't return an unique slug, then it try to append a number\n * until it finds a number that is truly unique.\n *\n * The only purpose for `$term` is for appending a parent, if one exists.\n *\n * @since 2.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $slug The string that will be tried for a unique slug.\n * @param object $term The term object that the `$slug` will belong to.\n * @return string Will return a true unique slug.\n *\/"}]},"wp_update_term":{"name":"wp_update_term","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update term based on arguments provided.\n *\n * The $args will indiscriminately override all values with the same field name.\n * Care must be taken to not override important information need to update or\n * update will fail (or perhaps create a new term, neither would be acceptable).\n *\n * Defaults will set 'alias_of', 'description', 'parent', and 'slug' if not\n * defined in $args already.\n *\n * 'alias_of' will create a term group, if it doesn't already exist, and update\n * it for the $term.\n *\n * If the 'slug' argument in $args is missing, then the 'name' in $args will be\n * used. It should also be noted that if you set 'slug' and it isn't unique then\n * a WP_Error will be passed back. If you don't pass any slug, then a unique one\n * will be created for you.\n *\n * For what can be overrode in `$args`, check the term scheme can contain and stay\n * away from the term keys.\n *\n * @since 2.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int          $term_id  The ID of the term\n * @param string       $taxonomy The context in which to relate the term to the object.\n * @param array|string $args     Optional. Array of get_terms() arguments. Default empty array.\n * @return array|WP_Error Returns Term ID and Taxonomy Term ID\n *\/"}]},"wp_defer_term_counting":{"name":"wp_defer_term_counting","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$defer","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enable or disable term counting.\n *\n * @since 2.5.0\n *\n * @staticvar bool $_defer\n *\n * @param bool $defer Optional. Enable if true, disable if false.\n * @return bool Whether term counting is enabled or disabled.\n *\/"}]},"wp_update_term_count":{"name":"wp_update_term_count","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$terms","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$do_deferred","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates the amount of terms in taxonomy.\n *\n * If there is a taxonomy callback applied, then it will be called for updating\n * the count.\n *\n * The default action is to count what the amount of terms have the relationship\n * of term ID. Once that is done, then update the database.\n *\n * @since 2.3.0\n *\n * @staticvar array $_deferred\n *\n * @param int|array $terms       The term_taxonomy_id of the terms.\n * @param string    $taxonomy    The context of the term.\n * @param bool      $do_deferred Whether to flush the deferred term counts too. Default false.\n * @return bool If no terms will return false, and if successful will return true.\n *\/"}]},"wp_update_term_count_now":{"name":"wp_update_term_count_now","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$terms","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Perform term count update immediately.\n *\n * @since 2.5.0\n *\n * @param array  $terms    The term_taxonomy_id of terms to update.\n * @param string $taxonomy The context of the term.\n * @return true Always true when complete.\n *\/"}]},"clean_object_term_cache":{"name":"clean_object_term_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes the taxonomy relationship to terms from the cache.\n *\n * Will remove the entire taxonomy relationship containing term `$object_id`. The\n * term IDs have to exist within the taxonomy `$object_type` for the deletion to\n * take place.\n *\n * @since 2.3.0\n *\n * @global bool $_wp_suspend_cache_invalidation\n *\n * @see get_object_taxonomies() for more on $object_type.\n *\n * @param int|array    $object_ids  Single or list of term object ID(s).\n * @param array|string $object_type The taxonomy object type.\n *\/"}]},"clean_term_cache":{"name":"clean_term_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$clean_taxonomy","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Will remove all of the term ids from the cache.\n *\n * @since 2.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n * @global bool $_wp_suspend_cache_invalidation\n *\n * @param int|array $ids            Single or list of Term IDs.\n * @param string    $taxonomy       Optional. Can be empty and will assume `tt_ids`, else will use for context.\n *                                  Default empty.\n * @param bool      $clean_taxonomy Optional. Whether to clean taxonomy wide caches (true), or just individual\n *                                  term object caches (false). Default true.\n *\/"}]},"get_object_term_cache":{"name":"get_object_term_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the taxonomy relationship to the term object id.\n *\n * Upstream functions (like get_the_terms() and is_object_in_term()) are\n * responsible for populating the object-term relationship cache. The current\n * function only fetches relationship data that is already in the cache.\n *\n * @since 2.3.0\n * @since 4.7.0 Returns a WP_Error object if get_term() returns an error for\n *              any of the matched terms.\n *\n * @param int    $id       Term object ID.\n * @param string $taxonomy Taxonomy name.\n * @return bool|array|WP_Error Array of `WP_Term` objects, if cached.\n *                             False if cache is empty for `$taxonomy` and `$id`.\n *                             WP_Error if get_term() returns an error object for any term.\n *\/"}]},"update_object_term_cache":{"name":"update_object_term_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates the cache for the given term object ID(s).\n *\n * Note: Due to performance concerns, great care should be taken to only update\n * term caches when necessary. Processing time can increase exponentially depending\n * on both the number of passed term IDs and the number of taxonomies those terms\n * belong to.\n *\n * Caches will only be updated for terms not already cached.\n *\n * @since 2.3.0\n *\n * @param string|array $object_ids  Comma-separated list or array of term object IDs.\n * @param array|string $object_type The taxonomy object type.\n * @return void|false False if all of the terms in `$object_ids` are already cached.\n *\/"}]},"update_term_cache":{"name":"update_term_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$terms","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates Terms to Taxonomy in cache.\n *\n * @since 2.3.0\n *\n * @param array  $terms    List of term objects to change.\n * @param string $taxonomy Optional. Update Term to this taxonomy in cache. Default empty.\n *\/"}]},"_get_term_hierarchy":{"name":"_get_term_hierarchy","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves children of taxonomy as Term IDs.\n *\n * @ignore\n * @since 2.3.0\n *\n * @param string $taxonomy Taxonomy name.\n * @return array Empty if $taxonomy isn't hierarchical or returns children as Term IDs.\n *\/"}]},"_get_term_children":{"name":"_get_term_children","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$terms","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ancestors","rank":3,"variadic":false,"reference":true,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the subset of $terms that are descendants of $term_id.\n *\n * If `$terms` is an array of objects, then _get_term_children() returns an array of objects.\n * If `$terms` is an array of IDs, then _get_term_children() returns an array of IDs.\n *\n * @access private\n * @since 2.3.0\n *\n * @param int    $term_id   The ancestor term: all returned terms should be descendants of `$term_id`.\n * @param array  $terms     The set of terms - either an array of term objects or term IDs - from which those that\n *                          are descendants of $term_id will be chosen.\n * @param string $taxonomy  The taxonomy which determines the hierarchy of the terms.\n * @param array  $ancestors Optional. Term ancestors that have already been identified. Passed by reference, to keep\n *                          track of found terms when recursing the hierarchy. The array of located ancestors is used\n *                          to prevent infinite recursion loops. For performance, `term_ids` are used as array keys,\n *                          with 1 as value. Default empty array.\n * @return array|WP_Error The subset of $terms that are descendants of $term_id.\n *\/"}]},"_pad_term_counts":{"name":"_pad_term_counts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$terms","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add count of children to parent count.\n *\n * Recalculates term counts by including items from child terms. Assumes all\n * relevant children are already in the $terms argument.\n *\n * @access private\n * @since 2.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array  $terms    List of term objects, passed by reference.\n * @param string $taxonomy Term context.\n *\/"}]},"_prime_term_caches":{"name":"_prime_term_caches","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$update_meta_cache","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds any terms from the given IDs to the cache that do not already exist in cache.\n *\n * @since 4.6.0\n * @access private\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $term_ids          Array of term IDs.\n * @param bool  $update_meta_cache Optional. Whether to update the meta cache. Default true.\n *\/"}]},"_update_post_term_count":{"name":"_update_post_term_count","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$terms","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Will update term count based on object types of the current taxonomy.\n *\n * Private function for the default callback for post_tag and category\n * taxonomies.\n *\n * @access private\n * @since 2.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array  $terms    List of Term taxonomy IDs.\n * @param object $taxonomy Current taxonomy object of terms.\n *\/"}]},"_update_generic_term_count":{"name":"_update_generic_term_count","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$terms","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Will update term count based on number of objects.\n *\n * Default callback for the 'link_category' taxonomy.\n *\n * @since 3.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array  $terms    List of term taxonomy IDs.\n * @param object $taxonomy Current taxonomy object of terms.\n *\/"}]},"_split_shared_term":{"name":"_split_shared_term","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$term_taxonomy_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$record","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create a new term for a term_taxonomy item that currently shares its term\n * with another term_taxonomy.\n *\n * @ignore\n * @since 4.2.0\n * @since 4.3.0 Introduced `$record` parameter. Also, `$term_id` and\n *              `$term_taxonomy_id` can now accept objects.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|object $term_id          ID of the shared term, or the shared term object.\n * @param int|object $term_taxonomy_id ID of the term_taxonomy item to receive a new term, or the term_taxonomy object\n *                                     (corresponding to a row from the term_taxonomy table).\n * @param bool       $record           Whether to record data about the split term in the options table. The recording\n *                                     process has the potential to be resource-intensive, so during batch operations\n *                                     it can be beneficial to skip inline recording and do it just once, after the\n *                                     batch is processed. Only set this to `false` if you know what you are doing.\n *                                     Default: true.\n * @return int|WP_Error When the current term does not need to be split (or cannot be split on the current\n *                      database schema), `$term_id` is returned. When the term is successfully split, the\n *                      new term_id is returned. A WP_Error is returned for miscellaneous errors.\n *\/"}]},"_wp_batch_split_terms":{"name":"_wp_batch_split_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Splits a batch of shared taxonomy terms.\n *\n * @since 4.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"_wp_check_for_scheduled_split_terms":{"name":"_wp_check_for_scheduled_split_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * In order to avoid the _wp_batch_split_terms() job being accidentally removed,\n * check that it's still scheduled while we haven't finished splitting terms.\n *\n * @ignore\n * @since 4.3.0\n *\/"}]},"_wp_check_split_default_terms":{"name":"_wp_check_split_default_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$new_term_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$term_taxonomy_id","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check default categories when a term gets split to see if any of them need to be updated.\n *\n * @ignore\n * @since 4.2.0\n *\n * @param int    $term_id          ID of the formerly shared term.\n * @param int    $new_term_id      ID of the new term created for the $term_taxonomy_id.\n * @param int    $term_taxonomy_id ID for the term_taxonomy row affected by the split.\n * @param string $taxonomy         Taxonomy for the split term.\n *\/"}]},"_wp_check_split_terms_in_menus":{"name":"_wp_check_split_terms_in_menus","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$new_term_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$term_taxonomy_id","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check menu items when a term gets split to see if any of them need to be updated.\n *\n * @ignore\n * @since 4.2.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int    $term_id          ID of the formerly shared term.\n * @param int    $new_term_id      ID of the new term created for the $term_taxonomy_id.\n * @param int    $term_taxonomy_id ID for the term_taxonomy row affected by the split.\n * @param string $taxonomy         Taxonomy for the split term.\n *\/"}]},"_wp_check_split_nav_menu_terms":{"name":"_wp_check_split_nav_menu_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$new_term_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$term_taxonomy_id","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * If the term being split is a nav_menu, change associations.\n *\n * @ignore\n * @since 4.3.0\n *\n * @param int    $term_id          ID of the formerly shared term.\n * @param int    $new_term_id      ID of the new term created for the $term_taxonomy_id.\n * @param int    $term_taxonomy_id ID for the term_taxonomy row affected by the split.\n * @param string $taxonomy         Taxonomy for the split term.\n *\/"}]},"wp_get_split_terms":{"name":"wp_get_split_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$old_term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get data about terms that previously shared a single term_id, but have since been split.\n *\n * @since 4.2.0\n *\n * @param int $old_term_id Term ID. This is the old, pre-split term ID.\n * @return array Array of new term IDs, keyed by taxonomy.\n *\/"}]},"wp_get_split_term":{"name":"wp_get_split_term","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$old_term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the new term ID corresponding to a previously split term.\n *\n * @since 4.2.0\n *\n * @param int    $old_term_id Term ID. This is the old, pre-split term ID.\n * @param string $taxonomy    Taxonomy that the term belongs to.\n * @return int|false If a previously split term is found corresponding to the old term_id and taxonomy,\n *                   the new term_id will be returned. If no previously split term is found matching\n *                   the parameters, returns false.\n *\/"}]},"wp_term_is_shared":{"name":"wp_term_is_shared","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine whether a term is shared between multiple taxonomies.\n *\n * Shared taxonomy terms began to be split in 4.3, but failed cron tasks or other delays in upgrade routines may cause\n * shared terms to remain.\n *\n * @since 4.4.0\n *\n * @param int $term_id\n * @return bool\n *\/"}]},"get_term_link":{"name":"get_term_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Generate a permalink for a taxonomy term archive.\n *\n * @since 2.5.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param object|int|string $term     The term object, ID, or slug whose link will be retrieved.\n * @param string            $taxonomy Optional. Taxonomy. Default empty.\n * @return string|WP_Error HTML link to taxonomy term archive on success, WP_Error if term does not exist.\n *\/"}]},"the_taxonomies":{"name":"the_taxonomies","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the taxonomies of a post with available options.\n *\n * This function can be used within the loop to display the taxonomies for a\n * post without specifying the Post ID. You can also use it outside the Loop to\n * display the taxonomies for a specific post.\n *\n * @since 2.5.0\n *\n * @param array $args {\n *     Arguments about which post to use and how to format the output. Shares all of the arguments\n *     supported by get_the_taxonomies(), in addition to the following.\n *\n *     @type  int|WP_Post $post   Post ID or object to get taxonomies of. Default current post.\n *     @type  string      $before Displays before the taxonomies. Default empty string.\n *     @type  string      $sep    Separates each taxonomy. Default is a space.\n *     @type  string      $after  Displays after the taxonomies. Default empty string.\n * }\n *\/"}]},"get_the_taxonomies":{"name":"get_the_taxonomies","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve all taxonomies associated with a post.\n *\n * This function can be used within the loop. It will also return an array of\n * the taxonomies with links to the taxonomy and name.\n *\n * @since 2.5.0\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @param array $args {\n *     Optional. Arguments about how to format the list of taxonomies. Default empty array.\n *\n *     @type string $template      Template for displaying a taxonomy label and list of terms.\n *                                 Default is \"Label: Terms.\"\n *     @type string $term_template Template for displaying a single term in the list. Default is the term name\n *                                 linked to its archive.\n * }\n * @return array List of taxonomies.\n *\/"}]},"get_post_taxonomies":{"name":"get_post_taxonomies","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve all taxonomies of a post with just the names.\n *\n * @since 2.5.0\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @return array\n *\/"}]},"is_object_in_term":{"name":"is_object_in_term","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$terms","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine if the given object is associated with any of the given terms.\n *\n * The given terms are checked against the object's terms' term_ids, names and slugs.\n * Terms given as integers will only be checked against the object's terms' term_ids.\n * If no terms are given, determines if object is associated with any terms in the given taxonomy.\n *\n * @since 2.7.0\n *\n * @param int              $object_id ID of the object (post ID, link ID, ...).\n * @param string           $taxonomy  Single taxonomy name.\n * @param int|string|array $terms     Optional. Term term_id, name, slug or array of said. Default null.\n * @return bool|WP_Error WP_Error on input error.\n *\/"}]},"is_object_in_taxonomy":{"name":"is_object_in_taxonomy","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine if the given object type is associated with the given taxonomy.\n *\n * @since 3.0.0\n *\n * @param string $object_type Object type string.\n * @param string $taxonomy    Single taxonomy name.\n * @return bool True if object is associated with the taxonomy, otherwise false.\n *\/"}]},"get_ancestors":{"name":"get_ancestors","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_type","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$resource_type","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get an array of ancestor IDs for a given object.\n *\n * @since 3.1.0\n * @since 4.1.0 Introduced the `$resource_type` argument.\n *\n * @param int    $object_id     Optional. The ID of the object. Default 0.\n * @param string $object_type   Optional. The type of object for which we'll be retrieving\n *                              ancestors. Accepts a post type or a taxonomy name. Default empty.\n * @param string $resource_type Optional. Type of resource $object_type is. Accepts 'post_type'\n *                              or 'taxonomy'. Default empty.\n * @return array An array of ancestors from lowest to highest in the hierarchy.\n *\/"}]},"wp_get_term_taxonomy_parent_id":{"name":"wp_get_term_taxonomy_parent_id","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the term's parent's term_ID.\n *\n * @since 3.1.0\n *\n * @param int    $term_id  Term ID.\n * @param string $taxonomy Taxonomy name.\n * @return int|false False on error.\n *\/"}]},"wp_check_term_hierarchy_for_loops":{"name":"wp_check_term_hierarchy_for_loops","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$parent","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$term_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks the given subset of the term hierarchy for hierarchy loops.\n * Prevents loops from forming and breaks those that it finds.\n *\n * Attached to the {@see 'wp_update_term_parent'} filter.\n *\n * @since 3.1.0\n *\n * @param int    $parent   `term_id` of the parent for the term we're checking.\n * @param int    $term_id  The term we're checking.\n * @param string $taxonomy The taxonomy of the term we're checking.\n *\n * @return int The new parent for the term.\n *\/"}]},"get_categories":{"name":"get_categories","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve list of category objects.\n *\n * If you change the type to 'link' in the arguments, then the link categories\n * will be returned instead. Also all categories will be updated to be backward\n * compatible with pre-2.3 plugins and themes.\n *\n * @since 2.1.0\n * @see get_terms() Type of arguments that can be changed.\n *\n * @param string|array $args {\n *     Optional. Arguments to retrieve categories. See get_terms() for additional options.\n *\n *     @type string $taxonomy Taxonomy to retrieve terms for. In this case, default 'category'.\n * }\n * @return array List of categories.\n *\/"},{"phpdoc":"\/**\n * Taxonomy API: Core category-specific functionality\n *\n * @package WordPress\n * @subpackage Taxonomy\n *\/"}]},"get_category":{"name":"get_category","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$category","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"OBJECT","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filter","rank":2,"variadic":false,"reference":false,"default":"'raw'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves category data given a category ID or category object.\n *\n * If you pass the $category parameter an object, which is assumed to be the\n * category row object retrieved the database. It will cache the category data.\n *\n * If you pass $category an integer of the category ID, then that category will\n * be retrieved from the database, if it isn't already cached, and pass it back.\n *\n * If you look at get_term(), then both types will be passed through several\n * filters and finally sanitized based on the $filter parameter value.\n *\n * The category will converted to maintain backward compatibility.\n *\n * @since 1.5.1\n *\n * @param int|object $category Category ID or Category row object\n * @param string $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a\n *                       WP_Term object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @param string $filter Optional. Default is raw or no WordPress defined filter will applied.\n * @return object|array|WP_Error|null Category data in type defined by $output parameter.\n *                                    WP_Error if $category is empty, null if it does not exist.\n *\/"}]},"get_category_by_path":{"name":"get_category_by_path","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$category_path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$full_match","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":2,"variadic":false,"reference":false,"default":"OBJECT","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve category based on URL containing the category slug.\n *\n * Breaks the $category_path parameter up to get the category slug.\n *\n * Tries to find the child path and will return it. If it doesn't find a\n * match, then it will return the first category matching slug, if $full_match,\n * is set to false. If it does not, then it will return null.\n *\n * It is also possible that it will return a WP_Error object on failure. Check\n * for it when using this function.\n *\n * @since 2.1.0\n *\n * @param string $category_path URL containing category slugs.\n * @param bool   $full_match    Optional. Whether full path should be matched.\n * @param string $output        Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                              a WP_Term object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @return WP_Term|array|WP_Error|null Type is based on $output value.\n *\/"}]},"get_category_by_slug":{"name":"get_category_by_slug","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$slug","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve category object by category slug.\n *\n * @since 2.3.0\n *\n * @param string $slug The category slug.\n * @return object Category data object\n *\/"}]},"get_cat_ID":{"name":"get_cat_ID","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$cat_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the ID of a category from its name.\n *\n * @since 1.0.0\n *\n * @param string $cat_name Category name.\n * @return int 0, if failure and ID of category on success.\n *\/"}]},"get_cat_name":{"name":"get_cat_name","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$cat_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the name of a category from its ID.\n *\n * @since 1.0.0\n *\n * @param int $cat_id Category ID\n * @return string Category name, or an empty string if category doesn't exist.\n *\/"}]},"cat_is_ancestor_of":{"name":"cat_is_ancestor_of","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$cat1","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cat2","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if a category is an ancestor of another category.\n *\n * You can use either an id or the category object for both parameters. If you\n * use an integer the category will be retrieved.\n *\n * @since 2.1.0\n *\n * @param int|object $cat1 ID or object to check if this is the parent category.\n * @param int|object $cat2 The child category.\n * @return bool Whether $cat2 is child of $cat1\n *\/"}]},"sanitize_category":{"name":"sanitize_category","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$category","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"'display'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes category data based on context.\n *\n * @since 2.3.0\n *\n * @param object|array $category Category data\n * @param string $context Optional. Default is 'display'.\n * @return object|array Same type as $category with sanitized data for safe use.\n *\/"}]},"sanitize_category_field":{"name":"sanitize_category_field","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$field","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cat_id","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes data in single category key field.\n *\n * @since 2.3.0\n *\n * @param string $field Category key to sanitize\n * @param mixed $value Category value to sanitize\n * @param int $cat_id Category ID\n * @param string $context What filter to use, 'raw', 'display', etc.\n * @return mixed Same type as $value after $value has been sanitized.\n *\/"}]},"get_tags":{"name":"get_tags","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves all post tags.\n *\n * @since 2.3.0\n * @see get_terms() For list of arguments to pass.\n *\n * @param string|array $args Tag arguments to use when retrieving tags.\n * @return array List of tags.\n *\/"}]},"get_tag":{"name":"get_tag","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"OBJECT","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filter","rank":2,"variadic":false,"reference":false,"default":"'raw'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve post tag by tag ID or tag object.\n *\n * If you pass the $tag parameter an object, which is assumed to be the tag row\n * object retrieved the database. It will cache the tag data.\n *\n * If you pass $tag an integer of the tag ID, then that tag will\n * be retrieved from the database, if it isn't already cached, and pass it back.\n *\n * If you look at get_term(), then both types will be passed through several\n * filters and finally sanitized based on the $filter parameter value.\n *\n * @since 2.3.0\n *\n * @param int|WP_Term|object $tag    A tag ID or object.\n * @param string             $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                                   a WP_Term object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @param string             $filter Optional. Default is raw or no WordPress defined filter will applied.\n * @return WP_Term|array|WP_Error|null Tag data in type defined by $output parameter. WP_Error if $tag is empty, null if it does not exist.\n *\/"}]},"clean_category_cache":{"name":"clean_category_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove the category cache data based on ID.\n *\n * @since 2.1.0\n *\n * @param int $id Category ID\n *\/"}]},"_make_cat_compat":{"name":"_make_cat_compat","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$category","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update category structure to old pre 2.3 from new taxonomy structure.\n *\n * This function was added for the taxonomy support to update the new category\n * structure with the old category one. This will maintain compatibility with\n * plugins and themes which depend on the old key or property names.\n *\n * The parameter should only be passed a variable and not create the array or\n * object inline to the parameter. The reason for this is that parameter is\n * passed by reference and PHP will fail unless it has the variable.\n *\n * There is no return value, because everything is updated on the variable you\n * pass to it. This is one of the features with using pass by reference in PHP.\n *\n * @since 2.3.0\n * @since 4.4.0 The `$category` parameter now also accepts a WP_Term object.\n * @access private\n *\n * @param array|object|WP_Term $category Category Row object or array\n *\/"}]},"get_bloginfo_rss":{"name":"get_bloginfo_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$show","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * RSS container for the bloginfo function.\n *\n * You can retrieve anything that you can using the get_bloginfo() function.\n * Everything will be stripped of tags and characters converted, when the values\n * are retrieved for use in the feeds.\n *\n * @since 1.5.1\n * @see get_bloginfo() For the list of possible values to display.\n *\n * @param string $show See get_bloginfo() for possible values.\n * @return string\n *\/"},{"phpdoc":"\/**\n * WordPress Feed API\n *\n * Many of the functions used in here belong in The Loop, or The Loop for the\n * Feeds.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.1.0\n *\/"}]},"bloginfo_rss":{"name":"bloginfo_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$show","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display RSS container for the bloginfo function.\n *\n * You can retrieve anything that you can using the get_bloginfo() function.\n * Everything will be stripped of tags and characters converted, when the values\n * are retrieved for use in the feeds.\n *\n * @since 0.71\n * @see get_bloginfo() For the list of possible values to display.\n *\n * @param string $show See get_bloginfo() for possible values.\n *\/"}]},"get_default_feed":{"name":"get_default_feed","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the default feed.\n *\n * The default feed is 'rss2', unless a plugin changes it through the\n * {@see 'default_feed'} filter.\n *\n * @since 2.5.0\n *\n * @return string Default feed, or for example 'rss2', 'atom', etc.\n *\/"}]},"get_wp_title_rss":{"name":"get_wp_title_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$deprecated","rank":0,"variadic":false,"reference":false,"default":"'&#8211;'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the blog title for the feed title.\n *\n * @since 2.2.0\n * @since 4.4.0 The optional `$sep` parameter was deprecated and renamed to `$deprecated`.\n *\n * @param string $deprecated Unused..\n * @return string The document title.\n *\/"}]},"wp_title_rss":{"name":"wp_title_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$deprecated","rank":0,"variadic":false,"reference":false,"default":"'&#8211;'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the blog title for display of the feed title.\n *\n * @since 2.2.0\n * @since 4.4.0 The optional `$sep` parameter was deprecated and renamed to `$deprecated`.\n *\n * @param string $deprecated Unused.\n *\/"}]},"get_the_title_rss":{"name":"get_the_title_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the current post title for the feed.\n *\n * @since 2.0.0\n *\n * @return string Current post title.\n *\/"}]},"the_title_rss":{"name":"the_title_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the post title in the feed.\n *\n * @since 0.71\n *\/"}]},"get_the_content_feed":{"name":"get_the_content_feed","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$feed_type","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the post content for feeds.\n *\n * @since 2.9.0\n * @see get_the_content()\n *\n * @param string $feed_type The type of feed. rss2 | atom | rss | rdf\n * @return string The filtered content.\n *\/"}]},"the_content_feed":{"name":"the_content_feed","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$feed_type","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the post content for feeds.\n *\n * @since 2.9.0\n *\n * @param string $feed_type The type of feed. rss2 | atom | rss | rdf\n *\/"}]},"the_excerpt_rss":{"name":"the_excerpt_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the post excerpt for the feed.\n *\n * @since 0.71\n *\/"}]},"the_permalink_rss":{"name":"the_permalink_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the permalink to the post for use in feeds.\n *\n * @since 2.3.0\n *\/"}]},"comments_link_feed":{"name":"comments_link_feed","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the link to the comments for the current post in an xml safe way\n *\n * @since 3.0.0\n * @return none\n *\/"}]},"comment_guid":{"name":"comment_guid","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_id","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the feed GUID for the current comment.\n *\n * @since 2.5.0\n *\n * @param int|WP_Comment $comment_id Optional comment object or id. Defaults to global comment object.\n *\/"}]},"get_comment_guid":{"name":"get_comment_guid","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_id","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the feed GUID for the current comment.\n *\n * @since 2.5.0\n *\n * @param int|WP_Comment $comment_id Optional comment object or id. Defaults to global comment object.\n * @return false|string false on failure or guid for comment on success.\n *\/"}]},"comment_link":{"name":"comment_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the link to the comments.\n *\n * @since 1.5.0\n * @since 4.4.0 Introduced the `$comment` argument.\n *\n * @param int|WP_Comment $comment Optional. Comment object or id. Defaults to global comment object.\n *\/"}]},"get_comment_author_rss":{"name":"get_comment_author_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the current comment author for use in the feeds.\n *\n * @since 2.0.0\n *\n * @return string Comment Author\n *\/"}]},"comment_author_rss":{"name":"comment_author_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the current comment author in the feed.\n *\n * @since 1.0.0\n *\/"}]},"comment_text_rss":{"name":"comment_text_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the current comment content for use in the feeds.\n *\n * @since 1.0.0\n *\/"}]},"get_the_category_rss":{"name":"get_the_category_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve all of the post categories, formatted for use in feeds.\n *\n * All of the categories for the current post in the feed loop, will be\n * retrieved and have feed markup added, so that they can easily be added to the\n * RSS2, Atom, or RSS1 and RSS0.91 RDF feeds.\n *\n * @since 2.1.0\n *\n * @param string $type Optional, default is the type returned by get_default_feed().\n * @return string All of the post categories for displaying in the feed.\n *\/"}]},"the_category_rss":{"name":"the_category_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the post categories in the feed.\n *\n * @since 0.71\n * @see get_the_category_rss() For better explanation.\n *\n * @param string $type Optional, default is the type returned by get_default_feed().\n *\/"}]},"html_type_rss":{"name":"html_type_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the HTML type based on the blog setting.\n *\n * The two possible values are either 'xhtml' or 'html'.\n *\n * @since 2.2.0\n *\/"}]},"rss_enclosure":{"name":"rss_enclosure","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the rss enclosure for the current post.\n *\n * Uses the global $post to check whether the post requires a password and if\n * the user has the password for the post. If not then it will return before\n * displaying.\n *\n * Also uses the function get_post_custom() to get the post's 'enclosure'\n * metadata field and parses the value to display the enclosure(s). The\n * enclosure(s) consist of enclosure HTML tag(s) with a URI and other\n * attributes.\n *\n * @since 1.5.0\n *\/"}]},"atom_enclosure":{"name":"atom_enclosure","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the atom enclosure for the current post.\n *\n * Uses the global $post to check whether the post requires a password and if\n * the user has the password for the post. If not then it will return before\n * displaying.\n *\n * Also uses the function get_post_custom() to get the post's 'enclosure'\n * metadata field and parses the value to display the enclosure(s). The\n * enclosure(s) consist of link HTML tag(s) with a URI and other attributes.\n *\n * @since 2.2.0\n *\/"}]},"prep_atom_text_construct":{"name":"prep_atom_text_construct","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine the type of a string of data with the data formatted.\n *\n * Tell whether the type is text, html, or xhtml, per RFC 4287 section 3.1.\n *\n * In the case of WordPress, text is defined as containing no markup,\n * xhtml is defined as \"well formed\", and html as tag soup (i.e., the rest).\n *\n * Container div tags are added to xhtml values, per section 3.1.1.3.\n *\n * @link http:\/\/www.atomenabled.org\/developers\/syndication\/atom-format-spec.php#rfc.section.3.1\n *\n * @since 2.5.0\n *\n * @param string $data Input string\n * @return array array(type, value)\n *\/"}]},"atom_site_icon":{"name":"atom_site_icon","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays Site Icon in atom feeds.\n *\n * @since 4.3.0\n *\n * @see get_site_icon_url()\n *\/"}]},"rss2_site_icon":{"name":"rss2_site_icon","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays Site Icon in RSS2.\n *\n * @since 4.3.0\n *\/"}]},"self_link":{"name":"self_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the link for the currently displayed feed in a XSS safe way.\n *\n * Generate a correct link for the atom:self element.\n *\n * @since 2.5.0\n *\/"}]},"feed_content_type":{"name":"feed_content_type","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return the content type for specified feed type.\n *\n * @since 2.8.0\n *\n * @param string $type Type of feed. Possible values include 'rss', rss2', 'atom', and 'rdf'.\n *\/"}]},"fetch_feed":{"name":"fetch_feed","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Build SimplePie object based on RSS or Atom feed from URL.\n *\n * @since 2.8.0\n *\n * @param mixed $url URL of feed to retrieve. If an array of URLs, the feeds are merged\n * using SimplePie's multifeed feature.\n * See also {@link \u200bhttp:\/\/simplepie.org\/wiki\/faq\/typical_multifeed_gotchas}\n *\n * @return WP_Error|SimplePie WP_Error object on failure or SimplePie object on success\n *\/"}]},"wp_version_check":{"name":"wp_version_check","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$extra_stats","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$force_check","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check WordPress version against the newest version.\n *\n * The WordPress version, PHP version, and Locale is sent. Checks against the\n * WordPress server at api.wordpress.org server. Will only check if WordPress\n * isn't installing.\n *\n * @since 2.3.0\n * @global string $wp_version Used to check against the newest WordPress version.\n * @global wpdb   $wpdb\n * @global string $wp_local_package\n *\n * @param array $extra_stats Extra statistics to report to the WordPress.org API.\n * @param bool  $force_check Whether to bypass the transient cache and force a fresh update check. Defaults to false, true if $extra_stats is set.\n *\/"},{"phpdoc":"\/**\n * A simple set of functions to check our version 1.0 update service.\n *\n * @package WordPress\n * @since 2.3.0\n *\/"}]},"wp_update_plugins":{"name":"wp_update_plugins","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$extra_stats","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check plugin versions against the latest versions hosted on WordPress.org.\n *\n * The WordPress version, PHP version, and Locale is sent along with a list of\n * all plugins installed. Checks against the WordPress server at\n * api.wordpress.org. Will only check if WordPress isn't installing.\n *\n * @since 2.3.0\n * @global string $wp_version Used to notify the WordPress version.\n *\n * @param array $extra_stats Extra statistics to report to the WordPress.org API.\n *\/"}]},"wp_update_themes":{"name":"wp_update_themes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$extra_stats","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check theme versions against the latest versions hosted on WordPress.org.\n *\n * A list of all themes installed in sent to WP. Checks against the\n * WordPress server at api.wordpress.org. Will only check if WordPress isn't\n * installing.\n *\n * @since 2.7.0\n *\n * @param array $extra_stats Extra statistics to report to the WordPress.org API.\n *\/"}]},"wp_maybe_auto_update":{"name":"wp_maybe_auto_update","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Performs WordPress automatic background updates.\n *\n * @since 3.7.0\n *\/"}]},"wp_get_translation_updates":{"name":"wp_get_translation_updates","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a list of all language updates available.\n *\n * @since 3.7.0\n *\n * @return array\n *\/"}]},"wp_get_update_data":{"name":"wp_get_update_data","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Collect counts and UI strings for available updates\n *\n * @since 3.3.0\n *\n * @return array\n *\/"}]},"_maybe_update_core":{"name":"_maybe_update_core","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines whether core should be updated.\n *\n * @since 2.8.0\n *\n * @global string $wp_version\n *\/"}]},"_maybe_update_plugins":{"name":"_maybe_update_plugins","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check the last time plugins were run before checking plugin versions.\n *\n * This might have been backported to WordPress 2.6.1 for performance reasons.\n * This is used for the wp-admin to check only so often instead of every page\n * load.\n *\n * @since 2.7.0\n * @access private\n *\/"}]},"_maybe_update_themes":{"name":"_maybe_update_themes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check themes versions only after a duration of time.\n *\n * This is for performance reasons to make sure that on the theme version\n * checker is not run on every page load.\n *\n * @since 2.7.0\n * @access private\n *\/"}]},"wp_schedule_update_checks":{"name":"wp_schedule_update_checks","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Schedule core, theme, and plugin update checks.\n *\n * @since 3.1.0\n *\/"}]},"wp_clean_update_cache":{"name":"wp_clean_update_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Clear existing update caches for plugins, themes, and core.\n *\n * @since 4.1.0\n *\/"}]},"wp_get_server_protocol":{"name":"wp_get_server_protocol","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return the HTTP protocol sent by the server.\n *\n * @since 4.4.0\n *\n * @return string The HTTP protocol. Default: HTTP\/1.0.\n *\/"},{"phpdoc":"\/**\n * These functions are needed to load WordPress.\n *\n * @package WordPress\n *\/"}]},"wp_unregister_GLOBALS":{"name":"wp_unregister_GLOBALS","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Turn register globals off.\n *\n * @since 2.1.0\n * @access private\n *\/"}]},"wp_fix_server_vars":{"name":"wp_fix_server_vars","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Fix `$_SERVER` variables for various setups.\n *\n * @since 3.0.0\n * @access private\n *\n * @global string $PHP_SELF The filename of the currently executing script,\n *                          relative to the document root.\n *\/"}]},"wp_check_php_mysql_versions":{"name":"wp_check_php_mysql_versions","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check for the required PHP version, and the MySQL extension or\n * a database drop-in.\n *\n * Dies if requirements are not met.\n *\n * @since 3.0.0\n * @access private\n *\n * @global string $required_php_version The required PHP version string.\n * @global string $wp_version           The WordPress version string.\n *\/"}]},"wp_favicon_request":{"name":"wp_favicon_request","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Don't load all of WordPress when handling a favicon.ico request.\n *\n * Instead, send the headers for a zero-length favicon and bail.\n *\n * @since 3.0.0\n *\/"}]},"wp_maintenance":{"name":"wp_maintenance","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Die with a maintenance message when conditions are met.\n *\n * Checks for a file in the WordPress root directory named \".maintenance\".\n * This file will contain the variable $upgrading, set to the time the file\n * was created. If the file was created less than 10 minutes ago, WordPress\n * enters maintenance mode and displays a message.\n *\n * The default message can be replaced by using a drop-in (maintenance.php in\n * the wp-content directory).\n *\n * @since 3.0.0\n * @access private\n *\n * @global int $upgrading the unix timestamp marking when upgrading WordPress began.\n *\/"}]},"timer_start":{"name":"timer_start","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Start the WordPress micro-timer.\n *\n * @since 0.71\n * @access private\n *\n * @global float $timestart Unix timestamp set at the beginning of the page load.\n * @see timer_stop()\n *\n * @return bool Always returns true.\n *\/"}]},"timer_stop":{"name":"timer_stop","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$display","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$precision","rank":1,"variadic":false,"reference":false,"default":"3","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve or display the time from the page start to when function is called.\n *\n * @since 0.71\n *\n * @global float   $timestart Seconds from when timer_start() is called.\n * @global float   $timeend   Seconds from when function is called.\n *\n * @param int|bool $display   Whether to echo or return the results. Accepts 0|false for return,\n *                            1|true for echo. Default 0|false.\n * @param int      $precision The number of digits from the right of the decimal to display.\n *                            Default 3.\n * @return string The \"second.microsecond\" finished time calculation. The number is formatted\n *                for human consumption, both localized and rounded.\n *\/"}]},"wp_debug_mode":{"name":"wp_debug_mode","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set PHP error reporting based on WordPress debug settings.\n *\n * Uses three constants: `WP_DEBUG`, `WP_DEBUG_DISPLAY`, and `WP_DEBUG_LOG`.\n * All three can be defined in wp-config.php. By default, `WP_DEBUG` and\n * `WP_DEBUG_LOG` are set to false, and `WP_DEBUG_DISPLAY` is set to true.\n *\n * When `WP_DEBUG` is true, all PHP notices are reported. WordPress will also\n * display internal notices: when a deprecated WordPress function, function\n * argument, or file is used. Deprecated code may be removed from a later\n * version.\n *\n * It is strongly recommended that plugin and theme developers use `WP_DEBUG`\n * in their development environments.\n *\n * `WP_DEBUG_DISPLAY` and `WP_DEBUG_LOG` perform no function unless `WP_DEBUG`\n * is true.\n *\n * When `WP_DEBUG_DISPLAY` is true, WordPress will force errors to be displayed.\n * `WP_DEBUG_DISPLAY` defaults to true. Defining it as null prevents WordPress\n * from changing the global configuration setting. Defining `WP_DEBUG_DISPLAY`\n * as false will force errors to be hidden.\n *\n * When `WP_DEBUG_LOG` is true, errors will be logged to debug.log in the content\n * directory.\n *\n * Errors are never displayed for XML-RPC, REST, and Ajax requests.\n *\n * @since 3.0.0\n * @access private\n *\/"}]},"wp_set_lang_dir":{"name":"wp_set_lang_dir","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set the location of the language directory.\n *\n * To set directory manually, define the `WP_LANG_DIR` constant\n * in wp-config.php.\n *\n * If the language directory exists within `WP_CONTENT_DIR`, it\n * is used. Otherwise the language directory is assumed to live\n * in `WPINC`.\n *\n * @since 3.0.0\n * @access private\n *\/"}]},"require_wp_db":{"name":"require_wp_db","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load the database class file and instantiate the `$wpdb` global.\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb The WordPress database class.\n *\/"}]},"wp_set_wpdb_vars":{"name":"wp_set_wpdb_vars","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set the database table prefix and the format specifiers for database\n * table columns.\n *\n * Columns not listed here default to `%s`.\n *\n * @since 3.0.0\n * @access private\n *\n * @global wpdb   $wpdb         The WordPress database class.\n * @global string $table_prefix The database table prefix.\n *\/"}]},"wp_using_ext_object_cache":{"name":"wp_using_ext_object_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$using","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Toggle `$_wp_using_ext_object_cache` on and off without directly\n * touching global.\n *\n * @since 3.7.0\n *\n * @global bool $_wp_using_ext_object_cache\n *\n * @param bool $using Whether external object cache is being used.\n * @return bool The current 'using' setting.\n *\/"}]},"wp_start_object_cache":{"name":"wp_start_object_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Start the WordPress object cache.\n *\n * If an object-cache.php file exists in the wp-content directory,\n * it uses that drop-in as an external object cache.\n *\n * @since 3.0.0\n * @access private\n *\/"}]},"wp_not_installed":{"name":"wp_not_installed","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Redirect to the installer if WordPress is not installed.\n *\n * Dies with an error message when Multisite is enabled.\n *\n * @since 3.0.0\n * @access private\n *\/"}]},"wp_get_mu_plugins":{"name":"wp_get_mu_plugins","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve an array of must-use plugin files.\n *\n * The default directory is wp-content\/mu-plugins. To change the default\n * directory manually, define `WPMU_PLUGIN_DIR` and `WPMU_PLUGIN_URL`\n * in wp-config.php.\n *\n * @since 3.0.0\n * @access private\n *\n * @return array Files to include.\n *\/"}]},"wp_get_active_and_valid_plugins":{"name":"wp_get_active_and_valid_plugins","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve an array of active and valid plugin files.\n *\n * While upgrading or installing WordPress, no plugins are returned.\n *\n * The default directory is wp-content\/plugins. To change the default\n * directory manually, define `WP_PLUGIN_DIR` and `WP_PLUGIN_URL`\n * in wp-config.php.\n *\n * @since 3.0.0\n * @access private\n *\n * @return array Files.\n *\/"}]},"wp_set_internal_encoding":{"name":"wp_set_internal_encoding","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set internal encoding.\n *\n * In most cases the default internal encoding is latin1, which is\n * of no use, since we want to use the `mb_` functions for `utf-8` strings.\n *\n * @since 3.0.0\n * @access private\n *\/"}]},"wp_magic_quotes":{"name":"wp_magic_quotes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add magic quotes to `$_GET`, `$_POST`, `$_COOKIE`, and `$_SERVER`.\n *\n * Also forces `$_REQUEST` to be `$_GET + $_POST`. If `$_SERVER`,\n * `$_COOKIE`, or `$_ENV` are needed, use those superglobals directly.\n *\n * @since 3.0.0\n * @access private\n *\/"}]},"shutdown_action_hook":{"name":"shutdown_action_hook","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Runs just before PHP shuts down execution.\n *\n * @since 1.2.0\n * @access private\n *\/"}]},"wp_clone":{"name":"wp_clone","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Copy an object.\n *\n * @since 2.7.0\n * @deprecated 3.2.0\n *\n * @param object $object The object to clone.\n * @return object The cloned object.\n *\/"}]},"is_blog_admin":{"name":"is_blog_admin","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether the current request is for a site's admininstrative interface.\n *\n * e.g. `\/wp-admin\/`\n *\n * Does not check if the user is an administrator; current_user_can()\n * for checking roles and capabilities.\n *\n * @since 3.1.0\n *\n * @global WP_Screen $current_screen\n *\n * @return bool True if inside WordPress blog administration pages.\n *\/"}]},"is_network_admin":{"name":"is_network_admin","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether the current request is for the network administrative interface.\n *\n * e.g. `\/wp-admin\/network\/`\n *\n * Does not check if the user is an administrator; current_user_can()\n * for checking roles and capabilities.\n *\n * @since 3.1.0\n *\n * @global WP_Screen $current_screen\n *\n * @return bool True if inside WordPress network administration pages.\n *\/"}]},"is_user_admin":{"name":"is_user_admin","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether the current request is for a user admin screen.\n *\n * e.g. `\/wp-admin\/user\/`\n *\n * Does not inform on whether the user is an admin! Use capability\n * checks to tell if the user should be accessing a section or not\n * current_user_can().\n *\n * @since 3.1.0\n *\n * @global WP_Screen $current_screen\n *\n * @return bool True if inside WordPress user administration pages.\n *\/"}]},"is_multisite":{"name":"is_multisite","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * If Multisite is enabled.\n *\n * @since 3.0.0\n *\n * @return bool True if Multisite is enabled, false otherwise.\n *\/"}]},"get_current_blog_id":{"name":"get_current_blog_id","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the current site ID.\n *\n * @since 3.1.0\n *\n * @global int $blog_id\n *\n * @return int Site ID.\n *\/"}]},"get_current_network_id":{"name":"get_current_network_id","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the current network ID.\n *\n * @since 4.6.0\n *\n * @return int The ID of the current network.\n *\/"}]},"wp_load_translations_early":{"name":"wp_load_translations_early","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Attempt an early load of translations.\n *\n * Used for errors encountered during the initial loading process, before\n * the locale has been properly detected and loaded.\n *\n * Designed for unusual load sequences (like setup-config.php) or for when\n * the script will then terminate with an error, otherwise there is a risk\n * that a file can be double-included.\n *\n * @since 3.4.0\n * @access private\n *\n * @global WP_Locale $wp_locale The WordPress date and time locale object.\n *\n * @staticvar bool $loaded\n *\/"}]},"wp_installing":{"name":"wp_installing","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$is_installing","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check or set whether WordPress is in \"installation\" mode.\n *\n * If the `WP_INSTALLING` constant is defined during the bootstrap, `wp_installing()` will default to `true`.\n *\n * @since 4.4.0\n *\n * @staticvar bool $installing\n *\n * @param bool $is_installing Optional. True to set WP into Installing mode, false to turn Installing mode off.\n *                            Omit this parameter if you only want to fetch the current status.\n * @return bool True if WP is installing, otherwise false. When a `$is_installing` is passed, the function will\n *              report whether WP was in installing mode prior to the change to `$is_installing`.\n *\/"}]},"is_ssl":{"name":"is_ssl","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines if SSL is used.\n *\n * @since 2.6.0\n * @since 4.6.0 Moved from functions.php to load.php.\n *\n * @return bool True if SSL, otherwise false.\n *\/"}]},"wp_convert_hr_to_bytes":{"name":"wp_convert_hr_to_bytes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Converts a shorthand byte value to an integer byte value.\n *\n * @since 2.3.0\n * @since 4.6.0 Moved from media.php to load.php.\n *\n * @link https:\/\/secure.php.net\/manual\/en\/function.ini-get.php\n * @link https:\/\/secure.php.net\/manual\/en\/faq.using.php#faq.using.shorthandbytes\n *\n * @param string $value A (PHP ini) byte value, either shorthand or ordinary.\n * @return int An integer byte value.\n *\/"}]},"wp_is_ini_value_changeable":{"name":"wp_is_ini_value_changeable","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$setting","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines whether a PHP ini value is changeable at runtime.\n *\n * @since 4.6.0\n *\n * @link https:\/\/secure.php.net\/manual\/en\/function.ini-get-all.php\n *\n * @param string $setting The name of the ini setting to check.\n * @return bool True if the value is changeable at runtime. False otherwise.\n *\/"}]},"wp_doing_ajax":{"name":"wp_doing_ajax","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines whether the current request is a WordPress Ajax request.\n *\n * @since 4.7.0\n *\n * @return bool True if it's a WordPress Ajax request, false otherwise.\n *\/"}]},"is_wp_error":{"name":"is_wp_error","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$thing","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether variable is a WordPress Error.\n *\n * Returns true if $thing is an object of the WP_Error class.\n *\n * @since 2.1.0\n *\n * @param mixed $thing Check if unknown variable is a WP_Error object.\n * @return bool True, if WP_Error. False, if not WP_Error.\n *\/"}]},"wptexturize":{"name":"wptexturize","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$reset","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Main WordPress Formatting API.\n *\n * Handles many functions for formatting output.\n *\n * @package WordPress\n *\/"},{"phpdoc":"\/**\n * Replaces common plain text characters into formatted entities\n *\n * As an example,\n *\n *     'cause today's effort makes it worth tomorrow's \"holiday\" ...\n *\n * Becomes:\n *\n *     &#8217;cause today&#8217;s effort makes it worth tomorrow&#8217;s &#8220;holiday&#8221; &#8230;\n *\n * Code within certain html blocks are skipped.\n *\n * Do not use this function before the {@see 'init'} action hook; everything will break.\n *\n * @since 0.71\n *\n * @global array $wp_cockneyreplace Array of formatted entities for certain common phrases\n * @global array $shortcode_tags\n * @staticvar array $static_characters\n * @staticvar array $static_replacements\n * @staticvar array $dynamic_characters\n * @staticvar array $dynamic_replacements\n * @staticvar array $default_no_texturize_tags\n * @staticvar array $default_no_texturize_shortcodes\n * @staticvar bool  $run_texturize\n *\n * @param string $text The text to be formatted\n * @param bool   $reset Set to true for unit testing. Translated patterns will reset.\n * @return string The string replaced with html entities\n *\/"}]},"wptexturize_primes":{"name":"wptexturize_primes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$haystack","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$needle","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$prime","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$open_quote","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$close_quote","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Implements a logic tree to determine whether or not \"7'.\" represents seven feet,\n * then converts the special char into either a prime char or a closing quote char.\n *\n * @since 4.3.0\n *\n * @param string $haystack    The plain text to be searched.\n * @param string $needle      The character to search for such as ' or \".\n * @param string $prime       The prime char to use for replacement.\n * @param string $open_quote  The opening quote char. Opening quote replacement must be\n *                            accomplished already.\n * @param string $close_quote The closing quote char to use for replacement.\n * @return string The $haystack value after primes and quotes replacements.\n *\/"}]},"_wptexturize_pushpop_element":{"name":"_wptexturize_pushpop_element","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$stack","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$disabled_elements","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Search for disabled element tags. Push element to stack on tag open and pop\n * on tag close.\n *\n * Assumes first char of $text is tag opening and last char is tag closing.\n * Assumes second char of $text is optionally '\/' to indicate closing as in <\/html>.\n *\n * @since 2.9.0\n * @access private\n *\n * @param string $text Text to check. Must be a tag like `<html>` or `[shortcode]`.\n * @param array  $stack List of open tag elements.\n * @param array  $disabled_elements The tag names to match against. Spaces are not allowed in tag names.\n *\/"}]},"wpautop":{"name":"wpautop","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$pee","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$br","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Replaces double line-breaks with paragraph elements.\n *\n * A group of regex replaces used to identify text formatted with newlines and\n * replace double line-breaks with HTML paragraph tags. The remaining line-breaks\n * after conversion become <<br \/>> tags, unless $br is set to '0' or 'false'.\n *\n * @since 0.71\n *\n * @param string $pee The text which has to be formatted.\n * @param bool   $br  Optional. If set, this will convert all remaining line-breaks\n *                    after paragraphing. Default true.\n * @return string Text which has been converted into correct paragraph tags.\n *\/"}]},"wp_html_split":{"name":"wp_html_split","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$input","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Separate HTML elements and comments from the text.\n *\n * @since 4.2.4\n *\n * @param string $input The text which has to be formatted.\n * @return array The formatted text.\n *\/"}]},"get_html_split_regex":{"name":"get_html_split_regex","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the regular expression for an HTML element.\n *\n * @since 4.4.0\n *\n * @return string The regular expression\n *\/"}]},"_get_wptexturize_split_regex":{"name":"_get_wptexturize_split_regex","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$shortcode_regex","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the combined regular expression for HTML and shortcodes.\n *\n * @access private\n * @ignore\n * @internal This function will be removed in 4.5.0 per Shortcode API Roadmap.\n * @since 4.4.0\n *\n * @param string $shortcode_regex The result from _get_wptexturize_shortcode_regex().  Optional.\n * @return string The regular expression\n *\/"}]},"_get_wptexturize_shortcode_regex":{"name":"_get_wptexturize_shortcode_regex","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tagnames","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the regular expression for shortcodes.\n *\n * @access private\n * @ignore\n * @internal This function will be removed in 4.5.0 per Shortcode API Roadmap.\n * @since 4.4.0\n *\n * @param array $tagnames List of shortcodes to find.\n * @return string The regular expression\n *\/"}]},"wp_replace_in_html_tags":{"name":"wp_replace_in_html_tags","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$haystack","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$replace_pairs","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Replace characters or phrases within HTML elements only.\n *\n * @since 4.2.3\n *\n * @param string $haystack The text which has to be formatted.\n * @param array $replace_pairs In the form array('from' => 'to', ...).\n * @return string The formatted text.\n *\/"}]},"_autop_newline_preservation_helper":{"name":"_autop_newline_preservation_helper","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Newline preservation help function for wpautop\n *\n * @since 3.1.0\n * @access private\n *\n * @param array $matches preg_replace_callback matches array\n * @return string\n *\/"}]},"shortcode_unautop":{"name":"shortcode_unautop","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$pee","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Don't auto-p wrap shortcodes that stand alone\n *\n * Ensures that shortcodes are not wrapped in `<p>...<\/p>`.\n *\n * @since 2.9.0\n *\n * @global array $shortcode_tags\n *\n * @param string $pee The content.\n * @return string The filtered content.\n *\/"}]},"seems_utf8":{"name":"seems_utf8","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks to see if a string is utf8 encoded.\n *\n * NOTE: This function checks for 5-Byte sequences, UTF8\n *       has Bytes Sequences with a maximum length of 4.\n *\n * @author bmorel at ssi dot fr (modified)\n * @since 1.2.1\n *\n * @param string $str The string to be checked\n * @return bool True if $str fits a UTF-8 model, false otherwise.\n *\/"}]},"_wp_specialchars":{"name":"_wp_specialchars","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$quote_style","rank":1,"variadic":false,"reference":false,"default":"ENT_NOQUOTES","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$charset","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$double_encode","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Converts a number of special characters into their HTML entities.\n *\n * Specifically deals with: &, <, >, \", and '.\n *\n * $quote_style can be set to ENT_COMPAT to encode \" to\n * &quot;, or ENT_QUOTES to do both. Default is ENT_NOQUOTES where no quotes are encoded.\n *\n * @since 1.2.2\n * @access private\n *\n * @staticvar string $_charset\n *\n * @param string     $string         The text which is to be encoded.\n * @param int|string $quote_style    Optional. Converts double quotes if set to ENT_COMPAT,\n *                                   both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES.\n *                                   Also compatible with old values; converting single quotes if set to 'single',\n *                                   double if set to 'double' or both if otherwise set.\n *                                   Default is ENT_NOQUOTES.\n * @param string     $charset        Optional. The character encoding of the string. Default is false.\n * @param bool       $double_encode  Optional. Whether to encode existing html entities. Default is false.\n * @return string The encoded text with HTML entities.\n *\/"}]},"wp_specialchars_decode":{"name":"wp_specialchars_decode","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$quote_style","rank":1,"variadic":false,"reference":false,"default":"ENT_NOQUOTES","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Converts a number of HTML entities into their special characters.\n *\n * Specifically deals with: &, <, >, \", and '.\n *\n * $quote_style can be set to ENT_COMPAT to decode \" entities,\n * or ENT_QUOTES to do both \" and '. Default is ENT_NOQUOTES where no quotes are decoded.\n *\n * @since 2.8.0\n *\n * @param string     $string The text which is to be decoded.\n * @param string|int $quote_style Optional. Converts double quotes if set to ENT_COMPAT,\n *                                both single and double if set to ENT_QUOTES or\n *                                none if set to ENT_NOQUOTES.\n *                                Also compatible with old _wp_specialchars() values;\n *                                converting single quotes if set to 'single',\n *                                double if set to 'double' or both if otherwise set.\n *                                Default is ENT_NOQUOTES.\n * @return string The decoded text without HTML entities.\n *\/"}]},"wp_check_invalid_utf8":{"name":"wp_check_invalid_utf8","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$strip","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks for invalid UTF8 in a string.\n *\n * @since 2.8.0\n *\n * @staticvar bool $is_utf8\n * @staticvar bool $utf8_pcre\n *\n * @param string  $string The text which is to be checked.\n * @param bool    $strip Optional. Whether to attempt to strip out invalid UTF8. Default is false.\n * @return string The checked text.\n *\/"}]},"utf8_uri_encode":{"name":"utf8_uri_encode","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$utf8_string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$length","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Encode the Unicode values to be used in the URI.\n *\n * @since 1.5.0\n *\n * @param string $utf8_string\n * @param int    $length Max  length of the string\n * @return string String with Unicode encoded for URI.\n *\/"}]},"remove_accents":{"name":"remove_accents","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Converts all accent characters to ASCII characters.\n *\n * If there are no accent characters, then the string given is just returned.\n *\n * **Accent characters converted:**\n *\n * Currency signs:\n *\n * |   Code   | Glyph | Replacement |     Description     |\n * | -------- | ----- | ----------- | ------------------- |\n * | U+00A3   | \u00a3     | (empty)     | British Pound sign  |\n * | U+20AC   | \u20ac     | E           | Euro sign           |\n *\n * Decompositions for Latin-1 Supplement:\n *\n * |  Code   | Glyph | Replacement |               Description              |\n * | ------- | ----- | ----------- | -------------------------------------- |\n * | U+00AA  | \u00aa     | a           | Feminine ordinal indicator             |\n * | U+00BA  | \u00ba     | o           | Masculine ordinal indicator            |\n * | U+00C0  | \u00c0     | A           | Latin capital letter A with grave      |\n * | U+00C1  | \u00c1     | A           | Latin capital letter A with acute      |\n * | U+00C2  | \u00c2     | A           | Latin capital letter A with circumflex |\n * | U+00C3  | \u00c3     | A           | Latin capital letter A with tilde      |\n * | U+00C4  | \u00c4     | A           | Latin capital letter A with diaeresis  |\n * | U+00C5  | \u00c5     | A           | Latin capital letter A with ring above |\n * | U+00C6  | \u00c6     | AE          | Latin capital letter AE                |\n * | U+00C7  | \u00c7     | C           | Latin capital letter C with cedilla    |\n * | U+00C8  | \u00c8     | E           | Latin capital letter E with grave      |\n * | U+00C9  | \u00c9     | E           | Latin capital letter E with acute      |\n * | U+00CA  | \u00ca     | E           | Latin capital letter E with circumflex |\n * | U+00CB  | \u00cb     | E           | Latin capital letter E with diaeresis  |\n * | U+00CC  | \u00cc     | I           | Latin capital letter I with grave      |\n * | U+00CD  | \u00cd     | I           | Latin capital letter I with acute      |\n * | U+00CE  | \u00ce     | I           | Latin capital letter I with circumflex |\n * | U+00CF  | \u00cf     | I           | Latin capital letter I with diaeresis  |\n * | U+00D0  | \u00d0     | D           | Latin capital letter Eth               |\n * | U+00D1  | \u00d1     | N           | Latin capital letter N with tilde      |\n * | U+00D2  | \u00d2     | O           | Latin capital letter O with grave      |\n * | U+00D3  | \u00d3     | O           | Latin capital letter O with acute      |\n * | U+00D4  | \u00d4     | O           | Latin capital letter O with circumflex |\n * | U+00D5  | \u00d5     | O           | Latin capital letter O with tilde      |\n * | U+00D6  | \u00d6     | O           | Latin capital letter O with diaeresis  |\n * | U+00D8  | \u00d8     | O           | Latin capital letter O with stroke     |\n * | U+00D9  | \u00d9     | U           | Latin capital letter U with grave      |\n * | U+00DA  | \u00da     | U           | Latin capital letter U with acute      |\n * | U+00DB  | \u00db     | U           | Latin capital letter U with circumflex |\n * | U+00DC  | \u00dc     | U           | Latin capital letter U with diaeresis  |\n * | U+00DD  | \u00dd     | Y           | Latin capital letter Y with acute      |\n * | U+00DE  | \u00de     | TH          | Latin capital letter Thorn             |\n * | U+00DF  | \u00df     | s           | Latin small letter sharp s             |\n * | U+00E0  | \u00e0     | a           | Latin small letter a with grave        |\n * | U+00E1  | \u00e1     | a           | Latin small letter a with acute        |\n * | U+00E2  | \u00e2     | a           | Latin small letter a with circumflex   |\n * | U+00E3  | \u00e3     | a           | Latin small letter a with tilde        |\n * | U+00E4  | \u00e4     | a           | Latin small letter a with diaeresis    |\n * | U+00E5  | \u00e5     | a           | Latin small letter a with ring above   |\n * | U+00E6  | \u00e6     | ae          | Latin small letter ae                  |\n * | U+00E7  | \u00e7     | c           | Latin small letter c with cedilla      |\n * | U+00E8  | \u00e8     | e           | Latin small letter e with grave        |\n * | U+00E9  | \u00e9     | e           | Latin small letter e with acute        |\n * | U+00EA  | \u00ea     | e           | Latin small letter e with circumflex   |\n * | U+00EB  | \u00eb     | e           | Latin small letter e with diaeresis    |\n * | U+00EC  | \u00ec     | i           | Latin small letter i with grave        |\n * | U+00ED  | \u00ed     | i           | Latin small letter i with acute        |\n * | U+00EE  | \u00ee     | i           | Latin small letter i with circumflex   |\n * | U+00EF  | \u00ef     | i           | Latin small letter i with diaeresis    |\n * | U+00F0  | \u00f0     | d           | Latin small letter Eth                 |\n * | U+00F1  | \u00f1     | n           | Latin small letter n with tilde        |\n * | U+00F2  | \u00f2     | o           | Latin small letter o with grave        |\n * | U+00F3  | \u00f3     | o           | Latin small letter o with acute        |\n * | U+00F4  | \u00f4     | o           | Latin small letter o with circumflex   |\n * | U+00F5  | \u00f5     | o           | Latin small letter o with tilde        |\n * | U+00F6  | \u00f6     | o           | Latin small letter o with diaeresis    |\n * | U+00F8  | \u00f8     | o           | Latin small letter o with stroke       |\n * | U+00F9  | \u00f9     | u           | Latin small letter u with grave        |\n * | U+00FA  | \u00fa     | u           | Latin small letter u with acute        |\n * | U+00FB  | \u00fb     | u           | Latin small letter u with circumflex   |\n * | U+00FC  | \u00fc     | u           | Latin small letter u with diaeresis    |\n * | U+00FD  | \u00fd     | y           | Latin small letter y with acute        |\n * | U+00FE  | \u00fe     | th          | Latin small letter Thorn               |\n * | U+00FF  | \u00ff     | y           | Latin small letter y with diaeresis    |\n *\n * Decompositions for Latin Extended-A:\n *\n * |  Code   | Glyph | Replacement |                    Description                    |\n * | ------- | ----- | ----------- | ------------------------------------------------- |\n * | U+0100  | \u0100     | A           | Latin capital letter A with macron                |\n * | U+0101  | \u0101     | a           | Latin small letter a with macron                  |\n * | U+0102  | \u0102     | A           | Latin capital letter A with breve                 |\n * | U+0103  | \u0103     | a           | Latin small letter a with breve                   |\n * | U+0104  | \u0104     | A           | Latin capital letter A with ogonek                |\n * | U+0105  | \u0105     | a           | Latin small letter a with ogonek                  |\n * | U+01006 | \u0106     | C           | Latin capital letter C with acute                 |\n * | U+0107  | \u0107     | c           | Latin small letter c with acute                   |\n * | U+0108  | \u0108     | C           | Latin capital letter C with circumflex            |\n * | U+0109  | \u0109     | c           | Latin small letter c with circumflex              |\n * | U+010A  | \u010a     | C           | Latin capital letter C with dot above             |\n * | U+010B  | \u010b     | c           | Latin small letter c with dot above               |\n * | U+010C  | \u010c     | C           | Latin capital letter C with caron                 |\n * | U+010D  | \u010d     | c           | Latin small letter c with caron                   |\n * | U+010E  | \u010e     | D           | Latin capital letter D with caron                 |\n * | U+010F  | \u010f     | d           | Latin small letter d with caron                   |\n * | U+0110  | \u0110     | D           | Latin capital letter D with stroke                |\n * | U+0111  | \u0111     | d           | Latin small letter d with stroke                  |\n * | U+0112  | \u0112     | E           | Latin capital letter E with macron                |\n * | U+0113  | \u0113     | e           | Latin small letter e with macron                  |\n * | U+0114  | \u0114     | E           | Latin capital letter E with breve                 |\n * | U+0115  | \u0115     | e           | Latin small letter e with breve                   |\n * | U+0116  | \u0116     | E           | Latin capital letter E with dot above             |\n * | U+0117  | \u0117     | e           | Latin small letter e with dot above               |\n * | U+0118  | \u0118     | E           | Latin capital letter E with ogonek                |\n * | U+0119  | \u0119     | e           | Latin small letter e with ogonek                  |\n * | U+011A  | \u011a     | E           | Latin capital letter E with caron                 |\n * | U+011B  | \u011b     | e           | Latin small letter e with caron                   |\n * | U+011C  | \u011c     | G           | Latin capital letter G with circumflex            |\n * | U+011D  | \u011d     | g           | Latin small letter g with circumflex              |\n * | U+011E  | \u011e     | G           | Latin capital letter G with breve                 |\n * | U+011F  | \u011f     | g           | Latin small letter g with breve                   |\n * | U+0120  | \u0120     | G           | Latin capital letter G with dot above             |\n * | U+0121  | \u0121     | g           | Latin small letter g with dot above               |\n * | U+0122  | \u0122     | G           | Latin capital letter G with cedilla               |\n * | U+0123  | \u0123     | g           | Latin small letter g with cedilla                 |\n * | U+0124  | \u0124     | H           | Latin capital letter H with circumflex            |\n * | U+0125  | \u0125     | h           | Latin small letter h with circumflex              |\n * | U+0126  | \u0126     | H           | Latin capital letter H with stroke                |\n * | U+0127  | \u0127     | h           | Latin small letter h with stroke                  |\n * | U+0128  | \u0128     | I           | Latin capital letter I with tilde                 |\n * | U+0129  | \u0129     | i           | Latin small letter i with tilde                   |\n * | U+012A  | \u012a     | I           | Latin capital letter I with macron                |\n * | U+012B  | \u012b     | i           | Latin small letter i with macron                  |\n * | U+012C  | \u012c     | I           | Latin capital letter I with breve                 |\n * | U+012D  | \u012d     | i           | Latin small letter i with breve                   |\n * | U+012E  | \u012e     | I           | Latin capital letter I with ogonek                |\n * | U+012F  | \u012f     | i           | Latin small letter i with ogonek                  |\n * | U+0130  | \u0130     | I           | Latin capital letter I with dot above             |\n * | U+0131  | \u0131     | i           | Latin small letter dotless i                      |\n * | U+0132  | \u0132     | IJ          | Latin capital ligature IJ                         |\n * | U+0133  | \u0133     | ij          | Latin small ligature ij                           |\n * | U+0134  | \u0134     | J           | Latin capital letter J with circumflex            |\n * | U+0135  | \u0135     | j           | Latin small letter j with circumflex              |\n * | U+0136  | \u0136     | K           | Latin capital letter K with cedilla               |\n * | U+0137  | \u0137     | k           | Latin small letter k with cedilla                 |\n * | U+0138  | \u0138     | k           | Latin small letter Kra                            |\n * | U+0139  | \u0139     | L           | Latin capital letter L with acute                 |\n * | U+013A  | \u013a     | l           | Latin small letter l with acute                   |\n * | U+013B  | \u013b     | L           | Latin capital letter L with cedilla               |\n * | U+013C  | \u013c     | l           | Latin small letter l with cedilla                 |\n * | U+013D  | \u013d     | L           | Latin capital letter L with caron                 |\n * | U+013E  | \u013e     | l           | Latin small letter l with caron                   |\n * | U+013F  | \u013f     | L           | Latin capital letter L with middle dot            |\n * | U+0140  | \u0140     | l           | Latin small letter l with middle dot              |\n * | U+0141  | \u0141     | L           | Latin capital letter L with stroke                |\n * | U+0142  | \u0142     | l           | Latin small letter l with stroke                  |\n * | U+0143  | \u0143     | N           | Latin capital letter N with acute                 |\n * | U+0144  | \u0144     | n           | Latin small letter N with acute                   |\n * | U+0145  | \u0145     | N           | Latin capital letter N with cedilla               |\n * | U+0146  | \u0146     | n           | Latin small letter n with cedilla                 |\n * | U+0147  | \u0147     | N           | Latin capital letter N with caron                 |\n * | U+0148  | \u0148     | n           | Latin small letter n with caron                   |\n * | U+0149  | \u0149     | n           | Latin small letter n preceded by apostrophe       |\n * | U+014A  | \u014a     | N           | Latin capital letter Eng                          |\n * | U+014B  | \u014b     | n           | Latin small letter Eng                            |\n * | U+014C  | \u014c     | O           | Latin capital letter O with macron                |\n * | U+014D  | \u014d     | o           | Latin small letter o with macron                  |\n * | U+014E  | \u014e     | O           | Latin capital letter O with breve                 |\n * | U+014F  | \u014f     | o           | Latin small letter o with breve                   |\n * | U+0150  | \u0150     | O           | Latin capital letter O with double acute          |\n * | U+0151  | \u0151     | o           | Latin small letter o with double acute            |\n * | U+0152  | \u0152     | OE          | Latin capital ligature OE                         |\n * | U+0153  | \u0153     | oe          | Latin small ligature oe                           |\n * | U+0154  | \u0154     | R           | Latin capital letter R with acute                 |\n * | U+0155  | \u0155     | r           | Latin small letter r with acute                   |\n * | U+0156  | \u0156     | R           | Latin capital letter R with cedilla               |\n * | U+0157  | \u0157     | r           | Latin small letter r with cedilla                 |\n * | U+0158  | \u0158     | R           | Latin capital letter R with caron                 |\n * | U+0159  | \u0159     | r           | Latin small letter r with caron                   |\n * | U+015A  | \u015a     | S           | Latin capital letter S with acute                 |\n * | U+015B  | \u015b     | s           | Latin small letter s with acute                   |\n * | U+015C  | \u015c     | S           | Latin capital letter S with circumflex            |\n * | U+015D  | \u015d     | s           | Latin small letter s with circumflex              |\n * | U+015E  | \u015e     | S           | Latin capital letter S with cedilla               |\n * | U+015F  | \u015f     | s           | Latin small letter s with cedilla                 |\n * | U+0160  | \u0160     | S           | Latin capital letter S with caron                 |\n * | U+0161  | \u0161     | s           | Latin small letter s with caron                   |\n * | U+0162  | \u0162     | T           | Latin capital letter T with cedilla               |\n * | U+0163  | \u0163     | t           | Latin small letter t with cedilla                 |\n * | U+0164  | \u0164     | T           | Latin capital letter T with caron                 |\n * | U+0165  | \u0165     | t           | Latin small letter t with caron                   |\n * | U+0166  | \u0166     | T           | Latin capital letter T with stroke                |\n * | U+0167  | \u0167     | t           | Latin small letter t with stroke                  |\n * | U+0168  | \u0168     | U           | Latin capital letter U with tilde                 |\n * | U+0169  | \u0169     | u           | Latin small letter u with tilde                   |\n * | U+016A  | \u016a     | U           | Latin capital letter U with macron                |\n * | U+016B  | \u016b     | u           | Latin small letter u with macron                  |\n * | U+016C  | \u016c     | U           | Latin capital letter U with breve                 |\n * | U+016D  | \u016d     | u           | Latin small letter u with breve                   |\n * | U+016E  | \u016e     | U           | Latin capital letter U with ring above            |\n * | U+016F  | \u016f     | u           | Latin small letter u with ring above              |\n * | U+0170  | \u0170     | U           | Latin capital letter U with double acute          |\n * | U+0171  | \u0171     | u           | Latin small letter u with double acute            |\n * | U+0172  | \u0172     | U           | Latin capital letter U with ogonek                |\n * | U+0173  | \u0173     | u           | Latin small letter u with ogonek                  |\n * | U+0174  | \u0174     | W           | Latin capital letter W with circumflex            |\n * | U+0175  | \u0175     | w           | Latin small letter w with circumflex              |\n * | U+0176  | \u0176     | Y           | Latin capital letter Y with circumflex            |\n * | U+0177  | \u0177     | y           | Latin small letter y with circumflex              |\n * | U+0178  | \u0178     | Y           | Latin capital letter Y with diaeresis             |\n * | U+0179  | \u0179     | Z           | Latin capital letter Z with acute                 |\n * | U+017A  | \u017a     | z           | Latin small letter z with acute                   |\n * | U+017B  | \u017b     | Z           | Latin capital letter Z with dot above             |\n * | U+017C  | \u017c     | z           | Latin small letter z with dot above               |\n * | U+017D  | \u017d     | Z           | Latin capital letter Z with caron                 |\n * | U+017E  | \u017e     | z           | Latin small letter z with caron                   |\n * | U+017F  | \u017f     | s           | Latin small letter long s                         |\n * | U+01A0  | \u01a0     | O           | Latin capital letter O with horn                  |\n * | U+01A1  | \u01a1     | o           | Latin small letter o with horn                    |\n * | U+01AF  | \u01af     | U           | Latin capital letter U with horn                  |\n * | U+01B0  | \u01b0     | u           | Latin small letter u with horn                    |\n * | U+01CD  | \u01cd     | A           | Latin capital letter A with caron                 |\n * | U+01CE  | \u01ce     | a           | Latin small letter a with caron                   |\n * | U+01CF  | \u01cf     | I           | Latin capital letter I with caron                 |\n * | U+01D0  | \u01d0     | i           | Latin small letter i with caron                   |\n * | U+01D1  | \u01d1     | O           | Latin capital letter O with caron                 |\n * | U+01D2  | \u01d2     | o           | Latin small letter o with caron                   |\n * | U+01D3  | \u01d3     | U           | Latin capital letter U with caron                 |\n * | U+01D4  | \u01d4     | u           | Latin small letter u with caron                   |\n * | U+01D5  | \u01d5     | U           | Latin capital letter U with diaeresis and macron  |\n * | U+01D6  | \u01d6     | u           | Latin small letter u with diaeresis and macron    |\n * | U+01D7  | \u01d7     | U           | Latin capital letter U with diaeresis and acute   |\n * | U+01D8  | \u01d8     | u           | Latin small letter u with diaeresis and acute     |\n * | U+01D9  | \u01d9     | U           | Latin capital letter U with diaeresis and caron   |\n * | U+01DA  | \u01da     | u           | Latin small letter u with diaeresis and caron     |\n * | U+01DB  | \u01db     | U           | Latin capital letter U with diaeresis and grave   |\n * | U+01DC  | \u01dc     | u           | Latin small letter u with diaeresis and grave     |\n *\n * Decompositions for Latin Extended-B:\n *\n * |   Code   | Glyph | Replacement |                Description                |\n * | -------- | ----- | ----------- | ----------------------------------------- |\n * | U+0218   | \u0218     | S           | Latin capital letter S with comma below   |\n * | U+0219   | \u0219     | s           | Latin small letter s with comma below     |\n * | U+021A   | \u021a     | T           | Latin capital letter T with comma below   |\n * | U+021B   | \u021b     | t           | Latin small letter t with comma below     |\n *\n * Vowels with diacritic (Chinese, Hanyu Pinyin):\n *\n * |   Code   | Glyph | Replacement |                      Description                      |\n * | -------- | ----- | ----------- | ----------------------------------------------------- |\n * | U+0251   | \u0251     | a           | Latin small letter alpha                              |\n * | U+1EA0   | \u1ea0     | A           | Latin capital letter A with dot below                 |\n * | U+1EA1   | \u1ea1     | a           | Latin small letter a with dot below                   |\n * | U+1EA2   | \u1ea2     | A           | Latin capital letter A with hook above                |\n * | U+1EA3   | \u1ea3     | a           | Latin small letter a with hook above                  |\n * | U+1EA4   | \u1ea4     | A           | Latin capital letter A with circumflex and acute      |\n * | U+1EA5   | \u1ea5     | a           | Latin small letter a with circumflex and acute        |\n * | U+1EA6   | \u1ea6     | A           | Latin capital letter A with circumflex and grave      |\n * | U+1EA7   | \u1ea7     | a           | Latin small letter a with circumflex and grave        |\n * | U+1EA8   | \u1ea8     | A           | Latin capital letter A with circumflex and hook above |\n * | U+1EA9   | \u1ea9     | a           | Latin small letter a with circumflex and hook above   |\n * | U+1EAA   | \u1eaa     | A           | Latin capital letter A with circumflex and tilde      |\n * | U+1EAB   | \u1eab     | a           | Latin small letter a with circumflex and tilde        |\n * | U+1EA6   | \u1eac     | A           | Latin capital letter A with circumflex and dot below  |\n * | U+1EAD   | \u1ead     | a           | Latin small letter a with circumflex and dot below    |\n * | U+1EAE   | \u1eae     | A           | Latin capital letter A with breve and acute           |\n * | U+1EAF   | \u1eaf     | a           | Latin small letter a with breve and acute             |\n * | U+1EB0   | \u1eb0     | A           | Latin capital letter A with breve and grave           |\n * | U+1EB1   | \u1eb1     | a           | Latin small letter a with breve and grave             |\n * | U+1EB2   | \u1eb2     | A           | Latin capital letter A with breve and hook above      |\n * | U+1EB3   | \u1eb3     | a           | Latin small letter a with breve and hook above        |\n * | U+1EB4   | \u1eb4     | A           | Latin capital letter A with breve and tilde           |\n * | U+1EB5   | \u1eb5     | a           | Latin small letter a with breve and tilde             |\n * | U+1EB6   | \u1eb6     | A           | Latin capital letter A with breve and dot below       |\n * | U+1EB7   | \u1eb7     | a           | Latin small letter a with breve and dot below         |\n * | U+1EB8   | \u1eb8     | E           | Latin capital letter E with dot below                 |\n * | U+1EB9   | \u1eb9     | e           | Latin small letter e with dot below                   |\n * | U+1EBA   | \u1eba     | E           | Latin capital letter E with hook above                |\n * | U+1EBB   | \u1ebb     | e           | Latin small letter e with hook above                  |\n * | U+1EBC   | \u1ebc     | E           | Latin capital letter E with tilde                     |\n * | U+1EBD   | \u1ebd     | e           | Latin small letter e with tilde                       |\n * | U+1EBE   | \u1ebe     | E           | Latin capital letter E with circumflex and acute      |\n * | U+1EBF   | \u1ebf     | e           | Latin small letter e with circumflex and acute        |\n * | U+1EC0   | \u1ec0     | E           | Latin capital letter E with circumflex and grave      |\n * | U+1EC1   | \u1ec1     | e           | Latin small letter e with circumflex and grave        |\n * | U+1EC2   | \u1ec2     | E           | Latin capital letter E with circumflex and hook above |\n * | U+1EC3   | \u1ec3     | e           | Latin small letter e with circumflex and hook above   |\n * | U+1EC4   | \u1ec4     | E           | Latin capital letter E with circumflex and tilde      |\n * | U+1EC5   | \u1ec5     | e           | Latin small letter e with circumflex and tilde        |\n * | U+1EC6   | \u1ec6     | E           | Latin capital letter E with circumflex and dot below  |\n * | U+1EC7   | \u1ec7     | e           | Latin small letter e with circumflex and dot below    |\n * | U+1EC8   | \u1ec8     | I           | Latin capital letter I with hook above                |\n * | U+1EC9   | \u1ec9     | i           | Latin small letter i with hook above                  |\n * | U+1ECA   | \u1eca     | I           | Latin capital letter I with dot below                 |\n * | U+1ECB   | \u1ecb     | i           | Latin small letter i with dot below                   |\n * | U+1ECC   | \u1ecc     | O           | Latin capital letter O with dot below                 |\n * | U+1ECD   | \u1ecd     | o           | Latin small letter o with dot below                   |\n * | U+1ECE   | \u1ece     | O           | Latin capital letter O with hook above                |\n * | U+1ECF   | \u1ecf     | o           | Latin small letter o with hook above                  |\n * | U+1ED0   | \u1ed0     | O           | Latin capital letter O with circumflex and acute      |\n * | U+1ED1   | \u1ed1     | o           | Latin small letter o with circumflex and acute        |\n * | U+1ED2   | \u1ed2     | O           | Latin capital letter O with circumflex and grave      |\n * | U+1ED3   | \u1ed3     | o           | Latin small letter o with circumflex and grave        |\n * | U+1ED4   | \u1ed4     | O           | Latin capital letter O with circumflex and hook above |\n * | U+1ED5   | \u1ed5     | o           | Latin small letter o with circumflex and hook above   |\n * | U+1ED6   | \u1ed6     | O           | Latin capital letter O with circumflex and tilde      |\n * | U+1ED7   | \u1ed7     | o           | Latin small letter o with circumflex and tilde        |\n * | U+1ED8   | \u1ed8     | O           | Latin capital letter O with circumflex and dot below  |\n * | U+1ED9   | \u1ed9     | o           | Latin small letter o with circumflex and dot below    |\n * | U+1EDA   | \u1eda     | O           | Latin capital letter O with horn and acute            |\n * | U+1EDB   | \u1edb     | o           | Latin small letter o with horn and acute              |\n * | U+1EDC   | \u1edc     | O           | Latin capital letter O with horn and grave            |\n * | U+1EDD   | \u1edd     | o           | Latin small letter o with horn and grave              |\n * | U+1EDE   | \u1ede     | O           | Latin capital letter O with horn and hook above       |\n * | U+1EDF   | \u1edf     | o           | Latin small letter o with horn and hook above         |\n * | U+1EE0   | \u1ee0     | O           | Latin capital letter O with horn and tilde            |\n * | U+1EE1   | \u1ee1     | o           | Latin small letter o with horn and tilde              |\n * | U+1EE2   | \u1ee2     | O           | Latin capital letter O with horn and dot below        |\n * | U+1EE3   | \u1ee3     | o           | Latin small letter o with horn and dot below          |\n * | U+1EE4   | \u1ee4     | U           | Latin capital letter U with dot below                 |\n * | U+1EE5   | \u1ee5     | u           | Latin small letter u with dot below                   |\n * | U+1EE6   | \u1ee6     | U           | Latin capital letter U with hook above                |\n * | U+1EE7   | \u1ee7     | u           | Latin small letter u with hook above                  |\n * | U+1EE8   | \u1ee8     | U           | Latin capital letter U with horn and acute            |\n * | U+1EE9   | \u1ee9     | u           | Latin small letter u with horn and acute              |\n * | U+1EEA   | \u1eea     | U           | Latin capital letter U with horn and grave            |\n * | U+1EEB   | \u1eeb     | u           | Latin small letter u with horn and grave              |\n * | U+1EEC   | \u1eec     | U           | Latin capital letter U with horn and hook above       |\n * | U+1EED   | \u1eed     | u           | Latin small letter u with horn and hook above         |\n * | U+1EEE   | \u1eee     | U           | Latin capital letter U with horn and tilde            |\n * | U+1EEF   | \u1eef     | u           | Latin small letter u with horn and tilde              |\n * | U+1EF0   | \u1ef0     | U           | Latin capital letter U with horn and dot below        |\n * | U+1EF1   | \u1ef1     | u           | Latin small letter u with horn and dot below          |\n * | U+1EF2   | \u1ef2     | Y           | Latin capital letter Y with grave                     |\n * | U+1EF3   | \u1ef3     | y           | Latin small letter y with grave                       |\n * | U+1EF4   | \u1ef4     | Y           | Latin capital letter Y with dot below                 |\n * | U+1EF5   | \u1ef5     | y           | Latin small letter y with dot below                   |\n * | U+1EF6   | \u1ef6     | Y           | Latin capital letter Y with hook above                |\n * | U+1EF7   | \u1ef7     | y           | Latin small letter y with hook above                  |\n * | U+1EF8   | \u1ef8     | Y           | Latin capital letter Y with tilde                     |\n * | U+1EF9   | \u1ef9     | y           | Latin small letter y with tilde                       |\n *\n * German (`de_DE`), German formal (`de_DE_formal`), German (Switzerland) formal (`de_CH`),\n * and German (Switzerland) informal (`de_CH_informal`) locales:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+00C4   | \u00c4     | Ae          | Latin capital letter A with diaeresis   |\n * | U+00E4   | \u00e4     | ae          | Latin small letter a with diaeresis     |\n * | U+00D6   | \u00d6     | Oe          | Latin capital letter O with diaeresis   |\n * | U+00F6   | \u00f6     | oe          | Latin small letter o with diaeresis     |\n * | U+00DC   | \u00dc     | Ue          | Latin capital letter U with diaeresis   |\n * | U+00FC   | \u00fc     | ue          | Latin small letter u with diaeresis     |\n * | U+00DF   | \u00df     | ss          | Latin small letter sharp s              |\n *\n * Danish (`da_DK`) locale:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+00C6   | \u00c6     | Ae          | Latin capital letter AE                 |\n * | U+00E6   | \u00e6     | ae          | Latin small letter ae                   |\n * | U+00D8   | \u00d8     | Oe          | Latin capital letter O with stroke      |\n * | U+00F8   | \u00f8     | oe          | Latin small letter o with stroke        |\n * | U+00C5   | \u00c5     | Aa          | Latin capital letter A with ring above  |\n * | U+00E5   | \u00e5     | aa          | Latin small letter a with ring above    |\n *\n * Catalan (`ca`) locale:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+00B7   | l\u00b7l   | ll          | Flown dot (between two Ls)              |\n *\n * Serbian (`sr_RS`) locale:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+0110   | \u0110     | DJ          | Latin capital letter D with stroke      |\n * | U+0111   | \u0111     | dj          | Latin small letter d with stroke        |\n *\n * @since 1.2.1\n * @since 4.6.0 Added locale support for `de_CH`, `de_CH_informal`, and `ca`.\n * @since 4.7.0 Added locale support for `sr_RS`.\n *\n * @param string $string Text that might have accent characters\n * @return string Filtered string with replaced \"nice\" characters.\n *\/"}]},"sanitize_file_name":{"name":"sanitize_file_name","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes a filename, replacing whitespace with dashes.\n *\n * Removes special characters that are illegal in filenames on certain\n * operating systems and special characters requiring special escaping\n * to manipulate at the command line. Replaces spaces and consecutive\n * dashes with a single dash. Trims period, dash and underscore from beginning\n * and end of filename. It is not guaranteed that this function will return a\n * filename that is allowed to be uploaded.\n *\n * @since 2.1.0\n *\n * @param string $filename The filename to be sanitized\n * @return string The sanitized filename\n *\/"}]},"sanitize_user":{"name":"sanitize_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$username","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$strict","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes a username, stripping out unsafe characters.\n *\n * Removes tags, octets, entities, and if strict is enabled, will only keep\n * alphanumeric, _, space, ., -, @. After sanitizing, it passes the username,\n * raw username (the username in the parameter), and the value of $strict as\n * parameters for the {@see 'sanitize_user'} filter.\n *\n * @since 2.0.0\n *\n * @param string $username The username to be sanitized.\n * @param bool   $strict   If set limits $username to specific characters. Default false.\n * @return string The sanitized username, after passing through filters.\n *\/"}]},"sanitize_key":{"name":"sanitize_key","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes a string key.\n *\n * Keys are used as internal identifiers. Lowercase alphanumeric characters, dashes and underscores are allowed.\n *\n * @since 3.0.0\n *\n * @param string $key String key\n * @return string Sanitized key\n *\/"}]},"sanitize_title":{"name":"sanitize_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fallback_title","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":2,"variadic":false,"reference":false,"default":"'save'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes a title, or returns a fallback title.\n *\n * Specifically, HTML and PHP tags are stripped. Further actions can be added\n * via the plugin API. If $title is empty and $fallback_title is set, the latter\n * will be used.\n *\n * @since 1.0.0\n *\n * @param string $title          The string to be sanitized.\n * @param string $fallback_title Optional. A title to use if $title is empty.\n * @param string $context        Optional. The operation for which the string is sanitized\n * @return string The sanitized string.\n *\/"}]},"sanitize_title_for_query":{"name":"sanitize_title_for_query","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes a title with the 'query' context.\n *\n * Used for querying the database for a value from URL.\n *\n * @since 3.1.0\n *\n * @param string $title The string to be sanitized.\n * @return string The sanitized string.\n *\/"}]},"sanitize_title_with_dashes":{"name":"sanitize_title_with_dashes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$raw_title","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":2,"variadic":false,"reference":false,"default":"'display'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes a title, replacing whitespace and a few other characters with dashes.\n *\n * Limits the output to alphanumeric characters, underscore (_) and dash (-).\n * Whitespace becomes a dash.\n *\n * @since 1.2.0\n *\n * @param string $title     The title to be sanitized.\n * @param string $raw_title Optional. Not used.\n * @param string $context   Optional. The operation for which the string is sanitized.\n * @return string The sanitized title.\n *\/"}]},"sanitize_sql_orderby":{"name":"sanitize_sql_orderby","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$orderby","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ensures a string is a valid SQL 'order by' clause.\n *\n * Accepts one or more columns, with or without a sort order (ASC \/ DESC).\n * e.g. 'column_1', 'column_1, column_2', 'column_1 ASC, column_2 DESC' etc.\n *\n * Also accepts 'RAND()'.\n *\n * @since 2.5.1\n *\n * @param string $orderby Order by clause to be validated.\n * @return string|false Returns $orderby if valid, false otherwise.\n *\/"}]},"sanitize_html_class":{"name":"sanitize_html_class","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fallback","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes an HTML classname to ensure it only contains valid characters.\n *\n * Strips the string down to A-Z,a-z,0-9,_,-. If this results in an empty\n * string then it will return the alternative value supplied.\n *\n * @todo Expand to support the full range of CDATA that a class attribute can contain.\n *\n * @since 2.8.0\n *\n * @param string $class    The classname to be sanitized\n * @param string $fallback Optional. The value to return if the sanitization ends up as an empty string.\n * \tDefaults to an empty string.\n * @return string The sanitized value\n *\/"}]},"convert_chars":{"name":"convert_chars","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Converts lone & characters into `&#038;` (a.k.a. `&amp;`)\n *\n * @since 0.71\n *\n * @param string $content    String of characters to be converted.\n * @param string $deprecated Not used.\n * @return string Converted string.\n *\/"}]},"convert_invalid_entities":{"name":"convert_invalid_entities","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Converts invalid Unicode references range to valid range.\n *\n * @since 4.3.0\n *\n * @param string $content String with entities that need converting.\n * @return string Converted string.\n *\/"}]},"balanceTags":{"name":"balanceTags","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$force","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Balances tags if forced to, or if the 'use_balanceTags' option is set to true.\n *\n * @since 0.71\n *\n * @param string $text  Text to be balanced\n * @param bool   $force If true, forces balancing, ignoring the value of the option. Default false.\n * @return string Balanced text\n *\/"}]},"force_balance_tags":{"name":"force_balance_tags","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Balances tags of string using a modified stack.\n *\n * @since 2.0.4\n *\n * @author Leonard Lin <leonard@acm.org>\n * @license GPL\n * @copyright November 4, 2001\n * @version 1.1\n * @todo Make better - change loop condition to $text in 1.2\n * @internal Modified by Scott Reilly (coffee2code) 02 Aug 2004\n *\t\t1.1  Fixed handling of append\/stack pop order of end text\n *\t\t\t Added Cleaning Hooks\n *\t\t1.0  First Version\n *\n * @param string $text Text to be balanced.\n * @return string Balanced text.\n *\/"}]},"format_to_edit":{"name":"format_to_edit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$rich_text","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Acts on text which is about to be edited.\n *\n * The $content is run through esc_textarea(), which uses htmlspecialchars()\n * to convert special characters to HTML entities. If `$richedit` is set to true,\n * it is simply a holder for the {@see 'format_to_edit'} filter.\n *\n * @since 0.71\n * @since 4.4.0 The `$richedit` parameter was renamed to `$rich_text` for clarity.\n *\n * @param string $content   The text about to be edited.\n * @param bool   $rich_text Optional. Whether `$content` should be considered rich text,\n *                          in which case it would not be passed through esc_textarea().\n *                          Default false.\n * @return string The text after the filter (and possibly htmlspecialchars()) has been run.\n *\/"}]},"zeroise":{"name":"zeroise","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$number","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$threshold","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add leading zeros when necessary.\n *\n * If you set the threshold to '4' and the number is '10', then you will get\n * back '0010'. If you set the threshold to '4' and the number is '5000', then you\n * will get back '5000'.\n *\n * Uses sprintf to append the amount of zeros based on the $threshold parameter\n * and the size of the number. If the number is large enough, then no zeros will\n * be appended.\n *\n * @since 0.71\n *\n * @param int $number     Number to append zeros to if not greater than threshold.\n * @param int $threshold  Digit places number needs to be to not have zeros added.\n * @return string Adds leading zeros to number if needed.\n *\/"}]},"backslashit":{"name":"backslashit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds backslashes before letters and before a number at the start of a string.\n *\n * @since 0.71\n *\n * @param string $string Value to which backslashes will be added.\n * @return string String with backslashes inserted.\n *\/"}]},"trailingslashit":{"name":"trailingslashit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Appends a trailing slash.\n *\n * Will remove trailing forward and backslashes if it exists already before adding\n * a trailing forward slash. This prevents double slashing a string or path.\n *\n * The primary use of this is for paths and thus should be used for paths. It is\n * not restricted to paths and offers no specific path support.\n *\n * @since 1.2.0\n *\n * @param string $string What to add the trailing slash to.\n * @return string String with trailing slash added.\n *\/"}]},"untrailingslashit":{"name":"untrailingslashit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes trailing forward slashes and backslashes if they exist.\n *\n * The primary use of this is for paths and thus should be used for paths. It is\n * not restricted to paths and offers no specific path support.\n *\n * @since 2.2.0\n *\n * @param string $string What to remove the trailing slashes from.\n * @return string String without the trailing slashes.\n *\/"}]},"addslashes_gpc":{"name":"addslashes_gpc","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$gpc","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds slashes to escape strings.\n *\n * Slashes will first be removed if magic_quotes_gpc is set, see {@link\n * https:\/\/secure.php.net\/magic_quotes} for more details.\n *\n * @since 0.71\n *\n * @param string $gpc The string returned from HTTP request data.\n * @return string Returns a string escaped with slashes.\n *\/"}]},"stripslashes_deep":{"name":"stripslashes_deep","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Navigates through an array, object, or scalar, and removes slashes from the values.\n *\n * @since 2.0.0\n *\n * @param mixed $value The value to be stripped.\n * @return mixed Stripped value.\n *\/"}]},"stripslashes_from_strings_only":{"name":"stripslashes_from_strings_only","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback function for `stripslashes_deep()` which strips slashes from strings.\n *\n * @since 4.4.0\n *\n * @param mixed $value The array or string to be stripped.\n * @return mixed $value The stripped value.\n *\/"}]},"urlencode_deep":{"name":"urlencode_deep","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Navigates through an array, object, or scalar, and encodes the values to be used in a URL.\n *\n * @since 2.2.0\n *\n * @param mixed $value The array or string to be encoded.\n * @return mixed $value The encoded value.\n *\/"}]},"rawurlencode_deep":{"name":"rawurlencode_deep","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Navigates through an array, object, or scalar, and raw-encodes the values to be used in a URL.\n *\n * @since 3.4.0\n *\n * @param mixed $value The array or string to be encoded.\n * @return mixed $value The encoded value.\n *\/"}]},"urldecode_deep":{"name":"urldecode_deep","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Navigates through an array, object, or scalar, and decodes URL-encoded values\n *\n * @since 4.4.0\n *\n * @param mixed $value The array or string to be decoded.\n * @return mixed $value The decoded value.\n *\/"}]},"antispambot":{"name":"antispambot","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$email_address","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$hex_encoding","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Converts email addresses characters to HTML entities to block spam bots.\n *\n * @since 0.71\n *\n * @param string $email_address Email address.\n * @param int    $hex_encoding  Optional. Set to 1 to enable hex encoding.\n * @return string Converted email address.\n *\/"}]},"_make_url_clickable_cb":{"name":"_make_url_clickable_cb","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback to convert URI match to HTML A element.\n *\n * This function was backported from 2.5.0 to 2.3.2. Regex callback for make_clickable().\n *\n * @since 2.3.2\n * @access private\n *\n * @param array $matches Single Regex Match.\n * @return string HTML A element with URI address.\n *\/"}]},"_make_web_ftp_clickable_cb":{"name":"_make_web_ftp_clickable_cb","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback to convert URL match to HTML A element.\n *\n * This function was backported from 2.5.0 to 2.3.2. Regex callback for make_clickable().\n *\n * @since 2.3.2\n * @access private\n *\n * @param array $matches Single Regex Match.\n * @return string HTML A element with URL address.\n *\/"}]},"_make_email_clickable_cb":{"name":"_make_email_clickable_cb","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback to convert email address match to HTML A element.\n *\n * This function was backported from 2.5.0 to 2.3.2. Regex callback for make_clickable().\n *\n * @since 2.3.2\n * @access private\n *\n * @param array $matches Single Regex Match.\n * @return string HTML A element with email address.\n *\/"}]},"make_clickable":{"name":"make_clickable","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert plaintext URI to HTML links.\n *\n * Converts URI, www and ftp, and email addresses. Finishes by fixing links\n * within links.\n *\n * @since 0.71\n *\n * @param string $text Content to convert URIs.\n * @return string Content with converted URIs.\n *\/"}]},"_split_str_by_whitespace":{"name":"_split_str_by_whitespace","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$goal","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Breaks a string into chunks by splitting at whitespace characters.\n * The length of each returned chunk is as close to the specified length goal as possible,\n * with the caveat that each chunk includes its trailing delimiter.\n * Chunks longer than the goal are guaranteed to not have any inner whitespace.\n *\n * Joining the returned chunks with empty delimiters reconstructs the input string losslessly.\n *\n * Input string must have no null characters (or eventual transformations on output chunks must not care about null characters)\n *\n *     _split_str_by_whitespace( \"1234 67890 1234 67890a cd 1234   890 123456789 1234567890a    45678   1 3 5 7 90 \", 10 ) ==\n *     array (\n *         0 => '1234 67890 ',  \/\/ 11 characters: Perfect split\n *         1 => '1234 ',        \/\/  5 characters: '1234 67890a' was too long\n *         2 => '67890a cd ',   \/\/ 10 characters: '67890a cd 1234' was too long\n *         3 => '1234   890 ',  \/\/ 11 characters: Perfect split\n *         4 => '123456789 ',   \/\/ 10 characters: '123456789 1234567890a' was too long\n *         5 => '1234567890a ', \/\/ 12 characters: Too long, but no inner whitespace on which to split\n *         6 => '   45678   ',  \/\/ 11 characters: Perfect split\n *         7 => '1 3 5 7 90 ',  \/\/ 11 characters: End of $string\n *     );\n *\n * @since 3.4.0\n * @access private\n *\n * @param string $string The string to split.\n * @param int    $goal   The desired chunk length.\n * @return array Numeric array of chunks.\n *\/"}]},"wp_rel_nofollow":{"name":"wp_rel_nofollow","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds rel nofollow string to all HTML A elements in content.\n *\n * @since 1.5.0\n *\n * @param string $text Content that may contain HTML A elements.\n * @return string Converted content.\n *\/"}]},"wp_rel_nofollow_callback":{"name":"wp_rel_nofollow_callback","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback to add rel=nofollow string to HTML A element.\n *\n * Will remove already existing rel=\"nofollow\" and rel='nofollow' from the\n * string to prevent from invalidating (X)HTML.\n *\n * @since 2.3.0\n *\n * @param array $matches Single Match\n * @return string HTML A Element with rel nofollow.\n *\/"}]},"translate_smiley":{"name":"translate_smiley","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert one smiley code to the icon graphic file equivalent.\n *\n * Callback handler for convert_smilies().\n *\n * Looks up one smiley code in the $wpsmiliestrans global array and returns an\n * `<img>` string for that smiley.\n *\n * @since 2.8.0\n *\n * @global array $wpsmiliestrans\n *\n * @param array $matches Single match. Smiley code to convert to image.\n * @return string Image string for smiley.\n *\/"}]},"convert_smilies":{"name":"convert_smilies","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert text equivalent of smilies to images.\n *\n * Will only convert smilies if the option 'use_smilies' is true and the global\n * used in the function isn't empty.\n *\n * @since 0.71\n *\n * @global string|array $wp_smiliessearch\n *\n * @param string $text Content to convert smilies from text.\n * @return string Converted content with text smilies replaced with images.\n *\/"}]},"is_email":{"name":"is_email","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$email","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Verifies that an email is valid.\n *\n * Does not grok i18n domains. Not RFC compliant.\n *\n * @since 0.71\n *\n * @param string $email      Email address to verify.\n * @param bool   $deprecated Deprecated.\n * @return string|bool Either false or the valid email address.\n *\/"}]},"wp_iso_descrambler":{"name":"wp_iso_descrambler","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert to ASCII from email subjects.\n *\n * @since 1.2.0\n *\n * @param string $string Subject line\n * @return string Converted string to ASCII\n *\/"}]},"_wp_iso_convert":{"name":"_wp_iso_convert","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$match","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Helper function to convert hex encoded chars to ASCII\n *\n * @since 3.1.0\n * @access private\n *\n * @param array $match The preg_replace_callback matches array\n * @return string Converted chars\n *\/"}]},"get_gmt_from_date":{"name":"get_gmt_from_date","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$format","rank":1,"variadic":false,"reference":false,"default":"'Y-m-d H:i:s'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns a date in the GMT equivalent.\n *\n * Requires and returns a date in the Y-m-d H:i:s format. If there is a\n * timezone_string available, the date is assumed to be in that timezone,\n * otherwise it simply subtracts the value of the 'gmt_offset' option. Return\n * format can be overridden using the $format parameter.\n *\n * @since 1.2.0\n *\n * @param string $string The date to be converted.\n * @param string $format The format string for the returned date (default is Y-m-d H:i:s)\n * @return string GMT version of the date provided.\n *\/"}]},"get_date_from_gmt":{"name":"get_date_from_gmt","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$format","rank":1,"variadic":false,"reference":false,"default":"'Y-m-d H:i:s'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Converts a GMT date into the correct format for the blog.\n *\n * Requires and returns a date in the Y-m-d H:i:s format. If there is a\n * timezone_string available, the returned date is in that timezone, otherwise\n * it simply adds the value of gmt_offset. Return format can be overridden\n * using the $format parameter\n *\n * @since 1.2.0\n *\n * @param string $string The date to be converted.\n * @param string $format The format string for the returned date (default is Y-m-d H:i:s)\n * @return string Formatted date relative to the timezone \/ GMT offset.\n *\/"}]},"iso8601_timezone_to_offset":{"name":"iso8601_timezone_to_offset","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$timezone","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Computes an offset in seconds from an iso8601 timezone.\n *\n * @since 1.5.0\n *\n * @param string $timezone Either 'Z' for 0 offset or '\u00b1hhmm'.\n * @return int|float The offset in seconds.\n *\/"}]},"iso8601_to_datetime":{"name":"iso8601_to_datetime","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$date_string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$timezone","rank":1,"variadic":false,"reference":false,"default":"'user'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Converts an iso8601 date to MySQL DateTime format used by post_date[_gmt].\n *\n * @since 1.5.0\n *\n * @param string $date_string Date and time in ISO 8601 format {@link https:\/\/en.wikipedia.org\/wiki\/ISO_8601}.\n * @param string $timezone    Optional. If set to GMT returns the time minus gmt_offset. Default is 'user'.\n * @return string The date and time in MySQL DateTime format - Y-m-d H:i:s.\n *\/"}]},"sanitize_email":{"name":"sanitize_email","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$email","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Strips out all characters that are not allowable in an email.\n *\n * @since 1.5.0\n *\n * @param string $email Email address to filter.\n * @return string Filtered email address.\n *\/"}]},"human_time_diff":{"name":"human_time_diff","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$from","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$to","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines the difference between two timestamps.\n *\n * The difference is returned in a human readable format such as \"1 hour\",\n * \"5 mins\", \"2 days\".\n *\n * @since 1.5.0\n *\n * @param int $from Unix timestamp from which the difference begins.\n * @param int $to   Optional. Unix timestamp to end the time difference. Default becomes time() if not set.\n * @return string Human readable time difference.\n *\/"}]},"wp_trim_excerpt":{"name":"wp_trim_excerpt","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Generates an excerpt from the content, if needed.\n *\n * The excerpt word amount will be 55 words and if the amount is greater than\n * that, then the string ' [&hellip;]' will be appended to the excerpt. If the string\n * is less than 55 words, then the content will be returned as is.\n *\n * The 55 word limit can be modified by plugins\/themes using the {@see 'excerpt_length'} filter\n * The ' [&hellip;]' string can be modified by plugins\/themes using the {@see 'excerpt_more'} filter\n *\n * @since 1.5.0\n *\n * @param string $text Optional. The excerpt. If set to empty, an excerpt is generated.\n * @return string The excerpt.\n *\/"}]},"wp_trim_words":{"name":"wp_trim_words","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$num_words","rank":1,"variadic":false,"reference":false,"default":"55","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$more","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Trims text to a certain number of words.\n *\n * This function is localized. For languages that count 'words' by the individual\n * character (such as East Asian languages), the $num_words argument will apply\n * to the number of individual characters.\n *\n * @since 3.3.0\n *\n * @param string $text      Text to trim.\n * @param int    $num_words Number of words. Default 55.\n * @param string $more      Optional. What to append if $text needs to be trimmed. Default '&hellip;'.\n * @return string Trimmed text.\n *\/"}]},"ent2ncr":{"name":"ent2ncr","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Converts named entities into numbered entities.\n *\n * @since 1.5.1\n *\n * @param string $text The text within which entities will be converted.\n * @return string Text with converted entities.\n *\/"}]},"format_for_editor":{"name":"format_for_editor","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default_editor","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Formats text for the editor.\n *\n * Generally the browsers treat everything inside a textarea as text, but\n * it is still a good idea to HTML entity encode `<`, `>` and `&` in the content.\n *\n * The filter {@see 'format_for_editor'} is applied here. If `$text` is empty the\n * filter will be applied to an empty string.\n *\n * @since 4.3.0\n *\n * @see _WP_Editors::editor()\n *\n * @param string $text           The text to be formatted.\n * @param string $default_editor The default editor for the current user.\n *                               It is usually either 'html' or 'tinymce'.\n * @return string The formatted text after filter is applied.\n *\/"}]},"_deep_replace":{"name":"_deep_replace","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$search","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$subject","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Perform a deep string replace operation to ensure the values in $search are no longer present\n *\n * Repeats the replacement operation until it no longer replaces anything so as to remove \"nested\" values\n * e.g. $subject = '%0%0%0DDD', $search ='%0D', $result ='' rather than the '%0%0DD' that\n * str_replace would return\n *\n * @since 2.8.1\n * @access private\n *\n * @param string|array $search  The value being searched for, otherwise known as the needle.\n *                              An array may be used to designate multiple needles.\n * @param string       $subject The string being searched and replaced on, otherwise known as the haystack.\n * @return string The string with the replaced svalues.\n *\/"}]},"esc_sql":{"name":"esc_sql","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Escapes data for use in a MySQL query.\n *\n * Usually you should prepare queries using wpdb::prepare().\n * Sometimes, spot-escaping is required or useful. One example\n * is preparing an array for use in an IN clause.\n *\n * @since 2.8.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string|array $data Unescaped data\n * @return string|array Escaped data\n *\/"}]},"esc_url":{"name":"esc_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$protocols","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$_context","rank":2,"variadic":false,"reference":false,"default":"'display'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks and cleans a URL.\n *\n * A number of characters are removed from the URL. If the URL is for displaying\n * (the default behaviour) ampersands are also replaced. The {@see 'clean_url'} filter\n * is applied to the returned cleaned URL.\n *\n * @since 2.8.0\n *\n * @param string $url       The URL to be cleaned.\n * @param array  $protocols Optional. An array of acceptable protocols.\n *\t\t                    Defaults to return value of wp_allowed_protocols()\n * @param string $_context  Private. Use esc_url_raw() for database usage.\n * @return string The cleaned $url after the {@see 'clean_url'} filter is applied.\n *\/"}]},"esc_url_raw":{"name":"esc_url_raw","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$protocols","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Performs esc_url() for database usage.\n *\n * @since 2.8.0\n *\n * @param string $url       The URL to be cleaned.\n * @param array  $protocols An array of acceptable protocols.\n * @return string The cleaned URL.\n *\/"}]},"htmlentities2":{"name":"htmlentities2","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$myHTML","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert entities, while preserving already-encoded entities.\n *\n * @link https:\/\/secure.php.net\/htmlentities Borrowed from the PHP Manual user notes.\n *\n * @since 1.2.2\n *\n * @param string $myHTML The text to be converted.\n * @return string Converted text.\n *\/"}]},"esc_js":{"name":"esc_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Escape single quotes, htmlspecialchar \" < > &, and fix line endings.\n *\n * Escapes text strings for echoing in JS. It is intended to be used for inline JS\n * (in a tag attribute, for example onclick=\"...\"). Note that the strings have to\n * be in single quotes. The {@see 'js_escape'} filter is also applied here.\n *\n * @since 2.8.0\n *\n * @param string $text The text to be escaped.\n * @return string Escaped text.\n *\/"}]},"esc_html":{"name":"esc_html","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Escaping for HTML blocks.\n *\n * @since 2.8.0\n *\n * @param string $text\n * @return string\n *\/"}]},"esc_textarea":{"name":"esc_textarea","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Escaping for textarea values.\n *\n * @since 3.1.0\n *\n * @param string $text\n * @return string\n *\/"}]},"tag_escape":{"name":"tag_escape","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Escape an HTML tag name.\n *\n * @since 2.5.0\n *\n * @param string $tag_name\n * @return string\n *\/"}]},"wp_make_link_relative":{"name":"wp_make_link_relative","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert full URL paths to absolute paths.\n *\n * Removes the http or https protocols and the domain. Keeps the path '\/' at the\n * beginning, so it isn't a true relative link, but from the web root base.\n *\n * @since 2.1.0\n * @since 4.1.0 Support was added for relative URLs.\n *\n * @param string $link Full URL path.\n * @return string Absolute path.\n *\/"}]},"sanitize_option":{"name":"sanitize_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitises various option values based on the nature of the option.\n *\n * This is basically a switch statement which will pass $value through a number\n * of functions depending on the $option.\n *\n * @since 2.0.5\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $option The name of the option.\n * @param string $value  The unsanitised value.\n * @return string Sanitized value.\n *\/"}]},"map_deep":{"name":"map_deep","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Maps a function to all non-iterable elements of an array or an object.\n *\n * This is similar to `array_walk_recursive()` but acts upon objects too.\n *\n * @since 4.4.0\n *\n * @param mixed    $value    The array, object, or scalar.\n * @param callable $callback The function to map onto $value.\n * @return mixed The value with the callback applied to all non-arrays and non-objects inside it.\n *\/"}]},"wp_parse_str":{"name":"wp_parse_str","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$array","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Parses a string into variables to be stored in an array.\n *\n * Uses {@link https:\/\/secure.php.net\/parse_str parse_str()} and stripslashes if\n * {@link https:\/\/secure.php.net\/magic_quotes magic_quotes_gpc} is on.\n *\n * @since 2.2.1\n *\n * @param string $string The string to be parsed.\n * @param array  $array  Variables will be stored in this array.\n *\/"}]},"wp_pre_kses_less_than":{"name":"wp_pre_kses_less_than","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert lone less than signs.\n *\n * KSES already converts lone greater than signs.\n *\n * @since 2.3.0\n *\n * @param string $text Text to be converted.\n * @return string Converted text.\n *\/"}]},"wp_pre_kses_less_than_callback":{"name":"wp_pre_kses_less_than_callback","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback function used by preg_replace.\n *\n * @since 2.3.0\n *\n * @param array $matches Populated by matches to preg_replace.\n * @return string The text returned after esc_html if needed.\n *\/"}]},"wp_sprintf":{"name":"wp_sprintf","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$pattern","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * WordPress implementation of PHP sprintf() with filters.\n *\n * @since 2.5.0\n * @link https:\/\/secure.php.net\/sprintf\n *\n * @param string $pattern   The string which formatted args are inserted.\n * @param mixed  $args ,... Arguments to be formatted into the $pattern string.\n * @return string The formatted string.\n *\/"}]},"wp_sprintf_l":{"name":"wp_sprintf_l","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$pattern","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Localize list items before the rest of the content.\n *\n * The '%l' must be at the first characters can then contain the rest of the\n * content. The list items will have ', ', ', and', and ' and ' added depending\n * on the amount of list items in the $args parameter.\n *\n * @since 2.5.0\n *\n * @param string $pattern Content containing '%l' at the beginning.\n * @param array  $args    List items to prepend to the content and replace '%l'.\n * @return string Localized list items and rest of the content.\n *\/"}]},"wp_html_excerpt":{"name":"wp_html_excerpt","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$count","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$more","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Safely extracts not more than the first $count characters from html string.\n *\n * UTF-8, tags and entities safe prefix extraction. Entities inside will *NOT*\n * be counted as one character. For example &amp; will be counted as 4, &lt; as\n * 3, etc.\n *\n * @since 2.5.0\n *\n * @param string $str   String to get the excerpt from.\n * @param int    $count Maximum number of characters to take.\n * @param string $more  Optional. What to append if $str needs to be trimmed. Defaults to empty string.\n * @return string The excerpt.\n *\/"}]},"links_add_base_url":{"name":"links_add_base_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$base","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attrs","rank":2,"variadic":false,"reference":false,"default":"array('src', 'href')","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a Base url to relative links in passed content.\n *\n * By default it supports the 'src' and 'href' attributes. However this can be\n * changed via the 3rd param.\n *\n * @since 2.7.0\n *\n * @global string $_links_add_base\n *\n * @param string $content String to search for links in.\n * @param string $base    The base URL to prefix to links.\n * @param array  $attrs   The attributes which should be processed.\n * @return string The processed content.\n *\/"}]},"_links_add_base":{"name":"_links_add_base","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$m","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback to add a base url to relative links in passed content.\n *\n * @since 2.7.0\n * @access private\n *\n * @global string $_links_add_base\n *\n * @param string $m The matched link.\n * @return string The processed link.\n *\/"}]},"links_add_target":{"name":"links_add_target","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$target","rank":1,"variadic":false,"reference":false,"default":"'_blank'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tags","rank":2,"variadic":false,"reference":false,"default":"array('a')","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds a Target attribute to all links in passed content.\n *\n * This function by default only applies to `<a>` tags, however this can be\n * modified by the 3rd param.\n *\n * *NOTE:* Any current target attributed will be stripped and replaced.\n *\n * @since 2.7.0\n *\n * @global string $_links_add_target\n *\n * @param string $content String to search for links in.\n * @param string $target  The Target to add to the links.\n * @param array  $tags    An array of tags to apply to.\n * @return string The processed content.\n *\/"}]},"_links_add_target":{"name":"_links_add_target","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$m","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback to add a target attribute to all links in passed content.\n *\n * @since 2.7.0\n * @access private\n *\n * @global string $_links_add_target\n *\n * @param string $m The matched link.\n * @return string The processed link.\n *\/"}]},"normalize_whitespace":{"name":"normalize_whitespace","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Normalize EOL characters and strip duplicate whitespace.\n *\n * @since 2.7.0\n *\n * @param string $str The string to normalize.\n * @return string The normalized string.\n *\/"}]},"wp_strip_all_tags":{"name":"wp_strip_all_tags","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$remove_breaks","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Properly strip all HTML tags including script and style\n *\n * This differs from strip_tags() because it removes the contents of\n * the `<script>` and `<style>` tags. E.g. `strip_tags( '<script>something<\/script>' )`\n * will return 'something'. wp_strip_all_tags will return ''\n *\n * @since 2.9.0\n *\n * @param string $string        String containing HTML tags\n * @param bool   $remove_breaks Optional. Whether to remove left over line breaks and white space chars\n * @return string The processed string.\n *\/"}]},"sanitize_text_field":{"name":"sanitize_text_field","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes a string from user input or from the database.\n *\n * - Checks for invalid UTF-8,\n * - Converts single `<` characters to entities\n * - Strips all tags\n * - Removes line breaks, tabs, and extra whitespace\n * - Strips octets\n *\n * @since 2.9.0\n *\n * @see sanitize_textarea_field()\n * @see wp_check_invalid_utf8()\n * @see wp_strip_all_tags()\n *\n * @param string $str String to sanitize.\n * @return string Sanitized string.\n *\/"}]},"sanitize_textarea_field":{"name":"sanitize_textarea_field","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes a multiline string from user input or from the database.\n *\n * The function is like sanitize_text_field(), but preserves\n * new lines (\\n) and other whitespace, which are legitimate\n * input in textarea elements.\n *\n * @see sanitize_text_field()\n *\n * @since 4.7.0\n *\n * @param string $str String to sanitize.\n * @return string Sanitized string.\n *\/"}]},"_sanitize_text_fields":{"name":"_sanitize_text_fields","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$keep_newlines","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Internal helper function to sanitize a string from user input or from the db\n *\n * @since 4.7.0\n * @access private\n *\n * @param string $str String to sanitize.\n * @param bool $keep_newlines optional Whether to keep newlines. Default: false.\n * @return string Sanitized string.\n *\/"}]},"wp_basename":{"name":"wp_basename","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$suffix","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * i18n friendly version of basename()\n *\n * @since 3.1.0\n *\n * @param string $path   A path.\n * @param string $suffix If the filename ends in suffix this will also be cut off.\n * @return string\n *\/"}]},"capital_P_dangit":{"name":"capital_P_dangit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Forever eliminate \"Wordpress\" from the planet (or at least the little bit we can influence).\n *\n * Violating our coding standards for a good function name.\n *\n * @since 3.0.0\n *\n * @staticvar string|false $dblq\n *\n * @param string $text The text to be modified.\n * @return string The modified text.\n *\/"}]},"sanitize_mime_type":{"name":"sanitize_mime_type","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$mime_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize a mime type\n *\n * @since 3.1.3\n *\n * @param string $mime_type Mime type\n * @return string Sanitized mime type\n *\/"}]},"sanitize_trackback_urls":{"name":"sanitize_trackback_urls","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$to_ping","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize space or carriage return separated URLs that are used to send trackbacks.\n *\n * @since 3.4.0\n *\n * @param string $to_ping Space or carriage return separated URLs\n * @return string URLs starting with the http or https protocol, separated by a carriage return.\n *\/"}]},"wp_slash":{"name":"wp_slash","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add slashes to a string or array of strings.\n *\n * This should be used when preparing data for core API that expects slashed data.\n * This should not be used to escape data going directly into an SQL query.\n *\n * @since 3.6.0\n *\n * @param string|array $value String or array of strings to slash.\n * @return string|array Slashed $value\n *\/"}]},"wp_unslash":{"name":"wp_unslash","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove slashes from a string or array of strings.\n *\n * This should be used to remove slashes from data passed to core API that\n * expects data to be unslashed.\n *\n * @since 3.6.0\n *\n * @param string|array $value String or array of strings to unslash.\n * @return string|array Unslashed $value\n *\/"}]},"get_url_in_content":{"name":"get_url_in_content","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Extract and return the first URL from passed content.\n *\n * @since 3.6.0\n *\n * @param string $content A string which might contain a URL.\n * @return string|false The found URL.\n *\/"}]},"wp_spaces_regexp":{"name":"wp_spaces_regexp","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the regexp for common whitespace characters.\n *\n * By default, spaces include new lines, tabs, nbsp entities, and the UTF-8 nbsp.\n * This is designed to replace the PCRE \\s sequence.  In ticket #22692, that\n * sequence was found to be unreliable due to random inclusion of the A0 byte.\n *\n * @since 4.0.0\n *\n * @staticvar string $spaces\n *\n * @return string The spaces regexp.\n *\/"}]},"print_emoji_styles":{"name":"print_emoji_styles","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print the important emoji-related styles.\n *\n * @since 4.2.0\n *\n * @staticvar bool $printed\n *\/"}]},"print_emoji_detection_script":{"name":"print_emoji_detection_script","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print the inline Emoji detection script if it is not already printed.\n *\n * @since 4.2.0\n * @staticvar bool $printed\n *\/"}]},"_print_emoji_detection_script":{"name":"_print_emoji_detection_script","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints inline Emoji dection script\n *\n * @ignore\n * @since 4.6.0\n * @access private\n *\/"}]},"wp_encode_emoji":{"name":"wp_encode_emoji","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert any 4 byte emoji in a string to their equivalent HTML entity.\n *\n * Currently, only Unicode 7 emoji are supported. Skin tone modifiers are allowed,\n * all other Unicode 8 emoji will be added when the spec is finalised.\n *\n * This allows us to store emoji in a DB using the utf8 character set.\n *\n * @since 4.2.0\n *\n * @param string $content The content to encode.\n * @return string The encoded content.\n *\/"}]},"wp_staticize_emoji":{"name":"wp_staticize_emoji","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert emoji to a static img element.\n *\n * @since 4.2.0\n *\n * @param string $text The content to encode.\n * @return string The encoded content.\n *\/"}]},"wp_staticize_emoji_for_email":{"name":"wp_staticize_emoji_for_email","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$mail","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert emoji in emails into static images.\n *\n * @since 4.2.0\n *\n * @param array $mail The email data array.\n * @return array The email data array, with emoji in the message staticized.\n *\/"}]},"url_shorten":{"name":"url_shorten","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$length","rank":1,"variadic":false,"reference":false,"default":"35","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Shorten a URL, to be used as link text.\n *\n * @since 1.2.0\n * @since 4.4.0 Moved to wp-includes\/formatting.php from wp-admin\/includes\/misc.php and added $length param.\n *\n * @param string $url    URL to shorten.\n * @param int    $length Optional. Maximum length of the shortened URL. Default 35 characters.\n * @return string Shortened URL.\n *\/"}]},"sanitize_hex_color":{"name":"sanitize_hex_color","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$color","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes a hex color.\n *\n * Returns either '', a 3 or 6 digit hex color (with #), or nothing.\n * For sanitizing values without a #, see sanitize_hex_color_no_hash().\n *\n * @since 3.4.0\n *\n * @param string $color\n * @return string|void\n *\/"}]},"sanitize_hex_color_no_hash":{"name":"sanitize_hex_color_no_hash","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$color","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes a hex color without a hash. Use sanitize_hex_color() when possible.\n *\n * Saving hex colors without a hash puts the burden of adding the hash on the\n * UI, which makes it difficult to use or upgrade to other color types such as\n * rgba, hsl, rgb, and html color names.\n *\n * Returns either '', a 3 or 6 digit hex color (without a #), or null.\n *\n * @since 3.4.0\n *\n * @param string $color\n * @return string|null\n *\/"}]},"maybe_hash_hex_color":{"name":"maybe_hash_hex_color","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$color","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ensures that any hex color is properly hashed.\n * Otherwise, returns value untouched.\n *\n * This method should only be necessary if using sanitize_hex_color_no_hash().\n *\n * @since 3.4.0\n *\n * @param string $color\n * @return string\n *\/"}]},"get_sitestats":{"name":"get_sitestats","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Multisite WordPress API\n *\n * @package WordPress\n * @subpackage Multisite\n * @since 3.0.0\n *\/"},{"phpdoc":"\/**\n * Gets the network's site and user counts.\n *\n * @since MU 1.0\n *\n * @return array Site and user count for the network.\n *\/"}]},"get_active_blog_for_user":{"name":"get_active_blog_for_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get one of a user's active blogs\n *\n * Returns the user's primary blog, if they have one and\n * it is active. If it's inactive, function returns another\n * active blog of the user. If none are found, the user\n * is added as a Subscriber to the Dashboard Blog and that blog\n * is returned.\n *\n * @since MU 1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int $user_id The unique ID of the user\n * @return WP_Site|void The blog object\n *\/"}]},"get_user_count":{"name":"get_user_count","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * The number of active users in your installation.\n *\n * The count is cached and updated twice daily. This is not a live count.\n *\n * @since MU 2.7\n *\n * @return int\n *\/"}]},"get_blog_count":{"name":"get_blog_count","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$network_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * The number of active sites on your installation.\n *\n * The count is cached and updated twice daily. This is not a live count.\n *\n * @since MU 1.0\n *\n * @param int $network_id Deprecated, not supported.\n * @return int\n *\/"}]},"get_blog_post":{"name":"get_blog_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get a blog post from any site on the network.\n *\n * @since MU 1.0\n *\n * @param int $blog_id ID of the blog.\n * @param int $post_id ID of the post you're looking for.\n * @return WP_Post|null WP_Post on success or null on failure\n *\/"}]},"add_user_to_blog":{"name":"add_user_to_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$role","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds a user to a blog.\n *\n * Use the {@see 'add_user_to_blog'} action to fire an event when users are added to a blog.\n *\n * @since MU 1.0\n *\n * @param int    $blog_id ID of the blog you're adding the user to.\n * @param int    $user_id ID of the user you're adding.\n * @param string $role    The role you want the user to have\n * @return true|WP_Error\n *\/"}]},"remove_user_from_blog":{"name":"remove_user_from_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$reassign","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove a user from a blog.\n *\n * Use the {@see 'remove_user_from_blog'} action to fire an event when\n * users are removed from a blog.\n *\n * Accepts an optional `$reassign` parameter, if you want to\n * reassign the user's blog posts to another user upon removal.\n *\n * @since MU 1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int    $user_id  ID of the user you're removing.\n * @param int    $blog_id  ID of the blog you're removing the user from.\n * @param string $reassign Optional. A user to whom to reassign posts.\n * @return true|WP_Error\n *\/"}]},"get_blog_permalink":{"name":"get_blog_permalink","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the permalink for a post on another blog.\n *\n * @since MU 1.0\n *\n * @param int $blog_id ID of the source blog.\n * @param int $post_id ID of the desired post.\n * @return string The post's permalink\n *\/"}]},"get_blog_id_from_url":{"name":"get_blog_id_from_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"'\/'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get a blog's numeric ID from its URL.\n *\n * On a subdirectory installation like example.com\/blog1\/,\n * $domain will be the root 'example.com' and $path the\n * subdirectory '\/blog1\/'. With subdomains like blog1.example.com,\n * $domain is 'blog1.example.com' and $path is '\/'.\n *\n * @since MU 2.6.5\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $domain\n * @param string $path   Optional. Not required for subdomain installations.\n * @return int 0 if no blog found, otherwise the ID of the matching blog\n *\/"}]},"is_email_address_unsafe":{"name":"is_email_address_unsafe","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_email","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks an email address against a list of banned domains.\n *\n * This function checks against the Banned Email Domains list\n * at wp-admin\/network\/settings.php. The check is only run on\n * self-registrations; user creation at wp-admin\/network\/users.php\n * bypasses this check.\n *\n * @since MU\n *\n * @param string $user_email The email provided by the user at registration.\n * @return bool Returns true when the email address is banned.\n *\/"}]},"wpmu_validate_user_signup":{"name":"wpmu_validate_user_signup","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_email","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize and validate data required for a user sign-up.\n *\n * Verifies the validity and uniqueness of user names and user email addresses,\n * and checks email addresses against admin-provided domain whitelists and blacklists.\n *\n * The {@see 'wpmu_validate_user_signup'} hook provides an easy way to modify the sign-up\n * process. The value $result, which is passed to the hook, contains both the user-provided\n * info and the error messages created by the function. {@see 'wpmu_validate_user_signup'}\n * allows you to process the data in any way you'd like, and unset the relevant errors if\n * necessary.\n *\n * @since MU\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $user_name  The login name provided by the user.\n * @param string $user_email The email provided by the user.\n * @return array Contains username, email, and error messages.\n *\/"}]},"wpmu_validate_blog_signup":{"name":"wpmu_validate_blog_signup","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blogname","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Processes new site registrations.\n *\n * Checks the data provided by the user during blog signup. Verifies\n * the validity and uniqueness of blog paths and domains.\n *\n * This function prevents the current user from registering a new site\n * with a blogname equivalent to another user's login name. Passing the\n * $user parameter to the function, where $user is the other user, is\n * effectively an override of this limitation.\n *\n * Filter {@see 'wpmu_validate_blog_signup'} if you want to modify\n * the way that WordPress validates new site signups.\n *\n * @since MU\n *\n * @global wpdb   $wpdb\n * @global string $domain\n *\n * @param string         $blogname   The blog name provided by the user. Must be unique.\n * @param string         $blog_title The blog title provided by the user.\n * @param WP_User|string $user       Optional. The user object to check against the new site name.\n * @return array Contains the new site data and error messages.\n *\/"}]},"wpmu_signup_blog":{"name":"wpmu_signup_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_email","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta","rank":5,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Record site signup information for future activation.\n *\n * @since MU\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $domain     The requested domain.\n * @param string $path       The requested path.\n * @param string $title      The requested site title.\n * @param string $user       The user's requested login name.\n * @param string $user_email The user's email address.\n * @param array  $meta       By default, contains the requested privacy setting and lang_id.\n *\/"}]},"wpmu_signup_user":{"name":"wpmu_signup_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_email","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Record user signup information for future activation.\n *\n * This function is used when user registration is open but\n * new site registration is not.\n *\n * @since MU\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $user       The user's requested login name.\n * @param string $user_email The user's email address.\n * @param array  $meta       By default, this is an empty array.\n *\/"}]},"wpmu_signup_blog_notification":{"name":"wpmu_signup_blog_notification","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_login","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_email","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key","rank":5,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta","rank":6,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Notify user of signup success.\n *\n * This is the notification function used when site registration\n * is enabled.\n *\n * Filter {@see 'wpmu_signup_blog_notification'} to bypass this function or\n * replace it with your own notification behavior.\n *\n * Filter {@see 'wpmu_signup_blog_notification_email'} and\n * {@see 'wpmu_signup_blog_notification_subject'} to change the content\n * and subject line of the email sent to newly registered users.\n *\n * @since MU\n *\n * @param string $domain     The new blog domain.\n * @param string $path       The new blog path.\n * @param string $title      The site title.\n * @param string $user_login The user's login name.\n * @param string $user_email The user's email address.\n * @param string $key        The activation key created in wpmu_signup_blog()\n * @param array  $meta       By default, contains the requested privacy setting and lang_id.\n * @return bool\n *\/"}]},"wpmu_signup_user_notification":{"name":"wpmu_signup_user_notification","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_login","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_email","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Notify user of signup success.\n *\n * This is the notification function used when no new site has\n * been requested.\n *\n * Filter {@see 'wpmu_signup_user_notification'} to bypass this function or\n * replace it with your own notification behavior.\n *\n * Filter {@see 'wpmu_signup_user_notification_email'} and\n * {@see 'wpmu_signup_user_notification_subject'} to change the content\n * and subject line of the email sent to newly registered users.\n *\n * @since MU\n *\n * @param string $user_login The user's login name.\n * @param string $user_email The user's email address.\n * @param string $key        The activation key created in wpmu_signup_user()\n * @param array  $meta       By default, an empty array.\n * @return bool\n *\/"}]},"wpmu_activate_signup":{"name":"wpmu_activate_signup","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Activate a signup.\n *\n * Hook to {@see 'wpmu_activate_user'} or {@see 'wpmu_activate_blog'} for events\n * that should happen only when users or sites are self-created (since\n * those actions are not called when users and sites are created\n * by a Super Admin).\n *\n * @since MU\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $key The activation key provided to the user.\n * @return array|WP_Error An array containing information about the activated user and\/or blog\n *\/"}]},"wpmu_create_user":{"name":"wpmu_create_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$password","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$email","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create a user.\n *\n * This function runs when a user self-registers as well as when\n * a Super Admin creates a new user. Hook to {@see 'wpmu_new_user'} for events\n * that should affect all new users, but only on Multisite (otherwise\n * use {@see'user_register'}).\n *\n * @since MU\n *\n * @param string $user_name The new user's login name.\n * @param string $password  The new user's password.\n * @param string $email     The new user's email address.\n * @return int|false Returns false on failure, or int $user_id on success\n *\/"}]},"wpmu_create_blog":{"name":"wpmu_create_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_id","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta","rank":4,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$site_id","rank":5,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create a site.\n *\n * This function runs when a user self-registers a new site as well\n * as when a Super Admin creates a new site. Hook to {@see 'wpmu_new_blog'}\n * for events that should affect all new sites.\n *\n * On subdirectory installs, $domain is the same as the main site's\n * domain, and the path is the subdirectory name (eg 'example.com'\n * and '\/blog1\/'). On subdomain installs, $domain is the new subdomain +\n * root domain (eg 'blog1.example.com'), and $path is '\/'.\n *\n * @since MU\n *\n * @param string $domain  The new site's domain.\n * @param string $path    The new site's path.\n * @param string $title   The new site's title.\n * @param int    $user_id The user ID of the new site's admin.\n * @param array  $meta    Optional. Used to set initial site options.\n * @param int    $site_id Optional. Only relevant on multi-network installs.\n * @return int|WP_Error Returns WP_Error object on failure, int $blog_id on success\n *\/"}]},"newblog_notify_siteadmin":{"name":"newblog_notify_siteadmin","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Notifies the network admin that a new site has been activated.\n *\n * Filter {@see 'newblog_notify_siteadmin'} to change the content of\n * the notification email.\n *\n * @since MU\n *\n * @param int    $blog_id    The new site's ID.\n * @param string $deprecated Not used.\n * @return bool\n *\/"}]},"newuser_notify_siteadmin":{"name":"newuser_notify_siteadmin","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Notifies the network admin that a new user has been activated.\n *\n * Filter {@see 'newuser_notify_siteadmin'} to change the content of\n * the notification email.\n *\n * @since MU\n *\n * @param int $user_id The new user's ID.\n * @return bool\n *\/"}]},"domain_exists":{"name":"domain_exists","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$site_id","rank":2,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether a blogname is already taken.\n *\n * Used during the new site registration process to ensure\n * that each blogname is unique.\n *\n * @since MU\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $domain  The domain to be checked.\n * @param string $path    The path to be checked.\n * @param int    $site_id Optional. Relevant only on multi-network installs.\n * @return int\n *\/"}]},"insert_blog":{"name":"insert_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$site_id","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Store basic site info in the blogs table.\n *\n * This function creates a row in the wp_blogs table and returns\n * the new blog's ID. It is the first step in creating a new blog.\n *\n * @since MU\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $domain  The domain of the new site.\n * @param string $path    The path of the new site.\n * @param int    $site_id Unless you're running a multi-network install, be sure to set this value to 1.\n * @return int|false The ID of the new row\n *\/"}]},"install_blog":{"name":"install_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_title","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Install an empty blog.\n *\n * Creates the new blog tables and options. If calling this function\n * directly, be sure to use switch_to_blog() first, so that $wpdb\n * points to the new blog.\n *\n * @since MU\n *\n * @global wpdb     $wpdb\n * @global WP_Roles $wp_roles\n *\n * @param int    $blog_id    The value returned by insert_blog().\n * @param string $blog_title The title of the new site.\n *\/"}]},"install_blog_defaults":{"name":"install_blog_defaults","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set blog defaults.\n *\n * This function creates a row in the wp_blogs table.\n *\n * @since MU\n * @deprecated MU\n * @deprecated Use wp_install_defaults()\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int $blog_id Ignored in this function.\n * @param int $user_id\n *\/"}]},"wpmu_welcome_notification":{"name":"wpmu_welcome_notification","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$password","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta","rank":4,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Notify a user that their blog activation has been successful.\n *\n * Filter {@see 'wpmu_welcome_notification'} to disable or bypass.\n *\n * Filter {@see 'update_welcome_email'} and {@see 'update_welcome_subject'} to\n * modify the content and subject line of the notification email.\n *\n * @since MU\n *\n * @param int    $blog_id\n * @param int    $user_id\n * @param string $password\n * @param string $title    The new blog's title\n * @param array  $meta     Optional. Not used in the default function, but is passed along to hooks for customization.\n * @return bool\n *\/"}]},"wpmu_welcome_user_notification":{"name":"wpmu_welcome_user_notification","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$password","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Notify a user that their account activation has been successful.\n *\n * Filter {@see 'wpmu_welcome_user_notification'} to disable or bypass.\n *\n * Filter {@see 'update_welcome_user_email'} and {@see 'update_welcome_user_subject'} to\n * modify the content and subject line of the notification email.\n *\n * @since MU\n *\n * @param int    $user_id\n * @param string $password\n * @param array  $meta     Optional. Not used in the default function, but is passed along to hooks for customization.\n * @return bool\n *\/"}]},"get_current_site":{"name":"get_current_site","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the current network.\n *\n * Returns an object containing the 'id', 'domain', 'path', and 'site_name'\n * properties of the network being viewed.\n *\n * @see wpmu_current_site()\n *\n * @since MU\n *\n * @global WP_Network $current_site\n *\n * @return WP_Network\n *\/"}]},"get_most_recent_post_of_user":{"name":"get_most_recent_post_of_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get a user's most recent post.\n *\n * Walks through each of a user's blogs to find the post with\n * the most recent post_date_gmt.\n *\n * @since MU\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int $user_id\n * @return array Contains the blog_id, post_id, post_date_gmt, and post_gmt_ts\n *\/"}]},"get_dirsize":{"name":"get_dirsize","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$directory","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the size of a directory.\n *\n * A helper function that is used primarily to check whether\n * a blog has exceeded its allowed upload space.\n *\n * @since MU\n *\n * @param string $directory Full path of a directory.\n * @return int Size of the directory in MB.\n *\/"}]},"recurse_dirsize":{"name":"recurse_dirsize","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$directory","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$exclude","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the size of a directory recursively.\n *\n * Used by get_dirsize() to get a directory's size when it contains\n * other directories.\n *\n * @since MU\n * @since 4.3.0 $exclude parameter added.\n *\n * @param string $directory Full path of a directory.\n * @param string $exclude   Optional. Full path of a subdirectory to exclude from the total.\n * @return int|false Size in MB if a valid directory. False if not.\n *\/"}]},"check_upload_mimes":{"name":"check_upload_mimes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$mimes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check an array of MIME types against a whitelist.\n *\n * WordPress ships with a set of allowed upload filetypes,\n * which is defined in wp-includes\/functions.php in\n * get_allowed_mime_types(). This function is used to filter\n * that list against the filetype whitelist provided by Multisite\n * Super Admins at wp-admin\/network\/settings.php.\n *\n * @since MU\n *\n * @param array $mimes\n * @return array\n *\/"}]},"update_posts_count":{"name":"update_posts_count","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$deprecated","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update a blog's post count.\n *\n * WordPress MS stores a blog's post count as an option so as\n * to avoid extraneous COUNTs when a blog's details are fetched\n * with get_site(). This function is called when posts are published\n * or unpublished to make sure the count stays current.\n *\n * @since MU\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $deprecated Not used.\n *\/"}]},"wpmu_log_new_registrations":{"name":"wpmu_log_new_registrations","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Logs user registrations.\n *\n * @since MU\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int $blog_id\n * @param int $user_id\n *\/"}]},"global_terms":{"name":"global_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Maintains a canonical list of terms by syncing terms created for each blog with the global terms table.\n *\n * @since 3.0.0\n *\n * @see term_id_filter\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n * @staticvar int $global_terms_recurse\n *\n * @param int    $term_id    An ID for a term on the current blog.\n * @param string $deprecated Not used.\n * @return int An ID from the global terms table mapped from $term_id.\n *\/"}]},"redirect_this_site":{"name":"redirect_this_site","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$deprecated","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ensure that the current site's domain is listed in the allowed redirect host list.\n *\n * @see wp_validate_redirect()\n * @since MU\n *\n * @param array|string $deprecated Not used.\n * @return array The current site's domain\n *\/"}]},"upload_is_file_too_big":{"name":"upload_is_file_too_big","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$upload","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether an upload is too big.\n *\n * @since MU\n *\n * @blessed\n *\n * @param array $upload\n * @return string|array If the upload is under the size limit, $upload is returned. Otherwise returns an error message.\n *\/"}]},"signup_nonce_fields":{"name":"signup_nonce_fields","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a nonce field to the signup page.\n *\n * @since MU\n *\/"}]},"signup_nonce_check":{"name":"signup_nonce_check","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$result","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Process the signup nonce created in signup_nonce_fields().\n *\n * @since MU\n *\n * @param array $result\n * @return array\n *\/"}]},"maybe_redirect_404":{"name":"maybe_redirect_404","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Correct 404 redirects when NOBLOGREDIRECT is defined.\n *\n * @since MU\n *\/"}]},"maybe_add_existing_user_to_blog":{"name":"maybe_add_existing_user_to_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a new user to a blog by visiting \/newbloguser\/username\/.\n *\n * This will only work when the user's details are saved as an option\n * keyed as 'new_user_x', where 'x' is the username of the user to be\n * added, as when a user is invited through the regular WP Add User interface.\n *\n * @since MU\n *\/"}]},"add_existing_user_to_blog":{"name":"add_existing_user_to_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$details","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a user to a blog based on details from maybe_add_existing_user_to_blog().\n *\n * @since MU\n *\n * @param array $details\n * @return true|WP_Error|void\n *\/"}]},"add_new_user_to_blog":{"name":"add_new_user_to_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$password","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds a newly created user to the appropriate blog\n *\n * To add a user in general, use add_user_to_blog(). This function\n * is specifically hooked into the {@see 'wpmu_activate_user'} action.\n *\n * @since MU\n * @see add_user_to_blog()\n *\n * @param int   $user_id\n * @param mixed $password Ignored.\n * @param array $meta\n *\/"}]},"fix_phpmailer_messageid":{"name":"fix_phpmailer_messageid","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$phpmailer","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Correct From host on outgoing mail to match the site domain\n *\n * @since MU\n *\n * @param PHPMailer $phpmailer The PHPMailer instance, passed by reference.\n *\/"}]},"is_user_spammy":{"name":"is_user_spammy","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check to see whether a user is marked as a spammer, based on user login.\n *\n * @since MU\n *\n * @param string|WP_User $user Optional. Defaults to current user. WP_User object,\n * \t                           or user login name as a string.\n * @return bool\n *\/"}]},"update_blog_public":{"name":"update_blog_public","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$old_value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update this blog's 'public' setting in the global blogs table.\n *\n * Public blogs have a setting of 1, private blogs are 0.\n *\n * @since MU\n *\n * @param int $old_value\n * @param int $value     The new public value\n *\/"}]},"is_user_option_local":{"name":"is_user_option_local","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_id","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether a usermeta key has to do with the current blog.\n *\n * @since MU\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $key\n * @param int    $user_id Optional. Defaults to current user.\n * @param int    $blog_id Optional. Defaults to current blog.\n * @return bool\n *\/"}]},"users_can_register_signup_filter":{"name":"users_can_register_signup_filter","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether users can self-register, based on Network settings.\n *\n * @since MU\n *\n * @return bool\n *\/"}]},"welcome_user_msg_filter":{"name":"welcome_user_msg_filter","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ensure that the welcome message is not empty. Currently unused.\n *\n * @since MU\n *\n * @param string $text\n * @return string\n *\/"}]},"force_ssl_content":{"name":"force_ssl_content","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$force","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether to force SSL on content.\n *\n * @since 2.8.5\n *\n * @staticvar bool $forced_content\n *\n * @param bool $force\n * @return bool True if forced, false if not forced.\n *\/"}]},"filter_SSL":{"name":"filter_SSL","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Formats a URL to use https.\n *\n * Useful as a filter.\n *\n * @since 2.8.5\n *\n * @param string $url URL\n * @return string URL with https as the scheme\n *\/"}]},"wp_schedule_update_network_counts":{"name":"wp_schedule_update_network_counts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Schedule update of the network-wide counts for the current network.\n *\n * @since 3.1.0\n *\/"}]},"wp_update_network_counts":{"name":"wp_update_network_counts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n *  Update the network-wide counts for the current network.\n *\n *  @since 3.1.0\n *\/"}]},"wp_maybe_update_network_site_counts":{"name":"wp_maybe_update_network_site_counts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update the count of sites for the current network.\n *\n * If enabled through the {@see 'enable_live_network_counts'} filter, update the sites count\n * on a network when a site is created or its status is updated.\n *\n * @since 3.7.0\n *\/"}]},"wp_maybe_update_network_user_counts":{"name":"wp_maybe_update_network_user_counts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update the network-wide users count.\n *\n * If enabled through the {@see 'enable_live_network_counts'} filter, update the users count\n * on a network when a user is created or its status is updated.\n *\n * @since 3.7.0\n *\/"}]},"wp_update_network_site_counts":{"name":"wp_update_network_site_counts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update the network-wide site count.\n *\n * @since 3.7.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"wp_update_network_user_counts":{"name":"wp_update_network_user_counts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update the network-wide user count.\n *\n * @since 3.7.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"get_space_used":{"name":"get_space_used","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the space used by the current blog.\n *\n * @since 3.5.0\n *\n * @return int Used space in megabytes\n *\/"}]},"get_space_allowed":{"name":"get_space_allowed","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the upload quota for the current blog.\n *\n * @since MU\n *\n * @return int Quota in megabytes\n *\/"}]},"get_upload_space_available":{"name":"get_upload_space_available","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines if there is any upload space left in the current blog's quota.\n *\n * @since 3.0.0\n *\n * @return int of upload space available in bytes\n *\/"}]},"is_upload_space_available":{"name":"is_upload_space_available","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines if there is any upload space left in the current blog's quota.\n *\n * @since 3.0.0\n * @return bool True if space is available, false otherwise.\n *\/"}]},"upload_size_limit_filter":{"name":"upload_size_limit_filter","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$size","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters the maximum upload file size allowed, in bytes.\n *\n * @since 3.0.0\n *\n * @param  int $size Upload size limit in bytes.\n * @return int       Upload size limit in bytes.\n *\/"}]},"wp_is_large_network":{"name":"wp_is_large_network","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$using","rank":0,"variadic":false,"reference":false,"default":"'sites'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether or not we have a large network.\n *\n * The default criteria for a large network is either more than 10,000 users or more than 10,000 sites.\n * Plugins can alter this criteria using the {@see 'wp_is_large_network'} filter.\n *\n * @since 3.3.0\n * @param string $using 'sites or 'users'. Default is 'sites'.\n * @return bool True if the network meets the criteria for large. False otherwise.\n *\/"}]},"get_subdirectory_reserved_names":{"name":"get_subdirectory_reserved_names","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a list of reserved site on a sub-directory Multisite install.\n *\n * @since 4.4.0\n *\n * @return array $names Array of reserved subdirectory names.\n *\/"}]},"wp_kses":{"name":"wp_kses","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allowed_html","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allowed_protocols","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters content and keeps only allowable HTML elements.\n *\n * This function makes sure that only the allowed HTML element names, attribute\n * names and attribute values plus only sane HTML entities will occur in\n * $string. You have to remove any slashes from PHP's magic quotes before you\n * call this function.\n *\n * The default allowed protocols are 'http', 'https', 'ftp', 'mailto', 'news',\n * 'irc', 'gopher', 'nntp', 'feed', 'telnet, 'mms', 'rtsp' and 'svn'. This\n * covers all common link protocols, except for 'javascript' which should not\n * be allowed for untrusted users.\n *\n * @since 1.0.0\n *\n * @param string $string            Content to filter through kses\n * @param array  $allowed_html      List of allowed HTML elements\n * @param array  $allowed_protocols Optional. Allowed protocol in links.\n * @return string Filtered content with only allowed HTML elements\n *\/"}]},"wp_kses_one_attr":{"name":"wp_kses_one_attr","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$element","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters one attribute only and ensures its value is allowed.\n *\n * This function has the advantage of being more secure than esc_attr() and can\n * escape data in some situations where wp_kses() must strip the whole attribute.\n *\n * @since 4.2.3\n *\n * @param string $string The 'whole' attribute, including name and value.\n * @param string $element The element name to which the attribute belongs.\n * @return string Filtered attribute.\n *\/"}]},"wp_kses_allowed_html":{"name":"wp_kses_allowed_html","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$context","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return a list of allowed tags and attributes for a given context.\n *\n * @since 3.5.0\n * @since 5.0.1 `form` removed as allowable HTML tag.\n *\n * @global array $allowedposttags\n * @global array $allowedtags\n * @global array $allowedentitynames\n *\n * @param string $context The context for which to retrieve tags.\n *                        Allowed values are post, strip, data,entities, or\n *                        the name of a field filter such as pre_user_description.\n * @return array List of allowed tags and their allowed attributes.\n *\/"}]},"wp_kses_hook":{"name":"wp_kses_hook","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allowed_html","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allowed_protocols","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * You add any kses hooks here.\n *\n * There is currently only one kses WordPress hook, {@see 'pre_kses'}, and it is called here.\n * All parameters are passed to the hooks and expected to receive a string.\n *\n * @since 1.0.0\n *\n * @param string $string            Content to filter through kses\n * @param array  $allowed_html      List of allowed HTML elements\n * @param array  $allowed_protocols Allowed protocol in links\n * @return string Filtered content through {@see 'pre_kses'} hook.\n *\/"}]},"wp_kses_version":{"name":"wp_kses_version","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * This function returns kses' version number.\n *\n * @since 1.0.0\n *\n * @return string KSES Version Number\n *\/"}]},"wp_kses_split":{"name":"wp_kses_split","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allowed_html","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allowed_protocols","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Searches for HTML tags, no matter how malformed.\n *\n * It also matches stray \">\" characters.\n *\n * @since 1.0.0\n *\n * @global array $pass_allowed_html\n * @global array $pass_allowed_protocols\n *\n * @param string $string            Content to filter\n * @param array  $allowed_html      Allowed HTML elements\n * @param array  $allowed_protocols Allowed protocols to keep\n * @return string Content with fixed HTML tags\n *\/"}]},"wp_kses_uri_attributes":{"name":"wp_kses_uri_attributes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Helper function listing HTML attributes containing a URL.\n *\n * This function returns a list of all HTML attributes that must contain\n * a URL according to the HTML specification.\n *\n * This list includes URI attributes both allowed and disallowed by KSES.\n *\n * @link https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTML\/Attributes\n *\n * @since 5.0.1\n *\n * @return array HTML attributes that must include a URL.\n *\/"}]},"_wp_kses_split_callback":{"name":"_wp_kses_split_callback","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$match","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback for wp_kses_split.\n *\n * @since 3.1.0\n * @access private\n *\n * @global array $pass_allowed_html\n * @global array $pass_allowed_protocols\n *\n * @return string\n *\/"}]},"wp_kses_split2":{"name":"wp_kses_split2","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allowed_html","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allowed_protocols","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback for wp_kses_split for fixing malformed HTML tags.\n *\n * This function does a lot of work. It rejects some very malformed things like\n * <:::>. It returns an empty string, if the element isn't allowed (look ma, no\n * strip_tags()!). Otherwise it splits the tag into an element and an attribute\n * list.\n *\n * After the tag is split into an element and an attribute list, it is run\n * through another filter which will remove illegal attributes and once that is\n * completed, will be returned.\n *\n * @access private\n * @since 1.0.0\n *\n * @param string $string            Content to filter\n * @param array  $allowed_html      Allowed HTML elements\n * @param array  $allowed_protocols Allowed protocols to keep\n * @return string Fixed HTML element\n *\/"}]},"wp_kses_attr":{"name":"wp_kses_attr","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$element","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attr","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allowed_html","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allowed_protocols","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes all attributes, if none are allowed for this element.\n *\n * If some are allowed it calls wp_kses_hair() to split them further, and then\n * it builds up new HTML code from the data that kses_hair() returns. It also\n * removes \"<\" and \">\" characters, if there are any left. One more thing it does\n * is to check if the tag has a closing XHTML slash, and if it does, it puts one\n * in the returned code as well.\n *\n * @since 1.0.0\n *\n * @param string $element           HTML element\/tag\n * @param string $attr              HTML attributes from HTML element to closing HTML element tag\n * @param array  $allowed_html      Allowed HTML elements\n * @param array  $allowed_protocols Allowed protocols to keep\n * @return string Sanitized HTML element\n *\/"}]},"wp_kses_attr_check":{"name":"wp_kses_attr_check","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$whole","rank":2,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$vless","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$element","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allowed_html","rank":5,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine whether an attribute is allowed.\n *\n * @since 4.2.3\n *\n * @param string $name The attribute name. Returns empty string when not allowed.\n * @param string $value The attribute value. Returns a filtered value.\n * @param string $whole The name=value input. Returns filtered input.\n * @param string $vless 'y' when attribute like \"enabled\", otherwise 'n'.\n * @param string $element The name of the element to which this attribute belongs.\n * @param array $allowed_html The full list of allowed elements and attributes.\n * @return bool Is the attribute allowed?\n *\/"}]},"wp_kses_hair":{"name":"wp_kses_hair","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allowed_protocols","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Builds an attribute list from string containing attributes.\n *\n * This function does a lot of work. It parses an attribute list into an array\n * with attribute data, and tries to do the right thing even if it gets weird\n * input. It will add quotes around attribute values that don't have any quotes\n * or apostrophes around them, to make it easier to produce HTML code that will\n * conform to W3C's HTML specification. It will also remove bad URL protocols\n * from attribute values. It also reduces duplicate attributes by using the\n * attribute defined first (foo='bar' foo='baz' will result in foo='bar').\n *\n * @since 1.0.0\n *\n * @param string $attr              Attribute list from HTML element to closing HTML element tag\n * @param array  $allowed_protocols Allowed protocols to keep\n * @return array List of attributes after parsing\n *\/"}]},"wp_kses_attr_parse":{"name":"wp_kses_attr_parse","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$element","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Finds all attributes of an HTML element.\n *\n * Does not modify input.  May return \"evil\" output.\n *\n * Based on wp_kses_split2() and wp_kses_attr()\n *\n * @since 4.2.3\n *\n * @param string $element HTML element\/tag\n * @return array|bool List of attributes found in $element. Returns false on failure.\n *\/"}]},"wp_kses_hair_parse":{"name":"wp_kses_hair_parse","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Builds an attribute list from string containing attributes.\n *\n * Does not modify input.  May return \"evil\" output.\n * In case of unexpected input, returns false instead of stripping things.\n *\n * Based on wp_kses_hair() but does not return a multi-dimensional array.\n *\n * @since 4.2.3\n *\n * @param string $attr Attribute list from HTML element to closing HTML element tag\n * @return array|bool List of attributes found in $attr. Returns false on failure.\n *\/"}]},"wp_kses_check_attr_val":{"name":"wp_kses_check_attr_val","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$vless","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$checkname","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$checkvalue","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Performs different checks for attribute values.\n *\n * The currently implemented checks are \"maxlen\", \"minlen\", \"maxval\", \"minval\"\n * and \"valueless\".\n *\n * @since 1.0.0\n *\n * @param string $value      Attribute value\n * @param string $vless      Whether the value is valueless. Use 'y' or 'n'\n * @param string $checkname  What $checkvalue is checking for.\n * @param mixed  $checkvalue What constraint the value should pass\n * @return bool Whether check passes\n *\/"}]},"wp_kses_bad_protocol":{"name":"wp_kses_bad_protocol","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allowed_protocols","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize string from bad protocols.\n *\n * This function removes all non-allowed protocols from the beginning of\n * $string. It ignores whitespace and the case of the letters, and it does\n * understand HTML entities. It does its work in a while loop, so it won't be\n * fooled by a string like \"javascript:javascript:alert(57)\".\n *\n * @since 1.0.0\n *\n * @param string $string            Content to filter bad protocols from\n * @param array  $allowed_protocols Allowed protocols to keep\n * @return string Filtered content\n *\/"}]},"wp_kses_no_null":{"name":"wp_kses_no_null","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes any invalid control characters in $string.\n *\n * Also removes any instance of the '\\0' string.\n *\n * @since 1.0.0\n *\n * @param string $string\n * @param array $options Set 'slash_zero' => 'keep' when '\\0' is allowed. Default is 'remove'.\n * @return string\n *\/"}]},"wp_kses_stripslashes":{"name":"wp_kses_stripslashes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Strips slashes from in front of quotes.\n *\n * This function changes the character sequence \\\" to just \". It leaves all\n * other slashes alone. It's really weird, but the quoting from\n * preg_replace(\/\/e) seems to require this.\n *\n * @since 1.0.0\n *\n * @param string $string String to strip slashes\n * @return string Fixed string with quoted slashes\n *\/"}]},"wp_kses_array_lc":{"name":"wp_kses_array_lc","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$inarray","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Goes through an array and changes the keys to all lower case.\n *\n * @since 1.0.0\n *\n * @param array $inarray Unfiltered array\n * @return array Fixed array with all lowercase keys\n *\/"}]},"wp_kses_html_error":{"name":"wp_kses_html_error","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles parsing errors in wp_kses_hair().\n *\n * The general plan is to remove everything to and including some whitespace,\n * but it deals with quotes and apostrophes as well.\n *\n * @since 1.0.0\n *\n * @param string $string\n * @return string\n *\/"}]},"wp_kses_bad_protocol_once":{"name":"wp_kses_bad_protocol_once","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allowed_protocols","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$count","rank":2,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes content from bad protocols and other characters.\n *\n * This function searches for URL protocols at the beginning of $string, while\n * handling whitespace and HTML entities.\n *\n * @since 1.0.0\n *\n * @param string $string            Content to check for bad protocols\n * @param string $allowed_protocols Allowed protocols\n * @return string Sanitized content\n *\/"}]},"wp_kses_bad_protocol_once2":{"name":"wp_kses_bad_protocol_once2","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allowed_protocols","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback for wp_kses_bad_protocol_once() regular expression.\n *\n * This function processes URL protocols, checks to see if they're in the\n * whitelist or not, and returns different data depending on the answer.\n *\n * @access private\n * @since 1.0.0\n *\n * @param string $string            URI scheme to check against the whitelist\n * @param string $allowed_protocols Allowed protocols\n * @return string Sanitized content\n *\/"}]},"wp_kses_normalize_entities":{"name":"wp_kses_normalize_entities","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Converts and fixes HTML entities.\n *\n * This function normalizes HTML entities. It will convert `AT&T` to the correct\n * `AT&amp;T`, `&#00058;` to `&#58;`, `&#XYZZY;` to `&amp;#XYZZY;` and so on.\n *\n * @since 1.0.0\n *\n * @param string $string Content to normalize entities\n * @return string Content with normalized entities\n *\/"}]},"wp_kses_named_entities":{"name":"wp_kses_named_entities","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback for wp_kses_normalize_entities() regular expression.\n *\n * This function only accepts valid named entity references, which are finite,\n * case-sensitive, and highly scrutinized by HTML and XML validators.\n *\n * @since 3.0.0\n *\n * @global array $allowedentitynames\n *\n * @param array $matches preg_replace_callback() matches array\n * @return string Correctly encoded entity\n *\/"}]},"wp_kses_normalize_entities2":{"name":"wp_kses_normalize_entities2","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback for wp_kses_normalize_entities() regular expression.\n *\n * This function helps wp_kses_normalize_entities() to only accept 16-bit\n * values and nothing more for `&#number;` entities.\n *\n * @access private\n * @since 1.0.0\n *\n * @param array $matches preg_replace_callback() matches array\n * @return string Correctly encoded entity\n *\/"}]},"wp_kses_normalize_entities3":{"name":"wp_kses_normalize_entities3","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback for wp_kses_normalize_entities() for regular expression.\n *\n * This function helps wp_kses_normalize_entities() to only accept valid Unicode\n * numeric entities in hex form.\n *\n * @access private\n *\n * @param array $matches preg_replace_callback() matches array\n * @return string Correctly encoded entity\n *\/"}]},"valid_unicode":{"name":"valid_unicode","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$i","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Helper function to determine if a Unicode value is valid.\n *\n * @param int $i Unicode value\n * @return bool True if the value was a valid Unicode number\n *\/"}]},"wp_kses_decode_entities":{"name":"wp_kses_decode_entities","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert all entities to their character counterparts.\n *\n * This function decodes numeric HTML entities (`&#65;` and `&#x41;`).\n * It doesn't do anything with other entities like &auml;, but we don't\n * need them in the URL protocol whitelisting system anyway.\n *\n * @since 1.0.0\n *\n * @param string $string Content to change entities\n * @return string Content after decoded entities\n *\/"}]},"_wp_kses_decode_entities_chr":{"name":"_wp_kses_decode_entities_chr","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$match","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Regex callback for wp_kses_decode_entities()\n *\n * @param array $match preg match\n * @return string\n *\/"}]},"_wp_kses_decode_entities_chr_hexdec":{"name":"_wp_kses_decode_entities_chr_hexdec","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$match","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Regex callback for wp_kses_decode_entities()\n *\n * @param array $match preg match\n * @return string\n *\/"}]},"wp_filter_kses":{"name":"wp_filter_kses","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize content with allowed HTML Kses rules.\n *\n * @since 1.0.0\n *\n * @param string $data Content to filter, expected to be escaped with slashes\n * @return string Filtered content\n *\/"}]},"wp_kses_data":{"name":"wp_kses_data","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize content with allowed HTML Kses rules.\n *\n * @since 2.9.0\n *\n * @param string $data Content to filter, expected to not be escaped\n * @return string Filtered content\n *\/"}]},"wp_filter_post_kses":{"name":"wp_filter_post_kses","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize content for allowed HTML tags for post content.\n *\n * Post content refers to the page contents of the 'post' type and not $_POST\n * data from forms.\n *\n * @since 2.0.0\n *\n * @param string $data Post content to filter, expected to be escaped with slashes\n * @return string Filtered post content with allowed HTML tags and attributes intact.\n *\/"}]},"wp_kses_post":{"name":"wp_kses_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize content for allowed HTML tags for post content.\n *\n * Post content refers to the page contents of the 'post' type and not $_POST\n * data from forms.\n *\n * @since 2.9.0\n *\n * @param string $data Post content to filter\n * @return string Filtered post content with allowed HTML tags and attributes intact.\n *\/"}]},"wp_kses_post_deep":{"name":"wp_kses_post_deep","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Navigates through an array, object, or scalar, and sanitizes content for\n * allowed HTML tags for post content.\n *\n * @since 4.4.2\n *\n * @see map_deep()\n *\n * @param mixed $data The array, object, or scalar value to inspect.\n * @return mixed The filtered content.\n *\/"}]},"wp_filter_nohtml_kses":{"name":"wp_filter_nohtml_kses","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Strips all of the HTML in the content.\n *\n * @since 2.1.0\n *\n * @param string $data Content to strip all HTML from\n * @return string Filtered content without any HTML\n *\/"}]},"kses_init_filters":{"name":"kses_init_filters","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds all Kses input form content filters.\n *\n * All hooks have default priority. The wp_filter_kses() function is added to\n * the 'pre_comment_content' and 'title_save_pre' hooks.\n *\n * The wp_filter_post_kses() function is added to the 'content_save_pre',\n * 'excerpt_save_pre', and 'content_filtered_save_pre' hooks.\n *\n * @since 2.0.0\n *\/"}]},"kses_remove_filters":{"name":"kses_remove_filters","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes all Kses input form content filters.\n *\n * A quick procedural method to removing all of the filters that kses uses for\n * content in WordPress Loop.\n *\n * Does not remove the kses_init() function from {@see 'init'} hook (priority is\n * default). Also does not remove kses_init() function from {@see 'set_current_user'}\n * hook (priority is also default).\n *\n * @since 2.0.6\n *\/"}]},"kses_init":{"name":"kses_init","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sets up most of the Kses filters for input form content.\n *\n * If you remove the kses_init() function from {@see 'init'} hook and\n * {@see 'set_current_user'} (priority is default), then none of the Kses filter hooks\n * will be added.\n *\n * First removes all of the Kses filters in case the current user does not need\n * to have Kses filter the content. If the user does not have unfiltered_html\n * capability, then Kses filters are added.\n *\n * @since 2.0.0\n *\/"}]},"safecss_filter_attr":{"name":"safecss_filter_attr","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$css","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Inline CSS filter\n *\n * @since 2.8.1\n *\n * @param string $css        A string of CSS rules.\n * @param string $deprecated Not used.\n * @return string            Filtered string of CSS rules.\n *\/"}]},"_wp_add_global_attributes":{"name":"_wp_add_global_attributes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Helper function to add global attributes to a tag in the allowed html list.\n *\n * @since 3.5.0\n * @access private\n *\n * @param array $value An array of attributes.\n * @return array The array of attributes with global attributes added.\n *\/"}]},"create_initial_post_types":{"name":"create_initial_post_types","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates the initial post types when 'init' action is fired.\n *\n * See {@see 'init'}.\n *\n * @since 2.9.0\n *\/"},{"phpdoc":"\/**\n * Core Post API\n *\n * @package WordPress\n * @subpackage Post\n *\/"}]},"get_attached_file":{"name":"get_attached_file","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attachment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$unfiltered","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve attached file path based on attachment ID.\n *\n * By default the path will go through the 'get_attached_file' filter, but\n * passing a true to the $unfiltered argument of get_attached_file() will\n * return the file path unfiltered.\n *\n * The function works by getting the single post meta name, named\n * '_wp_attached_file' and returning it. This is a convenience function to\n * prevent looking up the meta name and provide a mechanism for sending the\n * attached filename through a filter.\n *\n * @since 2.0.0\n *\n * @param int  $attachment_id Attachment ID.\n * @param bool $unfiltered    Optional. Whether to apply filters. Default false.\n * @return string|false The file path to where the attached file should be, false otherwise.\n *\/"}]},"update_attached_file":{"name":"update_attached_file","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attachment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$file","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update attachment file path based on attachment ID.\n *\n * Used to update the file path of the attachment, which uses post meta name\n * '_wp_attached_file' to store the path of the attachment.\n *\n * @since 2.1.0\n *\n * @param int    $attachment_id Attachment ID.\n * @param string $file          File path for the attachment.\n * @return bool True on success, false on failure.\n *\/"}]},"_wp_relative_upload_path":{"name":"_wp_relative_upload_path","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return relative path to an uploaded file.\n *\n * The path is relative to the current upload dir.\n *\n * @since 2.9.0\n *\n * @param string $path Full path to the file.\n * @return string Relative path on success, unchanged path on failure.\n *\/"}]},"get_children":{"name":"get_children","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"OBJECT","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve all children of the post parent ID.\n *\n * Normally, without any enhancements, the children would apply to pages. In the\n * context of the inner workings of WordPress, pages, posts, and attachments\n * share the same table, so therefore the functionality could apply to any one\n * of them. It is then noted that while this function does not work on posts, it\n * does not mean that it won't work on posts. It is recommended that you know\n * what context you wish to retrieve the children of.\n *\n * Attachments may also be made the child of a post, so if that is an accurate\n * statement (which needs to be verified), it would then be possible to get\n * all of the attachments for a post. Attachments have since changed since\n * version 2.5, so this is most likely inaccurate, but serves generally as an\n * example of what is possible.\n *\n * The arguments listed as defaults are for this function and also of the\n * get_posts() function. The arguments are combined with the get_children defaults\n * and are then passed to the get_posts() function, which accepts additional arguments.\n * You can replace the defaults in this function, listed below and the additional\n * arguments listed in the get_posts() function.\n *\n * The 'post_parent' is the most important argument and important attention\n * needs to be paid to the $args parameter. If you pass either an object or an\n * integer (number), then just the 'post_parent' is grabbed and everything else\n * is lost. If you don't specify any arguments, then it is assumed that you are\n * in The Loop and the post parent will be grabbed for from the current post.\n *\n * The 'post_parent' argument is the ID to get the children. The 'numberposts'\n * is the amount of posts to retrieve that has a default of '-1', which is\n * used to get all of the posts. Giving a number higher than 0 will only\n * retrieve that amount of posts.\n *\n * The 'post_type' and 'post_status' arguments can be used to choose what\n * criteria of posts to retrieve. The 'post_type' can be anything, but WordPress\n * post types are 'post', 'pages', and 'attachments'. The 'post_status'\n * argument will accept any post status within the write administration panels.\n *\n * @since 2.0.0\n *\n * @see get_posts()\n * @todo Check validity of description.\n *\n * @global WP_Post $post\n *\n * @param mixed  $args   Optional. User defined arguments for replacing the defaults. Default empty.\n * @param string $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                       a WP_Post object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @return array Array of children, where the type of each element is determined by $output parameter.\n *               Empty array on failure.\n *\/"}]},"get_extended":{"name":"get_extended","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get extended entry info (<!--more-->).\n *\n * There should not be any space after the second dash and before the word\n * 'more'. There can be text or space(s) after the word 'more', but won't be\n * referenced.\n *\n * The returned array has 'main', 'extended', and 'more_text' keys. Main has the text before\n * the `<!--more-->`. The 'extended' key has the content after the\n * `<!--more-->` comment. The 'more_text' key has the custom \"Read More\" text.\n *\n * @since 1.0.0\n *\n * @param string $post Post content.\n * @return array Post before ('main'), after ('extended'), and custom read more ('more_text').\n *\/"}]},"get_post":{"name":"get_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"OBJECT","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filter","rank":2,"variadic":false,"reference":false,"default":"'raw'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves post data given a post ID or post object.\n *\n * See sanitize_post() for optional $filter values. Also, the parameter\n * `$post`, must be given as a variable, since it is passed by reference.\n *\n * @since 1.5.1\n *\n * @global WP_Post $post\n *\n * @param int|WP_Post|null $post   Optional. Post ID or post object. Defaults to global $post.\n * @param string           $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                                 a WP_Post object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @param string           $filter Optional. Type of filter to apply. Accepts 'raw', 'edit', 'db',\n *                                 or 'display'. Default 'raw'.\n * @return WP_Post|array|null Type corresponding to $output on success or null on failure.\n *                            When $output is OBJECT, a `WP_Post` instance is returned.\n *\/"}]},"get_post_ancestors":{"name":"get_post_ancestors","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve ancestors of a post.\n *\n * @since 2.5.0\n *\n * @param int|WP_Post $post Post ID or post object.\n * @return array Ancestor IDs or empty array if none are found.\n *\/"}]},"get_post_field":{"name":"get_post_field","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$field","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":2,"variadic":false,"reference":false,"default":"'display'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve data from a post field based on Post ID.\n *\n * Examples of the post field will be, 'post_type', 'post_status', 'post_content',\n * etc and based off of the post object property or key names.\n *\n * The context values are based off of the taxonomy filter functions and\n * supported values are found within those functions.\n *\n * @since 2.3.0\n * @since 4.5.0 The `$post` parameter was made optional.\n *\n * @see sanitize_post_field()\n *\n * @param string      $field   Post field name.\n * @param int|WP_Post $post    Optional. Post ID or post object. Defaults to current post.\n * @param string      $context Optional. How to filter the field. Accepts 'raw', 'edit', 'db',\n *                             or 'display'. Default 'display'.\n * @return string The value of the post field on success, empty string on failure.\n *\/"}]},"get_post_mime_type":{"name":"get_post_mime_type","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$ID","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the mime type of an attachment based on the ID.\n *\n * This function can be used with any post type, but it makes more sense with\n * attachments.\n *\n * @since 2.0.0\n *\n * @param int|WP_Post $ID Optional. Post ID or post object. Default empty.\n * @return string|false The mime type on success, false on failure.\n *\/"}]},"get_post_status":{"name":"get_post_status","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$ID","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the post status based on the Post ID.\n *\n * If the post ID is of an attachment, then the parent post status will be given\n * instead.\n *\n * @since 2.0.0\n *\n * @param int|WP_Post $ID Optional. Post ID or post object. Default empty.\n * @return string|false Post status on success, false on failure.\n *\/"}]},"get_post_statuses":{"name":"get_post_statuses","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve all of the WordPress supported post statuses.\n *\n * Posts have a limited set of valid status values, this provides the\n * post_status values and descriptions.\n *\n * @since 2.5.0\n *\n * @return array List of post statuses.\n *\/"}]},"get_page_statuses":{"name":"get_page_statuses","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve all of the WordPress support page statuses.\n *\n * Pages have a limited set of valid status values, this provides the\n * post_status values and descriptions.\n *\n * @since 2.5.0\n *\n * @return array List of page statuses.\n *\/"}]},"register_post_status":{"name":"register_post_status","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_status","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register a post status. Do not use before init.\n *\n * A simple function for creating or modifying a post status based on the\n * parameters given. The function will accept an array (second optional\n * parameter), along with a string for the post status name.\n *\n * Arguments prefixed with an _underscore shouldn't be used by plugins and themes.\n *\n * @since 3.0.0\n * @global array $wp_post_statuses Inserts new post status object into the list\n *\n * @param string $post_status Name of the post status.\n * @param array|string $args {\n *     Optional. Array or string of post status arguments.\n *\n *     @type bool|string $label                     A descriptive name for the post status marked\n *                                                  for translation. Defaults to value of $post_status.\n *     @type bool|array  $label_count               Descriptive text to use for nooped plurals.\n *                                                  Default array of $label, twice\n *     @type bool        $exclude_from_search       Whether to exclude posts with this post status\n *                                                  from search results. Default is value of $internal.\n *     @type bool        $_builtin                  Whether the status is built-in. Core-use only.\n *                                                  Default false.\n *     @type bool        $public                    Whether posts of this status should be shown\n *                                                  in the front end of the site. Default false.\n *     @type bool        $internal                  Whether the status is for internal use only.\n *                                                  Default false.\n *     @type bool        $protected                 Whether posts with this status should be protected.\n *                                                  Default false.\n *     @type bool        $private                   Whether posts with this status should be private.\n *                                                  Default false.\n *     @type bool        $publicly_queryable        Whether posts with this status should be publicly-\n *                                                  queryable. Default is value of $public.\n *     @type bool        $show_in_admin_all_list    Whether to include posts in the edit listing for\n *                                                  their post type. Default is value of $internal.\n *     @type bool        $show_in_admin_status_list Show in the list of statuses with post counts at\n *                                                  the top of the edit listings,\n *                                                  e.g. All (12) | Published (9) | My Custom Status (2)\n *                                                  Default is value of $internal.\n * }\n * @return object\n *\/"}]},"get_post_status_object":{"name":"get_post_status_object","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_status","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve a post status object by name.\n *\n * @since 3.0.0\n *\n * @global array $wp_post_statuses List of post statuses.\n *\n * @see register_post_status()\n *\n * @param string $post_status The name of a registered post status.\n * @return object|null A post status object.\n *\/"}]},"get_post_stati":{"name":"get_post_stati","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"'names'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$operator","rank":2,"variadic":false,"reference":false,"default":"'and'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get a list of post statuses.\n *\n * @since 3.0.0\n *\n * @global array $wp_post_statuses List of post statuses.\n *\n * @see register_post_status()\n *\n * @param array|string $args     Optional. Array or string of post status arguments to compare against\n *                               properties of the global `$wp_post_statuses objects`. Default empty array.\n * @param string       $output   Optional. The type of output to return, either 'names' or 'objects'. Default 'names'.\n * @param string       $operator Optional. The logical operation to perform. 'or' means only one element\n *                               from the array needs to match; 'and' means all elements must match.\n *                               Default 'and'.\n * @return array A list of post status names or objects.\n *\/"}]},"is_post_type_hierarchical":{"name":"is_post_type_hierarchical","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether the post type is hierarchical.\n *\n * A false return value might also mean that the post type does not exist.\n *\n * @since 3.0.0\n *\n * @see get_post_type_object()\n *\n * @param string $post_type Post type name\n * @return bool Whether post type is hierarchical.\n *\/"}]},"post_type_exists":{"name":"post_type_exists","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if a post type is registered.\n *\n * @since 3.0.0\n *\n * @see get_post_type_object()\n *\n * @param string $post_type Post type name.\n * @return bool Whether post type is registered.\n *\/"}]},"get_post_type":{"name":"get_post_type","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the post type of the current post or of a given post.\n *\n * @since 2.1.0\n *\n * @param int|WP_Post|null $post Optional. Post ID or post object. Default is global $post.\n * @return string|false          Post type on success, false on failure.\n *\/"}]},"get_post_type_object":{"name":"get_post_type_object","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a post type object by name.\n *\n * @since 3.0.0\n * @since 4.6.0 Object returned is now an instance of WP_Post_Type.\n *\n * @global array $wp_post_types List of post types.\n *\n * @see register_post_type()\n *\n * @param string $post_type The name of a registered post type.\n * @return WP_Post_Type|null WP_Post_Type object if it exists, null otherwise.\n *\/"}]},"get_post_types":{"name":"get_post_types","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"'names'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$operator","rank":2,"variadic":false,"reference":false,"default":"'and'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get a list of all registered post type objects.\n *\n * @since 2.9.0\n *\n * @global array $wp_post_types List of post types.\n *\n * @see register_post_type() for accepted arguments.\n *\n * @param array|string $args     Optional. An array of key => value arguments to match against\n *                               the post type objects. Default empty array.\n * @param string       $output   Optional. The type of output to return. Accepts post type 'names'\n *                               or 'objects'. Default 'names'.\n * @param string       $operator Optional. The logical operation to perform. 'or' means only one\n *                               element from the array needs to match; 'and' means all elements\n *                               must match; 'not' means no elements may match. Default 'and'.\n * @return array A list of post type names or objects.\n *\/"}]},"register_post_type":{"name":"register_post_type","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers a post type.\n *\n * Note: Post type registrations should not be hooked before the\n * {@see 'init'} action. Also, any taxonomy connections should be\n * registered via the `$taxonomies` argument to ensure consistency\n * when hooks such as {@see 'parse_query'} or {@see 'pre_get_posts'}\n * are used.\n *\n * Post types can support any number of built-in core features such\n * as meta boxes, custom fields, post thumbnails, post statuses,\n * comments, and more. See the `$supports` argument for a complete\n * list of supported features.\n *\n * @since 2.9.0\n * @since 3.0.0 The `show_ui` argument is now enforced on the new post screen.\n * @since 4.4.0 The `show_ui` argument is now enforced on the post type listing\n *              screen and post editing screen.\n * @since 4.6.0 Post type object returned is now an instance of WP_Post_Type.\n * @since 4.7.0 Introduced `show_in_rest`, 'rest_base' and 'rest_controller_class'\n *              arguments to register the post type in REST API.\n *\n * @global array $wp_post_types List of post types.\n *\n * @param string $post_type Post type key. Must not exceed 20 characters and may\n *                          only contain lowercase alphanumeric characters, dashes,\n *                          and underscores. See sanitize_key().\n * @param array|string $args {\n *     Array or string of arguments for registering a post type.\n *\n *     @type string      $label                 Name of the post type shown in the menu. Usually plural.\n *                                              Default is value of $labels['name'].\n *     @type array       $labels                An array of labels for this post type. If not set, post\n *                                              labels are inherited for non-hierarchical types and page\n *                                              labels for hierarchical ones. See get_post_type_labels() for a full\n *                                              list of supported labels.\n *     @type string      $description           A short descriptive summary of what the post type is.\n *                                              Default empty.\n *     @type bool        $public                Whether a post type is intended for use publicly either via\n *                                              the admin interface or by front-end users. While the default\n *                                              settings of $exclude_from_search, $publicly_queryable, $show_ui,\n *                                              and $show_in_nav_menus are inherited from public, each does not\n *                                              rely on this relationship and controls a very specific intention.\n *                                              Default false.\n *     @type bool        $hierarchical          Whether the post type is hierarchical (e.g. page). Default false.\n *     @type bool        $exclude_from_search   Whether to exclude posts with this post type from front end search\n *                                              results. Default is the opposite value of $public.\n *     @type bool        $publicly_queryable    Whether queries can be performed on the front end for the post type\n *                                              as part of parse_request(). Endpoints would include:\n *                                              * ?post_type={post_type_key}\n *                                              * ?{post_type_key}={single_post_slug}\n *                                              * ?{post_type_query_var}={single_post_slug}\n *                                              If not set, the default is inherited from $public.\n *     @type bool        $show_ui               Whether to generate and allow a UI for managing this post type in the\n *                                              admin. Default is value of $public.\n *     @type bool        $show_in_menu          Where to show the post type in the admin menu. To work, $show_ui\n *                                              must be true. If true, the post type is shown in its own top level\n *                                              menu. If false, no menu is shown. If a string of an existing top\n *                                              level menu (eg. 'tools.php' or 'edit.php?post_type=page'), the post\n *                                              type will be placed as a sub-menu of that.\n *                                              Default is value of $show_ui.\n *     @type bool        $show_in_nav_menus     Makes this post type available for selection in navigation menus.\n *                                              Default is value $public.\n *     @type bool        $show_in_admin_bar     Makes this post type available via the admin bar. Default is value\n *                                              of $show_in_menu.\n *     @type bool        $show_in_rest          Whether to add the post type route in the REST API 'wp\/v2' namespace.\n *     @type string      $rest_base             To change the base url of REST API route. Default is $post_type.\n *     @type string      $rest_controller_class REST API Controller class name. Default is 'WP_REST_Posts_Controller'.\n *     @type int         $menu_position         The position in the menu order the post type should appear. To work,\n *                                              $show_in_menu must be true. Default null (at the bottom).\n *     @type string      $menu_icon             The url to the icon to be used for this menu. Pass a base64-encoded\n *                                              SVG using a data URI, which will be colored to match the color scheme\n *                                              -- this should begin with 'data:image\/svg+xml;base64,'. Pass the name\n *                                              of a Dashicons helper class to use a font icon, e.g.\n *                                              'dashicons-chart-pie'. Pass 'none' to leave div.wp-menu-image empty\n *                                              so an icon can be added via CSS. Defaults to use the posts icon.\n *     @type string      $capability_type       The string to use to build the read, edit, and delete capabilities.\n *                                              May be passed as an array to allow for alternative plurals when using\n *                                              this argument as a base to construct the capabilities, e.g.\n *                                              array('story', 'stories'). Default 'post'.\n *     @type array       $capabilities          Array of capabilities for this post type. $capability_type is used\n *                                              as a base to construct capabilities by default.\n *                                              See get_post_type_capabilities().\n *     @type bool        $map_meta_cap          Whether to use the internal default meta capability handling.\n *                                              Default false.\n *     @type array       $supports              Core feature(s) the post type supports. Serves as an alias for calling\n *                                              add_post_type_support() directly. Core features include 'title',\n *                                              'editor', 'comments', 'revisions', 'trackbacks', 'author', 'excerpt',\n *                                              'page-attributes', 'thumbnail', 'custom-fields', and 'post-formats'.\n *                                              Additionally, the 'revisions' feature dictates whether the post type\n *                                              will store revisions, and the 'comments' feature dictates whether the\n *                                              comments count will show on the edit screen. Defaults is an array\n *                                              containing 'title' and 'editor'.\n *     @type callable    $register_meta_box_cb  Provide a callback function that sets up the meta boxes for the\n *                                              edit form. Do remove_meta_box() and add_meta_box() calls in the\n *                                              callback. Default null.\n *     @type array       $taxonomies            An array of taxonomy identifiers that will be registered for the\n *                                              post type. Taxonomies can be registered later with register_taxonomy()\n *                                              or register_taxonomy_for_object_type().\n *                                              Default empty array.\n *     @type bool|string $has_archive           Whether there should be post type archives, or if a string, the\n *                                              archive slug to use. Will generate the proper rewrite rules if\n *                                              $rewrite is enabled. Default false.\n *     @type bool|array  $rewrite              {\n *         Triggers the handling of rewrites for this post type. To prevent rewrite, set to false.\n *         Defaults to true, using $post_type as slug. To specify rewrite rules, an array can be\n *         passed with any of these keys:\n *\n *         @type string $slug       Customize the permastruct slug. Defaults to $post_type key.\n *         @type bool   $with_front Whether the permastruct should be prepended with WP_Rewrite::$front.\n *                                  Default true.\n *         @type bool   $feeds      Whether the feed permastruct should be built for this post type.\n *                                  Default is value of $has_archive.\n *         @type bool   $pages      Whether the permastruct should provide for pagination. Default true.\n *         @type const  $ep_mask    Endpoint mask to assign. If not specified and permalink_epmask is set,\n *                                  inherits from $permalink_epmask. If not specified and permalink_epmask\n *                                  is not set, defaults to EP_PERMALINK.\n *     }\n *     @type string|bool $query_var             Sets the query_var key for this post type. Defaults to $post_type\n *                                              key. If false, a post type cannot be loaded at\n *                                              ?{query_var}={post_slug}. If specified as a string, the query\n *                                              ?{query_var_string}={post_slug} will be valid.\n *     @type bool        $can_export            Whether to allow this post type to be exported. Default true.\n *     @type bool        $delete_with_user      Whether to delete posts of this type when deleting a user. If true,\n *                                              posts of this type belonging to the user will be moved to trash\n *                                              when then user is deleted. If false, posts of this type belonging\n *                                              to the user will *not* be trashed or deleted. If not set (the default),\n *                                              posts are trashed if post_type_supports('author'). Otherwise posts\n *                                              are not trashed or deleted. Default null.\n *     @type bool        $_builtin              FOR INTERNAL USE ONLY! True if this post type is a native or\n *                                              \"built-in\" post_type. Default false.\n *     @type string      $_edit_link            FOR INTERNAL USE ONLY! URL segment to use for edit link of\n *                                              this post type. Default 'post.php?post=%d'.\n * }\n * @return WP_Post_Type|WP_Error The registered post type object, or an error object.\n *\/"}]},"unregister_post_type":{"name":"unregister_post_type","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Unregisters a post type.\n *\n * Can not be used to unregister built-in post types.\n *\n * @since 4.5.0\n *\n * @global array $wp_post_types List of post types.\n *\n * @param string $post_type Post type to unregister.\n * @return bool|WP_Error True on success, WP_Error on failure or if the post type doesn't exist.\n *\/"}]},"get_post_type_capabilities":{"name":"get_post_type_capabilities","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Build an object with all post type capabilities out of a post type object\n *\n * Post type capabilities use the 'capability_type' argument as a base, if the\n * capability is not set in the 'capabilities' argument array or if the\n * 'capabilities' argument is not supplied.\n *\n * The capability_type argument can optionally be registered as an array, with\n * the first value being singular and the second plural, e.g. array('story, 'stories')\n * Otherwise, an 's' will be added to the value for the plural form. After\n * registration, capability_type will always be a string of the singular value.\n *\n * By default, seven keys are accepted as part of the capabilities array:\n *\n * - edit_post, read_post, and delete_post are meta capabilities, which are then\n *   generally mapped to corresponding primitive capabilities depending on the\n *   context, which would be the post being edited\/read\/deleted and the user or\n *   role being checked. Thus these capabilities would generally not be granted\n *   directly to users or roles.\n *\n * - edit_posts - Controls whether objects of this post type can be edited.\n * - edit_others_posts - Controls whether objects of this type owned by other users\n *   can be edited. If the post type does not support an author, then this will\n *   behave like edit_posts.\n * - publish_posts - Controls publishing objects of this post type.\n * - read_private_posts - Controls whether private objects can be read.\n *\n * These four primitive capabilities are checked in core in various locations.\n * There are also seven other primitive capabilities which are not referenced\n * directly in core, except in map_meta_cap(), which takes the three aforementioned\n * meta capabilities and translates them into one or more primitive capabilities\n * that must then be checked against the user or role, depending on the context.\n *\n * - read - Controls whether objects of this post type can be read.\n * - delete_posts - Controls whether objects of this post type can be deleted.\n * - delete_private_posts - Controls whether private objects can be deleted.\n * - delete_published_posts - Controls whether published objects can be deleted.\n * - delete_others_posts - Controls whether objects owned by other users can be\n *   can be deleted. If the post type does not support an author, then this will\n *   behave like delete_posts.\n * - edit_private_posts - Controls whether private objects can be edited.\n * - edit_published_posts - Controls whether published objects can be edited.\n *\n * These additional capabilities are only used in map_meta_cap(). Thus, they are\n * only assigned by default if the post type is registered with the 'map_meta_cap'\n * argument set to true (default is false).\n *\n * @since 3.0.0\n *\n * @see register_post_type()\n * @see map_meta_cap()\n *\n * @param object $args Post type registration arguments.\n * @return object object with all the capabilities as member variables.\n *\/"}]},"_post_type_meta_capabilities":{"name":"_post_type_meta_capabilities","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$capabilities","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Store or return a list of post type meta caps for map_meta_cap().\n *\n * @since 3.1.0\n * @access private\n *\n * @global array $post_type_meta_caps Used to store meta capabilities.\n *\n * @param array $capabilities Post type meta capabilities.\n *\/"}]},"get_post_type_labels":{"name":"get_post_type_labels","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_type_object","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Builds an object with all post type labels out of a post type object.\n *\n * Accepted keys of the label array in the post type object:\n *\n * - `name` - General name for the post type, usually plural. The same and overridden\n *          by `$post_type_object->label`. Default is 'Posts' \/ 'Pages'.\n * - `singular_name` - Name for one object of this post type. Default is 'Post' \/ 'Page'.\n * - `add_new` - Default is 'Add New' for both hierarchical and non-hierarchical types.\n *             When internationalizing this string, please use a {@link https:\/\/codex.wordpress.org\/I18n_for_WordPress_Developers#Disambiguation_by_context gettext context}\n *             matching your post type. Example: `_x( 'Add New', 'product', 'textdomain' );`.\n * - `add_new_item` - Label for adding a new singular item. Default is 'Add New Post' \/ 'Add New Page'.\n * - `edit_item` - Label for editing a singular item. Default is 'Edit Post' \/ 'Edit Page'.\n * - `new_item` - Label for the new item page title. Default is 'New Post' \/ 'New Page'.\n * - `view_item` - Label for viewing a singular item. Default is 'View Post' \/ 'View Page'.\n * - `view_items` - Label for viewing post type archives. Default is 'View Posts' \/ 'View Pages'.\n * - `search_items` - Label for searching plural items. Default is 'Search Posts' \/ 'Search Pages'.\n * - `not_found` - Label used when no items are found. Default is 'No posts found' \/ 'No pages found'.\n * - `not_found_in_trash` - Label used when no items are in the trash. Default is 'No posts found in Trash' \/\n *                        'No pages found in Trash'.\n * - `parent_item_colon` - Label used to prefix parents of hierarchical items. Not used on non-hierarchical\n *                       post types. Default is 'Parent Page:'.\n * - `all_items` - Label to signify all items in a submenu link. Default is 'All Posts' \/ 'All Pages'.\n * - `archives` - Label for archives in nav menus. Default is 'Post Archives' \/ 'Page Archives'.\n * - `attributes` - Label for the attributes meta box. Default is 'Post Attributes' \/ 'Page Attributes'.\n * - `insert_into_item` - Label for the media frame button. Default is 'Insert into post' \/ 'Insert into page'.\n * - `uploaded_to_this_item` - Label for the media frame filter. Default is 'Uploaded to this post' \/\n *                           'Uploaded to this page'.\n * - `featured_image` - Label for the Featured Image meta box title. Default is 'Featured Image'.\n * - `set_featured_image` - Label for setting the featured image. Default is 'Set featured image'.\n * - `remove_featured_image` - Label for removing the featured image. Default is 'Remove featured image'.\n * - `use_featured_image` - Label in the media frame for using a featured image. Default is 'Use as featured image'.\n * - `menu_name` - Label for the menu name. Default is the same as `name`.\n * - `filter_items_list` - Label for the table views hidden heading. Default is 'Filter posts list' \/\n *                       'Filter pages list'.\n * - `items_list_navigation` - Label for the table pagination hidden heading. Default is 'Posts list navigation' \/\n *                           'Pages list navigation'.\n * - `items_list` - Label for the table hidden heading. Default is 'Posts list' \/ 'Pages list'.\n *\n * Above, the first default value is for non-hierarchical post types (like posts)\n * and the second one is for hierarchical post types (like pages).\n *\n * Note: To set labels used in post type admin notices, see the {@see 'post_updated_messages'} filter.\n *\n * @since 3.0.0\n * @since 4.3.0 Added the `featured_image`, `set_featured_image`, `remove_featured_image`,\n *              and `use_featured_image` labels.\n * @since 4.4.0 Added the `insert_into_item`, `uploaded_to_this_item`, `filter_items_list`,\n *              `items_list_navigation`, and `items_list` labels.\n * @since 4.6.0 Converted the `$post_type` parameter to accept a WP_Post_Type object.\n * @since 4.7.0 Added the `view_items` and `attributes` labels.\n *\n * @access private\n *\n * @param object|WP_Post_Type $post_type_object Post type object.\n * @return object Object with all the labels as member variables.\n *\/"}]},"_get_custom_object_labels":{"name":"_get_custom_object_labels","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$nohier_vs_hier_defaults","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Build an object with custom-something object (post type, taxonomy) labels\n * out of a custom-something object\n *\n * @since 3.0.0\n * @access private\n *\n * @param object $object                  A custom-something object.\n * @param array  $nohier_vs_hier_defaults Hierarchical vs non-hierarchical default labels.\n * @return object Object containing labels for the given custom-something object.\n *\/"}]},"_add_post_type_submenus":{"name":"_add_post_type_submenus","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add submenus for post types.\n *\n * @access private\n * @since 3.1.0\n *\/"}]},"add_post_type_support":{"name":"add_post_type_support","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feature","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register support of certain features for a post type.\n *\n * All core features are directly associated with a functional area of the edit\n * screen, such as the editor or a meta box. Features include: 'title', 'editor',\n * 'comments', 'revisions', 'trackbacks', 'author', 'excerpt', 'page-attributes',\n * 'thumbnail', 'custom-fields', and 'post-formats'.\n *\n * Additionally, the 'revisions' feature dictates whether the post type will\n * store revisions, and the 'comments' feature dictates whether the comments\n * count will show on the edit screen.\n *\n * @since 3.0.0\n *\n * @global array $_wp_post_type_features\n *\n * @param string       $post_type The post type for which to add the feature.\n * @param string|array $feature   The feature being added, accepts an array of\n *                                feature strings or a single string.\n *\/"}]},"remove_post_type_support":{"name":"remove_post_type_support","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feature","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove support for a feature from a post type.\n *\n * @since 3.0.0\n *\n * @global array $_wp_post_type_features\n *\n * @param string $post_type The post type for which to remove the feature.\n * @param string $feature   The feature being removed.\n *\/"}]},"get_all_post_type_supports":{"name":"get_all_post_type_supports","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get all the post type features\n *\n * @since 3.4.0\n *\n * @global array $_wp_post_type_features\n *\n * @param string $post_type The post type.\n * @return array Post type supports list.\n *\/"}]},"post_type_supports":{"name":"post_type_supports","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feature","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check a post type's support for a given feature.\n *\n * @since 3.0.0\n *\n * @global array $_wp_post_type_features\n *\n * @param string $post_type The post type being checked.\n * @param string $feature   The feature being checked.\n * @return bool Whether the post type supports the given feature.\n *\/"}]},"get_post_types_by_support":{"name":"get_post_types_by_support","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$feature","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$operator","rank":1,"variadic":false,"reference":false,"default":"'and'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a list of post type names that support a specific feature.\n *\n * @since 4.5.0\n *\n * @global array $_wp_post_type_features Post type features\n *\n * @param array|string $feature  Single feature or an array of features the post types should support.\n * @param string       $operator Optional. The logical operation to perform. 'or' means\n *                               only one element from the array needs to match; 'and'\n *                               means all elements must match; 'not' means no elements may\n *                               match. Default 'and'.\n * @return array A list of post type names.\n *\/"}]},"set_post_type":{"name":"set_post_type","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_type","rank":1,"variadic":false,"reference":false,"default":"'post'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update the post type for the post ID.\n *\n * The page or post cache will be cleaned for the post ID.\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int    $post_id   Optional. Post ID to change post type. Default 0.\n * @param string $post_type Optional. Post type. Accepts 'post' or 'page' to\n *                          name a few. Default 'post'.\n * @return int|false Amount of rows changed. Should be 1 for success and 0 for failure.\n *\/"}]},"is_post_type_viewable":{"name":"is_post_type_viewable","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines whether a post type is considered \"viewable\".\n *\n * For built-in post types such as posts and pages, the 'public' value will be evaluated.\n * For all others, the 'publicly_queryable' value will be used.\n *\n * @since 4.4.0\n * @since 4.5.0 Added the ability to pass a post type name in addition to object.\n * @since 4.6.0 Converted the `$post_type` parameter to accept a WP_Post_Type object.\n *\n * @param string|WP_Post_Type $post_type Post type name or object.\n * @return bool Whether the post type should be considered viewable.\n *\/"}]},"get_posts":{"name":"get_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve list of latest posts or posts matching criteria.\n *\n * The defaults are as follows:\n *\n * @since 1.2.0\n *\n * @see WP_Query::parse_query()\n *\n * @param array $args {\n *     Optional. Arguments to retrieve posts. See WP_Query::parse_query() for all\n *     available arguments.\n *\n *     @type int        $numberposts      Total number of posts to retrieve. Is an alias of $posts_per_page\n *                                        in WP_Query. Accepts -1 for all. Default 5.\n *     @type int|string $category         Category ID or comma-separated list of IDs (this or any children).\n *                                        Is an alias of $cat in WP_Query. Default 0.\n *     @type array      $include          An array of post IDs to retrieve, sticky posts will be included.\n *                                        Is an alias of $post__in in WP_Query. Default empty array.\n *     @type array      $exclude          An array of post IDs not to retrieve. Default empty array.\n *     @type bool       $suppress_filters Whether to suppress filters. Default true.\n * }\n * @return array List of posts.\n *\/"}]},"add_post_meta":{"name":"add_post_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$unique","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add meta data field to a post.\n *\n * Post meta data is called \"Custom Fields\" on the Administration Screen.\n *\n * @since 1.5.0\n *\n * @param int    $post_id    Post ID.\n * @param string $meta_key   Metadata name.\n * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.\n * @param bool   $unique     Optional. Whether the same key should not be added.\n *                           Default false.\n * @return int|false Meta ID on success, false on failure.\n *\/"}]},"delete_post_meta":{"name":"delete_post_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove metadata matching criteria from a post.\n *\n * You can match based on the key, or key and value. Removing based on key and\n * value, will keep from removing duplicate metadata with the same key. It also\n * allows removing all metadata matching key, if needed.\n *\n * @since 1.5.0\n *\n * @param int    $post_id    Post ID.\n * @param string $meta_key   Metadata name.\n * @param mixed  $meta_value Optional. Metadata value. Must be serializable if\n *                           non-scalar. Default empty.\n * @return bool True on success, false on failure.\n *\/"}]},"get_post_meta":{"name":"get_post_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$single","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve post meta field for a post.\n *\n * @since 1.5.0\n *\n * @param int    $post_id Post ID.\n * @param string $key     Optional. The meta key to retrieve. By default, returns\n *                        data for all keys. Default empty.\n * @param bool   $single  Optional. Whether to return a single value. Default false.\n * @return mixed Will be an array if $single is false. Will be value of meta data\n *               field if $single is true.\n *\/"}]},"update_post_meta":{"name":"update_post_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$prev_value","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update post meta field based on post ID.\n *\n * Use the $prev_value parameter to differentiate between meta fields with the\n * same key and post ID.\n *\n * If the meta field for the post does not exist, it will be added.\n *\n * @since 1.5.0\n *\n * @param int    $post_id    Post ID.\n * @param string $meta_key   Metadata key.\n * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.\n * @param mixed  $prev_value Optional. Previous value to check before removing.\n *                           Default empty.\n * @return int|bool Meta ID if the key didn't exist, true on successful update,\n *                  false on failure.\n *\/"}]},"delete_post_meta_by_key":{"name":"delete_post_meta_by_key","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_meta_key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Delete everything from post meta matching meta key.\n *\n * @since 2.3.0\n *\n * @param string $post_meta_key Key to search for when deleting.\n * @return bool Whether the post meta key was deleted from the database.\n *\/"}]},"get_post_custom":{"name":"get_post_custom","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve post meta fields, based on post ID.\n *\n * The post meta fields are retrieved from the cache where possible,\n * so the function is optimized to be called more than once.\n *\n * @since 1.2.0\n *\n * @param int $post_id Optional. Post ID. Default is ID of the global $post.\n * @return array Post meta for the given post.\n *\/"}]},"get_post_custom_keys":{"name":"get_post_custom_keys","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve meta field names for a post.\n *\n * If there are no meta fields, then nothing (null) will be returned.\n *\n * @since 1.2.0\n *\n * @param int $post_id Optional. Post ID. Default is ID of the global $post.\n * @return array|void Array of the keys, if retrieved.\n *\/"}]},"get_post_custom_values":{"name":"get_post_custom_values","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve values for a custom post field.\n *\n * The parameters must not be considered optional. All of the post meta fields\n * will be retrieved and only the meta field key values returned.\n *\n * @since 1.2.0\n *\n * @param string $key     Optional. Meta field key. Default empty.\n * @param int    $post_id Optional. Post ID. Default is ID of the global $post.\n * @return array|null Meta field values.\n *\/"}]},"is_sticky":{"name":"is_sticky","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if post is sticky.\n *\n * Sticky posts should remain at the top of The Loop. If the post ID is not\n * given, then The Loop ID for the current post will be used.\n *\n * @since 2.7.0\n *\n * @param int $post_id Optional. Post ID. Default is ID of the global $post.\n * @return bool Whether post is sticky.\n *\/"}]},"sanitize_post":{"name":"sanitize_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"'display'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize every post field.\n *\n * If the context is 'raw', then the post object or array will get minimal\n * sanitization of the integer fields.\n *\n * @since 2.3.0\n *\n * @see sanitize_post_field()\n *\n * @param object|WP_Post|array $post    The Post Object or Array\n * @param string               $context Optional. How to sanitize post fields.\n *                                      Accepts 'raw', 'edit', 'db', or 'display'.\n *                                      Default 'display'.\n * @return object|WP_Post|array The now sanitized Post Object or Array (will be the\n *                              same type as $post).\n *\/"}]},"sanitize_post_field":{"name":"sanitize_post_field","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$field","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":3,"variadic":false,"reference":false,"default":"'display'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize post field based on context.\n *\n * Possible context values are:  'raw', 'edit', 'db', 'display', 'attribute' and\n * 'js'. The 'display' context is used by default. 'attribute' and 'js' contexts\n * are treated like 'display' when calling filters.\n *\n * @since 2.3.0\n * @since 4.4.0 Like `sanitize_post()`, `$context` defaults to 'display'.\n *\n * @param string $field   The Post Object field name.\n * @param mixed  $value   The Post Object value.\n * @param int    $post_id Post ID.\n * @param string $context Optional. How to sanitize post fields. Looks for 'raw', 'edit',\n *                        'db', 'display', 'attribute' and 'js'. Default 'display'.\n * @return mixed Sanitized value.\n *\/"}]},"stick_post":{"name":"stick_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Make a post sticky.\n *\n * Sticky posts should be displayed at the top of the front page.\n *\n * @since 2.7.0\n *\n * @param int $post_id Post ID.\n *\/"}]},"unstick_post":{"name":"unstick_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Un-stick a post.\n *\n * Sticky posts should be displayed at the top of the front page.\n *\n * @since 2.7.0\n *\n * @param int $post_id Post ID.\n *\/"}]},"_count_posts_cache_key":{"name":"_count_posts_cache_key","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"'post'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$perm","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return the cache key for wp_count_posts() based on the passed arguments.\n *\n * @since 3.9.0\n *\n * @param string $type Optional. Post type to retrieve count Default 'post'.\n * @param string $perm Optional. 'readable' or empty. Default empty.\n * @return string The cache key.\n *\/"}]},"wp_count_posts":{"name":"wp_count_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"'post'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$perm","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Count number of posts of a post type and if user has permissions to view.\n *\n * This function provides an efficient method of finding the amount of post's\n * type a blog has. Another method is to count the amount of items in\n * get_posts(), but that method has a lot of overhead with doing so. Therefore,\n * when developing for 2.5+, use this function instead.\n *\n * The $perm parameter checks for 'readable' value and if the user can read\n * private posts, it will display that for the user that is signed in.\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $type Optional. Post type to retrieve count. Default 'post'.\n * @param string $perm Optional. 'readable' or empty. Default empty.\n * @return object Number of posts for each status.\n *\/"}]},"wp_count_attachments":{"name":"wp_count_attachments","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$mime_type","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Count number of attachments for the mime type(s).\n *\n * If you set the optional mime_type parameter, then an array will still be\n * returned, but will only have the item you are looking for. It does not give\n * you the number of attachments that are children of a post. You can get that\n * by counting the number of children that post has.\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string|array $mime_type Optional. Array or comma-separated list of\n *                                MIME patterns. Default empty.\n * @return object An object containing the attachment counts by mime type.\n *\/"}]},"get_post_mime_types":{"name":"get_post_mime_types","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get default post mime types.\n *\n * @since 2.9.0\n *\n * @return array List of post mime types.\n *\/"}]},"wp_match_mime_types":{"name":"wp_match_mime_types","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wildcard_mime_types","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$real_mime_types","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check a MIME-Type against a list.\n *\n * If the wildcard_mime_types parameter is a string, it must be comma separated\n * list. If the real_mime_types is a string, it is also comma separated to\n * create the list.\n *\n * @since 2.5.0\n *\n * @param string|array $wildcard_mime_types Mime types, e.g. audio\/mpeg or image (same as image\/*)\n *                                          or flash (same as *flash*).\n * @param string|array $real_mime_types     Real post mime type values.\n * @return array array(wildcard=>array(real types)).\n *\/"}]},"wp_post_mime_type_where":{"name":"wp_post_mime_type_where","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_mime_types","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$table_alias","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert MIME types into SQL.\n *\n * @since 2.5.0\n *\n * @param string|array $post_mime_types List of mime types or comma separated string\n *                                      of mime types.\n * @param string       $table_alias     Optional. Specify a table alias, if needed.\n *                                      Default empty.\n * @return string The SQL AND clause for mime searching.\n *\/"}]},"wp_delete_post":{"name":"wp_delete_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$postid","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$force_delete","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Trash or delete a post or page.\n *\n * When the post and page is permanently deleted, everything that is tied to\n * it is deleted also. This includes comments, post meta fields, and terms\n * associated with the post.\n *\n * The post or page is moved to trash instead of permanently deleted unless\n * trash is disabled, item is already in the trash, or $force_delete is true.\n *\n * @since 1.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n * @see wp_delete_attachment()\n * @see wp_trash_post()\n *\n * @param int  $postid       Optional. Post ID. Default 0.\n * @param bool $force_delete Optional. Whether to bypass trash and force deletion.\n *                           Default false.\n * @return array|false|WP_Post False on failure.\n *\/"}]},"_reset_front_page_settings_for_post":{"name":"_reset_front_page_settings_for_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Reset the page_on_front, show_on_front, and page_for_post settings when\n * a linked page is deleted or trashed.\n *\n * Also ensures the post is no longer sticky.\n *\n * @since 3.7.0\n * @access private\n *\n * @param int $post_id Post ID.\n *\/"}]},"wp_trash_post":{"name":"wp_trash_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Move a post or page to the Trash\n *\n * If trash is disabled, the post or page is permanently deleted.\n *\n * @since 2.9.0\n *\n * @see wp_delete_post()\n *\n * @param int $post_id Optional. Post ID. Default is ID of the global $post\n *                     if EMPTY_TRASH_DAYS equals true.\n * @return false|array|WP_Post|null Post data array, otherwise false.\n *\/"}]},"wp_untrash_post":{"name":"wp_untrash_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Restore a post or page from the Trash.\n *\n * @since 2.9.0\n *\n * @param int $post_id Optional. Post ID. Default is ID of the global $post.\n * @return WP_Post|false WP_Post object. False on failure.\n *\/"}]},"wp_trash_post_comments":{"name":"wp_trash_post_comments","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Moves comments for a post to the trash.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|WP_Post|null $post Optional. Post ID or post object. Defaults to global $post.\n * @return mixed|void False on failure.\n *\/"}]},"wp_untrash_post_comments":{"name":"wp_untrash_post_comments","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Restore comments for a post from the trash.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|WP_Post|null $post Optional. Post ID or post object. Defaults to global $post.\n * @return true|void\n *\/"}]},"wp_get_post_categories":{"name":"wp_get_post_categories","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the list of categories for a post.\n *\n * Compatibility layer for themes and plugins. Also an easy layer of abstraction\n * away from the complexity of the taxonomy layer.\n *\n * @since 2.1.0\n *\n * @see wp_get_object_terms()\n *\n * @param int   $post_id Optional. The Post ID. Does not default to the ID of the\n *                       global $post. Default 0.\n * @param array $args    Optional. Category arguments. See wp_get_object_terms(). Default empty.\n * @return array List of categories. If the `$fields` argument passed via `$args` is 'all' or\n *               'all_with_object_id', an array of WP_Term objects will be returned. If `$fields`\n *               is 'ids', an array of category ids. If `$fields` is 'names', an array of category names.\n *\/"}]},"wp_get_post_tags":{"name":"wp_get_post_tags","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the tags for a post.\n *\n * There is only one default for this function, called 'fields' and by default\n * is set to 'all'. There are other defaults that can be overridden in\n * wp_get_object_terms().\n *\n * @since 2.3.0\n *\n * @param int   $post_id Optional. The Post ID. Does not default to the ID of the\n *                       global $post. Default 0.\n * @param array $args Optional. Overwrite the defaults\n * @return array List of post tags.\n *\/"}]},"wp_get_post_terms":{"name":"wp_get_post_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"'post_tag'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the terms for a post.\n *\n * There is only one default for this function, called 'fields' and by default\n * is set to 'all'. There are other defaults that can be overridden in\n * wp_get_object_terms().\n *\n * @since 2.8.0\n *\n * @param int    $post_id  Optional. The Post ID. Does not default to the ID of the\n *                         global $post. Default 0.\n * @param string $taxonomy Optional. The taxonomy for which to retrieve terms. Default 'post_tag'.\n * @param array  $args     Optional. wp_get_object_terms() arguments. Default empty array.\n * @return array|WP_Error  List of post terms or empty array if no terms were found. WP_Error object\n *                         if `$taxonomy` doesn't exist.\n *\/"}]},"wp_get_recent_posts":{"name":"wp_get_recent_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"ARRAY_A","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve a number of recent posts.\n *\n * @since 1.0.0\n *\n * @see get_posts()\n *\n * @param array  $args   Optional. Arguments to retrieve posts. Default empty array.\n * @param string $output Optional. The required return type. One of OBJECT or ARRAY_A, which correspond to\n *                       a WP_Post object or an associative array, respectively. Default ARRAY_A.\n * @return array|false Array of recent posts, where the type of each element is determined by $output parameter.\n *                     Empty array on failure.\n *\/"}]},"wp_insert_post":{"name":"wp_insert_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$postarr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$wp_error","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Insert or update a post.\n *\n * If the $postarr parameter has 'ID' set to a value, then post will be updated.\n *\n * You can set the post date manually, by setting the values for 'post_date'\n * and 'post_date_gmt' keys. You can close the comments or open the comments by\n * setting the value for 'comment_status' key.\n *\n * @since 1.0.0\n * @since 4.2.0 Support was added for encoding emoji in the post title, content, and excerpt.\n * @since 4.4.0 A 'meta_input' array can now be passed to `$postarr` to add post meta data.\n *\n * @see sanitize_post()\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $postarr {\n *     An array of elements that make up a post to update or insert.\n *\n *     @type int    $ID                    The post ID. If equal to something other than 0,\n *                                         the post with that ID will be updated. Default 0.\n *     @type int    $post_author           The ID of the user who added the post. Default is\n *                                         the current user ID.\n *     @type string $post_date             The date of the post. Default is the current time.\n *     @type string $post_date_gmt         The date of the post in the GMT timezone. Default is\n *                                         the value of `$post_date`.\n *     @type mixed  $post_content          The post content. Default empty.\n *     @type string $post_content_filtered The filtered post content. Default empty.\n *     @type string $post_title            The post title. Default empty.\n *     @type string $post_excerpt          The post excerpt. Default empty.\n *     @type string $post_status           The post status. Default 'draft'.\n *     @type string $post_type             The post type. Default 'post'.\n *     @type string $comment_status        Whether the post can accept comments. Accepts 'open' or 'closed'.\n *                                         Default is the value of 'default_comment_status' option.\n *     @type string $ping_status           Whether the post can accept pings. Accepts 'open' or 'closed'.\n *                                         Default is the value of 'default_ping_status' option.\n *     @type string $post_password         The password to access the post. Default empty.\n *     @type string $post_name             The post name. Default is the sanitized post title\n *                                         when creating a new post.\n *     @type string $to_ping               Space or carriage return-separated list of URLs to ping.\n *                                         Default empty.\n *     @type string $pinged                Space or carriage return-separated list of URLs that have\n *                                         been pinged. Default empty.\n *     @type string $post_modified         The date when the post was last modified. Default is\n *                                         the current time.\n *     @type string $post_modified_gmt     The date when the post was last modified in the GMT\n *                                         timezone. Default is the current time.\n *     @type int    $post_parent           Set this for the post it belongs to, if any. Default 0.\n *     @type int    $menu_order            The order the post should be displayed in. Default 0.\n *     @type string $post_mime_type        The mime type of the post. Default empty.\n *     @type string $guid                  Global Unique ID for referencing the post. Default empty.\n *     @type array  $post_category         Array of category names, slugs, or IDs.\n *                                         Defaults to value of the 'default_category' option.\n *     @type array  $tax_input             Array of taxonomy terms keyed by their taxonomy name. Default empty.\n *     @type array  $meta_input            Array of post meta values keyed by their post meta key. Default empty.\n * }\n * @param bool  $wp_error Optional. Whether to return a WP_Error on failure. Default false.\n * @return int|WP_Error The post ID on success. The value 0 or WP_Error on failure.\n *\/"}]},"wp_update_post":{"name":"wp_update_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$postarr","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$wp_error","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update a post with new post data.\n *\n * The date does not have to be set for drafts. You can set the date and it will\n * not be overridden.\n *\n * @since 1.0.0\n *\n * @param array|object $postarr  Optional. Post data. Arrays are expected to be escaped,\n *                               objects are not. Default array.\n * @param bool         $wp_error Optional. Allow return of WP_Error on failure. Default false.\n * @return int|WP_Error The value 0 or WP_Error on failure. The post ID on success.\n *\/"}]},"wp_publish_post":{"name":"wp_publish_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Publish a post by transitioning the post status.\n *\n * @since 2.1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|WP_Post $post Post ID or post object.\n *\/"}]},"check_and_publish_future_post":{"name":"check_and_publish_future_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Publish future post and make sure post ID has future post status.\n *\n * Invoked by cron 'publish_future_post' event. This safeguard prevents cron\n * from publishing drafts, etc.\n *\n * @since 2.5.0\n *\n * @param int|WP_Post $post_id Post ID or post object.\n *\/"}]},"wp_unique_post_slug":{"name":"wp_unique_post_slug","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$slug","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_ID","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_status","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_type","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_parent","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Computes a unique slug for the post, when given the desired slug and some post details.\n *\n * @since 2.8.0\n *\n * @global wpdb       $wpdb WordPress database abstraction object.\n * @global WP_Rewrite $wp_rewrite\n *\n * @param string $slug        The desired slug (post_name).\n * @param int    $post_ID     Post ID.\n * @param string $post_status No uniqueness checks are made if the post is still draft or pending.\n * @param string $post_type   Post type.\n * @param int    $post_parent Post parent ID.\n * @return string Unique slug for the post, based on $post_name (with a -1, -2, etc. suffix)\n *\/"}]},"_truncate_post_slug":{"name":"_truncate_post_slug","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$slug","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$length","rank":1,"variadic":false,"reference":false,"default":"200","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Truncate a post slug.\n *\n * @since 3.6.0\n * @access private\n *\n * @see utf8_uri_encode()\n *\n * @param string $slug   The slug to truncate.\n * @param int    $length Optional. Max length of the slug. Default 200 (characters).\n * @return string The truncated slug.\n *\/"}]},"wp_add_post_tags":{"name":"wp_add_post_tags","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tags","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add tags to a post.\n *\n * @see wp_set_post_tags()\n *\n * @since 2.3.0\n *\n * @param int          $post_id Optional. The Post ID. Does not default to the ID of the global $post.\n * @param string|array $tags    Optional. An array of tags to set for the post, or a string of tags\n *                              separated by commas. Default empty.\n * @return array|false|WP_Error Array of affected term IDs. WP_Error or false on failure.\n *\/"}]},"wp_set_post_tags":{"name":"wp_set_post_tags","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tags","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$append","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set the tags for a post.\n *\n * @since 2.3.0\n *\n * @see wp_set_object_terms()\n *\n * @param int          $post_id Optional. The Post ID. Does not default to the ID of the global $post.\n * @param string|array $tags    Optional. An array of tags to set for the post, or a string of tags\n *                              separated by commas. Default empty.\n * @param bool         $append  Optional. If true, don't delete existing tags, just add on. If false,\n *                              replace the tags with the new tags. Default false.\n * @return array|false|WP_Error Array of term taxonomy IDs of affected terms. WP_Error or false on failure.\n *\/"}]},"wp_set_post_terms":{"name":"wp_set_post_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tags","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":2,"variadic":false,"reference":false,"default":"'post_tag'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$append","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set the terms for a post.\n *\n * @since 2.8.0\n *\n * @see wp_set_object_terms()\n *\n * @param int          $post_id  Optional. The Post ID. Does not default to the ID of the global $post.\n * @param string|array $tags     Optional. An array of terms to set for the post, or a string of terms\n *                               separated by commas. Default empty.\n * @param string       $taxonomy Optional. Taxonomy name. Default 'post_tag'.\n * @param bool         $append   Optional. If true, don't delete existing terms, just add on. If false,\n *                               replace the terms with the new terms. Default false.\n * @return array|false|WP_Error Array of term taxonomy IDs of affected terms. WP_Error or false on failure.\n *\/"}]},"wp_set_post_categories":{"name":"wp_set_post_categories","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_ID","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_categories","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$append","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set categories for a post.\n *\n * If the post categories parameter is not set, then the default category is\n * going used.\n *\n * @since 2.1.0\n *\n * @param int       $post_ID         Optional. The Post ID. Does not default to the ID\n *                                   of the global $post. Default 0.\n * @param array|int $post_categories Optional. List of categories or ID of category.\n *                                   Default empty array.\n * @param bool      $append         If true, don't delete existing categories, just add on.\n *                                  If false, replace the categories with the new categories.\n * @return array|false|WP_Error Array of term taxonomy IDs of affected categories. WP_Error or false on failure.\n *\/"}]},"wp_transition_post_status":{"name":"wp_transition_post_status","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$new_status","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_status","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Fires actions related to the transitioning of a post's status.\n *\n * When a post is saved, the post status is \"transitioned\" from one status to another,\n * though this does not always mean the status has actually changed before and after\n * the save. This function fires a number of action hooks related to that transition:\n * the generic {@see 'transition_post_status'} action, as well as the dynamic hooks\n * {@see '$old_status_to_$new_status'} and {@see '$new_status_$post->post_type'}. Note\n * that the function does not transition the post object in the database.\n *\n * For instance: When publishing a post for the first time, the post status may transition\n * from 'draft' \u2013 or some other status \u2013 to 'publish'. However, if a post is already\n * published and is simply being updated, the \"old\" and \"new\" statuses may both be 'publish'\n * before and after the transition.\n *\n * @since 2.3.0\n *\n * @param string  $new_status Transition to this post status.\n * @param string  $old_status Previous post status.\n * @param WP_Post $post Post data.\n *\/"}]},"add_ping":{"name":"add_ping","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$uri","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a URL to those already pinged.\n *\n * @since 1.5.0\n * @since 4.7.0 $post_id can be a WP_Post object.\n * @since 4.7.0 $uri can be an array of URIs.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|WP_Post  $post_id Post object or ID.\n * @param string|array $uri     Ping URI or array of URIs.\n * @return int|false How many rows were updated.\n *\/"}]},"get_enclosed":{"name":"get_enclosed","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve enclosures already enclosed for a post.\n *\n * @since 1.5.0\n *\n * @param int $post_id Post ID.\n * @return array List of enclosures.\n *\/"}]},"get_pung":{"name":"get_pung","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve URLs already pinged for a post.\n *\n * @since 1.5.0\n *\n * @since 4.7.0 $post_id can be a WP_Post object.\n *\n * @param int|WP_Post $post_id Post ID or object.\n * @return array\n *\/"}]},"get_to_ping":{"name":"get_to_ping","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve URLs that need to be pinged.\n *\n * @since 1.5.0\n * @since 4.7.0 $post_id can be a WP_Post object.\n *\n * @param int|WP_Post $post_id Post Object or ID\n * @return array\n *\/"}]},"trackback_url_list":{"name":"trackback_url_list","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tb_list","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Do trackbacks for a list of URLs.\n *\n * @since 1.0.0\n *\n * @param string $tb_list Comma separated list of URLs.\n * @param int    $post_id Post ID.\n *\/"}]},"get_all_page_ids":{"name":"get_all_page_ids","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get a list of page IDs.\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @return array List of page IDs.\n *\/"}]},"get_page":{"name":"get_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"OBJECT","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filter","rank":2,"variadic":false,"reference":false,"default":"'raw'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves page data given a page ID or page object.\n *\n * Use get_post() instead of get_page().\n *\n * @since 1.5.1\n * @deprecated 3.5.0 Use get_post()\n *\n * @param mixed  $page   Page object or page ID. Passed by reference.\n * @param string $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                       a WP_Post object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @param string $filter Optional. How the return value should be filtered. Accepts 'raw',\n *                       'edit', 'db', 'display'. Default 'raw'.\n * @return WP_Post|array|null WP_Post (or array) on success, or null on failure.\n *\/"}]},"get_page_by_path":{"name":"get_page_by_path","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page_path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"OBJECT","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_type","rank":2,"variadic":false,"reference":false,"default":"'page'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a page given its path.\n *\n * @since 2.1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string       $page_path Page path.\n * @param string       $output    Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                                a WP_Post object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @param string|array $post_type Optional. Post type or array of post types. Default 'page'.\n * @return WP_Post|array|null WP_Post (or array) on success, or null on failure.\n *\/"}]},"get_page_by_title":{"name":"get_page_by_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page_title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"OBJECT","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_type","rank":2,"variadic":false,"reference":false,"default":"'page'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve a page given its title.\n *\n * @since 2.1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string       $page_title Page title\n * @param string       $output     Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                                 a WP_Post object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @param string|array $post_type  Optional. Post type or array of post types. Default 'page'.\n * @return WP_Post|array|null WP_Post (or array) on success, or null on failure.\n *\/"}]},"get_page_children":{"name":"get_page_children","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$pages","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Identify descendants of a given page ID in a list of page objects.\n *\n * Descendants are identified from the `$pages` array passed to the function. No database queries are performed.\n *\n * @since 1.5.1\n *\n * @param int   $page_id Page ID.\n * @param array $pages   List of page objects from which descendants should be identified.\n * @return array List of page children.\n *\/"}]},"get_page_hierarchy":{"name":"get_page_hierarchy","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$pages","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$page_id","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Order the pages with children under parents in a flat list.\n *\n * It uses auxiliary structure to hold parent-children relationships and\n * runs in O(N) complexity\n *\n * @since 2.0.0\n *\n * @param array $pages   Posts array, passed by reference.\n * @param int   $page_id Optional. Parent page ID. Default 0.\n * @return array A list arranged by hierarchy. Children immediately follow their parents.\n *\/"}]},"_page_traverse_name":{"name":"_page_traverse_name","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$children","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$result","rank":2,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Traverse and return all the nested children post names of a root page.\n *\n * $children contains parent-children relations\n *\n * @since 2.9.0\n *\n * @see _page_traverse_name()\n *\n * @param int   $page_id   Page ID.\n * @param array $children  Parent-children relations, passed by reference.\n * @param array $result    Result, passed by reference.\n *\/"}]},"get_page_uri":{"name":"get_page_uri","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Build the URI path for a page.\n *\n * Sub pages will be in the \"directory\" under the parent page post name.\n *\n * @since 1.5.0\n * @since 4.6.0 Converted the `$page` parameter to optional.\n *\n * @param WP_Post|object|int $page Optional. Page ID or WP_Post object. Default is global $post.\n * @return string|false Page URI, false on error.\n *\/"}]},"get_pages":{"name":"get_pages","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve a list of pages.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @since 1.5.0\n *\n * @param array|string $args {\n *     Optional. Array or string of arguments to retrieve pages.\n *\n *     @type int          $child_of     Page ID to return child and grandchild pages of. Note: The value\n *                                      of `$hierarchical` has no bearing on whether `$child_of` returns\n *                                      hierarchical results. Default 0, or no restriction.\n *     @type string       $sort_order   How to sort retrieved pages. Accepts 'ASC', 'DESC'. Default 'ASC'.\n *     @type string       $sort_column  What columns to sort pages by, comma-separated. Accepts 'post_author',\n *                                      'post_date', 'post_title', 'post_name', 'post_modified', 'menu_order',\n *                                      'post_modified_gmt', 'post_parent', 'ID', 'rand', 'comment_count'.\n *                                      'post_' can be omitted for any values that start with it.\n *                                      Default 'post_title'.\n *     @type bool         $hierarchical Whether to return pages hierarchically. If false in conjunction with\n *                                      `$child_of` also being false, both arguments will be disregarded.\n *                                      Default true.\n *     @type array        $exclude      Array of page IDs to exclude. Default empty array.\n *     @type array        $include      Array of page IDs to include. Cannot be used with `$child_of`,\n *                                      `$parent`, `$exclude`, `$meta_key`, `$meta_value`, or `$hierarchical`.\n *                                      Default empty array.\n *     @type string       $meta_key     Only include pages with this meta key. Default empty.\n *     @type string       $meta_value   Only include pages with this meta value. Requires `$meta_key`.\n *                                      Default empty.\n *     @type string       $authors      A comma-separated list of author IDs. Default empty.\n *     @type int          $parent       Page ID to return direct children of. Default -1, or no restriction.\n *     @type string|array $exclude_tree Comma-separated string or array of page IDs to exclude.\n *                                      Default empty array.\n *     @type int          $number       The number of pages to return. Default 0, or all pages.\n *     @type int          $offset       The number of pages to skip before returning. Requires `$number`.\n *                                      Default 0.\n *     @type string       $post_type    The post type to query. Default 'page'.\n *     @type string|array $post_status  A comma-separated list or array of post statuses to include.\n *                                      Default 'publish'.\n * }\n * @return array|false List of pages matching defaults or `$args`.\n *\/"}]},"is_local_attachment":{"name":"is_local_attachment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if the attachment URI is local one and is really an attachment.\n *\n * @since 2.0.0\n *\n * @param string $url URL to check\n * @return bool True on success, false on failure.\n *\/"}]},"wp_insert_attachment":{"name":"wp_insert_attachment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$file","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$wp_error","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Insert an attachment.\n *\n * If you set the 'ID' in the $args parameter, it will mean that you are\n * updating and attempt to update the attachment. You can also set the\n * attachment name or title by setting the key 'post_name' or 'post_title'.\n *\n * You can set the dates for the attachment manually by setting the 'post_date'\n * and 'post_date_gmt' keys' values.\n *\n * By default, the comments will use the default settings for whether the\n * comments are allowed. You can close them manually or keep them open by\n * setting the value for the 'comment_status' key.\n *\n * @since 2.0.0\n * @since 4.7.0 Added the `$wp_error` parameter to allow a WP_Error to be returned on failure.\n *\n * @see wp_insert_post()\n *\n * @param string|array $args     Arguments for inserting an attachment.\n * @param string       $file     Optional. Filename.\n * @param int          $parent   Optional. Parent post ID.\n * @param bool         $wp_error Optional. Whether to return a WP_Error on failure. Default false.\n * @return int|WP_Error The attachment ID on success. The value 0 or WP_Error on failure.\n *\/"}]},"wp_delete_attachment":{"name":"wp_delete_attachment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$force_delete","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Trash or delete an attachment.\n *\n * When an attachment is permanently deleted, the file will also be removed.\n * Deletion removes all post meta fields, taxonomy, comments, etc. associated\n * with the attachment (except the main post).\n *\n * The attachment is moved to the trash instead of permanently deleted unless trash\n * for media is disabled, item is already in the trash, or $force_delete is true.\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int  $post_id      Attachment ID.\n * @param bool $force_delete Optional. Whether to bypass trash and force deletion.\n *                           Default false.\n * @return mixed False on failure. Post data on success.\n *\/"}]},"wp_delete_attachment_files":{"name":"wp_delete_attachment_files","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$backup_sizes","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$file","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deletes all files that belong to the given attachment.\n *\n * @since 4.9.7\n *\n * @param int    $post_id      Attachment ID.\n * @param array  $meta         The attachment's meta data.\n * @param array  $backup_sizes The meta data for the attachment's backup images.\n * @param string $file         Absolute path to the attachment's file.\n * @return bool True on success, false on failure.\n *\/"}]},"wp_get_attachment_metadata":{"name":"wp_get_attachment_metadata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$unfiltered","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve attachment meta field for attachment ID.\n *\n * @since 2.1.0\n *\n * @param int  $post_id    Attachment ID. Default 0.\n * @param bool $unfiltered Optional. If true, filters are not run. Default false.\n * @return mixed Attachment meta field. False on failure.\n *\/"}]},"wp_update_attachment_metadata":{"name":"wp_update_attachment_metadata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update metadata for an attachment.\n *\n * @since 2.1.0\n *\n * @param int   $post_id Attachment ID.\n * @param array $data    Attachment data.\n * @return int|bool False if $post is invalid.\n *\/"}]},"wp_get_attachment_url":{"name":"wp_get_attachment_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the URL for an attachment.\n *\n * @since 2.1.0\n *\n * @global string $pagenow\n *\n * @param int $post_id Optional. Attachment ID. Default 0.\n * @return string|false Attachment URL, otherwise false.\n *\/"}]},"wp_get_attachment_caption":{"name":"wp_get_attachment_caption","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the caption for an attachment.\n *\n * @since 4.6.0\n *\n * @param int $post_id Optional. Attachment ID. Default is the ID of the global `$post`.\n * @return string|false False on failure. Attachment caption on success.\n *\/"}]},"wp_get_attachment_thumb_file":{"name":"wp_get_attachment_thumb_file","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve thumbnail for an attachment.\n *\n * @since 2.1.0\n *\n * @param int $post_id Optional. Attachment ID. Default 0.\n * @return string|false False on failure. Thumbnail file path on success.\n *\/"}]},"wp_get_attachment_thumb_url":{"name":"wp_get_attachment_thumb_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve URL for an attachment thumbnail.\n *\n * @since 2.1.0\n *\n * @param int $post_id Optional. Attachment ID. Default 0.\n * @return string|false False on failure. Thumbnail URL on success.\n *\/"}]},"wp_attachment_is":{"name":"wp_attachment_is","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Verifies an attachment is of a given type.\n *\n * @since 4.2.0\n *\n * @param string      $type Attachment type. Accepts 'image', 'audio', or 'video'.\n * @param int|WP_Post $post Optional. Attachment ID or object. Default is global $post.\n * @return bool True if one of the accepted types, false otherwise.\n *\/"}]},"wp_attachment_is_image":{"name":"wp_attachment_is_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks if the attachment is an image.\n *\n * @since 2.1.0\n * @since 4.2.0 Modified into wrapper for wp_attachment_is() and\n *              allowed WP_Post object to be passed.\n *\n * @param int|WP_Post $post Optional. Attachment ID or object. Default is global $post.\n * @return bool Whether the attachment is an image.\n *\/"}]},"wp_mime_type_icon":{"name":"wp_mime_type_icon","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$mime","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the icon for a MIME type.\n *\n * @since 2.1.0\n *\n * @param string|int $mime MIME type or attachment ID.\n * @return string|false Icon, false otherwise.\n *\/"}]},"wp_check_for_changed_slugs":{"name":"wp_check_for_changed_slugs","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_before","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check for changed slugs for published post objects and save the old slug.\n *\n * The function is used when a post object of any type is updated,\n * by comparing the current and previous post objects.\n *\n * If the slug was changed and not already part of the old slugs then it will be\n * added to the post meta field ('_wp_old_slug') for storing old slugs for that\n * post.\n *\n * The most logically usage of this function is redirecting changed post objects, so\n * that those that linked to an changed post will be redirected to the new post.\n *\n * @since 2.1.0\n *\n * @param int     $post_id     Post ID.\n * @param WP_Post $post        The Post Object\n * @param WP_Post $post_before The Previous Post Object\n *\/"}]},"get_private_posts_cap_sql":{"name":"get_private_posts_cap_sql","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the private post SQL based on capability.\n *\n * This function provides a standardized way to appropriately select on the\n * post_status of a post type. The function will return a piece of SQL code\n * that can be added to a WHERE clause; this SQL is constructed to allow all\n * published posts, and all private posts to which the user has access.\n *\n * @since 2.2.0\n * @since 4.3.0 Added the ability to pass an array to `$post_type`.\n *\n * @param string|array $post_type Single post type or an array of post types. Currently only supports 'post' or 'page'.\n * @return string SQL code that can be added to a where clause.\n *\/"}]},"get_posts_by_author_sql":{"name":"get_posts_by_author_sql","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$full","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_author","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$public_only","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the post SQL based on capability, author, and type.\n *\n * @since 3.0.0\n * @since 4.3.0 Introduced the ability to pass an array of post types to `$post_type`.\n *\n * @see get_private_posts_cap_sql()\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array|string   $post_type   Single post type or an array of post types.\n * @param bool           $full        Optional. Returns a full WHERE statement instead of just\n *                                    an 'andalso' term. Default true.\n * @param int            $post_author Optional. Query posts having a single author ID. Default null.\n * @param bool           $public_only Optional. Only return public posts. Skips cap checks for\n *                                    $current_user.  Default false.\n * @return string SQL WHERE code that can be added to a query.\n *\/"}]},"get_lastpostdate":{"name":"get_lastpostdate","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$timezone","rank":0,"variadic":false,"reference":false,"default":"'server'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_type","rank":1,"variadic":false,"reference":false,"default":"'any'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the date that the last post was published.\n *\n * The server timezone is the default and is the difference between GMT and\n * server time. The 'blog' value is the date when the last post was posted. The\n * 'gmt' is when the last post was posted in GMT formatted date.\n *\n * @since 0.71\n * @since 4.4.0 The `$post_type` argument was added.\n *\n * @param string $timezone  Optional. The timezone for the timestamp. Accepts 'server', 'blog', or 'gmt'.\n *                          'server' uses the server's internal timezone.\n *                          'blog' uses the `post_modified` field, which proxies to the timezone set for the site.\n *                          'gmt' uses the `post_modified_gmt` field.\n *                          Default 'server'.\n * @param string $post_type Optional. The post type to check. Default 'any'.\n * @return string The date of the last post.\n *\/"}]},"get_lastpostmodified":{"name":"get_lastpostmodified","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$timezone","rank":0,"variadic":false,"reference":false,"default":"'server'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_type","rank":1,"variadic":false,"reference":false,"default":"'any'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the timestamp of the last time any post was modified.\n *\n * The server timezone is the default and is the difference between GMT and\n * server time. The 'blog' value is just when the last post was modified. The\n * 'gmt' is when the last post was modified in GMT time.\n *\n * @since 1.2.0\n * @since 4.4.0 The `$post_type` argument was added.\n *\n * @param string $timezone  Optional. The timezone for the timestamp. See get_lastpostdate()\n *                          for information on accepted values.\n *                          Default 'server'.\n * @param string $post_type Optional. The post type to check. Default 'any'.\n * @return string The timestamp.\n *\/"}]},"_get_last_post_time":{"name":"_get_last_post_time","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$timezone","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$field","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_type","rank":2,"variadic":false,"reference":false,"default":"'any'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the timestamp of the last time any post was modified or published.\n *\n * @since 3.1.0\n * @since 4.4.0 The `$post_type` argument was added.\n * @access private\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $timezone  The timezone for the timestamp. See get_lastpostdate().\n *                          for information on accepted values.\n * @param string $field     Post field to check. Accepts 'date' or 'modified'.\n * @param string $post_type Optional. The post type to check. Default 'any'.\n * @return string|false The timestamp.\n *\/"}]},"update_post_cache":{"name":"update_post_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$posts","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates posts in cache.\n *\n * @since 1.5.1\n *\n * @param array $posts Array of post objects, passed by reference.\n *\/"}]},"clean_post_cache":{"name":"clean_post_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Will clean the post in the cache.\n *\n * Cleaning means delete from the cache of the post. Will call to clean the term\n * object cache associated with the post ID.\n *\n * This function not run if $_wp_suspend_cache_invalidation is not empty. See\n * wp_suspend_cache_invalidation().\n *\n * @since 2.0.0\n *\n * @global bool $_wp_suspend_cache_invalidation\n *\n * @param int|WP_Post $post Post ID or post object to remove from the cache.\n *\/"}]},"update_post_caches":{"name":"update_post_caches","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$posts","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_type","rank":1,"variadic":false,"reference":false,"default":"'post'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$update_term_cache","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$update_meta_cache","rank":3,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Call major cache updating functions for list of Post objects.\n *\n * @since 1.5.0\n *\n * @param array  $posts             Array of Post objects\n * @param string $post_type         Optional. Post type. Default 'post'.\n * @param bool   $update_term_cache Optional. Whether to update the term cache. Default true.\n * @param bool   $update_meta_cache Optional. Whether to update the meta cache. Default true.\n *\/"}]},"update_postmeta_cache":{"name":"update_postmeta_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates metadata cache for list of post IDs.\n *\n * Performs SQL query to retrieve the metadata for the post IDs and updates the\n * metadata cache for the posts. Therefore, the functions, which call this\n * function, do not need to perform SQL queries on their own.\n *\n * @since 2.1.0\n *\n * @param array $post_ids List of post IDs.\n * @return array|false Returns false if there is nothing to update or an array\n *                     of metadata.\n *\/"}]},"clean_attachment_cache":{"name":"clean_attachment_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$clean_terms","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Will clean the attachment in the cache.\n *\n * Cleaning means delete from the cache. Optionally will clean the term\n * object cache associated with the attachment ID.\n *\n * This function will not run if $_wp_suspend_cache_invalidation is not empty.\n *\n * @since 3.0.0\n *\n * @global bool $_wp_suspend_cache_invalidation\n *\n * @param int  $id          The attachment ID in the cache to clean.\n * @param bool $clean_terms Optional. Whether to clean terms cache. Default false.\n *\/"}]},"_transition_post_status":{"name":"_transition_post_status","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$new_status","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_status","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Hook for managing future post transitions to published.\n *\n * @since 2.3.0\n * @access private\n *\n * @see wp_clear_scheduled_hook()\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string  $new_status New post status.\n * @param string  $old_status Previous post status.\n * @param WP_Post $post       Post object.\n *\/"}]},"_future_post_hook":{"name":"_future_post_hook","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$deprecated","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Hook used to schedule publication for a post marked for the future.\n *\n * The $post properties used and must exist are 'ID' and 'post_date_gmt'.\n *\n * @since 2.3.0\n * @access private\n *\n * @param int     $deprecated Not used. Can be set to null. Never implemented. Not marked\n *                            as deprecated with _deprecated_argument() as it conflicts with\n *                            wp_transition_post_status() and the default filter for _future_post_hook().\n * @param WP_Post $post       Post object.\n *\/"}]},"_publish_post_hook":{"name":"_publish_post_hook","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Hook to schedule pings and enclosures when a post is published.\n *\n * Uses XMLRPC_REQUEST and WP_IMPORTING constants.\n *\n * @since 2.3.0\n * @access private\n *\n * @param int $post_id The ID in the database table of the post being published.\n *\/"}]},"wp_get_post_parent_id":{"name":"wp_get_post_parent_id","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_ID","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return the post's parent's post_ID\n *\n * @since 3.1.0\n *\n * @param int $post_ID\n *\n * @return int|false Post parent ID, otherwise false.\n *\/"}]},"wp_check_post_hierarchy_for_loops":{"name":"wp_check_post_hierarchy_for_loops","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_parent","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_ID","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check the given subset of the post hierarchy for hierarchy loops.\n *\n * Prevents loops from forming and breaks those that it finds. Attached\n * to the {@see 'wp_insert_post_parent'} filter.\n *\n * @since 3.1.0\n *\n * @see wp_find_hierarchy_loop()\n *\n * @param int $post_parent ID of the parent for the post we're checking.\n * @param int $post_ID     ID of the post we're checking.\n * @return int The new post_parent for the post, 0 otherwise.\n *\/"}]},"set_post_thumbnail":{"name":"set_post_thumbnail","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$thumbnail_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set a post thumbnail.\n *\n * @since 3.1.0\n *\n * @param int|WP_Post $post         Post ID or post object where thumbnail should be attached.\n * @param int         $thumbnail_id Thumbnail to attach.\n * @return int|bool True on success, false on failure.\n *\/"}]},"delete_post_thumbnail":{"name":"delete_post_thumbnail","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove a post thumbnail.\n *\n * @since 3.3.0\n *\n * @param int|WP_Post $post Post ID or post object where thumbnail should be removed from.\n * @return bool True on success, false on failure.\n *\/"}]},"wp_delete_auto_drafts":{"name":"wp_delete_auto_drafts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Delete auto-drafts for new posts that are > 7 days old.\n *\n * @since 3.4.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"wp_queue_posts_for_term_meta_lazyload":{"name":"wp_queue_posts_for_term_meta_lazyload","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$posts","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Queues posts for lazy-loading of term meta.\n *\n * @since 4.5.0\n *\n * @param array $posts Array of WP_Post objects.\n *\/"}]},"_update_term_count_on_transition_post_status":{"name":"_update_term_count_on_transition_post_status","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$new_status","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_status","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update the custom taxonomies' term counts when a post's status is changed.\n *\n * For example, default posts term counts (for custom taxonomies) don't include\n * private \/ draft posts.\n *\n * @since 3.3.0\n * @access private\n *\n * @param string  $new_status New post status.\n * @param string  $old_status Old post status.\n * @param WP_Post $post       Post object.\n *\/"}]},"_prime_post_caches":{"name":"_prime_post_caches","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$update_term_cache","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$update_meta_cache","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds any posts from the given ids to the cache that do not already exist in cache\n *\n * @since 3.4.0\n * @access private\n *\n * @see update_post_caches()\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $ids               ID list.\n * @param bool  $update_term_cache Optional. Whether to update the term cache. Default true.\n * @param bool  $update_meta_cache Optional. Whether to update the meta cache. Default true.\n *\/"}]},"wp_add_trashed_suffix_to_post_name_for_trashed_posts":{"name":"wp_add_trashed_suffix_to_post_name_for_trashed_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_ID","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds a suffix if any trashed posts have a given slug.\n *\n * Store its desired (i.e. current) slug so it can try to reclaim it\n * if the post is untrashed.\n *\n * For internal use.\n *\n * @since 4.5.0\n * @access private\n *\n * @param string $post_name Slug.\n * @param string $post_ID   Optional. Post ID that should be ignored. Default 0.\n *\/"}]},"wp_add_trashed_suffix_to_post_name_for_post":{"name":"wp_add_trashed_suffix_to_post_name_for_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds a trashed suffix for a given post.\n *\n * Store its desired (i.e. current) slug so it can try to reclaim it\n * if the post is untrashed.\n *\n * For internal use.\n *\n * @since 4.5.0\n * @access private\n *\n * @param WP_Post $post The post.\n * @return string New slug for the post.\n *\/"}]},"_filter_query_attachment_filenames":{"name":"_filter_query_attachment_filenames","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$clauses","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filter the SQL clauses of an attachment query to include filenames.\n *\n * @since 4.7.0\n * @access private\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $clauses An array including WHERE, GROUP BY, JOIN, ORDER BY,\n *                       DISTINCT, fields (SELECT), and LIMITS clauses.\n * @return array The modified clauses.\n *\/"}]},"wp_simplepie_autoload":{"name":"wp_simplepie_autoload","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * WordPress autoloader for SimplePie.\n *\n * @since 3.5.0\n *\/"}]},"register_rest_route":{"name":"register_rest_route","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$namespace","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$route","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$override","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers a REST API route.\n *\n * @since 4.4.0\n *\n * @global WP_REST_Server $wp_rest_server ResponseHandler instance (usually WP_REST_Server).\n *\n * @param string $namespace The first URL segment after core prefix. Should be unique to your package\/plugin.\n * @param string $route     The base URL for route you are adding.\n * @param array  $args      Optional. Either an array of options for the endpoint, or an array of arrays for\n *                          multiple methods. Default empty array.\n * @param bool   $override  Optional. If the route already exists, should we override it? True overrides,\n *                          false merges (with newer overriding if duplicate keys exist). Default false.\n * @return bool True on success, false on error.\n *\/"}]},"register_rest_field":{"name":"register_rest_field","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attribute","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers a new field on an existing WordPress object type.\n *\n * @since 4.7.0\n *\n * @global array $wp_rest_additional_fields Holds registered fields, organized\n *                                          by object type.\n *\n * @param string|array $object_type Object(s) the field is being registered\n *                                  to, \"post\"|\"term\"|\"comment\" etc.\n * @param string $attribute         The attribute name.\n * @param array  $args {\n *     Optional. An array of arguments used to handle the registered field.\n *\n *     @type string|array|null $get_callback    Optional. The callback function used to retrieve the field\n *                                              value. Default is 'null', the field will not be returned in\n *                                              the response.\n *     @type string|array|null $update_callback Optional. The callback function used to set and update the\n *                                              field value. Default is 'null', the value cannot be set or\n *                                              updated.\n *     @type string|array|null $schema          Optional. The callback function used to create the schema for\n *                                              this field. Default is 'null', no schema entry will be returned.\n * }\n *\/"}]},"rest_api_init":{"name":"rest_api_init","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers rewrite rules for the API.\n *\n * @since 4.4.0\n *\n * @see rest_api_register_rewrites()\n * @global WP $wp Current WordPress environment instance.\n *\/"}]},"rest_api_register_rewrites":{"name":"rest_api_register_rewrites","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds REST rewrite rules.\n *\n * @since 4.4.0\n *\n * @see add_rewrite_rule()\n * @global WP_Rewrite $wp_rewrite\n *\/"}]},"rest_api_default_filters":{"name":"rest_api_default_filters","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers the default REST API filters.\n *\n * Attached to the {@see 'rest_api_init'} action\n * to make testing and disabling these filters easier.\n *\n * @since 4.4.0\n *\/"}]},"create_initial_rest_routes":{"name":"create_initial_rest_routes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers default REST API routes.\n *\n * @since 4.7.0\n *\/"}]},"rest_api_loaded":{"name":"rest_api_loaded","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Loads the REST API.\n *\n * @since 4.4.0\n *\n * @global WP             $wp             Current WordPress environment instance.\n * @global WP_REST_Server $wp_rest_server ResponseHandler instance (usually WP_REST_Server).\n *\/"}]},"rest_get_url_prefix":{"name":"rest_get_url_prefix","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL prefix for any API resource.\n *\n * @since 4.4.0\n *\n * @return string Prefix.\n *\/"}]},"get_rest_url":{"name":"get_rest_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"'\/'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":2,"variadic":false,"reference":false,"default":"'rest'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL to a REST endpoint on a site.\n *\n * Note: The returned URL is NOT escaped.\n *\n * @since 4.4.0\n *\n * @todo Check if this is even necessary\n * @global WP_Rewrite $wp_rewrite\n *\n * @param int    $blog_id Optional. Blog ID. Default of null returns URL for current blog.\n * @param string $path    Optional. REST route. Default '\/'.\n * @param string $scheme  Optional. Sanitization scheme. Default 'rest'.\n * @return string Full URL to the endpoint.\n *\/"}]},"rest_url":{"name":"rest_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":1,"variadic":false,"reference":false,"default":"'json'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL to a REST endpoint.\n *\n * Note: The returned URL is NOT escaped.\n *\n * @since 4.4.0\n *\n * @param string $path   Optional. REST route. Default empty.\n * @param string $scheme Optional. Sanitization scheme. Default 'json'.\n * @return string Full URL to the endpoint.\n *\/"}]},"rest_do_request":{"name":"rest_do_request","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Do a REST request.\n *\n * Used primarily to route internal requests through WP_REST_Server.\n *\n * @since 4.4.0\n *\n * @global WP_REST_Server $wp_rest_server ResponseHandler instance (usually WP_REST_Server).\n *\n * @param WP_REST_Request|string $request Request.\n * @return WP_REST_Response REST response.\n *\/"}]},"rest_get_server":{"name":"rest_get_server","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the current REST server instance.\n *\n * Instantiates a new instance if none exists already.\n *\n * @since 4.5.0\n *\n * @global WP_REST_Server $wp_rest_server REST server instance.\n *\n * @return WP_REST_Server REST server instance.\n *\/"}]},"rest_ensure_request":{"name":"rest_ensure_request","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ensures request arguments are a request object (for consistency).\n *\n * @since 4.4.0\n *\n * @param array|WP_REST_Request $request Request to check.\n * @return WP_REST_Request REST request instance.\n *\/"}]},"rest_ensure_response":{"name":"rest_ensure_response","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ensures a REST response is a response object (for consistency).\n *\n * This implements WP_HTTP_Response, allowing usage of `set_status`\/`header`\/etc\n * without needing to double-check the object. Will also allow WP_Error to indicate error\n * responses, so users should immediately check for this value.\n *\n * @since 4.4.0\n *\n * @param WP_Error|WP_HTTP_Response|mixed $response Response to check.\n * @return WP_REST_Response|mixed If response generated an error, WP_Error, if response\n *                                is already an instance, WP_HTTP_Response, otherwise\n *                                returns a new WP_REST_Response instance.\n *\/"}]},"rest_handle_deprecated_function":{"name":"rest_handle_deprecated_function","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$function","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$replacement","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$version","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles _deprecated_function() errors.\n *\n * @since 4.4.0\n *\n * @param string $function    The function that was called.\n * @param string $replacement The function that should have been called.\n * @param string $version     Version.\n *\/"}]},"rest_handle_deprecated_argument":{"name":"rest_handle_deprecated_argument","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$function","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$version","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles _deprecated_argument() errors.\n *\n * @since 4.4.0\n *\n * @param string $function    The function that was called.\n * @param string $message     A message regarding the change.\n * @param string $version     Version.\n *\/"}]},"rest_send_cors_headers":{"name":"rest_send_cors_headers","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sends Cross-Origin Resource Sharing headers with API requests.\n *\n * @since 4.4.0\n *\n * @param mixed $value Response data.\n * @return mixed Response data.\n *\/"}]},"rest_handle_options_request":{"name":"rest_handle_options_request","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$handler","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles OPTIONS requests for the server.\n *\n * This is handled outside of the server code, as it doesn't obey normal route\n * mapping.\n *\n * @since 4.4.0\n *\n * @param mixed           $response Current response, either response or `null` to indicate pass-through.\n * @param WP_REST_Server  $handler  ResponseHandler instance (usually WP_REST_Server).\n * @param WP_REST_Request $request  The request that was used to make current response.\n * @return WP_REST_Response Modified response, either response or `null` to indicate pass-through.\n *\/"}]},"rest_send_allow_header":{"name":"rest_send_allow_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$server","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sends the \"Allow\" header to state all methods that can be sent to the current route.\n *\n * @since 4.4.0\n *\n * @param WP_REST_Response $response Current response being served.\n * @param WP_REST_Server   $server   ResponseHandler instance (usually WP_REST_Server).\n * @param WP_REST_Request  $request  The request that was used to make current response.\n * @return WP_REST_Response Response to be served, with \"Allow\" header if route has allowed methods.\n *\/"}]},"rest_output_rsd":{"name":"rest_output_rsd","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds the REST API URL to the WP RSD endpoint.\n *\n * @since 4.4.0\n *\n * @see get_rest_url()\n *\/"}]},"rest_output_link_wp_head":{"name":"rest_output_link_wp_head","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the REST API link tag into page header.\n *\n * @since 4.4.0\n *\n * @see get_rest_url()\n *\/"}]},"rest_output_link_header":{"name":"rest_output_link_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sends a Link header for the REST API.\n *\n * @since 4.4.0\n *\/"}]},"rest_cookie_check_errors":{"name":"rest_cookie_check_errors","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$result","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks for errors when using cookie-based authentication.\n *\n * WordPress' built-in cookie authentication is always active\n * for logged in users. However, the API has to check nonces\n * for each request to ensure users are not vulnerable to CSRF.\n *\n * @since 4.4.0\n *\n * @global mixed          $wp_rest_auth_cookie\n * @global WP_REST_Server $wp_rest_server      REST server instance.\n *\n * @param WP_Error|mixed $result Error from another authentication handler,\n *                               null if we should handle it, or another value\n *                               if not.\n * @return WP_Error|mixed|bool WP_Error if the cookie is invalid, the $result, otherwise true.\n *\/"}]},"rest_cookie_collect_status":{"name":"rest_cookie_collect_status","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Collects cookie authentication status.\n *\n * Collects errors from wp_validate_auth_cookie for use by rest_cookie_check_errors.\n *\n * @since 4.4.0\n *\n * @see current_action()\n * @global mixed $wp_rest_auth_cookie\n *\/"}]},"rest_parse_date":{"name":"rest_parse_date","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$date","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$force_utc","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Parses an RFC3339 time into a Unix timestamp.\n *\n * @since 4.4.0\n *\n * @param string $date      RFC3339 timestamp.\n * @param bool   $force_utc Optional. Whether to force UTC timezone instead of using\n *                          the timestamp's timezone. Default false.\n * @return int Unix timestamp.\n *\/"}]},"rest_get_date_with_gmt":{"name":"rest_get_date_with_gmt","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$date","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$is_utc","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Parses a date into both its local and UTC equivalent, in MySQL datetime format.\n *\n * @since 4.4.0\n *\n * @see rest_parse_date()\n *\n * @param string $date   RFC3339 timestamp.\n * @param bool   $is_utc Whether the provided date should be interpreted as UTC. Default false.\n * @return array|null Local and UTC datetime strings, in MySQL datetime format (Y-m-d H:i:s),\n *                    null on failure.\n *\/"}]},"rest_authorization_required_code":{"name":"rest_authorization_required_code","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns a contextual HTTP error code for authorization failure.\n *\n * @since 4.7.0\n *\n * @return integer 401 if the user is not logged in, 403 if the user is logged in.\n *\/"}]},"rest_validate_request_arg":{"name":"rest_validate_request_arg","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$param","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Validate a request argument based on details registered to the route.\n *\n * @since 4.7.0\n *\n * @param  mixed            $value\n * @param  WP_REST_Request  $request\n * @param  string           $param\n * @return WP_Error|boolean\n *\/"}]},"rest_sanitize_request_arg":{"name":"rest_sanitize_request_arg","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$param","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize a request argument based on details registered to the route.\n *\n * @since 4.7.0\n *\n * @param  mixed            $value\n * @param  WP_REST_Request  $request\n * @param  string           $param\n * @return mixed\n *\/"}]},"rest_parse_request_arg":{"name":"rest_parse_request_arg","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$param","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Parse a request argument based on details registered to the route.\n *\n * Runs a validation check and sanitizes the value, primarily to be used via\n * the `sanitize_callback` arguments in the endpoint args registration.\n *\n * @since 4.7.0\n *\n * @param  mixed            $value\n * @param  WP_REST_Request  $request\n * @param  string           $param\n * @return mixed\n *\/"}]},"rest_is_ip_address":{"name":"rest_is_ip_address","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$ip","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines if an IP address is valid.\n *\n * Handles both IPv4 and IPv6 addresses.\n *\n * @since 4.7.0\n *\n * @param  string $ip IP address.\n * @return string|false The valid IP address, otherwise false.\n *\/"}]},"rest_sanitize_boolean":{"name":"rest_sanitize_boolean","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Changes a boolean-like value into the proper boolean value.\n *\n * @since 4.7.0\n *\n * @param bool|string|int $value The value being evaluated.\n * @return boolean Returns the proper associated boolean value.\n *\/"}]},"rest_is_boolean":{"name":"rest_is_boolean","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$maybe_bool","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines if a given value is boolean-like.\n *\n * @since 4.7.0\n *\n * @param bool|string $maybe_bool The value being evaluated.\n * @return boolean True if a boolean, otherwise false.\n *\/"}]},"rest_get_avatar_urls":{"name":"rest_get_avatar_urls","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$email","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the avatar urls in various sizes based on a given email address.\n *\n * @since 4.7.0\n *\n * @see get_avatar_url()\n *\n * @param string $email Email address.\n * @return array $urls Gravatar url for each size.\n *\/"}]},"rest_get_avatar_sizes":{"name":"rest_get_avatar_sizes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the pixel sizes for avatars.\n *\n * @since 4.7.0\n *\n * @return array List of pixel sizes for avatars. Default `[ 24, 48, 96 ]`.\n *\/"}]},"rest_validate_value_from_schema":{"name":"rest_validate_value_from_schema","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$param","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Validate a value based on a schema.\n *\n * @param mixed  $value The value to validate.\n * @param array  $args  Schema array to use for validation.\n * @param string $param The parameter name, used in error messages.\n * @return true|WP_Error\n *\/"}]},"rest_sanitize_value_from_schema":{"name":"rest_sanitize_value_from_schema","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize a value based on a schema.\n *\n * @param mixed $value The value to sanitize.\n * @param array $args  Schema array to use for sanitization.\n * @return true|WP_Error\n *\/"}]},"redirect_canonical":{"name":"redirect_canonical","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$requested_url","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$do_redirect","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Canonical API to handle WordPress Redirecting\n *\n * Based on \"Permalink Redirect\" from Scott Yang and \"Enforce www. Preference\"\n * by Mark Jaquith\n *\n * @package WordPress\n * @since 2.3.0\n *\/"},{"phpdoc":"\/**\n * Redirects incoming links to the proper URL based on the site url.\n *\n * Search engines consider www.somedomain.com and somedomain.com to be two\n * different URLs when they both go to the same location. This SEO enhancement\n * prevents penalty for duplicate content by redirecting all incoming links to\n * one or the other.\n *\n * Prevents redirection for feeds, trackbacks, searches, and\n * admin URLs. Does not redirect on non-pretty-permalink-supporting IIS 7+,\n * page\/post previews, WP admin, Trackbacks, robots.txt, searches, or on POST\n * requests.\n *\n * Will also attempt to find the correct link when a user enters a URL that does\n * not exist based on exact WordPress query. Will instead try to parse the URL\n * or query in an attempt to figure the correct page to go to.\n *\n * @since 2.3.0\n *\n * @global WP_Rewrite $wp_rewrite\n * @global bool $is_IIS\n * @global WP_Query $wp_query\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $requested_url Optional. The URL that was requested, used to\n *\t\tfigure if redirect is needed.\n * @param bool $do_redirect Optional. Redirect to the new URL.\n * @return string|void The string of the URL, if redirect needed.\n *\/"}]},"lowercase_octets":{"name":"lowercase_octets","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n\t\t\t * Converts the first hex-encoded octet match to lowercase.\n\t\t\t *\n\t\t\t * @since 3.1.0\n\t\t\t * @ignore\n\t\t\t *\n\t\t\t * @param array $matches Hex-encoded octet matches for the requested URL.\n\t\t\t * @return string Lowercased version of the first match.\n\t\t\t *\/"}]},"_remove_qs_args_if_not_in_url":{"name":"_remove_qs_args_if_not_in_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$query_string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args_to_check","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"Array"}],"attributes":[]},{"name":"$url","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes arguments from a query string if they are not present in a URL\n * DO NOT use this in plugin code.\n *\n * @since 3.4.0\n * @access private\n *\n * @param string $query_string\n * @param array $args_to_check\n * @param string $url\n * @return string The altered query string\n *\/"}]},"strip_fragment_from_url":{"name":"strip_fragment_from_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Strips the #fragment from a URL, if one is present.\n *\n * @since 4.4.0\n *\n * @param string $url The URL to strip.\n * @return string The altered URL.\n *\/"}]},"redirect_guess_404_permalink":{"name":"redirect_guess_404_permalink","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Attempts to guess the correct URL based on query vars\n *\n * @since 2.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @return false|string The correct URL if one is found. False on failure.\n *\/"}]},"wp_redirect_admin_locations":{"name":"wp_redirect_admin_locations","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Redirects a variety of shorthand URLs to the admin.\n *\n * If a user visits example.com\/admin, they'll be redirected to \/wp-admin.\n * Visiting \/login redirects to \/wp-login.php, and so on.\n *\n * @since 3.4.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\/"}]},"wp_cache_add":{"name":"wp_cache_add","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$expire","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Object Cache API\n *\n * @link https:\/\/codex.wordpress.org\/Class_Reference\/WP_Object_Cache\n *\n * @package WordPress\n * @subpackage Cache\n *\/"},{"phpdoc":"\/**\n * Adds data to the cache, if the cache key doesn't already exist.\n *\n * @since 2.0.0\n *\n * @see WP_Object_Cache::add()\n * @global WP_Object_Cache $wp_object_cache Object cache global instance.\n *\n * @param int|string $key    The cache key to use for retrieval later.\n * @param mixed      $data   The data to add to the cache.\n * @param string     $group  Optional. The group to add the cache to. Enables the same key\n *                           to be used across groups. Default empty.\n * @param int        $expire Optional. When the cache data should expire, in seconds.\n *                           Default 0 (no expiration).\n * @return bool False if cache key and group already exist, true on success.\n *\/"}]},"wp_cache_close":{"name":"wp_cache_close","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Closes the cache.\n *\n * This function has ceased to do anything since WordPress 2.5. The\n * functionality was removed along with the rest of the persistent cache.\n *\n * This does not mean that plugins can't implement this function when they need\n * to make sure that the cache is cleaned up after WordPress no longer needs it.\n *\n * @since 2.0.0\n *\n * @return true Always returns true.\n *\/"}]},"wp_cache_decr":{"name":"wp_cache_decr","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$offset","rank":1,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Decrements numeric cache item's value.\n *\n * @since 3.3.0\n *\n * @see WP_Object_Cache::decr()\n * @global WP_Object_Cache $wp_object_cache Object cache global instance.\n *\n * @param int|string $key    The cache key to decrement.\n * @param int        $offset Optional. The amount by which to decrement the item's value. Default 1.\n * @param string     $group  Optional. The group the key is in. Default empty.\n * @return false|int False on failure, the item's new value on success.\n *\/"}]},"wp_cache_delete":{"name":"wp_cache_delete","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes the cache contents matching key and group.\n *\n * @since 2.0.0\n *\n * @see WP_Object_Cache::delete()\n * @global WP_Object_Cache $wp_object_cache Object cache global instance.\n *\n * @param int|string $key   What the contents in the cache are called.\n * @param string     $group Optional. Where the cache contents are grouped. Default empty.\n * @return bool True on successful removal, false on failure.\n *\/"}]},"wp_cache_flush":{"name":"wp_cache_flush","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes all cache items.\n *\n * @since 2.0.0\n *\n * @see WP_Object_Cache::flush()\n * @global WP_Object_Cache $wp_object_cache Object cache global instance.\n *\n * @return bool False on failure, true on success\n *\/"}]},"wp_cache_get":{"name":"wp_cache_get","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$force","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$found","rank":3,"variadic":false,"reference":true,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the cache contents from the cache by key and group.\n *\n * @since 2.0.0\n *\n * @see WP_Object_Cache::get()\n * @global WP_Object_Cache $wp_object_cache Object cache global instance.\n *\n * @param int|string  $key    The key under which the cache contents are stored.\n * @param string      $group  Optional. Where the cache contents are grouped. Default empty.\n * @param bool        $force  Optional. Whether to force an update of the local cache from the persistent\n *                            cache. Default false.\n * @param bool        $found  Optional. Whether the key was found in the cache. Disambiguates a return of false,\n *                            a storable value. Passed by reference. Default null.\n * @return bool|mixed False on failure to retrieve contents or the cache\n *\t\t              contents on success\n *\/"}]},"wp_cache_incr":{"name":"wp_cache_incr","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$offset","rank":1,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Increment numeric cache item's value\n *\n * @since 3.3.0\n *\n * @see WP_Object_Cache::incr()\n * @global WP_Object_Cache $wp_object_cache Object cache global instance.\n *\n * @param int|string $key    The key for the cache contents that should be incremented.\n * @param int        $offset Optional. The amount by which to increment the item's value. Default 1.\n * @param string     $group  Optional. The group the key is in. Default empty.\n * @return false|int False on failure, the item's new value on success.\n *\/"}]},"wp_cache_init":{"name":"wp_cache_init","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sets up Object Cache Global and assigns it.\n *\n * @since 2.0.0\n *\n * @global WP_Object_Cache $wp_object_cache\n *\/"}]},"wp_cache_replace":{"name":"wp_cache_replace","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$expire","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Replaces the contents of the cache with new data.\n *\n * @since 2.0.0\n *\n * @see WP_Object_Cache::replace()\n * @global WP_Object_Cache $wp_object_cache Object cache global instance.\n *\n * @param int|string $key    The key for the cache data that should be replaced.\n * @param mixed      $data   The new data to store in the cache.\n * @param string     $group  Optional. The group for the cache data that should be replaced.\n *                           Default empty.\n * @param int        $expire Optional. When to expire the cache contents, in seconds.\n *                           Default 0 (no expiration).\n * @return bool False if original value does not exist, true if contents were replaced\n *\/"}]},"wp_cache_set":{"name":"wp_cache_set","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$expire","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Saves the data to the cache.\n *\n * Differs from wp_cache_add() and wp_cache_replace() in that it will always write data.\n *\n * @since 2.0.0\n *\n * @see WP_Object_Cache::set()\n * @global WP_Object_Cache $wp_object_cache Object cache global instance.\n *\n * @param int|string $key    The cache key to use for retrieval later.\n * @param mixed      $data   The contents to store in the cache.\n * @param string     $group  Optional. Where to group the cache contents. Enables the same key\n *                           to be used across groups. Default empty.\n * @param int        $expire Optional. When to expire the cache contents, in seconds.\n *                           Default 0 (no expiration).\n * @return bool False on failure, true on success\n *\/"}]},"wp_cache_switch_to_blog":{"name":"wp_cache_switch_to_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Switches the internal blog ID.\n *\n * This changes the blog id used to create keys in blog specific groups.\n *\n * @since 3.5.0\n *\n * @see WP_Object_Cache::switch_to_blog()\n * @global WP_Object_Cache $wp_object_cache Object cache global instance.\n *\n * @param int $blog_id Site ID.\n *\/"}]},"wp_cache_add_global_groups":{"name":"wp_cache_add_global_groups","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$groups","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds a group or set of groups to the list of global groups.\n *\n * @since 2.6.0\n *\n * @see WP_Object_Cache::add_global_groups()\n * @global WP_Object_Cache $wp_object_cache Object cache global instance.\n *\n * @param string|array $groups A group or an array of groups to add.\n *\/"}]},"wp_cache_add_non_persistent_groups":{"name":"wp_cache_add_non_persistent_groups","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$groups","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds a group or set of groups to the list of non-persistent groups.\n *\n * @since 2.6.0\n *\n * @param string|array $groups A group or an array of groups to add.\n *\/"}]},"wp_cache_reset":{"name":"wp_cache_reset","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Reset internal cache keys and structures.\n *\n * If the cache back end uses global blog or site IDs as part of its cache keys,\n * this function instructs the back end to reset those keys and perform any cleanup\n * since blog or site IDs have changed since cache init.\n *\n * This function is deprecated. Use wp_cache_switch_to_blog() instead of this\n * function when preparing the cache for a blog switch. For clearing the cache\n * during unit tests, consider using wp_cache_init(). wp_cache_init() is not\n * recommended outside of unit tests as the performance penalty for using it is\n * high.\n *\n * @since 2.6.0\n * @deprecated 3.5.0 WP_Object_Cache::reset()\n * @see WP_Object_Cache::reset()\n *\n * @global WP_Object_Cache $wp_object_cache Object cache global instance.\n *\/"}]},"the_ID":{"name":"the_ID","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the ID of the current item in the WordPress Loop.\n *\n * @since 0.71\n *\/"},{"phpdoc":"\/**\n * WordPress Post Template Functions.\n *\n * Gets content for the current post in the loop.\n *\n * @package WordPress\n * @subpackage Template\n *\/"}]},"get_the_ID":{"name":"get_the_ID","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the ID of the current item in the WordPress Loop.\n *\n * @since 2.1.0\n *\n * @return int|false The ID of the current item in the WordPress Loop. False if $post is not set.\n *\/"}]},"the_title":{"name":"the_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$before","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display or retrieve the current post title with optional markup.\n *\n * @since 0.71\n *\n * @param string $before Optional. Markup to prepend to the title. Default empty.\n * @param string $after  Optional. Markup to append to the title. Default empty.\n * @param bool   $echo   Optional. Whether to echo or return the title. Default true for echo.\n * @return string|void Current post title if $echo is false.\n *\/"}]},"the_title_attribute":{"name":"the_title_attribute","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize the current title when retrieving or displaying.\n *\n * Works like the_title(), except the parameters can be in a string or\n * an array. See the function for what can be override in the $args parameter.\n *\n * The title before it is displayed will have the tags stripped and esc_attr()\n * before it is passed to the user or displayed. The default as with the_title(),\n * is to display the title.\n *\n * @since 2.3.0\n *\n * @param string|array $args {\n *     Title attribute arguments. Optional.\n *\n *     @type string  $before Markup to prepend to the title. Default empty.\n *     @type string  $after  Markup to append to the title. Default empty.\n *     @type bool    $echo   Whether to echo or return the title. Default true for echo.\n *     @type WP_Post $post   Current post object to retrieve the title for.\n * }\n * @return string|void String when echo is false.\n *\/"}]},"get_the_title":{"name":"get_the_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve post title.\n *\n * If the post is protected and the visitor is not an admin, then \"Protected\"\n * will be displayed before the post title. If the post is private, then\n * \"Private\" will be located before the post title.\n *\n * @since 0.71\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @return string\n *\/"}]},"the_guid":{"name":"the_guid","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the Post Global Unique Identifier (guid).\n *\n * The guid will appear to be a link, but should not be used as a link to the\n * post. The reason you should not use it as a link, is because of moving the\n * blog across domains.\n *\n * URL is escaped to make it XML-safe.\n *\n * @since 1.5.0\n *\n * @param int|WP_Post $post Optional. Post ID or post object. Default is global $post.\n *\/"}]},"get_the_guid":{"name":"get_the_guid","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the Post Global Unique Identifier (guid).\n *\n * The guid will appear to be a link, but should not be used as an link to the\n * post. The reason you should not use it as a link, is because of moving the\n * blog across domains.\n *\n * @since 1.5.0\n *\n * @param int|WP_Post $post Optional. Post ID or post object. Default is global $post.\n * @return string\n *\/"}]},"the_content":{"name":"the_content","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$more_link_text","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$strip_teaser","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the post content.\n *\n * @since 0.71\n *\n * @param string $more_link_text Optional. Content for when there is more text.\n * @param bool   $strip_teaser   Optional. Strip teaser content before the more text. Default is false.\n *\/"}]},"get_the_content":{"name":"get_the_content","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$more_link_text","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$strip_teaser","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the post content.\n *\n * @since 0.71\n *\n * @global int   $page      Page number of a single post\/page.\n * @global int   $more      Boolean indicator for whether single post\/page is being viewed.\n * @global bool  $preview   Whether post\/page is in preview mode.\n * @global array $pages     Array of all pages in post\/page. Each array element contains part of the content separated by the <!--nextpage--> tag.\n * @global int   $multipage Boolean indicator for whether multiple pages are in play.\n *\n * @param string $more_link_text Optional. Content for when there is more text.\n * @param bool   $strip_teaser   Optional. Strip teaser content before the more text. Default is false.\n * @return string\n *\/"}]},"the_excerpt":{"name":"the_excerpt","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the post excerpt.\n *\n * @since 0.71\n *\/"}]},"get_the_excerpt":{"name":"get_the_excerpt","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the post excerpt.\n *\n * @since 0.71\n * @since 4.5.0 Introduced the `$post` parameter.\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @return string Post excerpt.\n *\/"}]},"has_excerpt":{"name":"has_excerpt","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether post has excerpt.\n *\n * @since 2.3.0\n *\n * @param int|WP_Post $id Optional. Post ID or post object.\n * @return bool\n *\/"}]},"post_class":{"name":"post_class","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the classes for the post div.\n *\n * @since 2.7.0\n *\n * @param string|array $class   One or more classes to add to the class list.\n * @param int|WP_Post  $post_id Optional. Post ID or post object. Defaults to the global `$post`.\n *\/"}]},"get_post_class":{"name":"get_post_class","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the classes for the post div as an array.\n *\n * The class names are many. If the post is a sticky, then the 'sticky'\n * class name. The class 'hentry' is always added to each post. If the post has a\n * post thumbnail, 'has-post-thumbnail' is added as a class. For each taxonomy that\n * the post belongs to, a class will be added of the format '{$taxonomy}-{$slug}' -\n * eg 'category-foo' or 'my_custom_taxonomy-bar'.\n *\n * The 'post_tag' taxonomy is a special\n * case; the class has the 'tag-' prefix instead of 'post_tag-'. All classes are\n * passed through the filter, {@see 'post_class'}, with the list of classes, followed by\n * $class parameter value, with the post ID as the last parameter.\n *\n * @since 2.7.0\n * @since 4.2.0 Custom taxonomy classes were added.\n *\n * @param string|array $class   One or more classes to add to the class list.\n * @param int|WP_Post  $post_id Optional. Post ID or post object.\n * @return array Array of classes.\n *\/"}]},"body_class":{"name":"body_class","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the classes for the body element.\n *\n * @since 2.8.0\n *\n * @param string|array $class One or more classes to add to the class list.\n *\/"}]},"get_body_class":{"name":"get_body_class","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the classes for the body element as an array.\n *\n * @since 2.8.0\n *\n * @global WP_Query $wp_query\n *\n * @param string|array $class One or more classes to add to the class list.\n * @return array Array of classes.\n *\/"}]},"post_password_required":{"name":"post_password_required","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether post requires password and correct password has been provided.\n *\n * @since 2.7.0\n *\n * @param int|WP_Post|null $post An optional post. Global $post used if not provided.\n * @return bool false if a password is not required or the correct password cookie is present, true otherwise.\n *\/"}]},"wp_link_pages":{"name":"wp_link_pages","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * The formatted output of a list of pages.\n *\n * Displays page links for paginated posts (i.e. includes the <!--nextpage-->.\n * Quicktag one or more times). This tag must be within The Loop.\n *\n * @since 1.2.0\n *\n * @global int $page\n * @global int $numpages\n * @global int $multipage\n * @global int $more\n *\n * @param string|array $args {\n *     Optional. Array or string of default arguments.\n *\n *     @type string       $before           HTML or text to prepend to each link. Default is `<p> Pages:`.\n *     @type string       $after            HTML or text to append to each link. Default is `<\/p>`.\n *     @type string       $link_before      HTML or text to prepend to each link, inside the `<a>` tag.\n *                                          Also prepended to the current item, which is not linked. Default empty.\n *     @type string       $link_after       HTML or text to append to each Pages link inside the `<a>` tag.\n *                                          Also appended to the current item, which is not linked. Default empty.\n *     @type string       $next_or_number   Indicates whether page numbers should be used. Valid values are number\n *                                          and next. Default is 'number'.\n *     @type string       $separator        Text between pagination links. Default is ' '.\n *     @type string       $nextpagelink     Link text for the next page link, if available. Default is 'Next Page'.\n *     @type string       $previouspagelink Link text for the previous page link, if available. Default is 'Previous Page'.\n *     @type string       $pagelink         Format string for page numbers. The % in the parameter string will be\n *                                          replaced with the page number, so 'Page %' generates \"Page 1\", \"Page 2\", etc.\n *                                          Defaults to '%', just the page number.\n *     @type int|bool     $echo             Whether to echo or not. Accepts 1|true or 0|false. Default 1|true.\n * }\n * @return string Formatted output in HTML.\n *\/"}]},"_wp_link_page":{"name":"_wp_link_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$i","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Helper function for wp_link_pages().\n *\n * @since 3.1.0\n * @access private\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param int $i Page number.\n * @return string Link.\n *\/"}]},"post_custom":{"name":"post_custom","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve post custom meta data field.\n *\n * @since 1.5.0\n *\n * @param string $key Meta data key name.\n * @return false|string|array Array of values or single value, if only one element exists. False will be returned if key does not exist.\n *\/"}]},"the_meta":{"name":"the_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display list of post custom fields.\n *\n * @since 1.2.0\n *\n * @internal This will probably change at some point...\n *\n *\/"}]},"wp_dropdown_pages":{"name":"wp_dropdown_pages","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve or display list of pages as a dropdown (select list).\n *\n * @since 2.1.0\n * @since 4.2.0 The `$value_field` argument was added.\n * @since 4.3.0 The `$class` argument was added.\n *\n * @param array|string $args {\n *     Optional. Array or string of arguments to generate a pages drop-down element.\n *\n *     @type int          $depth                 Maximum depth. Default 0.\n *     @type int          $child_of              Page ID to retrieve child pages of. Default 0.\n *     @type int|string   $selected              Value of the option that should be selected. Default 0.\n *     @type bool|int     $echo                  Whether to echo or return the generated markup. Accepts 0, 1,\n *                                               or their bool equivalents. Default 1.\n *     @type string       $name                  Value for the 'name' attribute of the select element.\n *                                               Default 'page_id'.\n *     @type string       $id                    Value for the 'id' attribute of the select element.\n *     @type string       $class                 Value for the 'class' attribute of the select element. Default: none.\n *                                               Defaults to the value of `$name`.\n *     @type string       $show_option_none      Text to display for showing no pages. Default empty (does not display).\n *     @type string       $show_option_no_change Text to display for \"no change\" option. Default empty (does not display).\n *     @type string       $option_none_value     Value to use when no page is selected. Default empty.\n *     @type string       $value_field           Post field used to populate the 'value' attribute of the option\n *                                               elements. Accepts any valid post field. Default 'ID'.\n * }\n * @return string HTML content, if not displaying.\n *\/"}]},"wp_list_pages":{"name":"wp_list_pages","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve or display list of pages in list (li) format.\n *\n * @since 1.5.0\n * @since 4.7.0 Added the `item_spacing` argument.\n *\n * @see get_pages()\n *\n * @global WP_Query $wp_query\n *\n * @param array|string $args {\n *     Array or string of arguments. Optional.\n *\n *     @type int          $child_of     Display only the sub-pages of a single page by ID. Default 0 (all pages).\n *     @type string       $authors      Comma-separated list of author IDs. Default empty (all authors).\n *     @type string       $date_format  PHP date format to use for the listed pages. Relies on the 'show_date' parameter.\n *                                      Default is the value of 'date_format' option.\n *     @type int          $depth        Number of levels in the hierarchy of pages to include in the generated list.\n *                                      Accepts -1 (any depth), 0 (all pages), 1 (top-level pages only), and n (pages to\n *                                      the given n depth). Default 0.\n *     @type bool         $echo         Whether or not to echo the list of pages. Default true.\n *     @type string       $exclude      Comma-separated list of page IDs to exclude. Default empty.\n *     @type array        $include      Comma-separated list of page IDs to include. Default empty.\n *     @type string       $link_after   Text or HTML to follow the page link label. Default null.\n *     @type string       $link_before  Text or HTML to precede the page link label. Default null.\n *     @type string       $post_type    Post type to query for. Default 'page'.\n *     @type string|array $post_status  Comma-separated list or array of post statuses to include. Default 'publish'.\n *     @type string       $show_date    Whether to display the page publish or modified date for each page. Accepts\n *                                      'modified' or any other value. An empty value hides the date. Default empty.\n *     @type string       $sort_column  Comma-separated list of column names to sort the pages by. Accepts 'post_author',\n *                                      'post_date', 'post_title', 'post_name', 'post_modified', 'post_modified_gmt',\n *                                      'menu_order', 'post_parent', 'ID', 'rand', or 'comment_count'. Default 'post_title'.\n *     @type string       $title_li     List heading. Passing a null or empty value will result in no heading, and the list\n *                                      will not be wrapped with unordered list `<ul>` tags. Default 'Pages'.\n *     @type string       $item_spacing Whether to preserve whitespace within the menu's HTML. Accepts 'preserve' or 'discard'.\n *                                      Default 'preserve'.\n *     @type Walker       $walker       Walker instance to use for listing pages. Default empty (Walker_Page).\n * }\n * @return string|void HTML list of pages.\n *\/"}]},"wp_page_menu":{"name":"wp_page_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays or retrieves a list of pages with an optional home link.\n *\n * The arguments are listed below and part of the arguments are for wp_list_pages()} function.\n * Check that function for more info on those arguments.\n *\n * @since 2.7.0\n * @since 4.4.0 Added `menu_id`, `container`, `before`, `after`, and `walker` arguments.\n * @since 4.7.0 Added the `item_spacing` argument.\n *\n * @param array|string $args {\n *     Optional. Arguments to generate a page menu. See wp_list_pages() for additional arguments.\n *\n *     @type string          $sort_column  How to short the list of pages. Accepts post column names.\n *                                         Default 'menu_order, post_title'.\n *     @type string          $menu_id      ID for the div containing the page list. Default is empty string.\n *     @type string          $menu_class   Class to use for the element containing the page list. Default 'menu'.\n *     @type string          $container    Element to use for the element containing the page list. Default 'div'.\n *     @type bool            $echo         Whether to echo the list or return it. Accepts true (echo) or false (return).\n *                                         Default true.\n *     @type int|bool|string $show_home    Whether to display the link to the home page. Can just enter the text\n *                                         you'd like shown for the home link. 1|true defaults to 'Home'.\n *     @type string          $link_before  The HTML or text to prepend to $show_home text. Default empty.\n *     @type string          $link_after   The HTML or text to append to $show_home text. Default empty.\n *     @type string          $before       The HTML or text to prepend to the menu. Default is '<ul>'.\n *     @type string          $after        The HTML or text to append to the menu. Default is '<\/ul>'.\n *     @type string          $item_spacing Whether to preserve whitespace within the menu's HTML. Accepts 'preserve' or 'discard'. Default 'discard'.\n *     @type Walker          $walker       Walker instance to use for listing pages. Default empty (Walker_Page).\n * }\n * @return string|void HTML menu\n *\/"}]},"walk_page_tree":{"name":"walk_page_tree","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$pages","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$current_page","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$r","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve HTML list content for page list.\n *\n * @uses Walker_Page to create HTML list content.\n * @since 2.1.0\n *\n * @param array $pages\n * @param int   $depth\n * @param int   $current_page\n * @param array $r\n * @return string\n *\/"}]},"walk_page_dropdown_tree":{"name":"walk_page_dropdown_tree","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve HTML dropdown (select) content for page list.\n *\n * @uses Walker_PageDropdown to create HTML dropdown content.\n * @since 2.1.0\n * @see Walker_PageDropdown::walk() for parameters and return description.\n *\n * @return string\n *\/"}]},"the_attachment_link":{"name":"the_attachment_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fullsize","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$permalink","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display an attachment page link using an image or icon.\n *\n * @since 2.0.0\n *\n * @param int|WP_Post $id Optional. Post ID or post object.\n * @param bool        $fullsize     Optional, default is false. Whether to use full size.\n * @param bool        $deprecated   Deprecated. Not used.\n * @param bool        $permalink    Optional, default is false. Whether to include permalink.\n *\/"}]},"wp_get_attachment_link":{"name":"wp_get_attachment_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":1,"variadic":false,"reference":false,"default":"'thumbnail'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$permalink","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$icon","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$text","rank":4,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attr","rank":5,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve an attachment page link using an image or icon, if possible.\n *\n * @since 2.5.0\n * @since 4.4.0 The `$id` parameter can now accept either a post ID or `WP_Post` object.\n *\n * @param int|WP_Post  $id        Optional. Post ID or post object.\n * @param string|array $size      Optional. Image size. Accepts any valid image size, or an array\n *                                of width and height values in pixels (in that order).\n *                                Default 'thumbnail'.\n * @param bool         $permalink Optional, Whether to add permalink to image. Default false.\n * @param bool         $icon      Optional. Whether the attachment is an icon. Default false.\n * @param string|false $text      Optional. Link text to use. Activated by passing a string, false otherwise.\n *                                Default false.\n * @param array|string $attr      Optional. Array or string of attributes. Default empty.\n * @return string HTML content.\n *\/"}]},"prepend_attachment":{"name":"prepend_attachment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Wrap attachment in paragraph tag before content.\n *\n * @since 2.0.0\n *\n * @param string $content\n * @return string\n *\/"}]},"get_the_password_form":{"name":"get_the_password_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve protected post password form content.\n *\n * @since 1.0.0\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @return string HTML content for password form for password protected post.\n *\/"}]},"is_page_template":{"name":"is_page_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$template","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether currently in a page template.\n *\n * This template tag allows you to determine if you are in a page template.\n * You can optionally provide a template name or array of template names\n * and then the check will be specific to that template.\n *\n * @since 2.5.0\n * @since 4.2.0 The `$template` parameter was changed to also accept an array of page templates.\n * @since 4.7.0 Now works with any post type, not just pages.\n *\n * @param string|array $template The specific template name or array of templates to match.\n * @return bool True on success, false on failure.\n *\/"}]},"get_page_template_slug":{"name":"get_page_template_slug","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the specific template name for a given post.\n *\n * @since 3.4.0\n * @since 4.7.0 Now works with any post type, not just pages.\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @return string|false Page template filename. Returns an empty string when the default page template\n * \tis in use. Returns false if the post does not exist.\n *\/"}]},"wp_post_revision_title":{"name":"wp_post_revision_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$revision","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$link","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve formatted date timestamp of a revision (linked to that revisions's page).\n *\n * @since 2.6.0\n *\n * @param int|object $revision Revision ID or revision object.\n * @param bool       $link     Optional, default is true. Link to revisions's page?\n * @return string|false i18n formatted datetimestamp or localized 'Current Revision'.\n *\/"}]},"wp_post_revision_title_expanded":{"name":"wp_post_revision_title_expanded","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$revision","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$link","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve formatted date timestamp of a revision (linked to that revisions's page).\n *\n * @since 3.6.0\n *\n * @param int|object $revision Revision ID or revision object.\n * @param bool       $link     Optional, default is true. Link to revisions's page?\n * @return string|false gravatar, user, i18n formatted datetimestamp or localized 'Current Revision'.\n *\/"}]},"wp_list_post_revisions":{"name":"wp_list_post_revisions","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":1,"variadic":false,"reference":false,"default":"'all'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display list of a post's revisions.\n *\n * Can output either a UL with edit links or a TABLE with diff interface, and\n * restore action links.\n *\n * @since 2.6.0\n *\n * @param int|WP_Post $post_id Optional. Post ID or WP_Post object. Default is global $post.\n * @param string      $type    'all' (default), 'revision' or 'autosave'\n *\/"}]},"add_rewrite_rule":{"name":"add_rewrite_rule","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$regex","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$query","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"'bottom'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds a rewrite rule that transforms a URL structure to a set of query vars.\n *\n * Any value in the $after parameter that isn't 'bottom' will result in the rule\n * being placed at the top of the rewrite rules.\n *\n * @since 2.1.0\n * @since 4.4.0 Array support was added to the `$query` parameter.\n *\n * @global WP_Rewrite $wp_rewrite WordPress Rewrite Component.\n *\n * @param string       $regex Regular expression to match request against.\n * @param string|array $query The corresponding query vars for this rewrite rule.\n * @param string       $after Optional. Priority of the new rule. Accepts 'top'\n *                            or 'bottom'. Default 'bottom'.\n *\/"}]},"add_rewrite_tag":{"name":"add_rewrite_tag","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$regex","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$query","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a new rewrite tag (like %postname%).\n *\n * The $query parameter is optional. If it is omitted you must ensure that\n * you call this on, or before, the {@see 'init'} hook. This is because $query defaults\n * to \"$tag=\", and for this to work a new query var has to be added.\n *\n * @since 2.1.0\n *\n * @global WP_Rewrite $wp_rewrite\n * @global WP         $wp\n *\n * @param string $tag   Name of the new rewrite tag.\n * @param string $regex Regular expression to substitute the tag for in rewrite rules.\n * @param string $query Optional. String to append to the rewritten query. Must end in '='. Default empty.\n *\/"}]},"remove_rewrite_tag":{"name":"remove_rewrite_tag","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes an existing rewrite tag (like %postname%).\n *\n * @since 4.5.0\n *\n * @global WP_Rewrite $wp_rewrite WordPress rewrite component.\n *\n * @param string $tag Name of the rewrite tag.\n *\/"}]},"add_permastruct":{"name":"add_permastruct","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$struct","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add permalink structure.\n *\n * @since 3.0.0\n *\n * @see WP_Rewrite::add_permastruct()\n * @global WP_Rewrite $wp_rewrite WordPress rewrite component.\n *\n * @param string $name   Name for permalink structure.\n * @param string $struct Permalink structure.\n * @param array  $args   Optional. Arguments for building the rules from the permalink structure,\n *                       see WP_Rewrite::add_permastruct() for full details. Default empty array.\n *\/"}]},"remove_permastruct":{"name":"remove_permastruct","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes a permalink structure.\n *\n * Can only be used to remove permastructs that were added using add_permastruct().\n * Built-in permastructs cannot be removed.\n *\n * @since 4.5.0\n *\n * @see WP_Rewrite::remove_permastruct()\n * @global WP_Rewrite $wp_rewrite WordPress rewrite component.\n *\n * @param string $name Name for permalink structure.\n *\/"}]},"add_feed":{"name":"add_feed","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$feedname","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a new feed type like \/atom1\/.\n *\n * @since 2.1.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param string   $feedname Feed name.\n * @param callable $function Callback to run on feed display.\n * @return string Feed action name.\n *\/"}]},"flush_rewrite_rules":{"name":"flush_rewrite_rules","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$hard","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove rewrite rules and then recreate rewrite rules.\n *\n * @since 3.0.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param bool $hard Whether to update .htaccess (hard flush) or just update\n * \t                 rewrite_rules transient (soft flush). Default is true (hard).\n *\/"}]},"add_rewrite_endpoint":{"name":"add_rewrite_endpoint","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$places","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$query_var","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add an endpoint, like \/trackback\/.\n *\n * Adding an endpoint creates extra rewrite rules for each of the matching\n * places specified by the provided bitmask. For example:\n *\n *     add_rewrite_endpoint( 'json', EP_PERMALINK | EP_PAGES );\n *\n * will add a new rewrite rule ending with \"json(\/(.*))?\/?$\" for every permastruct\n * that describes a permalink (post) or page. This is rewritten to \"json=$match\"\n * where $match is the part of the URL matched by the endpoint regex (e.g. \"foo\" in\n * \"[permalink]\/json\/foo\/\").\n *\n * A new query var with the same name as the endpoint will also be created.\n *\n * When specifying $places ensure that you are using the EP_* constants (or a\n * combination of them using the bitwise OR operator) as their values are not\n * guaranteed to remain static (especially `EP_ALL`).\n *\n * Be sure to flush the rewrite rules - see flush_rewrite_rules() - when your plugin gets\n * activated and deactivated.\n *\n * @since 2.1.0\n * @since 4.3.0 Added support for skipping query var registration by passing `false` to `$query_var`.\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param string      $name      Name of the endpoint.\n * @param int         $places    Endpoint mask describing the places the endpoint should be added.\n * @param string|bool $query_var Name of the corresponding query variable. Pass `false` to skip registering a query_var\n *                               for this endpoint. Defaults to the value of `$name`.\n *\/"}]},"_wp_filter_taxonomy_base":{"name":"_wp_filter_taxonomy_base","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$base","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters the URL base for taxonomies.\n *\n * To remove any manually prepended \/index.php\/.\n *\n * @access private\n * @since 2.6.0\n *\n * @param string $base The taxonomy base that we're going to filter\n * @return string\n *\/"}]},"wp_resolve_numeric_slug_conflicts":{"name":"wp_resolve_numeric_slug_conflicts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$query_vars","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Resolve numeric slugs that collide with date permalinks.\n *\n * Permalinks of posts with numeric slugs can sometimes look to WP_Query::parse_query()\n * like a date archive, as when your permalink structure is `\/%year%\/%postname%\/` and\n * a post with post_name '05' has the URL `\/2015\/05\/`.\n *\n * This function detects conflicts of this type and resolves them in favor of the\n * post permalink.\n *\n * Note that, since 4.3.0, wp_unique_post_slug() prevents the creation of post slugs\n * that would result in a date archive conflict. The resolution performed in this\n * function is primarily for legacy content, as well as cases when the admin has changed\n * the site's permalink structure in a way that introduces URL conflicts.\n *\n * @since 4.3.0\n *\n * @param array $query_vars Optional. Query variables for setting up the loop, as determined in\n *                          WP::parse_request(). Default empty array.\n * @return array Returns the original array of query vars, with date\/post conflicts resolved.\n *\/"}]},"url_to_postid":{"name":"url_to_postid","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Examine a URL and try to determine the post ID it represents.\n *\n * Checks are supposedly from the hosted site blog.\n *\n * @since 1.0.0\n *\n * @global WP_Rewrite $wp_rewrite\n * @global WP         $wp\n *\n * @param string $url Permalink to check.\n * @return int Post ID, or 0 on failure.\n *\/"}]},"wp_protect_special_option":{"name":"wp_protect_special_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Protect WordPress special option from being modified.\n *\n * Will die if $option is in protected list. Protected options are 'alloptions'\n * and 'notoptions' options.\n *\n * @since 2.2.0\n *\n * @param string $option Option name.\n *\/"}]},"form_option":{"name":"form_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print option value after sanitizing for forms.\n *\n * @since 1.5.0\n *\n * @param string $option Option name.\n *\/"}]},"wp_load_alloptions":{"name":"wp_load_alloptions","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Loads and caches all autoloaded options, if available or all options.\n *\n * @since 2.2.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @return array List of all options.\n *\/"}]},"wp_load_core_site_options":{"name":"wp_load_core_site_options","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$site_id","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Loads and caches certain often requested site options if is_multisite() and a persistent cache is not being used.\n *\n * @since 3.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int $site_id Optional site ID for which to query the options. Defaults to the current site.\n *\/"}]},"update_option":{"name":"update_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$autoload","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update the value of an option that was already added.\n *\n * You do not need to serialize values. If the value needs to be serialized, then\n * it will be serialized before it is inserted into the database. Remember,\n * resources can not be serialized or added as an option.\n *\n * If the option does not exist, then the option will be added with the option value,\n * with an `$autoload` value of 'yes'.\n *\n * @since 1.0.0\n * @since 4.2.0 The `$autoload` parameter was added.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string      $option   Option name. Expected to not be SQL-escaped.\n * @param mixed       $value    Option value. Must be serializable if non-scalar. Expected to not be SQL-escaped.\n * @param string|bool $autoload Optional. Whether to load the option when WordPress starts up. For existing options,\n *                              `$autoload` can only be updated using `update_option()` if `$value` is also changed.\n *                              Accepts 'yes'|true to enable or 'no'|false to disable. For non-existent options,\n *                              the default value is 'yes'. Default null.\n * @return bool False if value was not updated and true if value was updated.\n *\/"}]},"add_option":{"name":"add_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$autoload","rank":3,"variadic":false,"reference":false,"default":"'yes'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a new option.\n *\n * You do not need to serialize values. If the value needs to be serialized, then\n * it will be serialized before it is inserted into the database. Remember,\n * resources can not be serialized or added as an option.\n *\n * You can create options without values and then update the values later.\n * Existing options will not be updated and checks are performed to ensure that you\n * aren't adding a protected WordPress option. Care should be taken to not name\n * options the same as the ones which are protected.\n *\n * @since 1.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string         $option      Name of option to add. Expected to not be SQL-escaped.\n * @param mixed          $value       Optional. Option value. Must be serializable if non-scalar. Expected to not be SQL-escaped.\n * @param string         $deprecated  Optional. Description. Not used anymore.\n * @param string|bool    $autoload    Optional. Whether to load the option when WordPress starts up.\n *                                    Default is enabled. Accepts 'no' to disable for legacy reasons.\n * @return bool False if option was not added and true if option was added.\n *\/"}]},"delete_option":{"name":"delete_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes option by name. Prevents removal of protected WordPress options.\n *\n * @since 1.2.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $option Name of option to remove. Expected to not be SQL-escaped.\n * @return bool True, if option is successfully deleted. False on failure.\n *\/"}]},"delete_transient":{"name":"delete_transient","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$transient","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Delete a transient.\n *\n * @since 2.8.0\n *\n * @param string $transient Transient name. Expected to not be SQL-escaped.\n * @return bool true if successful, false otherwise\n *\/"}]},"get_transient":{"name":"get_transient","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$transient","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the value of a transient.\n *\n * If the transient does not exist, does not have a value, or has expired,\n * then the return value will be false.\n *\n * @since 2.8.0\n *\n * @param string $transient Transient name. Expected to not be SQL-escaped.\n * @return mixed Value of transient.\n *\/"}]},"set_transient":{"name":"set_transient","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$transient","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$expiration","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set\/update the value of a transient.\n *\n * You do not need to serialize values. If the value needs to be serialized, then\n * it will be serialized before it is set.\n *\n * @since 2.8.0\n *\n * @param string $transient  Transient name. Expected to not be SQL-escaped. Must be\n *                           172 characters or fewer in length.\n * @param mixed  $value      Transient value. Must be serializable if non-scalar.\n *                           Expected to not be SQL-escaped.\n * @param int    $expiration Optional. Time until expiration in seconds. Default 0 (no expiration).\n * @return bool False if value was not set and true if value was set.\n *\/"}]},"wp_user_settings":{"name":"wp_user_settings","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Saves and restores user interface settings stored in a cookie.\n *\n * Checks if the current user-settings cookie is updated and stores it. When no\n * cookie exists (different browser used), adds the last saved cookie restoring\n * the settings.\n *\n * @since 2.7.0\n *\/"}]},"get_user_setting":{"name":"get_user_setting","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve user interface setting value based on setting name.\n *\n * @since 2.7.0\n *\n * @param string $name    The name of the setting.\n * @param string $default Optional default value to return when $name is not set.\n * @return mixed the last saved user setting or the default value\/false if it doesn't exist.\n *\/"}]},"set_user_setting":{"name":"set_user_setting","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add or update user interface setting.\n *\n * Both $name and $value can contain only ASCII letters, numbers and underscores.\n *\n * This function has to be used before any output has started as it calls setcookie().\n *\n * @since 2.8.0\n *\n * @param string $name  The name of the setting.\n * @param string $value The value for the setting.\n * @return bool|null True if set successfully, false if not. Null if the current user can't be established.\n *\/"}]},"delete_user_setting":{"name":"delete_user_setting","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$names","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Delete user interface settings.\n *\n * Deleting settings would reset them to the defaults.\n *\n * This function has to be used before any output has started as it calls setcookie().\n *\n * @since 2.7.0\n *\n * @param string $names The name or array of names of the setting to be deleted.\n * @return bool|null True if deleted successfully, false if not. Null if the current user can't be established.\n *\/"}]},"get_all_user_settings":{"name":"get_all_user_settings","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve all user interface settings.\n *\n * @since 2.7.0\n *\n * @global array $_updated_user_settings\n *\n * @return array the last saved user settings or empty array.\n *\/"}]},"wp_set_all_user_settings":{"name":"wp_set_all_user_settings","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_settings","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Private. Set all user interface settings.\n *\n * @since 2.8.0\n * @access private\n *\n * @global array $_updated_user_settings\n *\n * @param array $user_settings User settings.\n * @return bool|null False if the current user can't be found, null if the current\n *                   user is not a super admin or a member of the site, otherwise true.\n *\/"}]},"delete_all_user_settings":{"name":"delete_all_user_settings","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Delete the user settings of the current user.\n *\n * @since 2.7.0\n *\/"}]},"get_site_option":{"name":"get_site_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve an option value for the current network based on name of option.\n *\n * @since 2.8.0\n * @since 4.4.0 The `$use_cache` parameter was deprecated.\n * @since 4.4.0 Modified into wrapper for get_network_option()\n *\n * @see get_network_option()\n *\n * @param string $option     Name of option to retrieve. Expected to not be SQL-escaped.\n * @param mixed  $default    Optional value to return if option doesn't exist. Default false.\n * @param bool   $deprecated Whether to use cache. Multisite only. Always set to true.\n * @return mixed Value set for the option.\n *\/"}]},"add_site_option":{"name":"add_site_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a new option for the current network.\n *\n * Existing options will not be updated. Note that prior to 3.3 this wasn't the case.\n *\n * @since 2.8.0\n * @since 4.4.0 Modified into wrapper for add_network_option()\n *\n * @see add_network_option()\n *\n * @param string $option Name of option to add. Expected to not be SQL-escaped.\n * @param mixed  $value  Option value, can be anything. Expected to not be SQL-escaped.\n * @return bool False if the option was not added. True if the option was added.\n *\/"}]},"delete_site_option":{"name":"delete_site_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes a option by name for the current network.\n *\n * @since 2.8.0\n * @since 4.4.0 Modified into wrapper for delete_network_option()\n *\n * @see delete_network_option()\n *\n * @param string $option Name of option to remove. Expected to not be SQL-escaped.\n * @return bool True, if succeed. False, if failure.\n *\/"}]},"update_site_option":{"name":"update_site_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update the value of an option that was already added for the current network.\n *\n * @since 2.8.0\n * @since 4.4.0 Modified into wrapper for update_network_option()\n *\n * @see update_network_option()\n *\n * @param string $option Name of option. Expected to not be SQL-escaped.\n * @param mixed  $value  Option value. Expected to not be SQL-escaped.\n * @return bool False if value was not updated. True if value was updated.\n *\/"}]},"get_network_option":{"name":"get_network_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$network_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$option","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve a network's option value based on the option name.\n *\n * @since 4.4.0\n *\n * @see get_option()\n *\n * @global wpdb $wpdb\n *\n * @param int      $network_id ID of the network. Can be null to default to the current network ID.\n * @param string   $option     Name of option to retrieve. Expected to not be SQL-escaped.\n * @param mixed    $default    Optional. Value to return if the option doesn't exist. Default false.\n * @return mixed Value set for the option.\n *\/"}]},"add_network_option":{"name":"add_network_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$network_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$option","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a new network option.\n *\n * Existing options will not be updated.\n *\n * @since 4.4.0\n *\n * @see add_option()\n *\n * @global wpdb $wpdb\n *\n * @param int    $network_id ID of the network. Can be null to default to the current network ID.\n * @param string $option     Name of option to add. Expected to not be SQL-escaped.\n * @param mixed  $value      Option value, can be anything. Expected to not be SQL-escaped.\n * @return bool False if option was not added and true if option was added.\n *\/"}]},"delete_network_option":{"name":"delete_network_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$network_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$option","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes a network option by name.\n *\n * @since 4.4.0\n *\n * @see delete_option()\n *\n * @global wpdb $wpdb\n *\n * @param int    $network_id ID of the network. Can be null to default to the current network ID.\n * @param string $option     Name of option to remove. Expected to not be SQL-escaped.\n * @return bool True, if succeed. False, if failure.\n *\/"}]},"update_network_option":{"name":"update_network_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$network_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$option","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update the value of a network option that was already added.\n *\n * @since 4.4.0\n *\n * @see update_option()\n *\n * @global wpdb $wpdb\n *\n * @param int      $network_id ID of the network. Can be null to default to the current network ID.\n * @param string   $option     Name of option. Expected to not be SQL-escaped.\n * @param mixed    $value      Option value. Expected to not be SQL-escaped.\n * @return bool False if value was not updated and true if value was updated.\n *\/"}]},"delete_site_transient":{"name":"delete_site_transient","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$transient","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Delete a site transient.\n *\n * @since 2.9.0\n *\n * @param string $transient Transient name. Expected to not be SQL-escaped.\n * @return bool True if successful, false otherwise\n *\/"}]},"get_site_transient":{"name":"get_site_transient","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$transient","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the value of a site transient.\n *\n * If the transient does not exist, does not have a value, or has expired,\n * then the return value will be false.\n *\n * @since 2.9.0\n *\n * @see get_transient()\n *\n * @param string $transient Transient name. Expected to not be SQL-escaped.\n * @return mixed Value of transient.\n *\/"}]},"set_site_transient":{"name":"set_site_transient","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$transient","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$expiration","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set\/update the value of a site transient.\n *\n * You do not need to serialize values, if the value needs to be serialize, then\n * it will be serialized before it is set.\n *\n * @since 2.9.0\n *\n * @see set_transient()\n *\n * @param string $transient  Transient name. Expected to not be SQL-escaped. Must be\n *                           40 characters or fewer in length.\n * @param mixed  $value      Transient value. Expected to not be SQL-escaped.\n * @param int    $expiration Optional. Time until expiration in seconds. Default 0 (no expiration).\n * @return bool False if value was not set and true if value was set.\n *\/"}]},"register_initial_settings":{"name":"register_initial_settings","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register default settings available in WordPress.\n *\n * The settings registered here are primarily useful for the REST API, so this\n * does not encompass all settings available in WordPress.\n *\n * @since 4.7.0\n *\/"}]},"register_setting":{"name":"register_setting","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option_group","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$option_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register a setting and its data.\n *\n * @since 2.7.0\n * @since 4.7.0 `$args` can be passed to set flags on the setting, similar to `register_meta()`.\n *\n * @global array $new_whitelist_options\n * @global array $wp_registered_settings\n *\n * @param string $option_group A settings group name. Should correspond to a whitelisted option key name.\n * \tDefault whitelisted option key names include \"general,\" \"discussion,\" and \"reading,\" among others.\n * @param string $option_name The name of an option to sanitize and save.\n * @param array  $args {\n *     Data used to describe the setting when registered.\n *\n *     @type string   $type              The type of data associated with this setting.\n *     @type string   $description       A description of the data attached to this setting.\n *     @type callable $sanitize_callback A callback function that sanitizes the option's value.\n *     @type bool     $show_in_rest      Whether data associated with this setting should be included in the REST API.\n *     @type mixed    $default           Default value when calling `get_option()`.\n * }\n *\/"}]},"unregister_setting":{"name":"unregister_setting","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option_group","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$option_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Unregister a setting.\n *\n * @since 2.7.0\n * @since 4.7.0 `$sanitize_callback` was deprecated. The callback from `register_setting()` is now used instead.\n *\n * @global array $new_whitelist_options\n *\n * @param string   $option_group      The settings group name used during registration.\n * @param string   $option_name       The name of the option to unregister.\n * @param callable $deprecated        Deprecated.\n *\/"}]},"get_registered_settings":{"name":"get_registered_settings","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves an array of registered settings.\n *\n * @since 4.7.0\n *\n * @return array List of registered settings, keyed by option name.\n *\/"}]},"filter_default_option":{"name":"filter_default_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$default","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$option","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$passed_default","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filter the default value for the option.\n *\n * For settings which register a default setting in `register_setting()`, this\n * function is added as a filter to `default_option_{$option}`.\n *\n * @since 4.7.0\n *\n * @param mixed $default Existing default value to return.\n * @param string $option Option name.\n * @param bool $passed_default Was `get_option()` passed a default value?\n * @return mixed Filtered default value.\n *\/"}]},"has_filter":{"name":"has_filter","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function_to_check","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if any filter has been registered for a hook.\n *\n * @since 2.5.0\n *\n * @global array $wp_filter Stores all of the filters.\n *\n * @param string        $tag               The name of the filter hook.\n * @param callable|bool $function_to_check Optional. The callback to check for. Default false.\n * @return false|int If $function_to_check is omitted, returns boolean for whether the hook has\n *                   anything registered. When checking a specific function, the priority of that\n *                   hook is returned, or false if the function is not attached. When using the\n *                   $function_to_check argument, this function may return a non-boolean value\n *                   that evaluates to false (e.g.) 0, so use the === operator for testing the\n *                   return value.\n *\/"}]},"apply_filters_ref_array":{"name":"apply_filters_ref_array","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute functions hooked on a specific filter hook, specifying arguments in an array.\n *\n * @since 3.0.0\n *\n * @see apply_filters() This function is identical, but the arguments passed to the\n * functions hooked to `$tag` are supplied using an array.\n *\n * @global array $wp_filter         Stores all of the filters\n * @global array $wp_current_filter Stores the list of current filters with the current one last\n *\n * @param string $tag  The name of the filter hook.\n * @param array  $args The arguments supplied to the functions hooked to $tag.\n * @return mixed The filtered value after all hooked functions are applied to it.\n *\/"}]},"remove_filter":{"name":"remove_filter","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function_to_remove","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$priority","rank":2,"variadic":false,"reference":false,"default":"10","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes a function from a specified filter hook.\n *\n * This function removes a function attached to a specified filter hook. This\n * method can be used to remove default functions attached to a specific filter\n * hook and possibly replace them with a substitute.\n *\n * To remove a hook, the $function_to_remove and $priority arguments must match\n * when the hook was added. This goes for both filters and actions. No warning\n * will be given on removal failure.\n *\n * @since 1.2.0\n *\n * @global array $wp_filter         Stores all of the filters\n *\n * @param string   $tag                The filter hook to which the function to be removed is hooked.\n * @param callable $function_to_remove The name of the function which should be removed.\n * @param int      $priority           Optional. The priority of the function. Default 10.\n * @return bool    Whether the function existed before it was removed.\n *\/"}]},"remove_all_filters":{"name":"remove_all_filters","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$priority","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove all of the hooks from a filter.\n *\n * @since 2.7.0\n *\n * @global array $wp_filter  Stores all of the filters\n *\n * @param string   $tag      The filter to remove hooks from.\n * @param int|bool $priority Optional. The priority number to remove. Default false.\n * @return true True when finished.\n *\/"}]},"current_filter":{"name":"current_filter","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the name of the current filter or action.\n *\n * @since 2.5.0\n *\n * @global array $wp_current_filter Stores the list of current filters with the current one last\n *\n * @return string Hook name of the current filter or action.\n *\/"}]},"current_action":{"name":"current_action","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the name of the current action.\n *\n * @since 3.9.0\n *\n * @return string Hook name of the current action.\n *\/"}]},"doing_filter":{"name":"doing_filter","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$filter","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the name of a filter currently being processed.\n *\n * The function current_filter() only returns the most recent filter or action\n * being executed. did_action() returns true once the action is initially\n * processed.\n *\n * This function allows detection for any filter currently being\n * executed (despite not being the most recent filter to fire, in the case of\n * hooks called from hook callbacks) to be verified.\n *\n * @since 3.9.0\n *\n * @see current_filter()\n * @see did_action()\n * @global array $wp_current_filter Current filter.\n *\n * @param null|string $filter Optional. Filter to check. Defaults to null, which\n *                            checks if any filter is currently being run.\n * @return bool Whether the filter is currently in the stack.\n *\/"}]},"doing_action":{"name":"doing_action","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the name of an action currently being processed.\n *\n * @since 3.9.0\n *\n * @param string|null $action Optional. Action to check. Defaults to null, which checks\n *                            if any action is currently being run.\n * @return bool Whether the action is currently in the stack.\n *\/"}]},"do_action":{"name":"do_action","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$arg","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Execute functions hooked on a specific action hook.\n *\n * This function invokes all functions attached to action hook `$tag`. It is\n * possible to create new action hooks by simply calling this function,\n * specifying the name of the new hook using the `$tag` parameter.\n *\n * You can pass extra arguments to the hooks, much like you can with apply_filters().\n *\n * @since 1.2.0\n *\n * @global array $wp_filter         Stores all of the filters\n * @global array $wp_actions        Increments the amount of times action was triggered.\n * @global array $wp_current_filter Stores the list of current filters with the current one last\n *\n * @param string $tag     The name of the action to be executed.\n * @param mixed  $arg,... Optional. Additional arguments which are passed on to the\n *                        functions hooked to the action. Default empty.\n *\/"}]},"has_action":{"name":"has_action","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function_to_check","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if any action has been registered for a hook.\n *\n * @since 2.5.0\n *\n * @see has_filter() has_action() is an alias of has_filter().\n *\n * @param string        $tag               The name of the action hook.\n * @param callable|bool $function_to_check Optional. The callback to check for. Default false.\n * @return bool|int If $function_to_check is omitted, returns boolean for whether the hook has\n *                  anything registered. When checking a specific function, the priority of that\n *                  hook is returned, or false if the function is not attached. When using the\n *                  $function_to_check argument, this function may return a non-boolean value\n *                  that evaluates to false (e.g.) 0, so use the === operator for testing the\n *                  return value.\n *\/"}]},"remove_action":{"name":"remove_action","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function_to_remove","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$priority","rank":2,"variadic":false,"reference":false,"default":"10","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes a function from a specified action hook.\n *\n * This function removes a function attached to a specified action hook. This\n * method can be used to remove default functions attached to a specific filter\n * hook and possibly replace them with a substitute.\n *\n * @since 1.2.0\n *\n * @param string   $tag                The action hook to which the function to be removed is hooked.\n * @param callable $function_to_remove The name of the function which should be removed.\n * @param int      $priority           Optional. The priority of the function. Default 10.\n * @return bool Whether the function is removed.\n *\/"}]},"remove_all_actions":{"name":"remove_all_actions","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$priority","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove all of the hooks from an action.\n *\n * @since 2.7.0\n *\n * @param string   $tag      The action to remove hooks from.\n * @param int|bool $priority The priority number to remove them from. Default false.\n * @return true True when finished.\n *\/"}]},"apply_filters_deprecated":{"name":"apply_filters_deprecated","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$version","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$replacement","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Fires functions attached to a deprecated filter hook.\n *\n * When a filter hook is deprecated, the apply_filters() call is replaced with\n * apply_filters_deprecated(), which triggers a deprecation notice and then fires\n * the original filter hook.\n *\n * @since 4.6.0\n *\n * @see _deprecated_hook()\n *\n * @param string $tag         The name of the filter hook.\n * @param array  $args        Array of additional function arguments to be passed to apply_filters().\n * @param string $version     The version of WordPress that deprecated the hook.\n * @param string $replacement Optional. The hook that should have been used. Default false.\n * @param string $message     Optional. A message regarding the change. Default null.\n *\/"}]},"do_action_deprecated":{"name":"do_action_deprecated","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$version","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$replacement","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Fires functions attached to a deprecated action hook.\n *\n * When an action hook is deprecated, the do_action() call is replaced with\n * do_action_deprecated(), which triggers a deprecation notice and then fires\n * the original hook.\n *\n * @since 4.6.0\n *\n * @see _deprecated_hook()\n *\n * @param string $tag         The name of the action hook.\n * @param array  $args        Array of additional function arguments to be passed to do_action().\n * @param string $version     The version of WordPress that deprecated the hook.\n * @param string $replacement Optional. The hook that should have been used.\n * @param string $message     Optional. A message regarding the change.\n *\/"}]},"plugin_basename":{"name":"plugin_basename","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the basename of a plugin.\n *\n * This method extracts the name of a plugin from its filename.\n *\n * @since 1.5.0\n *\n * @global array $wp_plugin_paths\n *\n * @param string $file The filename of plugin.\n * @return string The name of a plugin.\n *\/"}]},"wp_register_plugin_realpath":{"name":"wp_register_plugin_realpath","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register a plugin's real path.\n *\n * This is used in plugin_basename() to resolve symlinked paths.\n *\n * @since 3.9.0\n *\n * @see wp_normalize_path()\n *\n * @global array $wp_plugin_paths\n *\n * @staticvar string $wp_plugin_path\n * @staticvar string $wpmu_plugin_path\n *\n * @param string $file Known path to the file.\n * @return bool Whether the path was able to be registered.\n *\/"}]},"plugin_dir_path":{"name":"plugin_dir_path","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the filesystem directory path (with trailing slash) for the plugin __FILE__ passed in.\n *\n * @since 2.8.0\n *\n * @param string $file The filename of the plugin (__FILE__).\n * @return string the filesystem path of the directory that contains the plugin.\n *\/"}]},"plugin_dir_url":{"name":"plugin_dir_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the URL directory path (with trailing slash) for the plugin __FILE__ passed in.\n *\n * @since 2.8.0\n *\n * @param string $file The filename of the plugin (__FILE__).\n * @return string the URL path of the directory that contains the plugin.\n *\/"}]},"register_activation_hook":{"name":"register_activation_hook","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set the activation hook for a plugin.\n *\n * When a plugin is activated, the action 'activate_PLUGINNAME' hook is\n * called. In the name of this hook, PLUGINNAME is replaced with the name\n * of the plugin, including the optional subdirectory. For example, when the\n * plugin is located in wp-content\/plugins\/sampleplugin\/sample.php, then\n * the name of this hook will become 'activate_sampleplugin\/sample.php'.\n *\n * When the plugin consists of only one file and is (as by default) located at\n * wp-content\/plugins\/sample.php the name of this hook will be\n * 'activate_sample.php'.\n *\n * @since 2.0.0\n *\n * @param string   $file     The filename of the plugin including the path.\n * @param callable $function The function hooked to the 'activate_PLUGIN' action.\n *\/"}]},"register_deactivation_hook":{"name":"register_deactivation_hook","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set the deactivation hook for a plugin.\n *\n * When a plugin is deactivated, the action 'deactivate_PLUGINNAME' hook is\n * called. In the name of this hook, PLUGINNAME is replaced with the name\n * of the plugin, including the optional subdirectory. For example, when the\n * plugin is located in wp-content\/plugins\/sampleplugin\/sample.php, then\n * the name of this hook will become 'deactivate_sampleplugin\/sample.php'.\n *\n * When the plugin consists of only one file and is (as by default) located at\n * wp-content\/plugins\/sample.php the name of this hook will be\n * 'deactivate_sample.php'.\n *\n * @since 2.0.0\n *\n * @param string   $file     The filename of the plugin including the path.\n * @param callable $function The function hooked to the 'deactivate_PLUGIN' action.\n *\/"}]},"register_uninstall_hook":{"name":"register_uninstall_hook","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set the uninstallation hook for a plugin.\n *\n * Registers the uninstall hook that will be called when the user clicks on the\n * uninstall link that calls for the plugin to uninstall itself. The link won't\n * be active unless the plugin hooks into the action.\n *\n * The plugin should not run arbitrary code outside of functions, when\n * registering the uninstall hook. In order to run using the hook, the plugin\n * will have to be included, which means that any code laying outside of a\n * function will be run during the uninstall process. The plugin should not\n * hinder the uninstall process.\n *\n * If the plugin can not be written without running code within the plugin, then\n * the plugin should create a file named 'uninstall.php' in the base plugin\n * folder. This file will be called, if it exists, during the uninstall process\n * bypassing the uninstall hook. The plugin, when using the 'uninstall.php'\n * should always check for the 'WP_UNINSTALL_PLUGIN' constant, before\n * executing.\n *\n * @since 2.7.0\n *\n * @param string   $file     Plugin file.\n * @param callable $callback The callback to run when the hook is called. Must be\n *                           a static method or function.\n *\/"}]},"_wp_call_all_hook":{"name":"_wp_call_all_hook","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Call the 'all' hook, which will process the functions hooked into it.\n *\n * The 'all' hook passes all of the arguments or parameters that were used for\n * the hook, which this function was called for.\n *\n * This function is used internally for apply_filters(), do_action(), and\n * do_action_ref_array() and is not meant to be used from outside those\n * functions. This function does not check for the existence of the all hook, so\n * it will fail unless the all hook exists prior to this function call.\n *\n * @since 2.5.0\n * @access private\n *\n * @global array $wp_filter  Stores all of the filters\n *\n * @param array $args The collected parameters from the hook that was called.\n *\/"}]},"_wp_filter_build_unique_id":{"name":"_wp_filter_build_unique_id","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$priority","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Build Unique ID for storage and retrieval.\n *\n * The old way to serialize the callback caused issues and this function is the\n * solution. It works by checking for objects and creating a new property in\n * the class to keep track of the object and new objects of the same class that\n * need to be added.\n *\n * It also allows for the removal of actions and filters for objects after they\n * change class properties. It is possible to include the property $wp_filter_id\n * in your class and set it to \"null\" or a number to bypass the workaround.\n * However this will prevent you from adding new classes and any new classes\n * will overwrite the previous hook by the same class.\n *\n * Functions and static method callbacks are just returned as strings and\n * shouldn't have any speed penalty.\n *\n * @link https:\/\/core.trac.wordpress.org\/ticket\/3875\n *\n * @since 2.2.3\n * @access private\n *\n * @global array $wp_filter Storage for all of the filters and actions.\n * @staticvar int $filter_id_count\n *\n * @param string   $tag      Used in counting how many hooks were applied\n * @param callable $function Used for creating unique id\n * @param int|bool $priority Used in counting how many hooks were applied. If === false\n *                           and $function is an object reference, we return the unique\n *                           id only if it already has one, false otherwise.\n * @return string|false Unique ID for usage as array key or false if $priority === false\n *                      and $function is an object reference, and it does not already have\n *                      a unique id.\n *\/"}]},"get_category_link":{"name":"get_category_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$category","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Taxonomy API: Core category-specific template tags\n *\n * @package WordPress\n * @subpackage Template\n * @since 1.2.0\n *\/"},{"phpdoc":"\/**\n * Retrieve category link URL.\n *\n * @since 1.0.0\n * @see get_term_link()\n *\n * @param int|object $category Category ID or object.\n * @return string Link on success, empty string if category does not exist.\n *\/"}]},"get_category_parents":{"name":"get_category_parents","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$link","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$separator","rank":2,"variadic":false,"reference":false,"default":"'\/'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$nicename","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$visited","rank":4,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve category parents with separator.\n *\n * @since 1.2.0\n *\n * @param int $id Category ID.\n * @param bool $link Optional, default is false. Whether to format with link.\n * @param string $separator Optional, default is '\/'. How to separate categories.\n * @param bool $nicename Optional, default is false. Whether to use nice name for display.\n * @param array $visited Optional. Already linked to categories to prevent duplicates.\n * @return string|WP_Error A list of category parents on success, WP_Error on failure.\n *\/"}]},"get_the_category":{"name":"get_the_category","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve post categories.\n *\n * This tag may be used outside The Loop by passing a post id as the parameter.\n *\n * Note: This function only returns results from the default \"category\" taxonomy.\n * For custom taxonomies use get_the_terms().\n *\n * @since 0.71\n *\n * @param int $id Optional, default to current post ID. The post ID.\n * @return array Array of WP_Term objects, one for each category assigned to the post.\n *\/"}]},"get_the_category_by_ID":{"name":"get_the_category_by_ID","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$cat_ID","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve category name based on category ID.\n *\n * @since 0.71\n *\n * @param int $cat_ID Category ID.\n * @return string|WP_Error Category name on success, WP_Error on failure.\n *\/"}]},"get_the_category_list":{"name":"get_the_category_list","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$separator","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parents","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve category list in either HTML list or custom format.\n *\n * @since 1.5.1\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param string $separator Optional, default is empty string. Separator for between the categories.\n * @param string $parents Optional. How to display the parents.\n * @param int $post_id Optional. Post ID to retrieve categories.\n * @return string\n *\/"}]},"in_category":{"name":"in_category","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$category","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if the current post is within any of the given categories.\n *\n * The given categories are checked against the post's categories' term_ids, names and slugs.\n * Categories given as integers will only be checked against the post's categories' term_ids.\n *\n * Prior to v2.5 of WordPress, category names were not supported.\n * Prior to v2.7, category slugs were not supported.\n * Prior to v2.7, only one category could be compared: in_category( $single_category ).\n * Prior to v2.7, this function could only be used in the WordPress Loop.\n * As of 2.7, the function can be used anywhere if it is provided a post ID or post object.\n *\n * @since 1.2.0\n *\n * @param int|string|array $category Category ID, name or slug, or array of said.\n * @param int|object $post Optional. Post to check instead of the current post. (since 2.7.0)\n * @return bool True if the current post is in any of the given categories.\n *\/"}]},"the_category":{"name":"the_category","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$separator","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parents","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the category list for the post.\n *\n * @since 0.71\n *\n * @param string $separator Optional, default is empty string. Separator for between the categories.\n * @param string $parents Optional. How to display the parents.\n * @param int $post_id Optional. Post ID to retrieve categories.\n *\/"}]},"category_description":{"name":"category_description","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$category","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve category description.\n *\n * @since 1.0.0\n *\n * @param int $category Optional. Category ID. Will use global category ID by default.\n * @return string Category description, available.\n *\/"}]},"wp_dropdown_categories":{"name":"wp_dropdown_categories","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display or retrieve the HTML dropdown list of categories.\n *\n * The 'hierarchical' argument, which is disabled by default, will override the\n * depth argument, unless it is true. When the argument is false, it will\n * display all of the categories. When it is enabled it will use the value in\n * the 'depth' argument.\n *\n * @since 2.1.0\n * @since 4.2.0 Introduced the `value_field` argument.\n * @since 4.6.0 Introduced the `required` argument.\n *\n * @param string|array $args {\n *     Optional. Array or string of arguments to generate a categories drop-down element.\n *\n *     @type string       $show_option_all   Text to display for showing all categories. Default empty.\n *     @type string       $show_option_none  Text to display for showing no categories. Default empty.\n *     @type string       $option_none_value Value to use when no category is selected. Default empty.\n *     @type string       $orderby           Which column to use for ordering categories. See get_terms() for a list\n *                                           of accepted values. Default 'id' (term_id).\n *     @type string       $order             Whether to order terms in ascending or descending order. Accepts 'ASC'\n *                                           or 'DESC'. Default 'ASC'.\n *     @type bool         $pad_counts        See get_terms() for an argument description. Default false.\n *     @type bool|int     $show_count        Whether to include post counts. Accepts 0, 1, or their bool equivalents.\n *                                           Default 0.\n *     @type bool|int     $hide_empty        Whether to hide categories that don't have any posts. Accepts 0, 1, or\n *                                           their bool equivalents. Default 1.\n *     @type int          $child_of          Term ID to retrieve child terms of. See get_terms(). Default 0.\n *     @type array|string $exclude           Array or comma\/space-separated string of term ids to exclude.\n *                                           If `$include` is non-empty, `$exclude` is ignored. Default empty array.\n *     @type bool|int     $echo              Whether to echo or return the generated markup. Accepts 0, 1, or their\n *                                           bool equivalents. Default 1.\n *     @type bool|int     $hierarchical      Whether to traverse the taxonomy hierarchy. Accepts 0, 1, or their bool\n *                                           equivalents. Default 0.\n *     @type int          $depth             Maximum depth. Default 0.\n *     @type int          $tab_index         Tab index for the select element. Default 0 (no tabindex).\n *     @type string       $name              Value for the 'name' attribute of the select element. Default 'cat'.\n *     @type string       $id                Value for the 'id' attribute of the select element. Defaults to the value\n *                                           of `$name`.\n *     @type string       $class             Value for the 'class' attribute of the select element. Default 'postform'.\n *     @type int|string   $selected          Value of the option that should be selected. Default 0.\n *     @type string       $value_field       Term field that should be used to populate the 'value' attribute\n *                                           of the option elements. Accepts any valid term field: 'term_id', 'name',\n *                                           'slug', 'term_group', 'term_taxonomy_id', 'taxonomy', 'description',\n *                                           'parent', 'count'. Default 'term_id'.\n *     @type string|array $taxonomy          Name of the category or categories to retrieve. Default 'category'.\n *     @type bool         $hide_if_empty     True to skip generating markup if no categories are found.\n *                                           Default false (create select element even if no categories are found).\n *     @type bool         $required          Whether the `<select>` element should have the HTML5 'required' attribute.\n *                                           Default false.\n * }\n * @return string HTML content only if 'echo' argument is 0.\n *\/"}]},"wp_list_categories":{"name":"wp_list_categories","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display or retrieve the HTML list of categories.\n *\n * @since 2.1.0\n * @since 4.4.0 Introduced the `hide_title_if_empty` and `separator` arguments. The `current_category` argument was modified to\n *              optionally accept an array of values.\n *\n * @param string|array $args {\n *     Array of optional arguments.\n *\n *     @type int          $child_of              Term ID to retrieve child terms of. See get_terms(). Default 0.\n *     @type int|array    $current_category      ID of category, or array of IDs of categories, that should get the\n *                                               'current-cat' class. Default 0.\n *     @type int          $depth                 Category depth. Used for tab indentation. Default 0.\n *     @type bool|int     $echo                  True to echo markup, false to return it. Default 1.\n *     @type array|string $exclude               Array or comma\/space-separated string of term IDs to exclude.\n *                                               If `$hierarchical` is true, descendants of `$exclude` terms will also\n *                                               be excluded; see `$exclude_tree`. See get_terms().\n *                                               Default empty string.\n *     @type array|string $exclude_tree          Array or comma\/space-separated string of term IDs to exclude, along\n *                                               with their descendants. See get_terms(). Default empty string.\n *     @type string       $feed                  Text to use for the feed link. Default 'Feed for all posts filed\n *                                               under [cat name]'.\n *     @type string       $feed_image            URL of an image to use for the feed link. Default empty string.\n *     @type string       $feed_type             Feed type. Used to build feed link. See get_term_feed_link().\n *                                               Default empty string (default feed).\n *     @type bool|int     $hide_empty            Whether to hide categories that don't have any posts attached to them.\n *                                               Default 1.\n *     @type bool         $hide_title_if_empty   Whether to hide the `$title_li` element if there are no terms in\n *                                               the list. Default false (title will always be shown).\n *     @type bool         $hierarchical          Whether to include terms that have non-empty descendants.\n *                                               See get_terms(). Default true.\n *     @type string       $order                 Which direction to order categories. Accepts 'ASC' or 'DESC'.\n *                                               Default 'ASC'.\n *     @type string       $orderby               The column to use for ordering categories. Default 'ID'.\n *     @type string       $separator             Separator between links. Default '<br \/>'.\n *     @type bool|int     $show_count            Whether to show how many posts are in the category. Default 0.\n *     @type string       $show_option_all       Text to display for showing all categories. Default empty string.\n *     @type string       $show_option_none      Text to display for the 'no categories' option.\n *                                               Default 'No categories'.\n *     @type string       $style                 The style used to display the categories list. If 'list', categories\n *                                               will be output as an unordered list. If left empty or another value,\n *                                               categories will be output separated by `<br>` tags. Default 'list'.\n *     @type string       $taxonomy              Taxonomy name. Default 'category'.\n *     @type string       $title_li              Text to use for the list title `<li>` element. Pass an empty string\n *                                               to disable. Default 'Categories'.\n *     @type bool|int     $use_desc_for_title    Whether to use the category description as the title attribute.\n *                                               Default 1.\n * }\n * @return false|string HTML content only if 'echo' argument is 0.\n *\/"}]},"wp_tag_cloud":{"name":"wp_tag_cloud","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display tag cloud.\n *\n * The text size is set by the 'smallest' and 'largest' arguments, which will\n * use the 'unit' argument value for the CSS text size unit. The 'format'\n * argument can be 'flat' (default), 'list', or 'array'. The flat value for the\n * 'format' argument will separate tags with spaces. The list value for the\n * 'format' argument will format the tags in a UL HTML list. The array value for\n * the 'format' argument will return in PHP array type format.\n *\n * The 'orderby' argument will accept 'name' or 'count' and defaults to 'name'.\n * The 'order' is the direction to sort, defaults to 'ASC' and can be 'DESC'.\n *\n * The 'number' argument is how many tags to return. By default, the limit will\n * be to return the top 45 tags in the tag cloud list.\n *\n * The 'topic_count_text' argument is a nooped plural from _n_noop() to generate the\n * text for the tooltip of the tag link.\n *\n * The 'topic_count_text_callback' argument is a function, which given the count\n * of the posts with that tag returns a text for the tooltip of the tag link.\n *\n * The 'post_type' argument is used only when 'link' is set to 'edit'. It determines the post_type\n * passed to edit.php for the popular tags edit links.\n *\n * The 'exclude' and 'include' arguments are used for the get_tags() function. Only one\n * should be used, because only one will be used and the other ignored, if they are both set.\n *\n * @since 2.3.0\n *\n * @param array|string|null $args Optional. Override default arguments.\n * @return void|array Generated tag cloud, only if no failures and 'array' is set for the 'format' argument.\n *                    Otherwise, this function outputs the tag cloud.\n *\/"}]},"default_topic_count_scale":{"name":"default_topic_count_scale","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$count","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Default topic count scaling for tag links\n *\n * @param int $count number of posts with that tag\n * @return int scaled count\n *\/"}]},"wp_generate_tag_cloud":{"name":"wp_generate_tag_cloud","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tags","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Generates a tag cloud (heatmap) from provided data.\n *\n * @todo Complete functionality.\n * @since 2.3.0\n *\n * @param array $tags List of tags.\n * @param string|array $args {\n *     Optional. Array of string of arguments for generating a tag cloud.\n *\n *     @type int      $smallest                   Smallest font size used to display tags. Paired\n *                                                with the value of `$unit`, to determine CSS text\n *                                                size unit. Default 8 (pt).\n *     @type int      $largest                    Largest font size used to display tags. Paired\n *                                                with the value of `$unit`, to determine CSS text\n *                                                size unit. Default 22 (pt).\n *     @type string   $unit                       CSS text size unit to use with the `$smallest`\n *                                                and `$largest` values. Accepts any valid CSS text\n *                                                size unit. Default 'pt'.\n *     @type int      $number                     The number of tags to return. Accepts any\n *                                                positive integer or zero to return all.\n *                                                Default 0.\n *     @type string   $format                     Format to display the tag cloud in. Accepts 'flat'\n *                                                (tags separated with spaces), 'list' (tags displayed\n *                                                in an unordered list), or 'array' (returns an array).\n *                                                Default 'flat'.\n *     @type string   $separator                  HTML or text to separate the tags. Default \"\\n\" (newline).\n *     @type string   $orderby                    Value to order tags by. Accepts 'name' or 'count'.\n *                                                Default 'name'. The {@see 'tag_cloud_sort'} filter\n *                                                can also affect how tags are sorted.\n *     @type string   $order                      How to order the tags. Accepts 'ASC' (ascending),\n *                                                'DESC' (descending), or 'RAND' (random). Default 'ASC'.\n *     @type int|bool $filter                     Whether to enable filtering of the final output\n *                                                via {@see 'wp_generate_tag_cloud'}. Default 1|true.\n *     @type string   $topic_count_text           Nooped plural text from _n_noop() to supply to\n *                                                tag tooltips. Default null.\n *     @type callable $topic_count_text_callback  Callback used to generate nooped plural text for\n *                                                tag tooltips based on the count. Default null.\n *     @type callable $topic_count_scale_callback Callback used to determine the tag count scaling\n *                                                value. Default default_topic_count_scale().\n * }\n * @return string|array Tag cloud as a string or an array, depending on 'format' argument.\n *\/"}]},"_wp_object_name_sort_cb":{"name":"_wp_object_name_sort_cb","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Serves as a callback for comparing objects based on name.\n *\n * Used with `uasort()`.\n *\n * @since 3.1.0\n * @access private\n *\n * @param object $a The first object to compare.\n * @param object $b The second object to compare.\n * @return int Negative number if `$a->name` is less than `$b->name`, zero if they are equal,\n *             or greater than zero if `$a->name` is greater than `$b->name`.\n *\/"}]},"_wp_object_count_sort_cb":{"name":"_wp_object_count_sort_cb","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Serves as a callback for comparing objects based on count.\n *\n * Used with `uasort()`.\n *\n * @since 3.1.0\n * @access private\n *\n * @param object $a The first object to compare.\n * @param object $b The second object to compare.\n * @return bool Whether the count value for `$a` is greater than the count value for `$b`.\n *\/"}]},"walk_category_tree":{"name":"walk_category_tree","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve HTML list content for category list.\n *\n * @uses Walker_Category to create HTML list content.\n * @since 2.1.0\n * @see Walker_Category::walk() for parameters and return description.\n * @return string\n *\/"}]},"walk_category_dropdown_tree":{"name":"walk_category_dropdown_tree","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve HTML dropdown (select) content for category list.\n *\n * @uses Walker_CategoryDropdown to create HTML dropdown content.\n * @since 2.1.0\n * @see Walker_CategoryDropdown::walk() for parameters and return description.\n * @return string\n *\/"}]},"get_tag_link":{"name":"get_tag_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the link to the tag.\n *\n * @since 2.3.0\n * @see get_term_link()\n *\n * @param int|object $tag Tag ID or object.\n * @return string Link on success, empty string if tag does not exist.\n *\/"}]},"get_the_tags":{"name":"get_the_tags","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the tags for a post.\n *\n * @since 2.3.0\n *\n * @param int $id Post ID.\n * @return array|false|WP_Error Array of tag objects on success, false on failure.\n *\/"}]},"get_the_tag_list":{"name":"get_the_tag_list","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$before","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sep","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the tags for a post formatted as a string.\n *\n * @since 2.3.0\n *\n * @param string $before Optional. Before tags.\n * @param string $sep Optional. Between tags.\n * @param string $after Optional. After tags.\n * @param int $id Optional. Post ID. Defaults to the current post.\n * @return string|false|WP_Error A list of tags on success, false if there are no terms, WP_Error on failure.\n *\/"}]},"the_tags":{"name":"the_tags","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$before","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sep","rank":1,"variadic":false,"reference":false,"default":"', '","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the tags for a post.\n *\n * @since 2.3.0\n *\n * @param string $before Optional. Before list.\n * @param string $sep Optional. Separate items using this.\n * @param string $after Optional. After list.\n *\/"}]},"tag_description":{"name":"tag_description","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve tag description.\n *\n * @since 2.8.0\n *\n * @param int $tag Optional. Tag ID. Will use global tag ID by default.\n * @return string Tag description, available.\n *\/"}]},"term_description":{"name":"term_description","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"'post_tag'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve term description.\n *\n * @since 2.8.0\n *\n * @param int $term Optional. Term ID. Will use global term ID by default.\n * @param string $taxonomy Optional taxonomy name. Defaults to 'post_tag'.\n * @return string Term description, available.\n *\/"}]},"get_the_terms":{"name":"get_the_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the terms of the taxonomy that are attached to the post.\n *\n * @since 2.5.0\n *\n * @param int|object $post Post ID or object.\n * @param string $taxonomy Taxonomy name.\n * @return array|false|WP_Error Array of WP_Term objects on success, false if there are no terms\n *                              or the post does not exist, WP_Error on failure.\n *\/"}]},"get_the_term_list":{"name":"get_the_term_list","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sep","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve a post's terms as a list with specified format.\n *\n * @since 2.5.0\n *\n * @param int $id Post ID.\n * @param string $taxonomy Taxonomy name.\n * @param string $before Optional. Before list.\n * @param string $sep Optional. Separate items using this.\n * @param string $after Optional. After list.\n * @return string|false|WP_Error A list of terms on success, false if there are no terms, WP_Error on failure.\n *\/"}]},"the_terms":{"name":"the_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sep","rank":3,"variadic":false,"reference":false,"default":"', '","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the terms in a list.\n *\n * @since 2.5.0\n *\n * @param int $id Post ID.\n * @param string $taxonomy Taxonomy name.\n * @param string $before Optional. Before list.\n * @param string $sep Optional. Separate items using this.\n * @param string $after Optional. After list.\n * @return false|void False on WordPress error.\n *\/"}]},"has_category":{"name":"has_category","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$category","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if the current post has any of given category.\n *\n * @since 3.1.0\n *\n * @param string|int|array $category Optional. The category name\/term_id\/slug or array of them to check for.\n * @param int|object $post Optional. Post to check instead of the current post.\n * @return bool True if the current post has any of the given categories (or any category, if no category specified).\n *\/"}]},"has_tag":{"name":"has_tag","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if the current post has any of given tags.\n *\n * The given tags are checked against the post's tags' term_ids, names and slugs.\n * Tags given as integers will only be checked against the post's tags' term_ids.\n * If no tags are given, determines if post has any tags.\n *\n * Prior to v2.7 of WordPress, tags given as integers would also be checked against the post's tags' names and slugs (in addition to term_ids)\n * Prior to v2.7, this function could only be used in the WordPress Loop.\n * As of 2.7, the function can be used anywhere if it is provided a post ID or post object.\n *\n * @since 2.6.0\n *\n * @param string|int|array $tag Optional. The tag name\/term_id\/slug or array of them to check for.\n * @param int|object $post Optional. Post to check instead of the current post. (since 2.7.0)\n * @return bool True if the current post has any of the given tags (or any tag, if no tag specified).\n *\/"}]},"has_term":{"name":"has_term","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if the current post has any of given terms.\n *\n * The given terms are checked against the post's terms' term_ids, names and slugs.\n * Terms given as integers will only be checked against the post's terms' term_ids.\n * If no terms are given, determines if post has any terms.\n *\n * @since 3.1.0\n *\n * @param string|int|array $term Optional. The term name\/term_id\/slug or array of them to check for.\n * @param string $taxonomy Taxonomy name\n * @param int|object $post Optional. Post to check instead of the current post.\n * @return bool True if the current post has any of the given tags (or any tag, if no tag specified).\n *\/"}]},"has_post_thumbnail":{"name":"has_post_thumbnail","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * WordPress Post Thumbnail Template Functions.\n *\n * Support for post thumbnails.\n * Theme's functions.php must call add_theme_support( 'post-thumbnails' ) to use these.\n *\n * @package WordPress\n * @subpackage Template\n *\/"},{"phpdoc":"\/**\n * Check if post has an image attached.\n *\n * @since 2.9.0\n * @since 4.4.0 `$post` can be a post ID or WP_Post object.\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global `$post`.\n * @return bool Whether the post has an image attached.\n *\/"}]},"get_post_thumbnail_id":{"name":"get_post_thumbnail_id","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve post thumbnail ID.\n *\n * @since 2.9.0\n * @since 4.4.0 `$post` can be a post ID or WP_Post object.\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global `$post`.\n * @return string|int Post thumbnail ID or empty string.\n *\/"}]},"the_post_thumbnail":{"name":"the_post_thumbnail","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$size","rank":0,"variadic":false,"reference":false,"default":"'post-thumbnail'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attr","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the post thumbnail.\n *\n * When a theme adds 'post-thumbnail' support, a special 'post-thumbnail' image size\n * is registered, which differs from the 'thumbnail' image size managed via the\n * Settings > Media screen.\n *\n * When using the_post_thumbnail() or related functions, the 'post-thumbnail' image\n * size is used by default, though a different size can be specified instead as needed.\n *\n * @since 2.9.0\n *\n * @see get_the_post_thumbnail()\n *\n * @param string|array $size Optional. Image size to use. Accepts any valid image size, or\n *                           an array of width and height values in pixels (in that order).\n *                           Default 'post-thumbnail'.\n * @param string|array $attr Optional. Query string or array of attributes. Default empty.\n *\/"}]},"update_post_thumbnail_cache":{"name":"update_post_thumbnail_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_query","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update cache for thumbnails in the current loop.\n *\n * @since 3.2.0\n *\n * @global WP_Query $wp_query\n *\n * @param WP_Query $wp_query Optional. A WP_Query instance. Defaults to the $wp_query global.\n *\/"}]},"get_the_post_thumbnail":{"name":"get_the_post_thumbnail","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":1,"variadic":false,"reference":false,"default":"'post-thumbnail'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attr","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the post thumbnail.\n *\n * When a theme adds 'post-thumbnail' support, a special 'post-thumbnail' image size\n * is registered, which differs from the 'thumbnail' image size managed via the\n * Settings > Media screen.\n *\n * When using the_post_thumbnail() or related functions, the 'post-thumbnail' image\n * size is used by default, though a different size can be specified instead as needed.\n *\n * @since 2.9.0\n * @since 4.4.0 `$post` can be a post ID or WP_Post object.\n *\n * @param int|WP_Post  $post Optional. Post ID or WP_Post object.  Default is global `$post`.\n * @param string|array $size Optional. Image size to use. Accepts any valid image size, or\n *                           an array of width and height values in pixels (in that order).\n *                           Default 'post-thumbnail'.\n * @param string|array $attr Optional. Query string or array of attributes. Default empty.\n * @return string The post thumbnail image tag.\n *\/"}]},"get_the_post_thumbnail_url":{"name":"get_the_post_thumbnail_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":1,"variadic":false,"reference":false,"default":"'post-thumbnail'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return the post thumbnail URL.\n *\n * @since 4.4.0\n *\n * @param int|WP_Post  $post Optional. Post ID or WP_Post object.  Default is global `$post`.\n * @param string|array $size Optional. Registered image size to retrieve the source for or a flat\n *                           array of height and width dimensions. Default 'post-thumbnail'.\n * @return string|false Post thumbnail URL or false if no URL is available.\n *\/"}]},"the_post_thumbnail_url":{"name":"the_post_thumbnail_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$size","rank":0,"variadic":false,"reference":false,"default":"'post-thumbnail'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the post thumbnail URL.\n *\n * @since 4.4.0\n *\n * @param string|array $size Optional. Image size to use. Accepts any valid image size,\n *                           or an array of width and height values in pixels (in that order).\n *                           Default 'post-thumbnail'.\n *\/"}]},"get_the_post_thumbnail_caption":{"name":"get_the_post_thumbnail_caption","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the post thumbnail caption.\n *\n * @since 4.6.0\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global `$post`.\n * @return string Post thumbnail caption.\n *\/"}]},"the_post_thumbnail_caption":{"name":"the_post_thumbnail_caption","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the post thumbnail caption.\n *\n * @since 4.6.0\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global `$post`.\n *\/"}]},"wp_get_themes":{"name":"wp_get_themes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns an array of WP_Theme objects based on the arguments.\n *\n * Despite advances over get_themes(), this function is quite expensive, and grows\n * linearly with additional themes. Stick to wp_get_theme() if possible.\n *\n * @since 3.4.0\n *\n * @global array $wp_theme_directories\n * @staticvar array $_themes\n *\n * @param array $args The search arguments. Optional.\n * - errors      mixed  True to return themes with errors, false to return themes without errors, null\n *                      to return all themes. Defaults to false.\n * - allowed     mixed  (Multisite) True to return only allowed themes for a site. False to return only\n *                      disallowed themes for a site. 'site' to return only site-allowed themes. 'network'\n *                      to return only network-allowed themes. Null to return all themes. Defaults to null.\n * - blog_id     int    (Multisite) The blog ID used to calculate which themes are allowed. Defaults to 0,\n *                      synonymous for the current blog.\n * @return array Array of WP_Theme objects.\n *\/"},{"phpdoc":"\/**\n * Theme, template, and stylesheet functions.\n *\n * @package WordPress\n * @subpackage Theme\n *\/"}]},"wp_get_theme":{"name":"wp_get_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$stylesheet","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$theme_root","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets a WP_Theme object for a theme.\n *\n * @since 3.4.0\n *\n * @global array $wp_theme_directories\n *\n * @param string $stylesheet Directory name for the theme. Optional. Defaults to current theme.\n * @param string $theme_root Absolute path of the theme root to look in. Optional. If not specified, get_raw_theme_root()\n * \t                         is used to calculate the theme root for the $stylesheet provided (or current theme).\n * @return WP_Theme Theme object. Be sure to check the object's exists() method if you need to confirm the theme's existence.\n *\/"}]},"wp_clean_themes_cache":{"name":"wp_clean_themes_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$clear_update_cache","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Clears the cache held by get_theme_roots() and WP_Theme.\n *\n * @since 3.5.0\n * @param bool $clear_update_cache Whether to clear the Theme updates cache\n *\/"}]},"is_child_theme":{"name":"is_child_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether a child theme is in use.\n *\n * @since 3.0.0\n *\n * @return bool true if a child theme is in use, false otherwise.\n **\/"}]},"get_stylesheet":{"name":"get_stylesheet","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve name of the current stylesheet.\n *\n * The theme name that the administrator has currently set the front end theme\n * as.\n *\n * For all intents and purposes, the template name and the stylesheet name are\n * going to be the same for most cases.\n *\n * @since 1.5.0\n *\n * @return string Stylesheet name.\n *\/"}]},"get_stylesheet_directory":{"name":"get_stylesheet_directory","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve stylesheet directory path for current theme.\n *\n * @since 1.5.0\n *\n * @return string Path to current theme directory.\n *\/"}]},"get_stylesheet_directory_uri":{"name":"get_stylesheet_directory_uri","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve stylesheet directory URI.\n *\n * @since 1.5.0\n *\n * @return string\n *\/"}]},"get_stylesheet_uri":{"name":"get_stylesheet_uri","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URI of current theme stylesheet.\n *\n * The stylesheet file name is 'style.css' which is appended to the stylesheet directory URI path.\n * See get_stylesheet_directory_uri().\n *\n * @since 1.5.0\n *\n * @return string\n *\/"}]},"get_locale_stylesheet_uri":{"name":"get_locale_stylesheet_uri","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the localized stylesheet URI.\n *\n * The stylesheet directory for the localized stylesheet files are located, by\n * default, in the base theme directory. The name of the locale file will be the\n * locale followed by '.css'. If that does not exist, then the text direction\n * stylesheet will be checked for existence, for example 'ltr.css'.\n *\n * The theme may change the location of the stylesheet directory by either using\n * the {@see 'stylesheet_directory_uri'} or {@see 'locale_stylesheet_uri'} filters.\n *\n * If you want to change the location of the stylesheet files for the entire\n * WordPress workflow, then change the former. If you just have the locale in a\n * separate folder, then change the latter.\n *\n * @since 2.1.0\n *\n * @global WP_Locale $wp_locale\n *\n * @return string\n *\/"}]},"get_template":{"name":"get_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve name of the current theme.\n *\n * @since 1.5.0\n *\n * @return string Template name.\n *\/"}]},"get_template_directory":{"name":"get_template_directory","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve current theme directory.\n *\n * @since 1.5.0\n *\n * @return string Template directory path.\n *\/"}]},"get_template_directory_uri":{"name":"get_template_directory_uri","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve theme directory URI.\n *\n * @since 1.5.0\n *\n * @return string Template directory URI.\n *\/"}]},"get_theme_roots":{"name":"get_theme_roots","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve theme roots.\n *\n * @since 2.9.0\n *\n * @global array $wp_theme_directories\n *\n * @return array|string An array of theme roots keyed by template\/stylesheet or a single theme root if all themes have the same root.\n *\/"}]},"register_theme_directory":{"name":"register_theme_directory","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$directory","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register a directory that contains themes.\n *\n * @since 2.9.0\n *\n * @global array $wp_theme_directories\n *\n * @param string $directory Either the full filesystem path to a theme folder or a folder within WP_CONTENT_DIR\n * @return bool\n *\/"}]},"search_theme_directories":{"name":"search_theme_directories","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$force","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Search all registered theme directories for complete and valid themes.\n *\n * @since 2.9.0\n *\n * @global array $wp_theme_directories\n * @staticvar array $found_themes\n *\n * @param bool $force Optional. Whether to force a new directory scan. Defaults to false.\n * @return array|false Valid themes found\n *\/"}]},"get_theme_root":{"name":"get_theme_root","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$stylesheet_or_template","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path to themes directory.\n *\n * Does not have trailing slash.\n *\n * @since 1.5.0\n *\n * @global array $wp_theme_directories\n *\n * @param string $stylesheet_or_template The stylesheet or template name of the theme\n * @return string Theme path.\n *\/"}]},"get_theme_root_uri":{"name":"get_theme_root_uri","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$stylesheet_or_template","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$theme_root","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve URI for themes directory.\n *\n * Does not have trailing slash.\n *\n * @since 1.5.0\n *\n * @global array $wp_theme_directories\n *\n * @param string $stylesheet_or_template Optional. The stylesheet or template name of the theme.\n * \t                                     Default is to leverage the main theme root.\n * @param string $theme_root             Optional. The theme root for which calculations will be based, preventing\n * \t                                     the need for a get_raw_theme_root() call.\n * @return string Themes URI.\n *\/"}]},"get_raw_theme_root":{"name":"get_raw_theme_root","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$stylesheet_or_template","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$skip_cache","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the raw theme root relative to the content directory with no filters applied.\n *\n * @since 3.1.0\n *\n * @global array $wp_theme_directories\n *\n * @param string $stylesheet_or_template The stylesheet or template name of the theme\n * @param bool   $skip_cache             Optional. Whether to skip the cache.\n *                                       Defaults to false, meaning the cache is used.\n * @return string Theme root\n *\/"}]},"locale_stylesheet":{"name":"locale_stylesheet","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display localized stylesheet link element.\n *\n * @since 2.1.0\n *\/"}]},"switch_theme":{"name":"switch_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$stylesheet","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Switches the theme.\n *\n * Accepts one argument: $stylesheet of the theme. It also accepts an additional function signature\n * of two arguments: $template then $stylesheet. This is for backward compatibility.\n *\n * @since 2.5.0\n *\n * @global array                $wp_theme_directories\n * @global WP_Customize_Manager $wp_customize\n * @global array                $sidebars_widgets\n *\n * @param string $stylesheet Stylesheet name\n *\/"}]},"validate_current_theme":{"name":"validate_current_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks that current theme files 'index.php' and 'style.css' exists.\n *\n * Does not initially check the default theme, which is the fallback and should always exist.\n * But if it doesn't exist, it'll fall back to the latest core default theme that does exist.\n * Will switch theme to the fallback theme if current theme does not validate.\n *\n * You can use the {@see 'validate_current_theme'} filter to return false to\n * disable this functionality.\n *\n * @since 1.5.0\n * @see WP_DEFAULT_THEME\n *\n * @return bool\n *\/"}]},"get_theme_mods":{"name":"get_theme_mods","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve all theme modifications.\n *\n * @since 3.1.0\n *\n * @return array|void Theme modifications.\n *\/"}]},"get_theme_mod":{"name":"get_theme_mod","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve theme modification value for the current theme.\n *\n * If the modification name does not exist, then the $default will be passed\n * through {@link https:\/\/secure.php.net\/sprintf sprintf()} PHP function with the first\n * string the template directory URI and the second string the stylesheet\n * directory URI.\n *\n * @since 2.1.0\n *\n * @param string      $name    Theme modification name.\n * @param bool|string $default\n * @return string\n *\/"}]},"set_theme_mod":{"name":"set_theme_mod","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update theme modification value for the current theme.\n *\n * @since 2.1.0\n *\n * @param string $name  Theme modification name.\n * @param mixed  $value Theme modification value.\n *\/"}]},"remove_theme_mod":{"name":"remove_theme_mod","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove theme modification name from current theme list.\n *\n * If removing the name also removes all elements, then the entire option will\n * be removed.\n *\n * @since 2.1.0\n *\n * @param string $name Theme modification name.\n *\/"}]},"remove_theme_mods":{"name":"remove_theme_mods","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove theme modifications option for current theme.\n *\n * @since 2.1.0\n *\/"}]},"get_header_textcolor":{"name":"get_header_textcolor","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the custom header text color in HEX format.\n *\n * @since 2.1.0\n *\n * @return string Header text color in HEX format (minus the hash symbol).\n *\/"}]},"header_textcolor":{"name":"header_textcolor","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the custom header text color in HEX format (minus the hash symbol).\n *\n * @since 2.1.0\n *\/"}]},"display_header_text":{"name":"display_header_text","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether to display the header text.\n *\n * @since 3.4.0\n *\n * @return bool\n *\/"}]},"has_header_image":{"name":"has_header_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether a header image is set or not.\n *\n * @since 4.2.0\n *\n * @see get_header_image()\n *\n * @return bool Whether a header image is set or not.\n *\/"}]},"get_header_image":{"name":"get_header_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve header image for custom header.\n *\n * @since 2.1.0\n *\n * @return string|false\n *\/"}]},"get_header_image_tag":{"name":"get_header_image_tag","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attr","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create image tag markup for a custom header image.\n *\n * @since 4.4.0\n *\n * @param array $attr Optional. Additional attributes for the image tag. Can be used\n *                              to override the default attributes. Default empty.\n * @return string HTML image element markup or empty string on failure.\n *\/"}]},"the_header_image_tag":{"name":"the_header_image_tag","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attr","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the image markup for a custom header image.\n *\n * @since 4.4.0\n *\n * @param array $attr Optional. Attributes for the image markup. Default empty.\n *\/"}]},"_get_random_header_data":{"name":"_get_random_header_data","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get random header image data from registered images in theme.\n *\n * @since 3.4.0\n *\n * @access private\n *\n * @global array  $_wp_default_headers\n * @staticvar object $_wp_random_header\n *\n * @return object\n *\/"}]},"get_random_header_image":{"name":"get_random_header_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get random header image url from registered images in theme.\n *\n * @since 3.2.0\n *\n * @return string Path to header image\n *\/"}]},"is_random_header_image":{"name":"is_random_header_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"'any'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if random header image is in use.\n *\n * Always true if user expressly chooses the option in Appearance > Header.\n * Also true if theme has multiple header images registered, no specific header image\n * is chosen, and theme turns on random headers with add_theme_support().\n *\n * @since 3.2.0\n *\n * @param string $type The random pool to use. any|default|uploaded\n * @return bool\n *\/"}]},"header_image":{"name":"header_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display header image URL.\n *\n * @since 2.1.0\n *\/"}]},"get_uploaded_header_images":{"name":"get_uploaded_header_images","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the header images uploaded for the current theme.\n *\n * @since 3.2.0\n *\n * @return array\n *\/"}]},"get_custom_header":{"name":"get_custom_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the header image data.\n *\n * @since 3.4.0\n *\n * @global array $_wp_default_headers\n *\n * @return object\n *\/"}]},"register_default_headers":{"name":"register_default_headers","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$headers","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register a selection of default headers to be displayed by the custom header admin UI.\n *\n * @since 3.0.0\n *\n * @global array $_wp_default_headers\n *\n * @param array $headers Array of headers keyed by a string id. The ids point to arrays containing 'url', 'thumbnail_url', and 'description' keys.\n *\/"}]},"unregister_default_headers":{"name":"unregister_default_headers","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Unregister default headers.\n *\n * This function must be called after register_default_headers() has already added the\n * header you want to remove.\n *\n * @see register_default_headers()\n * @since 3.0.0\n *\n * @global array $_wp_default_headers\n *\n * @param string|array $header The header string id (key of array) to remove, or an array thereof.\n * @return bool|void A single header returns true on success, false on failure.\n *                   There is currently no return value for multiple headers.\n *\/"}]},"has_header_video":{"name":"has_header_video","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether a header video is set or not.\n *\n * @since 4.7.0\n *\n * @see get_header_video_url()\n *\n * @return bool Whether a header video is set or not.\n *\/"}]},"get_header_video_url":{"name":"get_header_video_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[]},"the_header_video_url":{"name":"the_header_video_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display header video URL.\n *\n * @since 4.7.0\n *\/"}]},"get_header_video_settings":{"name":"get_header_video_settings","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve header video settings.\n *\n * @since 4.7.0\n *\n * @return array\n *\/"}]},"has_custom_header":{"name":"has_custom_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether a custom header is set or not.\n *\n * @since 4.7.0\n *\n * @return bool True if a custom header is set. False if not.\n *\/"}]},"is_header_video_active":{"name":"is_header_video_active","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks whether the custom header video is eligible to show on the current page.\n *\n * @since 4.7.0\n *\n * @return bool True if the custom header video should be shown. False if not.\n *\/"}]},"get_custom_header_markup":{"name":"get_custom_header_markup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the markup for a custom header.\n *\n * The container div will always be returned in the Customizer preview.\n *\n * @since 4.7.0\n *\n * @return string The markup for a custom header on success.\n *\/"}]},"the_custom_header_markup":{"name":"the_custom_header_markup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print the markup for a custom header.\n *\n * A container div will always be printed in the Customizer preview.\n *\n * @since 4.7.0\n *\/"}]},"get_background_image":{"name":"get_background_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve background image for custom background.\n *\n * @since 3.0.0\n *\n * @return string\n *\/"}]},"background_image":{"name":"background_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display background image path.\n *\n * @since 3.0.0\n *\/"}]},"get_background_color":{"name":"get_background_color","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve value for custom background color.\n *\n * @since 3.0.0\n *\n * @return string\n *\/"}]},"background_color":{"name":"background_color","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display background color value.\n *\n * @since 3.0.0\n *\/"}]},"_custom_background_cb":{"name":"_custom_background_cb","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Default custom background callback.\n *\n * @since 3.0.0\n * @access protected\n *\/"}]},"wp_custom_css_cb":{"name":"wp_custom_css_cb","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the Custom CSS style element.\n *\n * @since 4.7.0\n * @access public\n *\/"}]},"wp_get_custom_css_post":{"name":"wp_get_custom_css_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$stylesheet","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Fetch the `custom_css` post for a given theme.\n *\n * @since 4.7.0\n * @access public\n *\n * @param string $stylesheet Optional. A theme object stylesheet name. Defaults to the current theme.\n * @return WP_Post|null The custom_css post or null if none exists.\n *\/"}]},"wp_get_custom_css":{"name":"wp_get_custom_css","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$stylesheet","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Fetch the saved Custom CSS content for rendering.\n *\n * @since 4.7.0\n * @access public\n *\n * @param string $stylesheet Optional. A theme object stylesheet name. Defaults to the current theme.\n * @return string The Custom CSS Post content.\n *\/"}]},"wp_update_custom_css_post":{"name":"wp_update_custom_css_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$css","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update the `custom_css` post for a given theme.\n *\n * Inserts a `custom_css` post when one doesn't yet exist.\n *\n * @since 4.7.0\n * @access public\n *\n * @param string $css CSS, stored in `post_content`.\n * @param array  $args {\n *     Args.\n *\n *     @type string $preprocessed Pre-processed CSS, stored in `post_content_filtered`. Normally empty string. Optional.\n *     @type string $stylesheet   Stylesheet (child theme) to update. Optional, defaults to current theme\/stylesheet.\n * }\n * @return WP_Post|WP_Error Post on success, error on failure.\n *\/"}]},"add_editor_style":{"name":"add_editor_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$stylesheet","rank":0,"variadic":false,"reference":false,"default":"'editor-style.css'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add callback for custom TinyMCE editor stylesheets.\n *\n * The parameter $stylesheet is the name of the stylesheet, relative to\n * the theme root. It also accepts an array of stylesheets.\n * It is optional and defaults to 'editor-style.css'.\n *\n * This function automatically adds another stylesheet with -rtl prefix, e.g. editor-style-rtl.css.\n * If that file doesn't exist, it is removed before adding the stylesheet(s) to TinyMCE.\n * If an array of stylesheets is passed to add_editor_style(),\n * RTL is only added for the first stylesheet.\n *\n * Since version 3.4 the TinyMCE body has .rtl CSS class.\n * It is a better option to use that class and add any RTL styles to the main stylesheet.\n *\n * @since 3.0.0\n *\n * @global array $editor_styles\n *\n * @param array|string $stylesheet Optional. Stylesheet name or array thereof, relative to theme root.\n * \t                               Defaults to 'editor-style.css'\n *\/"}]},"remove_editor_styles":{"name":"remove_editor_styles","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes all visual editor stylesheets.\n *\n * @since 3.1.0\n *\n * @global array $editor_styles\n *\n * @return bool True on success, false if there were no stylesheets to remove.\n *\/"}]},"get_editor_stylesheets":{"name":"get_editor_stylesheets","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve any registered editor stylesheets\n *\n * @since 4.0.0\n *\n * @global array $editor_styles Registered editor stylesheets\n *\n * @return array If registered, a list of editor stylesheet URLs.\n *\/"}]},"get_theme_starter_content":{"name":"get_theme_starter_content","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Expand a theme's starter content configuration using core-provided data.\n *\n * @since 4.7.0\n *\n * @return array Array of starter content.\n *\/"}]},"add_theme_support":{"name":"add_theme_support","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$feature","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers theme support for a given feature.\n *\n * Must be called in the theme's functions.php file to work.\n * If attached to a hook, it must be {@see 'after_setup_theme'}.\n * The {@see 'init'} hook may be too late for some features.\n *\n * @since 2.9.0\n * @since 3.6.0 The `html5` feature was added\n * @since 3.9.0 The `html5` feature now also accepts 'gallery' and 'caption'\n * @since 4.1.0 The `title-tag` feature was added\n * @since 4.5.0 The `customize-selective-refresh-widgets` feature was added\n * @since 4.7.0 The `starter-content` feature was added\n *\n * @global array $_wp_theme_features\n *\n * @param string $feature  The feature being added. Likely core values include 'post-formats',\n *                         'post-thumbnails', 'html5', 'custom-logo', 'custom-header-uploads',\n *                         'custom-header', 'custom-background', 'title-tag', 'starter-content', etc.\n * @param mixed  $args,... Optional extra arguments to pass along with certain features.\n * @return void|bool False on failure, void otherwise.\n *\/"}]},"_custom_header_background_just_in_time":{"name":"_custom_header_background_just_in_time","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers the internal custom header and background routines.\n *\n * @since 3.4.0\n * @access private\n *\n * @global Custom_Image_Header $custom_image_header\n * @global Custom_Background   $custom_background\n *\/"}]},"_custom_logo_header_styles":{"name":"_custom_logo_header_styles","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds CSS to hide header text for custom logo, based on Customizer setting.\n *\n * @since 4.5.0\n * @access private\n *\/"}]},"get_theme_support":{"name":"get_theme_support","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$feature","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the theme support arguments passed when registering that support\n *\n * @since 3.1.0\n *\n * @global array $_wp_theme_features\n *\n * @param string $feature the feature to check\n * @return mixed The array of extra arguments or the value for the registered feature.\n *\/"}]},"remove_theme_support":{"name":"remove_theme_support","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$feature","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Allows a theme to de-register its support of a certain feature\n *\n * Should be called in the theme's functions.php file. Generally would\n * be used for child themes to override support from the parent theme.\n *\n * @since 3.0.0\n * @see add_theme_support()\n * @param string $feature the feature being added\n * @return bool|void Whether feature was removed.\n *\/"}]},"_remove_theme_support":{"name":"_remove_theme_support","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$feature","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Do not use. Removes theme support internally, ignorant of the blacklist.\n *\n * @access private\n * @since 3.1.0\n *\n * @global array               $_wp_theme_features\n * @global Custom_Image_Header $custom_image_header\n * @global Custom_Background   $custom_background\n *\n * @param string $feature\n *\/"}]},"current_theme_supports":{"name":"current_theme_supports","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$feature","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks a theme's support for a given feature\n *\n * @since 2.9.0\n *\n * @global array $_wp_theme_features\n *\n * @param string $feature the feature being checked\n * @return bool\n *\/"}]},"require_if_theme_supports":{"name":"require_if_theme_supports","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$feature","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$include","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks a theme's support for a given feature before loading the functions which implement it.\n *\n * @since 2.9.0\n *\n * @param string $feature The feature being checked.\n * @param string $include Path to the file.\n * @return bool True if the current theme supports the supplied feature, false otherwise.\n *\/"}]},"_delete_attachment_theme_mod":{"name":"_delete_attachment_theme_mod","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks an attachment being deleted to see if it's a header or background image.\n *\n * If true it removes the theme modification which would be pointing at the deleted\n * attachment.\n *\n * @access private\n * @since 3.0.0\n * @since 4.3.0 Also removes `header_image_data`.\n * @since 4.5.0 Also removes custom logo theme mods.\n *\n * @param int $id The attachment id.\n *\/"}]},"check_theme_switched":{"name":"check_theme_switched","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks if a theme has been changed and runs 'after_switch_theme' hook on the next WP load.\n *\n * See {@see 'after_switch_theme'}.\n *\n * @since 3.3.0\n *\/"}]},"_wp_customize_include":{"name":"_wp_customize_include","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Includes and instantiates the WP_Customize_Manager class.\n *\n * Loads the Customizer at plugins_loaded when accessing the customize.php admin\n * page or when any request includes a wp_customize=on param or a customize_changeset\n * param (a UUID). This param is a signal for whether to bootstrap the Customizer when\n * WordPress is loading, especially in the Customizer preview\n * or when making Customizer Ajax requests for widgets or menus.\n *\n * @since 3.4.0\n *\n * @global WP_Customize_Manager $wp_customize\n *\/"}]},"_wp_customize_publish_changeset":{"name":"_wp_customize_publish_changeset","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$new_status","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_status","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$changeset_post","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Publish a snapshot's changes.\n *\n * @param string  $new_status     New post status.\n * @param string  $old_status     Old post status.\n * @param WP_Post $changeset_post Changeset post object.\n *\/"}]},"_wp_customize_changeset_filter_insert_post_data":{"name":"_wp_customize_changeset_filter_insert_post_data","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$supplied_post_data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters changeset post data upon insert to ensure post_name is intact.\n *\n * This is needed to prevent the post_name from being dropped when the post is\n * transitioned into pending status by a contributor.\n *\n * @since 4.7.0\n * @see wp_insert_post()\n *\n * @param array $post_data          An array of slashed post data.\n * @param array $supplied_post_data An array of sanitized, but otherwise unmodified post data.\n * @returns array Filtered data.\n *\/"}]},"_wp_customize_loader_settings":{"name":"_wp_customize_loader_settings","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds settings for the customize-loader script.\n *\n * @since 3.4.0\n *\/"}]},"wp_customize_url":{"name":"wp_customize_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$stylesheet","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns a URL to load the Customizer.\n *\n * @since 3.4.0\n *\n * @param string $stylesheet Optional. Theme to customize. Defaults to current theme.\n * \t                         The theme's stylesheet will be urlencoded if necessary.\n * @return string\n *\/"}]},"wp_customize_support_script":{"name":"wp_customize_support_script","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints a script to check whether or not the Customizer is supported,\n * and apply either the no-customize-support or customize-support class\n * to the body.\n *\n * This function MUST be called inside the body tag.\n *\n * Ideally, call this function immediately after the body tag is opened.\n * This prevents a flash of unstyled content.\n *\n * It is also recommended that you add the \"no-customize-support\" class\n * to the body tag by default.\n *\n * @since 3.4.0\n * @since 4.7.0 Support for IE8 and below is explicitly removed via conditional comments.\n *\/"}]},"is_customize_preview":{"name":"is_customize_preview","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether the site is being previewed in the Customizer.\n *\n * @since 4.0.0\n *\n * @global WP_Customize_Manager $wp_customize Customizer instance.\n *\n * @return bool True if the site is being previewed in the Customizer, false otherwise.\n *\/"}]},"wp_signon":{"name":"wp_signon","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$credentials","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$secure_cookie","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Core User API\n *\n * @package WordPress\n * @subpackage Users\n *\/"},{"phpdoc":"\/**\n * Authenticates and logs a user in with 'remember' capability.\n *\n * The credentials is an array that has 'user_login', 'user_password', and\n * 'remember' indices. If the credentials is not given, then the log in form\n * will be assumed and used if set.\n *\n * The various authentication cookies will be set by this function and will be\n * set for a longer period depending on if the 'remember' credential is set to\n * true.\n *\n * @since 2.5.0\n *\n * @global string $auth_secure_cookie\n *\n * @param array       $credentials   Optional. User info in order to sign on.\n * @param string|bool $secure_cookie Optional. Whether to use secure cookie.\n * @return WP_User|WP_Error WP_User on success, WP_Error on failure.\n *\/"}]},"wp_authenticate_username_password":{"name":"wp_authenticate_username_password","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$username","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$password","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Authenticate a user, confirming the username and password are valid.\n *\n * @since 2.8.0\n *\n * @param WP_User|WP_Error|null $user     WP_User or WP_Error object from a previous callback. Default null.\n * @param string                $username Username for authentication.\n * @param string                $password Password for authentication.\n * @return WP_User|WP_Error WP_User on success, WP_Error on failure.\n *\/"}]},"wp_authenticate_email_password":{"name":"wp_authenticate_email_password","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$email","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$password","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Authenticates a user using the email and password.\n *\n * @since 4.5.0\n *\n * @param WP_User|WP_Error|null $user     WP_User or WP_Error object if a previous\n *                                        callback failed authentication.\n * @param string                $email    Email address for authentication.\n * @param string                $password Password for authentication.\n * @return WP_User|WP_Error WP_User on success, WP_Error on failure.\n *\/"}]},"wp_authenticate_cookie":{"name":"wp_authenticate_cookie","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$username","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$password","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Authenticate the user using the WordPress auth cookie.\n *\n * @since 2.8.0\n *\n * @global string $auth_secure_cookie\n *\n * @param WP_User|WP_Error|null $user     WP_User or WP_Error object from a previous callback. Default null.\n * @param string                $username Username. If not empty, cancels the cookie authentication.\n * @param string                $password Password. If not empty, cancels the cookie authentication.\n * @return WP_User|WP_Error WP_User on success, WP_Error on failure.\n *\/"}]},"wp_authenticate_spam_check":{"name":"wp_authenticate_spam_check","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * For Multisite blogs, check if the authenticated user has been marked as a\n * spammer, or if the user's primary blog has been marked as spam.\n *\n * @since 3.7.0\n *\n * @param WP_User|WP_Error|null $user WP_User or WP_Error object from a previous callback. Default null.\n * @return WP_User|WP_Error WP_User on success, WP_Error if the user is considered a spammer.\n *\/"}]},"wp_validate_logged_in_cookie":{"name":"wp_validate_logged_in_cookie","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Validates the logged-in cookie.\n *\n * Checks the logged-in cookie if the previous auth cookie could not be\n * validated and parsed.\n *\n * This is a callback for the {@see 'determine_current_user'} filter, rather than API.\n *\n * @since 3.9.0\n *\n * @param int|bool $user_id The user ID (or false) as received from the\n *                       determine_current_user filter.\n * @return int|false User ID if validated, false otherwise. If a user ID from\n *                   an earlier filter callback is received, that value is returned.\n *\/"}]},"count_user_posts":{"name":"count_user_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$userid","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_type","rank":1,"variadic":false,"reference":false,"default":"'post'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$public_only","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Number of posts user has written.\n *\n * @since 3.0.0\n * @since 4.1.0 Added `$post_type` argument.\n * @since 4.3.0 Added `$public_only` argument. Added the ability to pass an array\n *              of post types to `$post_type`.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int          $userid      User ID.\n * @param array|string $post_type   Optional. Single post type or array of post types to count the number of posts for. Default 'post'.\n * @param bool         $public_only Optional. Whether to only return counts for public posts. Default false.\n * @return string Number of posts the user has written in this post type.\n *\/"}]},"count_many_users_posts":{"name":"count_many_users_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$users","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_type","rank":1,"variadic":false,"reference":false,"default":"'post'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$public_only","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Number of posts written by a list of users.\n *\n * @since 3.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array        $users       Array of user IDs.\n * @param string|array $post_type   Optional. Single post type or array of post types to check. Defaults to 'post'.\n * @param bool         $public_only Optional. Only return counts for public posts.  Defaults to false.\n * @return array Amount of posts each user has written.\n *\/"}]},"get_current_user_id":{"name":"get_current_user_id","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the current user's ID\n *\n * @since MU\n *\n * @return int The current user's ID\n *\/"}]},"get_user_option":{"name":"get_user_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve user option that can be either per Site or per Network.\n *\n * If the user ID is not given, then the current user will be used instead. If\n * the user ID is given, then the user data will be retrieved. The filter for\n * the result, will also pass the original option name and finally the user data\n * object as the third parameter.\n *\n * The option will first check for the per site name and then the per Network name.\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $option     User option name.\n * @param int    $user       Optional. User ID.\n * @param string $deprecated Use get_option() to check for an option in the options table.\n * @return mixed User option value on success, false on failure.\n *\/"}]},"update_user_option":{"name":"update_user_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$option_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$newvalue","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$global","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update user option with global blog capability.\n *\n * User options are just like user metadata except that they have support for\n * global blog options. If the 'global' parameter is false, which it is by default\n * it will prepend the WordPress table prefix to the option name.\n *\n * Deletes the user option if $newvalue is empty.\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int    $user_id     User ID.\n * @param string $option_name User option name.\n * @param mixed  $newvalue    User option value.\n * @param bool   $global      Optional. Whether option name is global or blog specific.\n *                            Default false (blog specific).\n * @return int|bool User meta ID if the option didn't exist, true on successful update,\n *                  false on failure.\n *\/"}]},"delete_user_option":{"name":"delete_user_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$option_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$global","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Delete user option with global blog capability.\n *\n * User options are just like user metadata except that they have support for\n * global blog options. If the 'global' parameter is false, which it is by default\n * it will prepend the WordPress table prefix to the option name.\n *\n * @since 3.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int    $user_id     User ID\n * @param string $option_name User option name.\n * @param bool   $global      Optional. Whether option name is global or blog specific.\n *                            Default false (blog specific).\n * @return bool True on success, false on failure.\n *\/"}]},"get_users":{"name":"get_users","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve list of users matching criteria.\n *\n * @since 3.1.0\n *\n * @see WP_User_Query\n *\n * @param array $args Optional. Arguments to retrieve users. See WP_User_Query::prepare_query().\n *                    for more information on accepted arguments.\n * @return array List of users.\n *\/"}]},"get_blogs_of_user":{"name":"get_blogs_of_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$all","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the sites a user belongs to.\n *\n * @since 3.0.0\n * @since 4.7.0 Converted to use get_sites().\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int  $user_id User ID\n * @param bool $all     Whether to retrieve all sites, or only sites that are not\n *                      marked as deleted, archived, or spam.\n * @return array A list of the user's sites. An empty array if the user doesn't exist\n *               or belongs to no sites.\n *\/"}]},"is_user_member_of_blog":{"name":"is_user_member_of_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Find out whether a user is a member of a given blog.\n *\n * @since MU 1.1\n *\n * @param int $user_id Optional. The unique ID of the user. Defaults to the current user.\n * @param int $blog_id Optional. ID of the blog to check. Defaults to the current site.\n * @return bool\n *\/"}]},"add_user_meta":{"name":"add_user_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$unique","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add meta data field to a user.\n *\n * Post meta data is called \"Custom Fields\" on the Administration Screens.\n *\n * @since 3.0.0\n * @link https:\/\/codex.wordpress.org\/Function_Reference\/add_user_meta\n *\n * @param int    $user_id    User ID.\n * @param string $meta_key   Metadata name.\n * @param mixed  $meta_value Metadata value.\n * @param bool   $unique     Optional, default is false. Whether the same key should not be added.\n * @return int|false Meta ID on success, false on failure.\n *\/"}]},"delete_user_meta":{"name":"delete_user_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove metadata matching criteria from a user.\n *\n * You can match based on the key, or key and value. Removing based on key and\n * value, will keep from removing duplicate metadata with the same key. It also\n * allows removing all metadata matching key, if needed.\n *\n * @since 3.0.0\n * @link https:\/\/codex.wordpress.org\/Function_Reference\/delete_user_meta\n *\n * @param int    $user_id    User ID\n * @param string $meta_key   Metadata name.\n * @param mixed  $meta_value Optional. Metadata value.\n * @return bool True on success, false on failure.\n *\/"}]},"get_user_meta":{"name":"get_user_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$single","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve user meta field for a user.\n *\n * @since 3.0.0\n * @link https:\/\/codex.wordpress.org\/Function_Reference\/get_user_meta\n *\n * @param int    $user_id User ID.\n * @param string $key     Optional. The meta key to retrieve. By default, returns data for all keys.\n * @param bool   $single  Whether to return a single value.\n * @return mixed Will be an array if $single is false. Will be value of meta data field if $single is true.\n *\/"}]},"update_user_meta":{"name":"update_user_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$prev_value","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update user meta field based on user ID.\n *\n * Use the $prev_value parameter to differentiate between meta fields with the\n * same key and user ID.\n *\n * If the meta field for the user does not exist, it will be added.\n *\n * @since 3.0.0\n * @link https:\/\/codex.wordpress.org\/Function_Reference\/update_user_meta\n *\n * @param int    $user_id    User ID.\n * @param string $meta_key   Metadata key.\n * @param mixed  $meta_value Metadata value.\n * @param mixed  $prev_value Optional. Previous value to check before removing.\n * @return int|bool Meta ID if the key didn't exist, true on successful update, false on failure.\n *\/"}]},"count_users":{"name":"count_users","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$strategy","rank":0,"variadic":false,"reference":false,"default":"'time'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Count number of users who have each of the user roles.\n *\n * Assumes there are neither duplicated nor orphaned capabilities meta_values.\n * Assumes role names are unique phrases. Same assumption made by WP_User_Query::prepare_query()\n * Using $strategy = 'time' this is CPU-intensive and should handle around 10^7 users.\n * Using $strategy = 'memory' this is memory-intensive and should handle around 10^5 users, but see WP Bug #12257.\n *\n * @since 3.0.0\n * @since 4.4.0 The number of users with no role is now included in the `none` element.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $strategy 'time' or 'memory'\n * @return array Includes a grand total and an array of counts indexed by role strings.\n *\/"}]},"setup_userdata":{"name":"setup_userdata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$for_user_id","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set up global user vars.\n *\n * Used by wp_set_current_user() for back compat. Might be deprecated in the future.\n *\n * @since 2.0.4\n *\n * @global string $user_login    The user username for logging in\n * @global object $userdata      User data.\n * @global int    $user_level    The level of the user\n * @global int    $user_ID       The ID of the user\n * @global string $user_email    The email address of the user\n * @global string $user_url      The url in the user's profile\n * @global string $user_identity The display name of the user\n *\n * @param int $for_user_id Optional. User ID to set up global data.\n *\/"}]},"wp_dropdown_users":{"name":"wp_dropdown_users","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create dropdown HTML content of users.\n *\n * The content can either be displayed, which it is by default or retrieved by\n * setting the 'echo' argument. The 'include' and 'exclude' arguments do not\n * need to be used; all users will be displayed in that case. Only one can be\n * used, either 'include' or 'exclude', but not both.\n *\n * The available arguments are as follows:\n *\n * @since 2.3.0\n * @since 4.5.0 Added the 'display_name_with_login' value for 'show'.\n * @since 4.7.0 Added the `$role`, `$role__in`, and `$role__not_in` parameters.\n *\n * @param array|string $args {\n *     Optional. Array or string of arguments to generate a drop-down of users.\n *     See WP_User_Query::prepare_query() for additional available arguments.\n *\n *     @type string       $show_option_all         Text to show as the drop-down default (all).\n *                                                 Default empty.\n *     @type string       $show_option_none        Text to show as the drop-down default when no\n *                                                 users were found. Default empty.\n *     @type int|string   $option_none_value       Value to use for $show_option_non when no users\n *                                                 were found. Default -1.\n *     @type string       $hide_if_only_one_author Whether to skip generating the drop-down\n *                                                 if only one user was found. Default empty.\n *     @type string       $orderby                 Field to order found users by. Accepts user fields.\n *                                                 Default 'display_name'.\n *     @type string       $order                   Whether to order users in ascending or descending\n *                                                 order. Accepts 'ASC' (ascending) or 'DESC' (descending).\n *                                                 Default 'ASC'.\n *     @type array|string $include                 Array or comma-separated list of user IDs to include.\n *                                                 Default empty.\n *     @type array|string $exclude                 Array or comma-separated list of user IDs to exclude.\n *                                                 Default empty.\n *     @type bool|int     $multi                   Whether to skip the ID attribute on the 'select' element.\n *                                                 Accepts 1|true or 0|false. Default 0|false.\n *     @type string       $show                    User data to display. If the selected item is empty\n *                                                 then the 'user_login' will be displayed in parentheses.\n *                                                 Accepts any user field, or 'display_name_with_login' to show\n *                                                 the display name with user_login in parentheses.\n *                                                 Default 'display_name'.\n *     @type int|bool     $echo                    Whether to echo or return the drop-down. Accepts 1|true (echo)\n *                                                 or 0|false (return). Default 1|true.\n *     @type int          $selected                Which user ID should be selected. Default 0.\n *     @type bool         $include_selected        Whether to always include the selected user ID in the drop-\n *                                                 down. Default false.\n *     @type string       $name                    Name attribute of select element. Default 'user'.\n *     @type string       $id                      ID attribute of the select element. Default is the value of $name.\n *     @type string       $class                   Class attribute of the select element. Default empty.\n *     @type int          $blog_id                 ID of blog (Multisite only). Default is ID of the current blog.\n *     @type string       $who                     Which type of users to query. Accepts only an empty string or\n *                                                 'authors'. Default empty.\n *     @type string|array $role                    An array or a comma-separated list of role names that users must\n *                                                 match to be included in results. Note that this is an inclusive\n *                                                 list: users must match *each* role. Default empty.\n *     @type array        $role__in                An array of role names. Matched users must have at least one of\n *                                                 these roles. Default empty array.\n *     @type array        $role__not_in            An array of role names to exclude. Users matching one or more of\n *                                                 these roles will not be included in results. Default empty array.\n * }\n * @return string String of HTML content.\n *\/"}]},"sanitize_user_field":{"name":"sanitize_user_field","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$field","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_id","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize user field based on context.\n *\n * Possible context values are:  'raw', 'edit', 'db', 'display', 'attribute' and 'js'. The\n * 'display' context is used by default. 'attribute' and 'js' contexts are treated like 'display'\n * when calling filters.\n *\n * @since 2.3.0\n *\n * @param string $field   The user Object field name.\n * @param mixed  $value   The user Object value.\n * @param int    $user_id User ID.\n * @param string $context How to sanitize user fields. Looks for 'raw', 'edit', 'db', 'display',\n *                        'attribute' and 'js'.\n * @return mixed Sanitized value.\n *\/"}]},"update_user_caches":{"name":"update_user_caches","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update all user caches\n *\n * @since 3.0.0\n *\n * @param object|WP_User $user User object to be cached\n * @return bool|null Returns false on failure.\n *\/"}]},"clean_user_cache":{"name":"clean_user_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Clean all user caches\n *\n * @since 3.0.0\n * @since 4.4.0 'clean_user_cache' action was added.\n *\n * @param WP_User|int $user User object or ID to be cleaned from the cache\n *\/"}]},"username_exists":{"name":"username_exists","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$username","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks whether the given username exists.\n *\n * @since 2.0.0\n *\n * @param string $username Username.\n * @return int|false The user's ID on success, and false on failure.\n *\/"}]},"email_exists":{"name":"email_exists","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$email","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks whether the given email exists.\n *\n * @since 2.1.0\n *\n * @param string $email Email.\n * @return int|false The user's ID on success, and false on failure.\n *\/"}]},"validate_username":{"name":"validate_username","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$username","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks whether a username is valid.\n *\n * @since 2.0.1\n * @since 4.4.0 Empty sanitized usernames are now considered invalid\n *\n * @param string $username Username.\n * @return bool Whether username given is valid\n *\/"}]},"wp_insert_user":{"name":"wp_insert_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$userdata","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Insert a user into the database.\n *\n * Most of the `$userdata` array fields have filters associated with the values. Exceptions are\n * 'ID', 'rich_editing', 'comment_shortcuts', 'admin_color', 'use_ssl',\n * 'user_registered', and 'role'. The filters have the prefix 'pre_user_' followed by the field\n * name. An example using 'description' would have the filter called, 'pre_user_description' that\n * can be hooked into.\n *\n * @since 2.0.0\n * @since 3.6.0 The `aim`, `jabber`, and `yim` fields were removed as default user contact\n *              methods for new installs. See wp_get_user_contact_methods().\n * @since 4.7.0 The user's locale can be passed to `$userdata`.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array|object|WP_User $userdata {\n *     An array, object, or WP_User object of user data arguments.\n *\n *     @type int         $ID                   User ID. If supplied, the user will be updated.\n *     @type string      $user_pass            The plain-text user password.\n *     @type string      $user_login           The user's login username.\n *     @type string      $user_nicename        The URL-friendly user name.\n *     @type string      $user_url             The user URL.\n *     @type string      $user_email           The user email address.\n *     @type string      $display_name         The user's display name.\n *                                             Default is the user's username.\n *     @type string      $nickname             The user's nickname.\n *                                             Default is the user's username.\n *     @type string      $first_name           The user's first name. For new users, will be used\n *                                             to build the first part of the user's display name\n *                                             if `$display_name` is not specified.\n *     @type string      $last_name            The user's last name. For new users, will be used\n *                                             to build the second part of the user's display name\n *                                             if `$display_name` is not specified.\n *     @type string      $description          The user's biographical description.\n *     @type string|bool $rich_editing         Whether to enable the rich-editor for the user.\n *                                             False if not empty.\n *     @type string|bool $comment_shortcuts    Whether to enable comment moderation keyboard\n *                                             shortcuts for the user. Default false.\n *     @type string      $admin_color          Admin color scheme for the user. Default 'fresh'.\n *     @type bool        $use_ssl              Whether the user should always access the admin over\n *                                             https. Default false.\n *     @type string      $user_registered      Date the user registered. Format is 'Y-m-d H:i:s'.\n *     @type string|bool $show_admin_bar_front Whether to display the Admin Bar for the user on the\n *                                             site's front end. Default true.\n *     @type string      $role                 User's role.\n *     @type string      $locale               User's locale. Default empty.\n * }\n * @return int|WP_Error The newly created user's ID or a WP_Error object if the user could not\n *                      be created.\n *\/"}]},"wp_update_user":{"name":"wp_update_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$userdata","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update a user in the database.\n *\n * It is possible to update a user's password by specifying the 'user_pass'\n * value in the $userdata parameter array.\n *\n * If current user's password is being updated, then the cookies will be\n * cleared.\n *\n * @since 2.0.0\n *\n * @see wp_insert_user() For what fields can be set in $userdata.\n *\n * @param mixed $userdata An array of user data or a user object of type stdClass or WP_User.\n * @return int|WP_Error The updated user's ID or a WP_Error object if the user could not be updated.\n *\/"}]},"wp_create_user":{"name":"wp_create_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$username","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$password","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$email","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * A simpler way of inserting a user into the database.\n *\n * Creates a new user with just the username, password, and email. For more\n * complex user creation use wp_insert_user() to specify more information.\n *\n * @since 2.0.0\n * @see wp_insert_user() More complete way to create a new user\n *\n * @param string $username The user's username.\n * @param string $password The user's password.\n * @param string $email    Optional. The user's email. Default empty.\n * @return int|WP_Error The newly created user's ID or a WP_Error object if the user could not\n *                      be created.\n *\/"}]},"_get_additional_user_keys":{"name":"_get_additional_user_keys","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns a list of meta keys to be (maybe) populated in wp_update_user().\n *\n * The list of keys returned via this function are dependent on the presence\n * of those keys in the user meta data to be set.\n *\n * @since 3.3.0\n * @access private\n *\n * @param WP_User $user WP_User instance.\n * @return array List of user keys to be populated in wp_update_user().\n *\/"}]},"wp_get_user_contact_methods":{"name":"wp_get_user_contact_methods","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set up the user contact methods.\n *\n * Default contact methods were removed in 3.6. A filter dictates contact methods.\n *\n * @since 3.7.0\n *\n * @param WP_User $user Optional. WP_User object.\n * @return array Array of contact methods and their labels.\n *\/"}]},"_wp_get_user_contactmethods":{"name":"_wp_get_user_contactmethods","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * The old private function for setting up user contact methods.\n *\n * Use wp_get_user_contact_methods() instead.\n *\n * @since 2.9.0\n * @access private\n *\n * @param WP_User $user Optional. WP_User object. Default null.\n * @return array Array of contact methods and their labels.\n *\/"}]},"wp_get_password_hint":{"name":"wp_get_password_hint","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the text suggesting how to create strong passwords.\n *\n * @since 4.1.0\n *\n * @return string The password hint text.\n *\/"}]},"get_password_reset_key":{"name":"get_password_reset_key","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates, stores, then returns a password reset key for user.\n *\n * @since 4.4.0\n *\n * @global wpdb         $wpdb      WordPress database abstraction object.\n * @global PasswordHash $wp_hasher Portable PHP password hashing framework.\n *\n * @param WP_User $user User to retrieve password reset key for.\n *\n * @return string|WP_Error Password reset key on success. WP_Error on error.\n *\/"}]},"check_password_reset_key":{"name":"check_password_reset_key","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$login","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a user row based on password reset key and login\n *\n * A key is considered 'expired' if it exactly matches the value of the\n * user_activation_key field, rather than being matched after going through the\n * hashing process. This field is now hashed; old values are no longer accepted\n * but have a different WP_Error code so good user feedback can be provided.\n *\n * @since 3.1.0\n *\n * @global wpdb         $wpdb      WordPress database object for queries.\n * @global PasswordHash $wp_hasher Portable PHP password hashing framework instance.\n *\n * @param string $key       Hash to validate sending user's password.\n * @param string $login     The user login.\n * @return WP_User|WP_Error WP_User object on success, WP_Error object for invalid or expired keys.\n *\/"}]},"reset_password":{"name":"reset_password","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$new_pass","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles resetting the user's password.\n *\n * @since 2.5.0\n *\n * @param object $user     The user\n * @param string $new_pass New password for the user in plaintext\n *\/"}]},"register_new_user":{"name":"register_new_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_login","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_email","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles registering a new user.\n *\n * @since 2.5.0\n *\n * @param string $user_login User's username for logging in\n * @param string $user_email User's email address to send password and add\n * @return int|WP_Error Either user's ID or error on failure.\n *\/"}]},"wp_send_new_user_notifications":{"name":"wp_send_new_user_notifications","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$notify","rank":1,"variadic":false,"reference":false,"default":"'both'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Initiates email notifications related to the creation of new users.\n *\n * Notifications are sent both to the site admin and to the newly created user.\n *\n * @since 4.4.0\n * @since 4.6.0 Converted the `$notify` parameter to accept 'user' for sending\n *              notifications only to the user created.\n *\n * @param int    $user_id ID of the newly created user.\n * @param string $notify  Optional. Type of notification that should happen. Accepts 'admin'\n *                        or an empty string (admin only), 'user', or 'both' (admin and user).\n *                        Default 'both'.\n *\/"}]},"wp_get_session_token":{"name":"wp_get_session_token","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the current session token from the logged_in cookie.\n *\n * @since 4.0.0\n *\n * @return string Token.\n *\/"}]},"wp_get_all_sessions":{"name":"wp_get_all_sessions","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve a list of sessions for the current user.\n *\n * @since 4.0.0\n * @return array Array of sessions.\n *\/"}]},"wp_destroy_current_session":{"name":"wp_destroy_current_session","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove the current session token from the database.\n *\n * @since 4.0.0\n *\/"}]},"wp_destroy_other_sessions":{"name":"wp_destroy_other_sessions","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove all but the current session token for the current user for the database.\n *\n * @since 4.0.0\n *\/"}]},"wp_destroy_all_sessions":{"name":"wp_destroy_all_sessions","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove all session tokens for the current user from the database.\n *\n * @since 4.0.0\n *\/"}]},"wp_get_users_with_no_role":{"name":"wp_get_users_with_no_role","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the user IDs of all users with no role on this site.\n *\n * This function returns an empty array when used on Multisite.\n *\n * @since 4.4.0\n *\n * @return array Array of user IDs.\n *\/"}]},"_wp_get_current_user":{"name":"_wp_get_current_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the current user object.\n *\n * Will set the current user, if the current user is not set. The current user\n * will be set to the logged-in person. If no user is logged-in, then it will\n * set the current user to 0, which is invalid and won't have any permissions.\n *\n * This function is used by the pluggable functions wp_get_current_user() and\n * get_currentuserinfo(), the latter of which is deprecated but used for backward\n * compatibility.\n *\n * @since 4.5.0\n * @access private\n *\n * @see wp_get_current_user()\n * @global WP_User $current_user Checks if the current user is set.\n *\n * @return WP_User Current WP_User instance.\n *\/"}]},"_wp_http_get_object":{"name":"_wp_http_get_object","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Core HTTP Request API\n *\n * Standardizes the HTTP requests for WordPress. Handles cookies, gzip encoding and decoding, chunk\n * decoding, if HTTP 1.1 and various other difficult HTTP protocol implementations.\n *\n * @package WordPress\n * @subpackage HTTP\n *\/"},{"phpdoc":"\/**\n * Returns the initialized WP_Http Object\n *\n * @since 2.7.0\n * @access private\n *\n * @staticvar WP_Http $http\n *\n * @return WP_Http HTTP Transport object.\n *\/"}]},"wp_safe_remote_request":{"name":"wp_safe_remote_request","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the raw response from a safe HTTP request.\n *\n * This function is ideal when the HTTP request is being made to an arbitrary\n * URL. The URL is validated to avoid redirection and request forgery attacks.\n *\n * @since 3.6.0\n *\n * @see wp_remote_request() For more information on the response array format.\n * @see WP_Http::request() For default arguments information.\n *\n * @param string $url  Site URL to retrieve.\n * @param array  $args Optional. Request arguments. Default empty array.\n * @return WP_Error|array The response or WP_Error on failure.\n *\/"}]},"wp_safe_remote_get":{"name":"wp_safe_remote_get","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the raw response from a safe HTTP request using the GET method.\n *\n * This function is ideal when the HTTP request is being made to an arbitrary\n * URL. The URL is validated to avoid redirection and request forgery attacks.\n *\n * @since 3.6.0\n *\n * @see wp_remote_request() For more information on the response array format.\n * @see WP_Http::request() For default arguments information.\n *\n * @param string $url  Site URL to retrieve.\n * @param array  $args Optional. Request arguments. Default empty array.\n * @return WP_Error|array The response or WP_Error on failure.\n *\/"}]},"wp_safe_remote_post":{"name":"wp_safe_remote_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the raw response from a safe HTTP request using the POST method.\n *\n * This function is ideal when the HTTP request is being made to an arbitrary\n * URL. The URL is validated to avoid redirection and request forgery attacks.\n *\n * @since 3.6.0\n *\n * @see wp_remote_request() For more information on the response array format.\n * @see WP_Http::request() For default arguments information.\n *\n * @param string $url  Site URL to retrieve.\n * @param array  $args Optional. Request arguments. Default empty array.\n * @return WP_Error|array The response or WP_Error on failure.\n *\/"}]},"wp_safe_remote_head":{"name":"wp_safe_remote_head","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the raw response from a safe HTTP request using the HEAD method.\n *\n * This function is ideal when the HTTP request is being made to an arbitrary\n * URL. The URL is validated to avoid redirection and request forgery attacks.\n *\n * @since 3.6.0\n *\n * @see wp_remote_request() For more information on the response array format.\n * @see WP_Http::request() For default arguments information.\n *\n * @param string $url Site URL to retrieve.\n * @param array $args Optional. Request arguments. Default empty array.\n * @return WP_Error|array The response or WP_Error on failure.\n *\/"}]},"wp_remote_request":{"name":"wp_remote_request","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the raw response from the HTTP request.\n *\n * The array structure is a little complex:\n *\n *     $res = array(\n *         'headers'  => array(),\n *         'response' => array(\n *             'code'    => int,\n *             'message' => string\n *         )\n *     );\n *\n * All of the headers in $res['headers'] are with the name as the key and the\n * value as the value. So to get the User-Agent, you would do the following.\n *\n *     $user_agent = $res['headers']['user-agent'];\n *\n * The body is the raw response content and can be retrieved from $res['body'].\n *\n * This function is called first to make the request and there are other API\n * functions to abstract out the above convoluted setup.\n *\n * Request method defaults for helper functions:\n *  - Default 'GET'  for wp_remote_get()\n *  - Default 'POST' for wp_remote_post()\n *  - Default 'HEAD' for wp_remote_head()\n *\n * @since 2.7.0\n *\n * @see WP_Http::request() For additional information on default arguments.\n *\n * @param string $url  Site URL to retrieve.\n * @param array  $args Optional. Request arguments. Default empty array.\n * @return WP_Error|array The response or WP_Error on failure.\n *\/"}]},"wp_remote_get":{"name":"wp_remote_get","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the raw response from the HTTP request using the GET method.\n *\n * @since 2.7.0\n *\n * @see wp_remote_request() For more information on the response array format.\n * @see WP_Http::request() For default arguments information.\n *\n * @param string $url  Site URL to retrieve.\n * @param array  $args Optional. Request arguments. Default empty array.\n * @return WP_Error|array The response or WP_Error on failure.\n *\/"}]},"wp_remote_post":{"name":"wp_remote_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the raw response from the HTTP request using the POST method.\n *\n * @since 2.7.0\n *\n * @see wp_remote_request() For more information on the response array format.\n * @see WP_Http::request() For default arguments information.\n *\n * @param string $url  Site URL to retrieve.\n * @param array  $args Optional. Request arguments. Default empty array.\n * @return WP_Error|array The response or WP_Error on failure.\n *\/"}]},"wp_remote_head":{"name":"wp_remote_head","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the raw response from the HTTP request using the HEAD method.\n *\n * @since 2.7.0\n *\n * @see wp_remote_request() For more information on the response array format.\n * @see WP_Http::request() For default arguments information.\n *\n * @param string $url  Site URL to retrieve.\n * @param array  $args Optional. Request arguments. Default empty array.\n * @return WP_Error|array The response or WP_Error on failure.\n *\/"}]},"wp_remote_retrieve_headers":{"name":"wp_remote_retrieve_headers","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve only the headers from the raw response.\n *\n * @since 2.7.0\n * @since 4.6.0 Return value changed from an array to an Requests_Utility_CaseInsensitiveDictionary instance.\n *\n * @see \\Requests_Utility_CaseInsensitiveDictionary\n *\n * @param array $response HTTP response.\n * @return array|\\Requests_Utility_CaseInsensitiveDictionary The headers of the response. Empty array if incorrect parameter given.\n *\/"}]},"wp_remote_retrieve_header":{"name":"wp_remote_retrieve_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$header","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve a single header by name from the raw response.\n *\n * @since 2.7.0\n *\n * @param array  $response\n * @param string $header Header name to retrieve value from.\n * @return string The header value. Empty string on if incorrect parameter given, or if the header doesn't exist.\n *\/"}]},"wp_remote_retrieve_response_code":{"name":"wp_remote_retrieve_response_code","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve only the response code from the raw response.\n *\n * Will return an empty array if incorrect parameter value is given.\n *\n * @since 2.7.0\n *\n * @param array $response HTTP response.\n * @return int|string The response code as an integer. Empty string on incorrect parameter given.\n *\/"}]},"wp_remote_retrieve_response_message":{"name":"wp_remote_retrieve_response_message","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve only the response message from the raw response.\n *\n * Will return an empty array if incorrect parameter value is given.\n *\n * @since 2.7.0\n *\n * @param array $response HTTP response.\n * @return string The response message. Empty string on incorrect parameter given.\n *\/"}]},"wp_remote_retrieve_body":{"name":"wp_remote_retrieve_body","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve only the body from the raw response.\n *\n * @since 2.7.0\n *\n * @param array $response HTTP response.\n * @return string The body of the response. Empty string if no body or incorrect parameter given.\n *\/"}]},"wp_remote_retrieve_cookies":{"name":"wp_remote_retrieve_cookies","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve only the cookies from the raw response.\n *\n * @since 4.4.0\n *\n * @param array $response HTTP response.\n * @return array An array of `WP_Http_Cookie` objects from the response. Empty array if there are none, or the response is a WP_Error.\n *\/"}]},"wp_remote_retrieve_cookie":{"name":"wp_remote_retrieve_cookie","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve a single cookie by name from the raw response.\n *\n * @since 4.4.0\n *\n * @param array  $response HTTP response.\n * @param string $name     The name of the cookie to retrieve.\n * @return WP_Http_Cookie|string The `WP_Http_Cookie` object. Empty string if the cookie isn't present in the response.\n *\/"}]},"wp_remote_retrieve_cookie_value":{"name":"wp_remote_retrieve_cookie_value","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve a single cookie's value by name from the raw response.\n *\n * @since 4.4.0\n *\n * @param array  $response HTTP response.\n * @param string $name     The name of the cookie to retrieve.\n * @return string The value of the cookie. Empty string if the cookie isn't present in the response.\n *\/"}]},"wp_http_supports":{"name":"wp_http_supports","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$capabilities","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines if there is an HTTP Transport that can process this request.\n *\n * @since 3.2.0\n *\n * @param array  $capabilities Array of capabilities to test or a wp_remote_request() $args array.\n * @param string $url          Optional. If given, will check if the URL requires SSL and adds\n *                             that requirement to the capabilities array.\n *\n * @return bool\n *\/"}]},"get_http_origin":{"name":"get_http_origin","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the HTTP Origin of the current request.\n *\n * @since 3.4.0\n *\n * @return string URL of the origin. Empty string if no origin.\n *\/"}]},"get_allowed_http_origins":{"name":"get_allowed_http_origins","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve list of allowed HTTP origins.\n *\n * @since 3.4.0\n *\n * @return array Array of origin URLs.\n *\/"}]},"is_allowed_http_origin":{"name":"is_allowed_http_origin","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$origin","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines if the HTTP origin is an authorized one.\n *\n * @since 3.4.0\n *\n * @param null|string $origin Origin URL. If not provided, the value of get_http_origin() is used.\n * @return string Origin URL if allowed, empty string if not.\n *\/"}]},"send_origin_headers":{"name":"send_origin_headers","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Send Access-Control-Allow-Origin and related headers if the current request\n * is from an allowed origin.\n *\n * If the request is an OPTIONS request, the script exits with either access\n * control headers sent, or a 403 response if the origin is not allowed. For\n * other request methods, you will receive a return value.\n *\n * @since 3.4.0\n *\n * @return string|false Returns the origin URL if headers are sent. Returns false\n *                      if headers are not sent.\n *\/"}]},"wp_http_validate_url":{"name":"wp_http_validate_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Validate a URL for safe use in the HTTP API.\n *\n * @since 3.5.2\n *\n * @param string $url\n * @return false|string URL or false on failure.\n *\/"}]},"allowed_http_request_hosts":{"name":"allowed_http_request_hosts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$is_external","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$host","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whitelists allowed redirect hosts for safe HTTP requests as well.\n *\n * Attached to the {@see 'http_request_host_is_external'} filter.\n *\n * @since 3.6.0\n *\n * @param bool   $is_external\n * @param string $host\n * @return bool\n *\/"}]},"ms_allowed_http_request_hosts":{"name":"ms_allowed_http_request_hosts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$is_external","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$host","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whitelists any domain in a multisite installation for safe HTTP requests.\n *\n * Attached to the {@see 'http_request_host_is_external'} filter.\n *\n * @since 3.6.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n * @staticvar array $queried\n *\n * @param bool   $is_external\n * @param string $host\n * @return bool\n *\/"}]},"wp_parse_url":{"name":"wp_parse_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$component","rank":1,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * A wrapper for PHP's parse_url() function that handles consistency in the return\n * values across PHP versions.\n *\n * PHP 5.4.7 expanded parse_url()'s ability to handle non-absolute url's, including\n * schemeless and relative url's with :\/\/ in the path. This function works around\n * those limitations providing a standard output on PHP 5.2~5.4+.\n *\n * Secondly, across various PHP versions, schemeless URLs starting containing a \":\"\n * in the query are being handled inconsistently. This function works around those\n * differences as well.\n *\n * Error suppression is used as prior to PHP 5.3.3, an E_WARNING would be generated\n * when URL parsing failed.\n *\n * @since 4.4.0\n * @since 4.7.0 The $component parameter was added for parity with PHP's parse_url().\n *\n * @param string $url       The URL to parse.\n * @param int    $component The specific component to retrieve. Use one of the PHP\n *                          predefined constants to specify which one.\n *                          Defaults to -1 (= return all parts as an array).\n *                          @see http:\/\/php.net\/manual\/en\/function.parse-url.php\n * @return mixed False on parse failure; Array of URL components on success;\n *               When a specific component has been requested: null if the component\n *               doesn't exist in the given URL; a sting or - in the case of\n *               PHP_URL_PORT - integer when it does. See parse_url()'s return values.\n *\/"}]},"_get_component_from_parsed_url_array":{"name":"_get_component_from_parsed_url_array","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url_parts","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$component","rank":1,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve a specific component from a parsed URL array.\n *\n * @internal\n *\n * @since 4.7.0\n *\n * @param array|false $url_parts The parsed URL. Can be false if the URL failed to parse.\n * @param int    $component The specific component to retrieve. Use one of the PHP\n *                          predefined constants to specify which one.\n *                          Defaults to -1 (= return all parts as an array).\n *                          @see http:\/\/php.net\/manual\/en\/function.parse-url.php\n * @return mixed False on parse failure; Array of URL components on success;\n *               When a specific component has been requested: null if the component\n *               doesn't exist in the given URL; a sting or - in the case of\n *               PHP_URL_PORT - integer when it does. See parse_url()'s return values.\n *\/"}]},"_wp_translate_php_url_constant_to_key":{"name":"_wp_translate_php_url_constant_to_key","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$constant","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Translate a PHP_URL_* constant to the named array keys PHP uses.\n *\n * @internal\n *\n * @since 4.7.0\n *\n * @see   http:\/\/php.net\/manual\/en\/url.constants.php\n *\n * @param int $constant PHP_URL_* constant.\n * @return string|bool The named key or false.\n *\/"}]},"add_metadata":{"name":"add_metadata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$meta_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$unique","rank":4,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add metadata for the specified object.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $meta_type  Type of object metadata is for (e.g., comment, post, or user)\n * @param int    $object_id  ID of the object metadata is for\n * @param string $meta_key   Metadata key\n * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.\n * @param bool   $unique     Optional, default is false.\n *                           Whether the specified metadata key should be unique for the object.\n *                           If true, and the object already has a value for the specified metadata key,\n *                           no change will be made.\n * @return int|false The meta ID on success, false on failure.\n *\/"},{"phpdoc":"\/**\n * Core Metadata API\n *\n * Functions for retrieving and manipulating metadata of various WordPress object types. Metadata\n * for an object is a represented by a simple key-value pair. Objects may contain multiple\n * metadata entries that share the same key and differ only in their value.\n *\n * @package WordPress\n * @subpackage Meta\n *\/"}]},"update_metadata":{"name":"update_metadata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$meta_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$prev_value","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update metadata for the specified object. If no value already exists for the specified object\n * ID and metadata key, the metadata will be added.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $meta_type  Type of object metadata is for (e.g., comment, post, or user)\n * @param int    $object_id  ID of the object metadata is for\n * @param string $meta_key   Metadata key\n * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.\n * @param mixed  $prev_value Optional. If specified, only update existing metadata entries with\n * \t\t                     the specified value. Otherwise, update all entries.\n * @return int|bool Meta ID if the key didn't exist, true on successful update, false on failure.\n *\/"}]},"delete_metadata":{"name":"delete_metadata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$meta_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$delete_all","rank":4,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Delete metadata for the specified object.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $meta_type  Type of object metadata is for (e.g., comment, post, or user)\n * @param int    $object_id  ID of the object metadata is for\n * @param string $meta_key   Metadata key\n * @param mixed  $meta_value Optional. Metadata value. Must be serializable if non-scalar. If specified, only delete\n *                           metadata entries with this value. Otherwise, delete all entries with the specified meta_key.\n *                           Pass `null, `false`, or an empty string to skip this check. (For backward compatibility,\n *                           it is not possible to pass an empty string to delete those entries with an empty string\n *                           for a value.)\n * @param bool   $delete_all Optional, default is false. If true, delete matching metadata entries for all objects,\n *                           ignoring the specified object_id. Otherwise, only delete matching metadata entries for\n *                           the specified object_id.\n * @return bool True on successful delete, false on failure.\n *\/"}]},"get_metadata":{"name":"get_metadata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$meta_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$single","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve metadata for the specified object.\n *\n * @since 2.9.0\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)\n * @param int    $object_id ID of the object metadata is for\n * @param string $meta_key  Optional. Metadata key. If not specified, retrieve all metadata for\n * \t\t                    the specified object.\n * @param bool   $single    Optional, default is false.\n *                          If true, return only the first value of the specified meta_key.\n *                          This parameter has no effect if meta_key is not specified.\n * @return mixed Single metadata value, or array of values\n *\/"}]},"metadata_exists":{"name":"metadata_exists","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$meta_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine if a meta key is set for a given object\n *\n * @since 3.3.0\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)\n * @param int    $object_id ID of the object metadata is for\n * @param string $meta_key  Metadata key.\n * @return bool True of the key is set, false if not.\n *\/"}]},"get_metadata_by_mid":{"name":"get_metadata_by_mid","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$meta_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get meta data by meta ID\n *\n * @since 3.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, term, or user).\n * @param int    $meta_id   ID for a specific meta row\n * @return object|false Meta object or false.\n *\/"}]},"update_metadata_by_mid":{"name":"update_metadata_by_mid","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$meta_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update meta data by meta ID\n *\n * @since 3.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $meta_type  Type of object metadata is for (e.g., comment, post, or user)\n * @param int    $meta_id    ID for a specific meta row\n * @param string $meta_value Metadata value\n * @param string $meta_key   Optional, you can provide a meta key to update it\n * @return bool True on successful update, false on failure.\n *\/"}]},"delete_metadata_by_mid":{"name":"delete_metadata_by_mid","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$meta_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Delete meta data by meta ID\n *\n * @since 3.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, term, or user).\n * @param int    $meta_id   ID for a specific meta row\n * @return bool True on successful delete, false on failure.\n *\/"}]},"update_meta_cache":{"name":"update_meta_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$meta_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_ids","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update the metadata cache for the specified objects.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string    $meta_type  Type of object metadata is for (e.g., comment, post, or user)\n * @param int|array $object_ids Array or comma delimited list of object IDs to update cache for\n * @return array|false Metadata cache for the specified objects, or false on failure.\n *\/"}]},"wp_metadata_lazyloader":{"name":"wp_metadata_lazyloader","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the queue for lazy-loading metadata.\n *\n * @since 4.5.0\n *\n * @return WP_Metadata_Lazyloader $lazyloader Metadata lazyloader queue.\n *\/"}]},"get_meta_sql":{"name":"get_meta_sql","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$meta_query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$primary_table","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$primary_id_column","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Given a meta query, generates SQL clauses to be appended to a main query.\n *\n * @since 3.2.0\n *\n * @see WP_Meta_Query\n *\n * @param array $meta_query         A meta query.\n * @param string $type              Type of meta.\n * @param string $primary_table     Primary database table name.\n * @param string $primary_id_column Primary ID column name.\n * @param object $context           Optional. The main query object\n * @return array Associative array of `JOIN` and `WHERE` SQL.\n *\/"}]},"_get_meta_table":{"name":"_get_meta_table","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the name of the metadata table for the specified object type.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $type Type of object to get metadata table for (e.g., comment, post, or user)\n * @return string|false Metadata table name, or false if no metadata table exists\n *\/"}]},"is_protected_meta":{"name":"is_protected_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$meta_key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_type","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine whether a meta key is protected.\n *\n * @since 3.1.3\n *\n * @param string      $meta_key Meta key\n * @param string|null $meta_type\n * @return bool True if the key is protected, false otherwise.\n *\/"}]},"sanitize_meta":{"name":"sanitize_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$meta_key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_type","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize meta value.\n *\n * @since 3.1.3\n *\n * @param string $meta_key       Meta key.\n * @param mixed  $meta_value     Meta value to sanitize.\n * @param string $object_type    Type of object the meta is registered to.\n *\n * @return mixed Sanitized $meta_value.\n *\/"}]},"register_meta":{"name":"register_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers a meta key.\n *\n * @since 3.3.0\n * @since 4.6.0 {@link https:\/\/core.trac.wordpress.org\/ticket\/35658 Modified\n *              to support an array of data to attach to registered meta keys}. Previous arguments for\n *              `$sanitize_callback` and `$auth_callback` have been folded into this array.\n *\n * @param string $object_type    Type of object this meta is registered to.\n * @param string $meta_key       Meta key to register.\n * @param array  $args {\n *     Data used to describe the meta key when registered.\n *\n *     @type string $type              The type of data associated with this meta key.\n *     @type string $description       A description of the data attached to this meta key.\n *     @type bool   $single            Whether the meta key has one value per object, or an array of values per object.\n *     @type string $sanitize_callback A function or method to call when sanitizing `$meta_key` data.\n *     @type string $auth_callback     Optional. A function or method to call when performing edit_post_meta, add_post_meta, and delete_post_meta capability checks.\n *     @type bool   $show_in_rest      Whether data associated with this meta key can be considered public.\n * }\n * @param string|array $deprecated Deprecated. Use `$args` instead.\n *\n * @return bool True if the meta key was successfully registered in the global array, false if not.\n *                       Registering a meta key with distinct sanitize and auth callbacks will fire those\n *                       callbacks, but will not add to the global registry.\n *\/"}]},"registered_meta_key_exists":{"name":"registered_meta_key_exists","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks if a meta key is registered.\n *\n * @since 4.6.0\n *\n * @param string $object_type    The type of object.\n * @param string $meta_key       The meta key.\n *\n * @return bool True if the meta key is registered to the object type. False if not.\n *\/"}]},"unregister_meta_key":{"name":"unregister_meta_key","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Unregisters a meta key from the list of registered keys.\n *\n * @since 4.6.0\n *\n * @param string $object_type The type of object.\n * @param string $meta_key    The meta key.\n * @return bool True if successful. False if the meta key was not registered.\n *\/"}]},"get_registered_meta_keys":{"name":"get_registered_meta_keys","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a list of registered meta keys for an object type.\n *\n * @since 4.6.0\n *\n * @param string $object_type The type of object. Post, comment, user, term.\n * @return array List of registered meta keys.\n *\/"}]},"get_registered_metadata":{"name":"get_registered_metadata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves registered metadata for a specified object.\n *\n * @since 4.6.0\n *\n * @param string $object_type Type of object to request metadata for. (e.g. comment, post, term, user)\n * @param int    $object_id   ID of the object the metadata is for.\n * @param string $meta_key    Optional. Registered metadata key. If not specified, retrieve all registered\n *                            metadata for the specified object.\n * @return mixed A single value or array of values for a key if specified. An array of all registered keys\n *               and values for an object ID if not.\n *\/"}]},"_wp_register_meta_args_whitelist":{"name":"_wp_register_meta_args_whitelist","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default_args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filter out `register_meta()` args based on a whitelist.\n * `register_meta()` args may change over time, so requiring the whitelist\n * to be explicitly turned off is a warranty seal of sorts.\n *\n * @access private\n * @since  4.6.0\n *\n * @param  array $args         Arguments from `register_meta()`.\n * @param  array $default_args Default arguments for `register_meta()`.\n *\n * @return array Filtered arguments.\n *\/"}]},"wpmu_update_blogs_date":{"name":"wpmu_update_blogs_date","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update the last_updated field for the current site.\n *\n * @since MU\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"},{"phpdoc":"\/**\n * Site\/blog functions that work with the blogs table and related data.\n *\n * @package WordPress\n * @subpackage Multisite\n * @since MU\n *\/"}]},"get_blogaddress_by_id":{"name":"get_blogaddress_by_id","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get a full blog URL, given a blog id.\n *\n * @since MU\n *\n * @param int $blog_id Blog ID\n * @return string Full URL of the blog if found. Empty string if not.\n *\/"}]},"get_blogaddress_by_name":{"name":"get_blogaddress_by_name","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blogname","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get a full blog URL, given a blog name.\n *\n * @since MU\n *\n * @param string $blogname The (subdomain or directory) name\n * @return string\n *\/"}]},"get_id_from_blogname":{"name":"get_id_from_blogname","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$slug","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a sites ID given its (subdomain or directory) slug.\n *\n * @since MU\n * @since 4.7.0 Converted to use get_sites().\n *\n * @param string $slug A site's slug.\n * @return int|null The site ID, or null if no site is found for the given slug.\n *\/"}]},"get_blog_details":{"name":"get_blog_details","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$fields","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$get_all","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the details for a blog from the blogs table and blog options.\n *\n * @since MU\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|string|array $fields  Optional. A blog ID, a blog slug, or an array of fields to query against.\n *                                  If not specified the current blog ID is used.\n * @param bool             $get_all Whether to retrieve all details or only the details in the blogs table.\n *                                  Default is true.\n * @return WP_Site|false Blog details on success. False on failure.\n *\/"}]},"refresh_blog_details":{"name":"refresh_blog_details","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Clear the blog details cache.\n *\n * @since MU\n *\n * @param int $blog_id Optional. Blog ID. Defaults to current blog.\n *\/"}]},"update_blog_details":{"name":"update_blog_details","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$details","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update the details for a blog. Updates the blogs table for a given blog id.\n *\n * @since MU\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int   $blog_id Blog ID\n * @param array $details Array of details keyed by blogs table field names.\n * @return bool True if update succeeds, false otherwise.\n *\/"}]},"clean_blog_cache":{"name":"clean_blog_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Clean the blog cache\n *\n * @since 3.5.0\n *\n * @param WP_Site $blog The site object to be cleared from cache.\n *\/"}]},"clean_site_details_cache":{"name":"clean_site_details_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$site_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Cleans the site details cache for a site.\n *\n * @since 4.7.4\n *\n * @param int $site_id Optional. Site ID. Default is the current site ID.\n *\/"}]},"get_site":{"name":"get_site","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$site","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves site data given a site ID or site object.\n *\n * Site data will be cached and returned after being passed through a filter.\n * If the provided site is empty, the current site global will be used.\n *\n * @since 4.6.0\n *\n * @param WP_Site|int|null $site Optional. Site to retrieve. Default is the current site.\n * @return WP_Site|null The site object or null if not found.\n *\/"}]},"_prime_site_caches":{"name":"_prime_site_caches","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds any sites from the given ids to the cache that do not already exist in cache.\n *\n * @since 4.6.0\n * @access private\n *\n * @see update_site_cache()\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $ids ID list.\n *\/"}]},"update_site_cache":{"name":"update_site_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$sites","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates sites in cache.\n *\n * @since 4.6.0\n *\n * @param array $sites Array of site objects.\n *\/"}]},"get_sites":{"name":"get_sites","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a list of sites matching requested arguments.\n *\n * @since 4.6.0\n *\n * @see WP_Site_Query::parse_query()\n *\n * @param string|array $args {\n *     Optional. Array or query string of site query parameters. Default empty.\n *\n *     @type array        $site__in          Array of site IDs to include. Default empty.\n *     @type array        $site__not_in      Array of site IDs to exclude. Default empty.\n *     @type bool         $count             Whether to return a site count (true) or array of site objects.\n *                                           Default false.\n *     @type array        $date_query        Date query clauses to limit sites by. See WP_Date_Query.\n *                                           Default null.\n *     @type string       $fields            Site fields to return. Accepts 'ids' (returns an array of site IDs)\n *                                           or empty (returns an array of complete site objects). Default empty.\n *     @type int          $ID                A site ID to only return that site. Default empty.\n *     @type int          $number            Maximum number of sites to retrieve. Default 100.\n *     @type int          $offset            Number of sites to offset the query. Used to build LIMIT clause.\n *                                           Default 0.\n *     @type bool         $no_found_rows     Whether to disable the `SQL_CALC_FOUND_ROWS` query. Default true.\n *     @type string|array $orderby           Site status or array of statuses. Accepts 'id', 'domain', 'path',\n *                                           'network_id', 'last_updated', 'registered', 'domain_length',\n *                                           'path_length', 'site__in' and 'network__in'. Also accepts false,\n *                                           an empty array, or 'none' to disable `ORDER BY` clause.\n *                                           Default 'id'.\n *     @type string       $order             How to order retrieved sites. Accepts 'ASC', 'DESC'. Default 'ASC'.\n *     @type int          $network_id        Limit results to those affiliated with a given network ID. If 0,\n *                                           include all networks. Default 0.\n *     @type array        $network__in       Array of network IDs to include affiliated sites for. Default empty.\n *     @type array        $network__not_in   Array of network IDs to exclude affiliated sites for. Default empty.\n *     @type string       $domain            Limit results to those affiliated with a given domain. Default empty.\n *     @type array        $domain__in        Array of domains to include affiliated sites for. Default empty.\n *     @type array        $domain__not_in    Array of domains to exclude affiliated sites for. Default empty.\n *     @type string       $path              Limit results to those affiliated with a given path. Default empty.\n *     @type array        $path__in          Array of paths to include affiliated sites for. Default empty.\n *     @type array        $path__not_in      Array of paths to exclude affiliated sites for. Default empty.\n *     @type int          $public            Limit results to public sites. Accepts '1' or '0'. Default empty.\n *     @type int          $archived          Limit results to archived sites. Accepts '1' or '0'. Default empty.\n *     @type int          $mature            Limit results to mature sites. Accepts '1' or '0'. Default empty.\n *     @type int          $spam              Limit results to spam sites. Accepts '1' or '0'. Default empty.\n *     @type int          $deleted           Limit results to deleted sites. Accepts '1' or '0'. Default empty.\n *     @type string       $search            Search term(s) to retrieve matching sites for. Default empty.\n *     @type array        $search_columns    Array of column names to be searched. Accepts 'domain' and 'path'.\n *                                           Default empty array.\n *     @type bool         $update_site_cache Whether to prime the cache for found sites. Default false.\n * }\n * @return array List of sites.\n *\/"}]},"get_blog_option":{"name":"get_blog_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$option","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve option value for a given blog id based on name of option.\n *\n * If the option does not exist or does not have a value, then the return value\n * will be false. This is useful to check whether you need to install an option\n * and is commonly used during installation of plugin options and to test\n * whether upgrading is required.\n *\n * If the option was serialized then it will be unserialized when it is returned.\n *\n * @since MU\n *\n * @param int    $id      A blog ID. Can be null to refer to the current blog.\n * @param string $option  Name of option to retrieve. Expected to not be SQL-escaped.\n * @param mixed  $default Optional. Default value to return if the option does not exist.\n * @return mixed Value set for the option.\n *\/"}]},"add_blog_option":{"name":"add_blog_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$option","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a new option for a given blog id.\n *\n * You do not need to serialize values. If the value needs to be serialized, then\n * it will be serialized before it is inserted into the database. Remember,\n * resources can not be serialized or added as an option.\n *\n * You can create options without values and then update the values later.\n * Existing options will not be updated and checks are performed to ensure that you\n * aren't adding a protected WordPress option. Care should be taken to not name\n * options the same as the ones which are protected.\n *\n * @since MU\n *\n * @param int    $id     A blog ID. Can be null to refer to the current blog.\n * @param string $option Name of option to add. Expected to not be SQL-escaped.\n * @param mixed  $value  Optional. Option value, can be anything. Expected to not be SQL-escaped.\n * @return bool False if option was not added and true if option was added.\n *\/"}]},"delete_blog_option":{"name":"delete_blog_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$option","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes option by name for a given blog id. Prevents removal of protected WordPress options.\n *\n * @since MU\n *\n * @param int    $id     A blog ID. Can be null to refer to the current blog.\n * @param string $option Name of option to remove. Expected to not be SQL-escaped.\n * @return bool True, if option is successfully deleted. False on failure.\n *\/"}]},"update_blog_option":{"name":"update_blog_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$option","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update an option for a particular blog.\n *\n * @since MU\n *\n * @param int    $id         The blog id.\n * @param string $option     The option key.\n * @param mixed  $value      The option value.\n * @param mixed  $deprecated Not used.\n * @return bool True on success, false on failure.\n *\/"}]},"switch_to_blog":{"name":"switch_to_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$new_blog","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Switch the current blog.\n *\n * This function is useful if you need to pull posts, or other information,\n * from other blogs. You can switch back afterwards using restore_current_blog().\n *\n * Things that aren't switched:\n *  - autoloaded options. See #14992\n *  - plugins. See #14941\n *\n * @see restore_current_blog()\n * @since MU\n *\n * @global wpdb            $wpdb\n * @global int             $blog_id\n * @global array           $_wp_switched_stack\n * @global bool            $switched\n * @global string          $table_prefix\n * @global WP_Object_Cache $wp_object_cache\n *\n * @param int  $new_blog   The id of the blog you want to switch to. Default: current blog\n * @param bool $deprecated Deprecated argument\n * @return true Always returns True.\n *\/"}]},"restore_current_blog":{"name":"restore_current_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Restore the current blog, after calling switch_to_blog()\n *\n * @see switch_to_blog()\n * @since MU\n *\n * @global wpdb            $wpdb\n * @global array           $_wp_switched_stack\n * @global int             $blog_id\n * @global bool            $switched\n * @global string          $table_prefix\n * @global WP_Object_Cache $wp_object_cache\n *\n * @return bool True on success, false if we're already on the current blog\n *\/"}]},"ms_is_switched":{"name":"ms_is_switched","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines if switch_to_blog() is in effect\n *\n * @since 3.5.0\n *\n * @global array $_wp_switched_stack\n *\n * @return bool True if switched, false otherwise.\n *\/"}]},"is_archived":{"name":"is_archived","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if a particular blog is archived.\n *\n * @since MU\n *\n * @param int $id The blog id\n * @return string Whether the blog is archived or not\n *\/"}]},"update_archived":{"name":"update_archived","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$archived","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update the 'archived' status of a particular blog.\n *\n * @since MU\n *\n * @param int    $id       The blog id\n * @param string $archived The new status\n * @return string $archived\n *\/"}]},"update_blog_status":{"name":"update_blog_status","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$pref","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update a blog details field.\n *\n * @since MU\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int    $blog_id BLog ID\n * @param string $pref    A field name\n * @param string $value   Value for $pref\n * @param null   $deprecated\n * @return string|false $value\n *\/"}]},"get_blog_status":{"name":"get_blog_status","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$pref","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get a blog details field.\n *\n * @since MU\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int    $id   The blog id\n * @param string $pref A field name\n * @return bool|string|null $value\n *\/"}]},"get_last_updated":{"name":"get_last_updated","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$deprecated","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$start","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$quantity","rank":2,"variadic":false,"reference":false,"default":"40","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get a list of most recently updated blogs.\n *\n * @since MU\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param mixed $deprecated Not used\n * @param int   $start      The offset\n * @param int   $quantity   The maximum number of blogs to retrieve. Default is 40.\n * @return array The list of blogs\n *\/"}]},"get_networks":{"name":"get_networks","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a list of networks.\n *\n * @since 4.6.0\n *\n * @param string|array $args Optional. Array or string of arguments. See WP_Network_Query::parse_query()\n *                           for information on accepted arguments. Default empty array.\n * @return int|array List of networks or number of found networks if `$count` argument is true.\n *\/"}]},"get_network":{"name":"get_network","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$network","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves network data given a network ID or network object.\n *\n * Network data will be cached and returned after being passed through a filter.\n * If the provided network is empty, the current network global will be used.\n *\n * @since 4.6.0\n *\n * @global WP_Network $current_site\n *\n * @param WP_Network|int|null $network Optional. Network to retrieve. Default is the current network.\n * @return WP_Network|null The network object or null if not found.\n *\/"}]},"clean_network_cache":{"name":"clean_network_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes a network from the object cache.\n *\n * @since 4.6.0\n *\n * @param int|array $ids Network ID or an array of network IDs to remove from cache.\n *\/"}]},"update_network_cache":{"name":"update_network_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$networks","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates the network cache of given networks.\n *\n * Will add the networks in $networks to the cache. If network ID already exists\n * in the network cache then it will not be updated. The network is added to the\n * cache using the network group with the key using the ID of the networks.\n *\n * @since 4.6.0\n *\n * @param array $networks Array of network row objects.\n *\/"}]},"_prime_network_caches":{"name":"_prime_network_caches","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$network_ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds any networks from the given IDs to the cache that do not already exist in cache.\n *\n * @since 4.6.0\n * @access private\n *\n * @see update_network_cache()\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $network_ids Array of network IDs.\n *\/"}]},"_update_blog_date_on_post_publish":{"name":"_update_blog_date_on_post_publish","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$new_status","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_status","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handler for updating the blog date when a post is published or an already published post is changed.\n *\n * @since 3.3.0\n *\n * @param string $new_status The new post status\n * @param string $old_status The old post status\n * @param object $post       Post object\n *\/"}]},"_update_blog_date_on_post_delete":{"name":"_update_blog_date_on_post_delete","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handler for updating the blog date when a published post is deleted.\n *\n * @since 3.4.0\n *\n * @param int $post_id Post ID\n *\/"}]},"_update_posts_count_on_delete":{"name":"_update_posts_count_on_delete","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handler for updating the blog posts count date when a post is deleted.\n *\n * @since 4.0.0\n *\n * @param int $post_id Post ID.\n *\/"}]},"_update_posts_count_on_transition_post_status":{"name":"_update_posts_count_on_transition_post_status","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$new_status","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_status","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handler for updating the blog posts count date when a post status changes.\n *\n * @since 4.0.0\n *\n * @param string $new_status The status the post is changing to.\n * @param string $old_status The status the post is changing from.\n *\/"}]},"get_post_format":{"name":"get_post_format","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the format slug for a post\n *\n * @since 3.1.0\n *\n * @param int|object|null $post Post ID or post object. Optional, default is the current post from the loop.\n * @return string|false The format if successful. False otherwise.\n *\/"},{"phpdoc":"\/**\n * Post format functions.\n *\n * @package WordPress\n * @subpackage Post\n *\/"}]},"has_post_format":{"name":"has_post_format","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$format","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if a post has any of the given formats, or any format.\n *\n * @since 3.1.0\n *\n * @param string|array    $format Optional. The format or formats to check.\n * @param object|int|null $post   Optional. The post to check. If not supplied, defaults to the current post if used in the loop.\n * @return bool True if the post has any of the given formats (or any format, if no format specified), false otherwise.\n *\/"}]},"set_post_format":{"name":"set_post_format","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$format","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Assign a format to a post\n *\n * @since 3.1.0\n *\n * @param int|object $post   The post for which to assign a format.\n * @param string     $format A format to assign. Use an empty string or array to remove all formats from the post.\n * @return array|WP_Error|false WP_Error on error. Array of affected term IDs on success.\n *\/"}]},"get_post_format_strings":{"name":"get_post_format_strings","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns an array of post format slugs to their translated and pretty display versions\n *\n * @since 3.1.0\n *\n * @return array The array of translated post format names.\n *\/"}]},"get_post_format_slugs":{"name":"get_post_format_slugs","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves an array of post format slugs.\n *\n * @since 3.1.0\n *\n * @return array The array of post format slugs.\n *\/"}]},"get_post_format_string":{"name":"get_post_format_string","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$slug","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns a pretty, translated version of a post format slug\n *\n * @since 3.1.0\n *\n * @param string $slug A post format slug.\n * @return string The translated post format name.\n *\/"}]},"get_post_format_link":{"name":"get_post_format_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$format","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns a link to a post format index.\n *\n * @since 3.1.0\n *\n * @param string $format The post format slug.\n * @return string|WP_Error|false The post format term link.\n *\/"}]},"_post_format_request":{"name":"_post_format_request","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$qvs","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters the request to allow for the format prefix.\n *\n * @access private\n * @since 3.1.0\n *\n * @param array $qvs\n * @return array\n *\/"}]},"_post_format_link":{"name":"_post_format_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$term","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters the post format term link to remove the format prefix.\n *\n * @access private\n * @since 3.1.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param string $link\n * @param object $term\n * @param string $taxonomy\n * @return string\n *\/"}]},"_post_format_get_term":{"name":"_post_format_get_term","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove the post format prefix from the name property of the term object created by get_term().\n *\n * @access private\n * @since 3.1.0\n *\n * @param object $term\n * @return object\n *\/"}]},"_post_format_get_terms":{"name":"_post_format_get_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$terms","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomies","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove the post format prefix from the name property of the term objects created by get_terms().\n *\n * @access private\n * @since 3.1.0\n *\n * @param array        $terms\n * @param string|array $taxonomies\n * @param array        $args\n * @return array\n *\/"}]},"_post_format_wp_get_object_terms":{"name":"_post_format_wp_get_object_terms","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$terms","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove the post format prefix from the name property of the term objects created by wp_get_object_terms().\n *\n * @access private\n * @since 3.1.0\n *\n * @param array $terms\n * @return array\n *\/"}]},"get_dashboard_blog":{"name":"get_dashboard_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated functions from WordPress MU and the multisite feature. You shouldn't\n * use these functions and look for the alternatives instead. The functions will be\n * removed in a later version.\n *\n * @package WordPress\n * @subpackage Deprecated\n * @since 3.0.0\n *\/"},{"phpdoc":"\/**\n * Get the \"dashboard blog\", the blog where users without a blog edit their profile data.\n * Dashboard blog functionality was removed in WordPress 3.1, replaced by the user admin.\n *\n * @since MU\n * @deprecated 3.1.0 Use get_site()\n * @see get_site()\n *\n * @return WP_Site Current site object.\n *\/"}]},"generate_random_password":{"name":"generate_random_password","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$len","rank":0,"variadic":false,"reference":false,"default":"8","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Generates a random password.\n *\n * @since MU\n * @deprecated 3.0.0 Use wp_generate_password()\n * @see wp_generate_password()\n *\n * @param int $len Optional. The length of password to generate. Default 8.\n *\/"}]},"is_site_admin":{"name":"is_site_admin","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_login","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine if user is a site admin.\n *\n * Plugins should use is_multisite() instead of checking if this function exists\n * to determine if multisite is enabled.\n *\n * This function must reside in a file included only if is_multisite() due to\n * legacy function_exists() checks to determine if multisite is enabled.\n *\n * @since MU\n * @deprecated 3.0.0 Use is_super_admin()\n * @see is_super_admin()\n *\n * @param string $user_login Optional. Username for the user to check. Default empty.\n *\/"}]},"graceful_fail":{"name":"graceful_fail","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$message","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated functionality to gracefully fail.\n *\n * @since MU\n * @deprecated 3.0.0 Use wp_die()\n * @see wp_die()\n *\/"}]},"get_user_details":{"name":"get_user_details","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$username","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated functionality to retrieve user information.\n *\n * @since MU\n * @deprecated 3.0.0 Use get_user_by()\n * @see get_user_by()\n *\n * @param string $username Username.\n *\/"}]},"clear_global_post_cache":{"name":"clear_global_post_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated functionality to clear the global post cache.\n *\n * @since MU\n * @deprecated 3.0.0 Use clean_post_cache()\n * @see clean_post_cache()\n *\n * @param int $post_id Post ID.\n *\/"}]},"is_main_blog":{"name":"is_main_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated functionality to determin if the current site is the main site.\n *\n * @since MU\n * @deprecated 3.0.0 Use is_main_site()\n * @see is_main_site()\n *\/"}]},"validate_email":{"name":"validate_email","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$email","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$check_domain","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated functionality to validate an email address.\n *\n * @since MU\n * @deprecated 3.0.0 Use is_email()\n * @see is_email()\n *\n * @param string $email        Email address to verify.\n * @param bool   $check_domain Deprecated.\n * @return string|bool Either false or the valid email address.\n *\/"}]},"get_blog_list":{"name":"get_blog_list","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$start","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$num","rank":1,"variadic":false,"reference":false,"default":"10","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated functionality to retrieve a list of all sites.\n *\n * @since MU\n * @deprecated 3.0.0 Use wp_get_sites()\n * @see wp_get_sites()\n *\n * @param int    $start      Optional. Offset for retrieving the blog list. Default 0.\n * @param int    $num        Optional. Number of blogs to list. Default 10.\n * @param string $deprecated Unused.\n *\/"}]},"get_most_active_blogs":{"name":"get_most_active_blogs","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$num","rank":0,"variadic":false,"reference":false,"default":"10","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$display","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated functionality to retrieve a list of the most active sites.\n *\n * @since MU\n * @deprecated 3.0.0\n *\n * @param int  $num     Optional. Number of activate blogs to retrieve. Default 10.\n * @param bool $display Optional. Whether or not to display the most active blogs list. Default true.\n * @return array List of \"most active\" sites.\n *\/"}]},"wpmu_admin_do_redirect":{"name":"wpmu_admin_do_redirect","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Redirect a user based on $_GET or $_POST arguments.\n *\n * The function looks for redirect arguments in the following order:\n * 1) $_GET['ref']\n * 2) $_POST['ref']\n * 3) $_SERVER['HTTP_REFERER']\n * 4) $_GET['redirect']\n * 5) $_POST['redirect']\n * 6) $url\n *\n * @since MU\n * @deprecated 3.3.0 Use wp_redirect()\n * @see wp_redirect()\n *\n * @param string $url Optional. Redirect URL. Default empty.\n *\/"}]},"wpmu_admin_redirect_add_updated_param":{"name":"wpmu_admin_redirect_add_updated_param","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds an 'updated=true' argument to a URL.\n *\n * @since MU\n * @deprecated 3.3.0 Use add_query_arg()\n * @see add_query_arg()\n *\n * @param string $url Optional. Redirect URL. Default empty.\n * @return string\n *\/"}]},"get_user_id_from_string":{"name":"get_user_id_from_string","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get a numeric user ID from either an email address or a login.\n *\n * A numeric string is considered to be an existing user ID\n * and is simply returned as such.\n *\n * @since MU\n * @deprecated 3.6.0 Use get_user_by()\n * @see get_user_by()\n *\n * @param string $string Either an email address or a login.\n * @return int\n *\/"}]},"get_blogaddress_by_domain":{"name":"get_blogaddress_by_domain","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get a full blog URL, given a domain and a path.\n *\n * @since MU\n * @deprecated 3.7.0\n *\n * @param string $domain\n * @param string $path\n * @return string\n *\/"}]},"create_empty_blog":{"name":"create_empty_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$weblog_title","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$site_id","rank":3,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create an empty blog.\n *\n * @since MU 1.0\n * @deprecated 4.4.0\n *\n * @param string $domain       The new blog's domain.\n * @param string $path         The new blog's path.\n * @param string $weblog_title The new blog's title.\n * @param int    $site_id      Optional. Defaults to 1.\n * @return string|int The ID of the newly created blog\n *\/"}]},"get_admin_users_for_domain":{"name":"get_admin_users_for_domain","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$sitedomain","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the admin for a domain\/path combination.\n *\n * @since MU 1.0\n * @deprecated 4.4.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $sitedomain Optional. Site domain.\n * @param string $path       Optional. Site path.\n * @return array|false The network admins\n *\/"}]},"wp_get_sites":{"name":"wp_get_sites","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return an array of sites for a network or networks.\n *\n * @since 3.7.0\n * @deprecated 4.6.0\n * @see get_sites()\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $args {\n *     Array of default arguments. Optional.\n *\n *     @type int|array $network_id A network ID or array of network IDs. Set to null to retrieve sites\n *                                 from all networks. Defaults to current network ID.\n *     @type int       $public     Retrieve public or non-public sites. Default null, for any.\n *     @type int       $archived   Retrieve archived or non-archived sites. Default null, for any.\n *     @type int       $mature     Retrieve mature or non-mature sites. Default null, for any.\n *     @type int       $spam       Retrieve spam or non-spam sites. Default null, for any.\n *     @type int       $deleted    Retrieve deleted or non-deleted sites. Default null, for any.\n *     @type int       $limit      Number of sites to limit the query to. Default 100.\n *     @type int       $offset     Exclude the first x sites. Used in combination with the $limit parameter. Default 0.\n * }\n * @return array An empty array if the install is considered \"large\" via wp_is_large_network(). Otherwise,\n *               an associative array of site data arrays, each containing the site (network) ID, blog ID,\n *               site domain and path, dates registered and modified, and the language ID. Also, boolean\n *               values for whether the site is public, archived, mature, spam, and\/or deleted.\n *\/"}]},"wp_scripts":{"name":"wp_scripts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Initialize $wp_scripts if it has not been set.\n *\n * @global WP_Scripts $wp_scripts\n *\n * @since 4.2.0\n *\n * @return WP_Scripts WP_Scripts instance.\n *\/"},{"phpdoc":"\/**\n * Dependencies API: Scripts functions\n *\n * @since 2.6.0\n *\n * @package WordPress\n * @subpackage Dependencies\n *\/"}]},"_wp_scripts_maybe_doing_it_wrong":{"name":"_wp_scripts_maybe_doing_it_wrong","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$function","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Helper function to output a _doing_it_wrong message when applicable.\n *\n * @ignore\n * @since 4.2.0\n *\n * @param string $function Function name.\n *\/"}]},"wp_print_scripts":{"name":"wp_print_scripts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$handles","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints scripts in document head that are in the $handles queue.\n *\n * Called by admin-header.php and {@see 'wp_head'} hook. Since it is called by wp_head on every page load,\n * the function does not instantiate the WP_Scripts object unless script names are explicitly passed.\n * Makes use of already-instantiated $wp_scripts global if present. Use provided {@see 'wp_print_scripts'}\n * hook to register\/enqueue new scripts.\n *\n * @see WP_Scripts::do_items()\n * @global WP_Scripts $wp_scripts The WP_Scripts object for printing scripts.\n *\n * @since 2.1.0\n *\n * @param string|bool|array $handles Optional. Scripts to be printed. Default 'false'.\n * @return array On success, a processed array of WP_Dependencies items; otherwise, an empty array.\n *\/"}]},"wp_add_inline_script":{"name":"wp_add_inline_script","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$position","rank":2,"variadic":false,"reference":false,"default":"'after'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds extra code to a registered script.\n *\n * Code will only be added if the script in already in the queue.\n * Accepts a string $data containing the Code. If two or more code blocks\n * are added to the same script $handle, they will be printed in the order\n * they were added, i.e. the latter added code can redeclare the previous.\n *\n * @since 4.5.0\n *\n * @see WP_Scripts::add_inline_script()\n *\n * @param string $handle   Name of the script to add the inline script to.\n * @param string $data     String containing the javascript to be added.\n * @param string $position Optional. Whether to add the inline script before the handle\n *                         or after. Default 'after'.\n * @return bool True on success, false on failure.\n *\/"}]},"wp_register_script":{"name":"wp_register_script","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deps","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ver","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$in_footer","rank":4,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register a new script.\n *\n * Registers a script to be enqueued later using the wp_enqueue_script() function.\n *\n * @see WP_Dependencies::add()\n * @see WP_Dependencies::add_data()\n *\n * @since 2.1.0\n * @since 4.3.0 A return value was added.\n *\n * @param string           $handle    Name of the script. Should be unique.\n * @param string           $src       Full URL of the script, or path of the script relative to the WordPress root directory.\n * @param array            $deps      Optional. An array of registered script handles this script depends on. Default empty array.\n * @param string|bool|null $ver       Optional. String specifying script version number, if it has one, which is added to the URL\n *                                    as a query string for cache busting purposes. If version is set to false, a version\n *                                    number is automatically added equal to current installed WordPress version.\n *                                    If set to null, no version is added.\n * @param bool             $in_footer Optional. Whether to enqueue the script before <\/body> instead of in the <head>.\n *                                    Default 'false'.\n * @return bool Whether the script has been registered. True on success, false on failure.\n *\/"}]},"wp_localize_script":{"name":"wp_localize_script","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$l10n","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Localize a script.\n *\n * Works only if the script has already been added.\n *\n * Accepts an associative array $l10n and creates a JavaScript object:\n *\n *     \"$object_name\" = {\n *         key: value,\n *         key: value,\n *         ...\n *     }\n *\n *\n * @see WP_Dependencies::localize()\n * @link https:\/\/core.trac.wordpress.org\/ticket\/11520\n * @global WP_Scripts $wp_scripts The WP_Scripts object for printing scripts.\n *\n * @since 2.2.0\n *\n * @todo Documentation cleanup\n *\n * @param string $handle      Script handle the data will be attached to.\n * @param string $object_name Name for the JavaScript object. Passed directly, so it should be qualified JS variable.\n *                            Example: '\/[a-zA-Z0-9_]+\/'.\n * @param array $l10n         The data itself. The data can be either a single or multi-dimensional array.\n * @return bool True if the script was successfully localized, false otherwise.\n *\/"}]},"wp_deregister_script":{"name":"wp_deregister_script","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove a registered script.\n *\n * Note: there are intentional safeguards in place to prevent critical admin scripts,\n * such as jQuery core, from being unregistered.\n *\n * @see WP_Dependencies::remove()\n *\n * @since 2.1.0\n *\n * @param string $handle Name of the script to be removed.\n *\/"}]},"wp_enqueue_script":{"name":"wp_enqueue_script","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deps","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ver","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$in_footer","rank":4,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueue a script.\n *\n * Registers the script if $src provided (does NOT overwrite), and enqueues it.\n *\n * @see WP_Dependencies::add()\n * @see WP_Dependencies::add_data()\n * @see WP_Dependencies::enqueue()\n *\n * @since 2.1.0\n *\n * @param string           $handle    Name of the script. Should be unique.\n * @param string           $src       Full URL of the script, or path of the script relative to the WordPress root directory.\n *                                    Default empty.\n * @param array            $deps      Optional. An array of registered script handles this script depends on. Default empty array.\n * @param string|bool|null $ver       Optional. String specifying script version number, if it has one, which is added to the URL\n *                                    as a query string for cache busting purposes. If version is set to false, a version\n *                                    number is automatically added equal to current installed WordPress version.\n *                                    If set to null, no version is added.\n * @param bool             $in_footer Optional. Whether to enqueue the script before <\/body> instead of in the <head>.\n *                                    Default 'false'.\n *\/"}]},"wp_dequeue_script":{"name":"wp_dequeue_script","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove a previously enqueued script.\n *\n * @see WP_Dependencies::dequeue()\n *\n * @since 3.1.0\n *\n * @param string $handle Name of the script to be removed.\n *\/"}]},"wp_script_is":{"name":"wp_script_is","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$list","rank":1,"variadic":false,"reference":false,"default":"'enqueued'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether a script has been added to the queue.\n *\n * @since 2.8.0\n * @since 3.5.0 'enqueued' added as an alias of the 'queue' list.\n *\n * @param string $handle Name of the script.\n * @param string $list   Optional. Status of the script to check. Default 'enqueued'.\n *                       Accepts 'enqueued', 'registered', 'queue', 'to_do', and 'done'.\n * @return bool Whether the script is queued.\n *\/"}]},"wp_script_add_data":{"name":"wp_script_add_data","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add metadata to a script.\n *\n * Works only if the script has already been added.\n *\n * Possible values for $key and $value:\n * 'conditional' string Comments for IE 6, lte IE 7, etc.\n *\n * @since 4.2.0\n *\n * @see WP_Dependency::add_data()\n *\n * @param string $handle Name of the script.\n * @param string $key    Name of data point for which we're storing a value.\n * @param mixed  $value  String containing the data to be added.\n * @return bool True on success, false on failure.\n *\/"}]},"map_meta_cap":{"name":"map_meta_cap","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$cap","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Map meta capabilities to primitive capabilities.\n *\n * This does not actually compare whether the user ID has the actual capability,\n * just what the capability or capabilities are. Meta capability list value can\n * be 'delete_user', 'edit_user', 'remove_user', 'promote_user', 'delete_post',\n * 'delete_page', 'edit_post', 'edit_page', 'read_post', or 'read_page'.\n *\n * @since 2.0.0\n *\n * @global array $post_type_meta_caps Used to get post type meta capabilities.\n *\n * @param string $cap       Capability name.\n * @param int    $user_id   User ID.\n * @param int    $object_id Optional. ID of the specific object to check against if `$cap` is a \"meta\" cap.\n *                          \"Meta\" capabilities, e.g. 'edit_post', 'edit_user', etc., are capabilities used\n *                          by map_meta_cap() to map to other \"primitive\" capabilities, e.g. 'edit_posts',\n *                          'edit_others_posts', etc. The parameter is accessed via func_get_args().\n * @return array Actual capabilities for meta capability.\n *\/"},{"phpdoc":"\/**\n * Core User Role & Capabilities API\n *\n * @package WordPress\n * @subpackage Users\n *\/"}]},"current_user_can":{"name":"current_user_can","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$capability","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether the current user has a specific capability.\n *\n * While checking against particular roles in place of a capability is supported\n * in part, this practice is discouraged as it may produce unreliable results.\n *\n * Note: Will always return true if the current user is a super admin, unless specifically denied.\n *\n * @since 2.0.0\n *\n * @see WP_User::has_cap()\n * @see map_meta_cap()\n *\n * @param string $capability Capability name.\n * @param int    $object_id  Optional. ID of the specific object to check against if `$capability` is a \"meta\" cap.\n *                           \"Meta\" capabilities, e.g. 'edit_post', 'edit_user', etc., are capabilities used\n *                           by map_meta_cap() to map to other \"primitive\" capabilities, e.g. 'edit_posts',\n *                           'edit_others_posts', etc. Accessed via func_get_args() and passed to WP_User::has_cap(),\n *                           then map_meta_cap().\n * @return bool Whether the current user has the given capability. If `$capability` is a meta cap and `$object_id` is\n *              passed, whether the current user has the given meta capability for the given object.\n *\/"}]},"current_user_can_for_blog":{"name":"current_user_can_for_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capability","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether current user has a capability or role for a given site.\n *\n * @since 3.0.0\n *\n * @param int    $blog_id    Site ID.\n * @param string $capability Capability or role name.\n * @return bool\n *\/"}]},"author_can":{"name":"author_can","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capability","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether author of supplied post has capability or role.\n *\n * @since 2.9.0\n *\n * @param int|object $post Post ID or post object.\n * @param string $capability Capability or role name.\n * @return bool\n *\/"}]},"user_can":{"name":"user_can","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capability","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether a particular user has capability or role.\n *\n * @since 3.1.0\n *\n * @param int|object $user User ID or object.\n * @param string $capability Capability or role name.\n * @return bool\n *\/"}]},"wp_roles":{"name":"wp_roles","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the global WP_Roles instance and instantiates it if necessary.\n *\n * @since 4.3.0\n *\n * @global WP_Roles $wp_roles WP_Roles global instance.\n *\n * @return WP_Roles WP_Roles global instance if not already instantiated.\n *\/"}]},"get_role":{"name":"get_role","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$role","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve role object.\n *\n * @since 2.0.0\n *\n * @param string $role Role name.\n * @return WP_Role|null WP_Role object if found, null if the role does not exist.\n *\/"}]},"add_role":{"name":"add_role","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$role","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$display_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capabilities","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add role, if it does not exist.\n *\n * @since 2.0.0\n *\n * @param string $role Role name.\n * @param string $display_name Display name for role.\n * @param array $capabilities List of capabilities, e.g. array( 'edit_posts' => true, 'delete_posts' => false );\n * @return WP_Role|null WP_Role object if role is added, null if already exists.\n *\/"}]},"remove_role":{"name":"remove_role","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$role","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove role, if it exists.\n *\n * @since 2.0.0\n *\n * @param string $role Role name.\n *\/"}]},"get_super_admins":{"name":"get_super_admins","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve a list of super admins.\n *\n * @since 3.0.0\n *\n * @global array $super_admins\n *\n * @return array List of super admin logins\n *\/"}]},"is_super_admin":{"name":"is_super_admin","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine if user is a site admin.\n *\n * @since 3.0.0\n *\n * @param int $user_id (Optional) The ID of a user. Defaults to the current user.\n * @return bool True if the user is a site admin.\n *\/"}]},"grant_super_admin":{"name":"grant_super_admin","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Grants Super Admin privileges.\n *\n * @since 3.0.0\n *\n * @global array $super_admins\n *\n * @param int $user_id ID of the user to be granted Super Admin privileges.\n * @return bool True on success, false on failure. This can fail when the user is\n *              already a super admin or when the `$super_admins` global is defined.\n *\/"}]},"revoke_super_admin":{"name":"revoke_super_admin","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Revokes Super Admin privileges.\n *\n * @since 3.0.0\n *\n * @global array $super_admins\n *\n * @param int $user_id ID of the user Super Admin privileges to be revoked from.\n * @return bool True on success, false on failure. This can fail when the user's email\n *              is the network admin email or when the `$super_admins` global is defined.\n *\/"}]},"the_permalink":{"name":"the_permalink","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the permalink for the current post.\n *\n * @since 1.2.0\n * @since 4.4.0 Added the `$post` parameter.\n *\n * @param int|WP_Post $post Optional. Post ID or post object. Default is the global `$post`.\n *\/"},{"phpdoc":"\/**\n * WordPress Link Template Functions\n *\n * @package WordPress\n * @subpackage Template\n *\/"}]},"user_trailingslashit":{"name":"user_trailingslashit","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type_of_url","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a trailing-slashed string if the site is set for adding trailing slashes.\n *\n * Conditionally adds a trailing slash if the permalink structure has a trailing\n * slash, strips the trailing slash if not. The string is passed through the\n * {@see 'user_trailingslashit'} filter. Will remove trailing slash from string, if\n * site is not set to have them.\n *\n * @since 2.2.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param string $string      URL with or without a trailing slash.\n * @param string $type_of_url Optional. The type of URL being considered (e.g. single, category, etc)\n *                            for use in the filter. Default empty string.\n * @return string The URL with the trailing slash appended or stripped.\n *\/"}]},"permalink_anchor":{"name":"permalink_anchor","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$mode","rank":0,"variadic":false,"reference":false,"default":"'id'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the permalink anchor for the current post.\n *\n * The permalink mode title will use the post title for the 'a' element 'id'\n * attribute. The id mode uses 'post-' with the post ID for the 'id' attribute.\n *\n * @since 0.71\n *\n * @param string $mode Optional. Permalink mode. Accepts 'title' or 'id'. Default 'id'.\n *\/"}]},"get_the_permalink":{"name":"get_the_permalink","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$leavename","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the full permalink for the current post or post ID.\n *\n * This function is an alias for get_permalink().\n *\n * @since 3.9.0\n *\n * @see get_permalink()\n *\n * @param int|WP_Post $post      Optional. Post ID or post object. Default is the global `$post`.\n * @param bool        $leavename Optional. Whether to keep post name or page name. Default false.\n *\n * @return string|false The permalink URL or false if post does not exist.\n *\/"}]},"get_permalink":{"name":"get_permalink","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$leavename","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the full permalink for the current post or post ID.\n *\n * @since 1.0.0\n *\n * @param int|WP_Post $post      Optional. Post ID or post object. Default is the global `$post`.\n * @param bool        $leavename Optional. Whether to keep post name or page name. Default false.\n * @return string|false The permalink URL or false if post does not exist.\n *\/"}]},"get_post_permalink":{"name":"get_post_permalink","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$leavename","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sample","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the permalink for a post of a custom post type.\n *\n * @since 3.0.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param int $id         Optional. Post ID. Default uses the global `$post`.\n * @param bool $leavename Optional, defaults to false. Whether to keep post name. Default false.\n * @param bool $sample    Optional, defaults to false. Is it a sample permalink. Default false.\n * @return string|WP_Error The post permalink.\n *\/"}]},"get_page_link":{"name":"get_page_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$leavename","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sample","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the permalink for the current page or page ID.\n *\n * Respects page_on_front. Use this one.\n *\n * @since 1.5.0\n *\n * @param int|WP_Post $post      Optional. Post ID or object. Default uses the global `$post`.\n * @param bool        $leavename Optional. Whether to keep the page name. Default false.\n * @param bool        $sample    Optional. Whether it should be treated as a sample permalink.\n *                               Default false.\n * @return string The page permalink.\n *\/"}]},"_get_page_link":{"name":"_get_page_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$leavename","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sample","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the page permalink.\n *\n * Ignores page_on_front. Internal use only.\n *\n * @since 2.1.0\n * @access private\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param int|WP_Post $post      Optional. Post ID or object. Default uses the global `$post`.\n * @param bool        $leavename Optional. Whether to keep the page name. Default false.\n * @param bool        $sample    Optional. Whether it should be treated as a sample permalink.\n *                               Default false.\n * @return string The page permalink.\n *\/"}]},"get_attachment_link":{"name":"get_attachment_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$leavename","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the permalink for an attachment.\n *\n * This can be used in the WordPress Loop or outside of it.\n *\n * @since 2.0.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param int|object $post      Optional. Post ID or object. Default uses the global `$post`.\n * @param bool       $leavename Optional. Whether to keep the page name. Default false.\n * @return string The attachment permalink.\n *\/"}]},"get_year_link":{"name":"get_year_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$year","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the permalink for the year archives.\n *\n * @since 1.5.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param int|bool $year False for current year or year for permalink.\n * @return string The permalink for the specified year archive.\n *\/"}]},"get_month_link":{"name":"get_month_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$year","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$month","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the permalink for the month archives with year.\n *\n * @since 1.0.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param bool|int $year  False for current year. Integer of year.\n * @param bool|int $month False for current month. Integer of month.\n * @return string The permalink for the specified month and year archive.\n *\/"}]},"get_day_link":{"name":"get_day_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$year","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$month","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$day","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the permalink for the day archives with year and month.\n *\n * @since 1.0.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param bool|int $year  False for current year. Integer of year.\n * @param bool|int $month False for current month. Integer of month.\n * @param bool|int $day   False for current day. Integer of day.\n * @return string The permalink for the specified day, month, and year archive.\n *\/"}]},"the_feed_link":{"name":"the_feed_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$anchor","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feed","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the permalink for the feed type.\n *\n * @since 3.0.0\n *\n * @param string $anchor The link's anchor text.\n * @param string $feed   Optional. Feed type. Default empty.\n *\/"}]},"get_feed_link":{"name":"get_feed_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$feed","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the permalink for the feed type.\n *\n * @since 1.5.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param string $feed Optional. Feed type. Default empty.\n * @return string The feed permalink.\n *\/"}]},"get_post_comments_feed_link":{"name":"get_post_comments_feed_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feed","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the permalink for the post comments feed.\n *\n * @since 2.2.0\n *\n * @param int    $post_id Optional. Post ID. Default is the ID of the global `$post`.\n * @param string $feed    Optional. Feed type. Default empty.\n * @return string The permalink for the comments feed for the given post.\n *\/"}]},"post_comments_feed_link":{"name":"post_comments_feed_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link_text","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feed","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the comment feed link for a post.\n *\n * Prints out the comment feed link for a post. Link text is placed in the\n * anchor. If no link text is specified, default text is used. If no post ID is\n * specified, the current post is used.\n *\n * @since 2.5.0\n *\n * @param string $link_text Optional. Descriptive link text. Default 'Comments Feed'.\n * @param int    $post_id   Optional. Post ID. Default is the ID of the global `$post`.\n * @param string $feed      Optional. Feed format. Default empty.\n *\/"}]},"get_author_feed_link":{"name":"get_author_feed_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$author_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feed","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the feed link for a given author.\n *\n * Returns a link to the feed for all posts by a given author. A specific feed\n * can be requested or left blank to get the default feed.\n *\n * @since 2.5.0\n *\n * @param int    $author_id Author ID.\n * @param string $feed      Optional. Feed type. Default empty.\n * @return string Link to the feed for the author specified by $author_id.\n *\/"}]},"get_category_feed_link":{"name":"get_category_feed_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$cat_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feed","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the feed link for a category.\n *\n * Returns a link to the feed for all posts in a given category. A specific feed\n * can be requested or left blank to get the default feed.\n *\n * @since 2.5.0\n *\n * @param int    $cat_id Category ID.\n * @param string $feed   Optional. Feed type. Default empty.\n * @return string Link to the feed for the category specified by $cat_id.\n *\/"}]},"get_term_feed_link":{"name":"get_term_feed_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"'category'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feed","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the feed link for a term.\n *\n * Returns a link to the feed for all posts in a given term. A specific feed\n * can be requested or left blank to get the default feed.\n *\n * @since 3.0.0\n *\n * @param int    $term_id  Term ID.\n * @param string $taxonomy Optional. Taxonomy of `$term_id`. Default 'category'.\n * @param string $feed     Optional. Feed type. Default empty.\n * @return string|false Link to the feed for the term specified by $term_id and $taxonomy.\n *\/"}]},"get_tag_feed_link":{"name":"get_tag_feed_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feed","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the permalink for a tag feed.\n *\n * @since 2.3.0\n *\n * @param int    $tag_id Tag ID.\n * @param string $feed   Optional. Feed type. Default empty.\n * @return string The feed permalink for the given tag.\n *\/"}]},"get_edit_tag_link":{"name":"get_edit_tag_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"'post_tag'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the edit link for a tag.\n *\n * @since 2.7.0\n *\n * @param int    $tag_id   Tag ID.\n * @param string $taxonomy Optional. Taxonomy slug. Default 'post_tag'.\n * @return string The edit tag link URL for the given tag.\n *\/"}]},"edit_tag_link":{"name":"edit_tag_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tag","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays or retrieves the edit link for a tag with formatting.\n *\n * @since 2.7.0\n *\n * @param string  $link   Optional. Anchor text. Default empty.\n * @param string  $before Optional. Display before edit link. Default empty.\n * @param string  $after  Optional. Display after edit link. Default empty.\n * @param WP_Term $tag    Optional. Term object. If null, the queried object will be inspected.\n *                        Default null.\n *\/"}]},"get_edit_term_link":{"name":"get_edit_term_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_type","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL for editing a given term.\n *\n * @since 3.1.0\n * @since 4.5.0 The `$taxonomy` argument was made optional.\n *\n * @param int    $term_id     Term ID.\n * @param string $taxonomy    Optional. Taxonomy. Defaults to the taxonomy of the term identified\n *                            by `$term_id`.\n * @param string $object_type Optional. The object type. Used to highlight the proper post type\n *                            menu on the linked page. Defaults to the first object_type associated\n *                            with the taxonomy.\n * @return string|null The edit term link URL for the given term, or null on failure.\n *\/"}]},"edit_term_link":{"name":"edit_term_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$term","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":4,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays or retrieves the edit term link with formatting.\n *\n * @since 3.1.0\n *\n * @param string $link   Optional. Anchor text. Default empty.\n * @param string $before Optional. Display before edit link. Default empty.\n * @param string $after  Optional. Display after edit link. Default empty.\n * @param object $term   Optional. Term object. If null, the queried object will be inspected. Default null.\n * @param bool   $echo   Optional. Whether or not to echo the return. Default true.\n * @return string|void HTML content.\n *\/"}]},"get_search_link":{"name":"get_search_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the permalink for a search.\n *\n * @since  3.0.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param string $query Optional. The query string to use. If empty the current query is used. Default empty.\n * @return string The search permalink.\n *\/"}]},"get_search_feed_link":{"name":"get_search_feed_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$search_query","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feed","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the permalink for the search results feed.\n *\n * @since 2.5.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param string $search_query Optional. Search query. Default empty.\n * @param string $feed         Optional. Feed type. Default empty.\n * @return string The search results feed permalink.\n *\/"}]},"get_search_comments_feed_link":{"name":"get_search_comments_feed_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$search_query","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feed","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the permalink for the search results comments feed.\n *\n * @since 2.5.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param string $search_query Optional. Search query. Default empty.\n * @param string $feed         Optional. Feed type. Default empty.\n * @return string The comments feed search results permalink.\n *\/"}]},"get_post_type_archive_link":{"name":"get_post_type_archive_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the permalink for a post type archive.\n *\n * @since 3.1.0\n * @since 4.5.0 Support for posts was added.\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param string $post_type Post type.\n * @return string|false The post type archive permalink.\n *\/"}]},"get_post_type_archive_feed_link":{"name":"get_post_type_archive_feed_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feed","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the permalink for a post type archive feed.\n *\n * @since 3.1.0\n *\n * @param string $post_type Post type\n * @param string $feed      Optional. Feed type. Default empty.\n * @return string|false The post type feed permalink.\n *\/"}]},"get_preview_post_link":{"name":"get_preview_post_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$query_args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$preview_link","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL used for the post preview.\n *\n * Allows additional query args to be appended.\n *\n * @since 4.4.0\n *\n * @param int|WP_Post $post         Optional. Post ID or `WP_Post` object. Defaults to global `$post`.\n * @param array       $query_args   Optional. Array of additional query args to be appended to the link.\n *                                  Default empty array.\n * @param string      $preview_link Optional. Base preview link to be used if it should differ from the\n *                                  post permalink. Default empty.\n * @return string|null URL used for the post preview, or null if the post does not exist.\n *\/"}]},"get_edit_post_link":{"name":"get_edit_post_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"'display'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the edit post link for post.\n *\n * Can be used within the WordPress loop or outside of it. Can be used with\n * pages, posts, attachments, and revisions.\n *\n * @since 2.3.0\n *\n * @param int    $id      Optional. Post ID. Default is the ID of the global `$post`.\n * @param string $context Optional. How to output the '&' character. Default '&amp;'.\n * @return string|null The edit post link for the given post. null if the post type is invalid or does\n *                     not allow an editing UI.\n *\/"}]},"edit_post_link":{"name":"edit_post_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$class","rank":4,"variadic":false,"reference":false,"default":"'post-edit-link'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the edit post link for post.\n *\n * @since 1.0.0\n * @since 4.4.0 The `$class` argument was added.\n *\n * @param string $text   Optional. Anchor text. If null, default is 'Edit This'. Default null.\n * @param string $before Optional. Display before edit link. Default empty.\n * @param string $after  Optional. Display after edit link. Default empty.\n * @param int    $id     Optional. Post ID. Default is the ID of the global `$post`.\n * @param string $class  Optional. Add custom class to link. Default 'post-edit-link'.\n *\/"}]},"get_delete_post_link":{"name":"get_delete_post_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$force_delete","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the delete posts link for post.\n *\n * Can be used within the WordPress loop or outside of it, with any post type.\n *\n * @since 2.9.0\n *\n * @param int    $id           Optional. Post ID. Default is the ID of the global `$post`.\n * @param string $deprecated   Not used.\n * @param bool   $force_delete Optional. Whether to bypass trash and force deletion. Default false.\n * @return string|void The delete post link URL for the given post.\n *\/"}]},"get_edit_comment_link":{"name":"get_edit_comment_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the edit comment link.\n *\n * @since 2.3.0\n *\n * @param int|WP_Comment $comment_id Optional. Comment ID or WP_Comment object.\n * @return string|void The edit comment link URL for the given comment.\n *\/"}]},"edit_comment_link":{"name":"edit_comment_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the edit comment link with formatting.\n *\n * @since 1.0.0\n *\n * @param string $text   Optional. Anchor text. If null, default is 'Edit This'. Default null.\n * @param string $before Optional. Display before edit link. Default empty.\n * @param string $after  Optional. Display after edit link. Default empty.\n *\/"}]},"get_edit_bookmark_link":{"name":"get_edit_bookmark_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the edit bookmark link.\n *\n * @since 2.7.0\n *\n * @param int|stdClass $link Optional. Bookmark ID. Default is the id of the current bookmark.\n * @return string|void The edit bookmark link URL.\n *\/"}]},"edit_bookmark_link":{"name":"edit_bookmark_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$bookmark","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the edit bookmark link anchor content.\n *\n * @since 2.7.0\n *\n * @param string $link     Optional. Anchor text. Default empty.\n * @param string $before   Optional. Display before edit link. Default empty.\n * @param string $after    Optional. Display after edit link. Default empty.\n * @param int    $bookmark Optional. Bookmark ID. Default is the current bookmark.\n *\/"}]},"get_edit_user_link":{"name":"get_edit_user_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the edit user link.\n *\n * @since 3.5.0\n *\n * @param int $user_id Optional. User ID. Defaults to the current user.\n * @return string URL to edit user page or empty string.\n *\/"}]},"get_previous_post":{"name":"get_previous_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$in_same_term","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excluded_terms","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":2,"variadic":false,"reference":false,"default":"'category'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the previous post that is adjacent to the current post.\n *\n * @since 1.5.0\n *\n * @param bool         $in_same_term   Optional. Whether post should be in a same taxonomy term. Default false.\n * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default empty.\n * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.\n * @return null|string|WP_Post Post object if successful. Null if global $post is not set. Empty string if no\n *                             corresponding post exists.\n *\/"}]},"get_next_post":{"name":"get_next_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$in_same_term","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excluded_terms","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":2,"variadic":false,"reference":false,"default":"'category'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the next post that is adjacent to the current post.\n *\n * @since 1.5.0\n *\n * @param bool         $in_same_term   Optional. Whether post should be in a same taxonomy term. Default false.\n * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default empty.\n * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.\n * @return null|string|WP_Post Post object if successful. Null if global $post is not set. Empty string if no\n *                             corresponding post exists.\n *\/"}]},"get_adjacent_post":{"name":"get_adjacent_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$in_same_term","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excluded_terms","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$previous","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":3,"variadic":false,"reference":false,"default":"'category'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the adjacent post.\n *\n * Can either be next or previous post.\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param bool         $in_same_term   Optional. Whether post should be in a same taxonomy term. Default false.\n * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default empty.\n * @param bool         $previous       Optional. Whether to retrieve previous post. Default true\n * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.\n * @return null|string|WP_Post Post object if successful. Null if global $post is not set. Empty string if no\n *                             corresponding post exists.\n *\/"}]},"get_adjacent_post_rel_link":{"name":"get_adjacent_post_rel_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"'%title'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$in_same_term","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excluded_terms","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$previous","rank":3,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":4,"variadic":false,"reference":false,"default":"'category'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the adjacent post relational link.\n *\n * Can either be next or previous post relational link.\n *\n * @since 2.8.0\n *\n * @param string       $title          Optional. Link title format. Default '%title'.\n * @param bool         $in_same_term   Optional. Whether link should be in a same taxonomy term. Default false.\n * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default empty.\n * @param bool         $previous       Optional. Whether to display link to previous or next post. Default true.\n * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.\n * @return string|void The adjacent post relational link URL.\n *\/"}]},"adjacent_posts_rel_link":{"name":"adjacent_posts_rel_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"'%title'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$in_same_term","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excluded_terms","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":3,"variadic":false,"reference":false,"default":"'category'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the relational links for the posts adjacent to the current post.\n *\n * @since 2.8.0\n *\n * @param string       $title          Optional. Link title format. Default '%title'.\n * @param bool         $in_same_term   Optional. Whether link should be in a same taxonomy term. Default false.\n * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default empty.\n * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.\n *\/"}]},"adjacent_posts_rel_link_wp_head":{"name":"adjacent_posts_rel_link_wp_head","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays relational links for the posts adjacent to the current post for single post pages.\n *\n * This is meant to be attached to actions like 'wp_head'. Do not call this directly in plugins\n * or theme templates.\n *\n * @since 3.0.0\n *\n * @see adjacent_posts_rel_link()\n *\/"}]},"next_post_rel_link":{"name":"next_post_rel_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"'%title'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$in_same_term","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excluded_terms","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":3,"variadic":false,"reference":false,"default":"'category'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the relational link for the next post adjacent to the current post.\n *\n * @since 2.8.0\n *\n * @see get_adjacent_post_rel_link()\n *\n * @param string       $title          Optional. Link title format. Default '%title'.\n * @param bool         $in_same_term   Optional. Whether link should be in a same taxonomy term. Default false.\n * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default empty.\n * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.\n *\/"}]},"prev_post_rel_link":{"name":"prev_post_rel_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"'%title'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$in_same_term","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excluded_terms","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":3,"variadic":false,"reference":false,"default":"'category'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the relational link for the previous post adjacent to the current post.\n *\n * @since 2.8.0\n *\n * @see get_adjacent_post_rel_link()\n *\n * @param string       $title          Optional. Link title format. Default '%title'.\n * @param bool         $in_same_term   Optional. Whether link should be in a same taxonomy term. Default false.\n * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default true.\n * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.\n *\/"}]},"get_boundary_post":{"name":"get_boundary_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$in_same_term","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excluded_terms","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$start","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":3,"variadic":false,"reference":false,"default":"'category'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the boundary post.\n *\n * Boundary being either the first or last post by publish date within the constraints specified\n * by $in_same_term or $excluded_terms.\n *\n * @since 2.8.0\n *\n * @param bool         $in_same_term   Optional. Whether returned post should be in a same taxonomy term.\n *                                     Default false.\n * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs.\n *                                     Default empty.\n * @param bool         $start          Optional. Whether to retrieve first or last post. Default true\n * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.\n * @return null|array Array containing the boundary post object if successful, null otherwise.\n *\/"}]},"get_previous_post_link":{"name":"get_previous_post_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$format","rank":0,"variadic":false,"reference":false,"default":"'&laquo; %link'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$link","rank":1,"variadic":false,"reference":false,"default":"'%title'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$in_same_term","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excluded_terms","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":4,"variadic":false,"reference":false,"default":"'category'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the previous post link that is adjacent to the current post.\n *\n * @since 3.7.0\n *\n * @param string       $format         Optional. Link anchor format. Default '&laquo; %link'.\n * @param string       $link           Optional. Link permalink format. Default '%title%'.\n * @param bool         $in_same_term   Optional. Whether link should be in a same taxonomy term. Default false.\n * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default empty.\n * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.\n * @return string The link URL of the previous post in relation to the current post.\n *\/"}]},"previous_post_link":{"name":"previous_post_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$format","rank":0,"variadic":false,"reference":false,"default":"'&laquo; %link'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$link","rank":1,"variadic":false,"reference":false,"default":"'%title'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$in_same_term","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excluded_terms","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":4,"variadic":false,"reference":false,"default":"'category'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the previous post link that is adjacent to the current post.\n *\n * @since 1.5.0\n *\n * @see get_previous_post_link()\n *\n * @param string       $format         Optional. Link anchor format. Default '&laquo; %link'.\n * @param string       $link           Optional. Link permalink format. Default '%title'.\n * @param bool         $in_same_term   Optional. Whether link should be in a same taxonomy term. Default false.\n * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default empty.\n * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.\n *\/"}]},"get_next_post_link":{"name":"get_next_post_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$format","rank":0,"variadic":false,"reference":false,"default":"'%link &raquo;'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$link","rank":1,"variadic":false,"reference":false,"default":"'%title'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$in_same_term","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excluded_terms","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":4,"variadic":false,"reference":false,"default":"'category'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the next post link that is adjacent to the current post.\n *\n * @since 3.7.0\n *\n * @param string       $format         Optional. Link anchor format. Default '&laquo; %link'.\n * @param string       $link           Optional. Link permalink format. Default '%title'.\n * @param bool         $in_same_term   Optional. Whether link should be in a same taxonomy term. Default false.\n * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default empty.\n * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.\n * @return string The link URL of the next post in relation to the current post.\n *\/"}]},"next_post_link":{"name":"next_post_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$format","rank":0,"variadic":false,"reference":false,"default":"'%link &raquo;'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$link","rank":1,"variadic":false,"reference":false,"default":"'%title'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$in_same_term","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excluded_terms","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":4,"variadic":false,"reference":false,"default":"'category'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the next post link that is adjacent to the current post.\n *\n * @since 1.5.0\n * @see get_next_post_link()\n *\n * @param string       $format         Optional. Link anchor format. Default '&laquo; %link'.\n * @param string       $link           Optional. Link permalink format. Default '%title'\n * @param bool         $in_same_term   Optional. Whether link should be in a same taxonomy term. Default false.\n * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default empty.\n * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.\n *\/"}]},"get_adjacent_post_link":{"name":"get_adjacent_post_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$format","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$link","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$in_same_term","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excluded_terms","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$previous","rank":4,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":5,"variadic":false,"reference":false,"default":"'category'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the adjacent post link.\n *\n * Can be either next post link or previous.\n *\n * @since 3.7.0\n *\n * @param string       $format         Link anchor format.\n * @param string       $link           Link permalink format.\n * @param bool         $in_same_term   Optional. Whether link should be in a same taxonomy term. Default false.\n * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded terms IDs. Default empty.\n * @param bool         $previous       Optional. Whether to display link to previous or next post. Default true.\n * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.\n * @return string The link URL of the previous or next post in relation to the current post.\n *\/"}]},"adjacent_post_link":{"name":"adjacent_post_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$format","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$link","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$in_same_term","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excluded_terms","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$previous","rank":4,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":5,"variadic":false,"reference":false,"default":"'category'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the adjacent post link.\n *\n * Can be either next post link or previous.\n *\n * @since 2.5.0\n *\n * @param string       $format         Link anchor format.\n * @param string       $link           Link permalink format.\n * @param bool         $in_same_term   Optional. Whether link should be in a same taxonomy term. Default false.\n * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded category IDs. Default empty.\n * @param bool         $previous       Optional. Whether to display link to previous or next post. Default true.\n * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.\n *\/"}]},"get_pagenum_link":{"name":"get_pagenum_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$pagenum","rank":0,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$escape","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the link for a page number.\n *\n * @since 1.5.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param int  $pagenum Optional. Page ID. Default 1.\n * @param bool $escape  Optional. Whether to escape the URL for display, with esc_url(). Defaults to true.\n * \t                    Otherwise, prepares the URL with esc_url_raw().\n * @return string The link URL for the given page number.\n *\/"}]},"get_next_posts_page_link":{"name":"get_next_posts_page_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$max_page","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the next posts page link.\n *\n * Backported from 2.1.3 to 2.0.10.\n *\n * @since 2.0.10\n *\n * @global int $paged\n *\n * @param int $max_page Optional. Max pages. Default 0.\n * @return string|void The link URL for next posts page.\n *\/"}]},"next_posts":{"name":"next_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$max_page","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays or retrieves the next posts page link.\n *\n * @since 0.71\n *\n * @param int   $max_page Optional. Max pages. Default 0.\n * @param bool  $echo     Optional. Whether to echo the link. Default true.\n * @return string|void The link URL for next posts page if `$echo = false`.\n *\/"}]},"get_next_posts_link":{"name":"get_next_posts_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$label","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_page","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the next posts page link.\n *\n * @since 2.7.0\n *\n * @global int      $paged\n * @global WP_Query $wp_query\n *\n * @param string $label    Content for link text.\n * @param int    $max_page Optional. Max pages. Default 0.\n * @return string|void HTML-formatted next posts page link.\n *\/"}]},"next_posts_link":{"name":"next_posts_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$label","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_page","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the next posts page link.\n *\n * @since 0.71\n *\n * @param string $label    Content for link text.\n * @param int    $max_page Optional. Max pages. Default 0.\n *\/"}]},"get_previous_posts_page_link":{"name":"get_previous_posts_page_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the previous posts page link.\n *\n * Will only return string, if not on a single page or post.\n *\n * Backported to 2.0.10 from 2.1.3.\n *\n * @since 2.0.10\n *\n * @global int $paged\n *\n * @return string|void The link for the previous posts page.\n *\/"}]},"previous_posts":{"name":"previous_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$echo","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays or retrieves the previous posts page link.\n *\n * @since 0.71\n *\n * @param bool $echo Optional. Whether to echo the link. Default true.\n * @return string|void The previous posts page link if `$echo = false`.\n *\/"}]},"get_previous_posts_link":{"name":"get_previous_posts_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$label","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the previous posts page link.\n *\n * @since 2.7.0\n *\n * @global int $paged\n *\n * @param string $label Optional. Previous page link text.\n * @return string|void HTML-formatted previous page link.\n *\/"}]},"previous_posts_link":{"name":"previous_posts_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$label","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the previous posts page link.\n *\n * @since 0.71\n *\n * @param string $label Optional. Previous page link text.\n *\/"}]},"get_posts_nav_link":{"name":"get_posts_nav_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the post pages link navigation for previous and next pages.\n *\n * @since 2.8.0\n *\n * @global WP_Query $wp_query\n *\n * @param string|array $args {\n *     Optional. Arguments to build the post pages link navigation.\n *\n *     @type string $sep      Separator character. Default '&#8212;'.\n *     @type string $prelabel Link text to display for the previous page link.\n *                            Default '&laquo; Previous Page'.\n *     @type string $nxtlabel Link text to display for the next page link.\n *                            Default 'Next Page &raquo;'.\n * }\n * @return string The posts link navigation.\n *\/"}]},"posts_nav_link":{"name":"posts_nav_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$sep","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$prelabel","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$nxtlabel","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the post pages link navigation for previous and next pages.\n *\n * @since 0.71\n *\n * @param string $sep      Optional. Separator for posts navigation links. Default empty.\n * @param string $prelabel Optional. Label for previous pages. Default empty.\n * @param string $nxtlabel Optional Label for next pages. Default empty.\n *\/"}]},"get_the_post_navigation":{"name":"get_the_post_navigation","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the navigation to next\/previous post, when applicable.\n *\n * @since 4.1.0\n * @since 4.4.0 Introduced the `in_same_term`, `excluded_terms`, and `taxonomy` arguments.\n *\n * @param array $args {\n *     Optional. Default post navigation arguments. Default empty array.\n *\n *     @type string       $prev_text          Anchor text to display in the previous post link. Default '%title'.\n *     @type string       $next_text          Anchor text to display in the next post link. Default '%title'.\n *     @type bool         $in_same_term       Whether link should be in a same taxonomy term. Default false.\n *     @type array|string $excluded_terms     Array or comma-separated list of excluded term IDs. Default empty.\n *     @type string       $taxonomy           Taxonomy, if `$in_same_term` is true. Default 'category'.\n *     @type string       $screen_reader_text Screen reader text for nav element. Default 'Post navigation'.\n * }\n * @return string Markup for post links.\n *\/"}]},"the_post_navigation":{"name":"the_post_navigation","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the navigation to next\/previous post, when applicable.\n *\n * @since 4.1.0\n *\n * @param array $args Optional. See get_the_post_navigation() for available arguments.\n *                    Default empty array.\n *\/"}]},"get_the_posts_navigation":{"name":"get_the_posts_navigation","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the navigation to next\/previous set of posts, when applicable.\n *\n * @since 4.1.0\n *\n * @global WP_Query $wp_query WordPress Query object.\n *\n * @param array $args {\n *     Optional. Default posts navigation arguments. Default empty array.\n *\n *     @type string $prev_text          Anchor text to display in the previous posts link.\n *                                      Default 'Older posts'.\n *     @type string $next_text          Anchor text to display in the next posts link.\n *                                      Default 'Newer posts'.\n *     @type string $screen_reader_text Screen reader text for nav element.\n *                                      Default 'Posts navigation'.\n * }\n * @return string Markup for posts links.\n *\/"}]},"the_posts_navigation":{"name":"the_posts_navigation","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the navigation to next\/previous set of posts, when applicable.\n *\n * @since 4.1.0\n *\n * @param array $args Optional. See get_the_posts_navigation() for available arguments.\n *                    Default empty array.\n *\/"}]},"get_the_posts_pagination":{"name":"get_the_posts_pagination","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a paginated navigation to next\/previous set of posts, when applicable.\n *\n * @since 4.1.0\n *\n * @param array $args {\n *     Optional. Default pagination arguments, see paginate_links().\n *\n *     @type string $screen_reader_text Screen reader text for navigation element.\n *                                      Default 'Posts navigation'.\n * }\n * @return string Markup for pagination links.\n *\/"}]},"the_posts_pagination":{"name":"the_posts_pagination","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays a paginated navigation to next\/previous set of posts, when applicable.\n *\n * @since 4.1.0\n *\n * @param array $args Optional. See get_the_posts_pagination() for available arguments.\n *                    Default empty array.\n *\/"}]},"_navigation_markup":{"name":"_navigation_markup","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$links","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$class","rank":1,"variadic":false,"reference":false,"default":"'posts-navigation'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$screen_reader_text","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Wraps passed links in navigational markup.\n *\n * @since 4.1.0\n * @access private\n *\n * @param string $links              Navigational links.\n * @param string $class              Optional. Custom class for nav element. Default: 'posts-navigation'.\n * @param string $screen_reader_text Optional. Screen reader text for nav element. Default: 'Posts navigation'.\n * @return string Navigation template tag.\n *\/"}]},"get_comments_pagenum_link":{"name":"get_comments_pagenum_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$pagenum","rank":0,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_page","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the comments page number link.\n *\n * @since 2.7.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param int $pagenum  Optional. Page number. Default 1.\n * @param int $max_page Optional. The maximum number of comment pages. Default 0.\n * @return string The comments page number link URL.\n *\/"}]},"get_next_comments_link":{"name":"get_next_comments_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$label","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_page","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the link to the next comments page.\n *\n * @since 2.7.1\n *\n * @global WP_Query $wp_query\n *\n * @param string $label    Optional. Label for link text. Default empty.\n * @param int    $max_page Optional. Max page. Default 0.\n * @return string|void HTML-formatted link for the next page of comments.\n *\/"}]},"next_comments_link":{"name":"next_comments_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$label","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_page","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the link to the next comments page.\n *\n * @since 2.7.0\n *\n * @param string $label    Optional. Label for link text. Default empty.\n * @param int    $max_page Optional. Max page. Default 0.\n *\/"}]},"get_previous_comments_link":{"name":"get_previous_comments_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$label","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the link to the previous comments page.\n *\n * @since 2.7.1\n *\n * @param string $label Optional. Label for comments link text. Default empty.\n * @return string|void HTML-formatted link for the previous page of comments.\n *\/"}]},"previous_comments_link":{"name":"previous_comments_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$label","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the link to the previous comments page.\n *\n * @since 2.7.0\n *\n * @param string $label Optional. Label for comments link text. Default empty.\n *\/"}]},"paginate_comments_links":{"name":"paginate_comments_links","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays or retrieves pagination links for the comments on the current post.\n *\n * @see paginate_links()\n * @since 2.7.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param string|array $args Optional args. See paginate_links(). Default empty array.\n * @return string|void Markup for pagination links.\n *\/"}]},"get_the_comments_navigation":{"name":"get_the_comments_navigation","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves navigation to next\/previous set of comments, when applicable.\n *\n * @since 4.4.0\n *\n * @param array $args {\n *     Optional. Default comments navigation arguments.\n *\n *     @type string $prev_text          Anchor text to display in the previous comments link.\n *                                      Default 'Older comments'.\n *     @type string $next_text          Anchor text to display in the next comments link.\n *                                      Default 'Newer comments'.\n *     @type string $screen_reader_text Screen reader text for nav element. Default 'Comments navigation'.\n * }\n * @return string Markup for comments links.\n *\/"}]},"the_comments_navigation":{"name":"the_comments_navigation","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays navigation to next\/previous set of comments, when applicable.\n *\n * @since 4.4.0\n *\n * @param array $args See get_the_comments_navigation() for available arguments. Default empty array.\n *\/"}]},"get_the_comments_pagination":{"name":"get_the_comments_pagination","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a paginated navigation to next\/previous set of comments, when applicable.\n *\n * @since 4.4.0\n *\n * @see paginate_comments_links()\n *\n * @param array $args {\n *     Optional. Default pagination arguments.\n *\n *     @type string $screen_reader_text Screen reader text for nav element. Default 'Comments navigation'.\n * }\n * @return string Markup for pagination links.\n *\/"}]},"the_comments_pagination":{"name":"the_comments_pagination","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays a paginated navigation to next\/previous set of comments, when applicable.\n *\n * @since 4.4.0\n *\n * @param array $args See get_the_comments_pagination() for available arguments. Default empty array.\n *\/"}]},"get_shortcut_link":{"name":"get_shortcut_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the Press This bookmarklet link.\n *\n * @since 2.6.0\n *\n * @global bool          $is_IE      Whether the browser matches an Internet Explorer user agent.\n *\/"}]},"get_home_url":{"name":"get_home_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL for a given site where the front end is accessible.\n *\n * Returns the 'home' option with the appropriate protocol. The protocol will be 'https'\n * if is_ssl() evaluates to true; otherwise, it will be the same as the 'home' option.\n * If `$scheme` is 'http' or 'https', is_ssl() is overridden.\n *\n * @since 3.0.0\n *\n * @global string $pagenow\n *\n * @param  int         $blog_id Optional. Site ID. Default null (current site).\n * @param  string      $path    Optional. Path relative to the home URL. Default empty.\n * @param  string|null $scheme  Optional. Scheme to give the home URL context. Accepts\n *                              'http', 'https', 'relative', 'rest', or null. Default null.\n * @return string Home URL link with optional path appended.\n *\/"}]},"get_site_url":{"name":"get_site_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL for a given site where WordPress application files\n * (e.g. wp-blog-header.php or the wp-admin\/ folder) are accessible.\n *\n * Returns the 'site_url' option with the appropriate protocol, 'https' if\n * is_ssl() and 'http' otherwise. If `$scheme` is 'http' or 'https',\n * `is_ssl()` is overridden.\n *\n * @since 3.0.0\n *\n * @param int    $blog_id Optional. Site ID. Default null (current site).\n * @param string $path    Optional. Path relative to the site URL. Default empty.\n * @param string $scheme  Optional. Scheme to give the site URL context. Accepts\n *                        'http', 'https', 'login', 'login_post', 'admin', or\n *                        'relative'. Default null.\n * @return string Site URL link with optional path appended.\n *\/"}]},"get_admin_url":{"name":"get_admin_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":2,"variadic":false,"reference":false,"default":"'admin'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL to the admin area for a given site.\n *\n * @since 3.0.0\n *\n * @param int    $blog_id Optional. Site ID. Default null (current site).\n * @param string $path    Optional. Path relative to the admin URL. Default empty.\n * @param string $scheme  Optional. The scheme to use. Accepts 'http' or 'https',\n *                        to force those schemes. Default 'admin', which obeys\n *                        force_ssl_admin() and is_ssl().\n * @return string Admin URL link with optional path appended.\n *\/"}]},"content_url":{"name":"content_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL to the content directory.\n *\n * @since 2.6.0\n *\n * @param string $path Optional. Path relative to the content URL. Default empty.\n * @return string Content URL link with optional path appended.\n *\/"}]},"plugins_url":{"name":"plugins_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$plugin","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a URL within the plugins or mu-plugins directory.\n *\n * Defaults to the plugins directory URL if no arguments are supplied.\n *\n * @since 2.6.0\n *\n * @param  string $path   Optional. Extra path appended to the end of the URL, including\n *                        the relative directory if $plugin is supplied. Default empty.\n * @param  string $plugin Optional. A full path to a file inside a plugin or mu-plugin.\n *                        The URL will be relative to its directory. Default empty.\n *                        Typically this is done by passing `__FILE__` as the argument.\n * @return string Plugins URL link with optional paths appended.\n *\/"}]},"network_site_url":{"name":"network_site_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the site URL for the current network.\n *\n * Returns the site URL with the appropriate protocol, 'https' if\n * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is\n * overridden.\n *\n * @since 3.0.0\n *\n * @see set_url_scheme()\n *\n * @param string $path   Optional. Path relative to the site URL. Default empty.\n * @param string $scheme Optional. Scheme to give the site URL context. Accepts\n *                       'http', 'https', or 'relative'. Default null.\n * @return string Site URL link with optional path appended.\n *\/"}]},"network_home_url":{"name":"network_home_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the home URL for the current network.\n *\n * Returns the home URL with the appropriate protocol, 'https' is_ssl()\n * and 'http' otherwise. If `$scheme` is 'http' or 'https', `is_ssl()` is\n * overridden.\n *\n * @since 3.0.0\n *\n * @param  string $path   Optional. Path relative to the home URL. Default empty.\n * @param  string $scheme Optional. Scheme to give the home URL context. Accepts\n *                        'http', 'https', or 'relative'. Default null.\n * @return string Home URL link with optional path appended.\n *\/"}]},"network_admin_url":{"name":"network_admin_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":1,"variadic":false,"reference":false,"default":"'admin'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL to the admin area for the network.\n *\n * @since 3.0.0\n *\n * @param string $path   Optional path relative to the admin URL. Default empty.\n * @param string $scheme Optional. The scheme to use. Default is 'admin', which obeys force_ssl_admin()\n *                       and is_ssl(). 'http' or 'https' can be passed to force those schemes.\n * @return string Admin URL link with optional path appended.\n *\/"}]},"user_admin_url":{"name":"user_admin_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":1,"variadic":false,"reference":false,"default":"'admin'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL to the admin area for the current user.\n *\n * @since 3.0.0\n *\n * @param string $path   Optional. Path relative to the admin URL. Default empty.\n * @param string $scheme Optional. The scheme to use. Default is 'admin', which obeys force_ssl_admin()\n *                       and is_ssl(). 'http' or 'https' can be passed to force those schemes.\n * @return string Admin URL link with optional path appended.\n *\/"}]},"self_admin_url":{"name":"self_admin_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":1,"variadic":false,"reference":false,"default":"'admin'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL to the admin area for either the current site or the network depending on context.\n *\n * @since 3.1.0\n *\n * @param string $path   Optional. Path relative to the admin URL. Default empty.\n * @param string $scheme Optional. The scheme to use. Default is 'admin', which obeys force_ssl_admin()\n *                       and is_ssl(). 'http' or 'https' can be passed to force those schemes.\n * @return string Admin URL link with optional path appended.\n *\/"}]},"set_url_scheme":{"name":"set_url_scheme","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sets the scheme for a URL.\n *\n * @since 3.4.0\n * @since 4.4.0 The 'rest' scheme was added.\n *\n * @param string      $url    Absolute URL that includes a scheme\n * @param string|null $scheme Optional. Scheme to give $url. Currently 'http', 'https', 'login',\n *                            'login_post', 'admin', 'relative', 'rest', 'rpc', or null. Default null.\n * @return string $url URL with chosen scheme.\n *\/"}]},"get_dashboard_url":{"name":"get_dashboard_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":2,"variadic":false,"reference":false,"default":"'admin'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL to the user's dashboard.\n *\n * If a user does not belong to any site, the global user dashboard is used. If the user\n * belongs to the current site, the dashboard for the current site is returned. If the user\n * cannot edit the current site, the dashboard to the user's primary site is returned.\n *\n * @since 3.1.0\n *\n * @param int    $user_id Optional. User ID. Defaults to current user.\n * @param string $path    Optional path relative to the dashboard. Use only paths known to\n *                        both site and user admins. Default empty.\n * @param string $scheme  The scheme to use. Default is 'admin', which obeys force_ssl_admin()\n *                        and is_ssl(). 'http' or 'https' can be passed to force those schemes.\n * @return string Dashboard URL link with optional path appended.\n *\/"}]},"get_edit_profile_url":{"name":"get_edit_profile_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":1,"variadic":false,"reference":false,"default":"'admin'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL to the user's profile editor.\n *\n * @since 3.1.0\n *\n * @param int    $user_id Optional. User ID. Defaults to current user.\n * @param string $scheme  Optional. The scheme to use. Default is 'admin', which obeys force_ssl_admin()\n *                        and is_ssl(). 'http' or 'https' can be passed to force those schemes.\n * @return string Dashboard URL link with optional path appended.\n *\/"}]},"wp_get_canonical_url":{"name":"wp_get_canonical_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the canonical URL for a post.\n *\n * When the post is the same as the current requested page the function will handle the\n * pagination arguments too.\n *\n * @since 4.6.0\n *\n * @param int|WP_Post $post Optional. Post ID or object. Default is global `$post`.\n * @return string|false The canonical URL, or false if the post does not exist or has not\n *                      been published yet.\n *\/"}]},"rel_canonical":{"name":"rel_canonical","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs rel=canonical for singular queries.\n *\n * @since 2.9.0\n * @since 4.6.0 Adjusted to use wp_get_canonical_url().\n *\/"}]},"wp_get_shortlink":{"name":"wp_get_shortlink","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"'post'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allow_slugs","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns a shortlink for a post, page, attachment, or site.\n *\n * This function exists to provide a shortlink tag that all themes and plugins can target.\n * A plugin must hook in to provide the actual shortlinks. Default shortlink support is\n * limited to providing ?p= style links for posts. Plugins can short-circuit this function\n * via the {@see 'pre_get_shortlink'} filter or filter the output via the {@see 'get_shortlink'}\n * filter.\n *\n * @since 3.0.0.\n *\n * @param int    $id          Optional. A post or site id. Default is 0, which means the current post or site.\n * @param string $context     Optional. Whether the id is a 'site' id, 'post' id, or 'media' id. If 'post',\n *                            the post_type of the post is consulted. If 'query', the current query is consulted\n *                            to determine the id and context. Default 'post'.\n * @param bool   $allow_slugs Optional. Whether to allow post slugs in the shortlink. It is up to the plugin how\n *                            and whether to honor this. Default true.\n * @return string A shortlink or an empty string if no shortlink exists for the requested resource or if shortlinks\n *                are not enabled.\n *\/"}]},"wp_shortlink_wp_head":{"name":"wp_shortlink_wp_head","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Injects rel=shortlink into the head if a shortlink is defined for the current page.\n *\n * Attached to the {@see 'wp_head'} action.\n *\n * @since 3.0.0\n *\/"}]},"wp_shortlink_header":{"name":"wp_shortlink_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sends a Link: rel=shortlink header if a shortlink is defined for the current page.\n *\n * Attached to the {@see 'wp'} action.\n *\n * @since 3.0.0\n *\/"}]},"the_shortlink":{"name":"the_shortlink","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the shortlink for a post.\n *\n * Must be called from inside \"The Loop\"\n *\n * Call like the_shortlink( __( 'Shortlinkage FTW' ) )\n *\n * @since 3.0.0\n *\n * @param string $text   Optional The link text or HTML to be displayed. Defaults to 'This is the short link.'\n * @param string $title  Optional The tooltip for the link. Must be sanitized. Defaults to the sanitized post title.\n * @param string $before Optional HTML to display before the link. Default empty.\n * @param string $after  Optional HTML to display after the link. Default empty.\n *\/"}]},"get_avatar_url":{"name":"get_avatar_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id_or_email","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the avatar URL.\n *\n * @since 4.2.0\n *\n * @param mixed $id_or_email The Gravatar to retrieve a URL for. Accepts a user_id, gravatar md5 hash,\n *                           user email, WP_User object, WP_Post object, or WP_Comment object.\n * @param array $args {\n *     Optional. Arguments to return instead of the default arguments.\n *\n *     @type int    $size           Height and width of the avatar in pixels. Default 96.\n *     @type string $default        URL for the default image or a default type. Accepts '404' (return\n *                                  a 404 instead of a default image), 'retro' (8bit), 'monsterid' (monster),\n *                                  'wavatar' (cartoon face), 'indenticon' (the \"quilt\"), 'mystery', 'mm',\n *                                  or 'mysteryman' (The Oyster Man), 'blank' (transparent GIF), or\n *                                  'gravatar_default' (the Gravatar logo). Default is the value of the\n *                                  'avatar_default' option, with a fallback of 'mystery'.\n *     @type bool   $force_default  Whether to always show the default image, never the Gravatar. Default false.\n *     @type string $rating         What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are\n *                                  judged in that order. Default is the value of the 'avatar_rating' option.\n *     @type string $scheme         URL scheme to use. See set_url_scheme() for accepted values.\n *                                  Default null.\n *     @type array  $processed_args When the function returns, the value will be the processed\/sanitized $args\n *                                  plus a \"found_avatar\" guess. Pass as a reference. Default null.\n * }\n * @return false|string The URL of the avatar we found, or false if we couldn't find an avatar.\n *\/"}]},"get_avatar_data":{"name":"get_avatar_data","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id_or_email","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves default data about the avatar.\n *\n * @since 4.2.0\n *\n * @param mixed $id_or_email The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,\n *                            user email, WP_User object, WP_Post object, or WP_Comment object.\n * @param array $args {\n *     Optional. Arguments to return instead of the default arguments.\n *\n *     @type int    $size           Height and width of the avatar image file in pixels. Default 96.\n *     @type int    $height         Display height of the avatar in pixels. Defaults to $size.\n *     @type int    $width          Display width of the avatar in pixels. Defaults to $size.\n *     @type string $default        URL for the default image or a default type. Accepts '404' (return\n *                                  a 404 instead of a default image), 'retro' (8bit), 'monsterid' (monster),\n *                                  'wavatar' (cartoon face), 'indenticon' (the \"quilt\"), 'mystery', 'mm',\n *                                  or 'mysteryman' (The Oyster Man), 'blank' (transparent GIF), or\n *                                  'gravatar_default' (the Gravatar logo). Default is the value of the\n *                                  'avatar_default' option, with a fallback of 'mystery'.\n *     @type bool   $force_default  Whether to always show the default image, never the Gravatar. Default false.\n *     @type string $rating         What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are\n *                                  judged in that order. Default is the value of the 'avatar_rating' option.\n *     @type string $scheme         URL scheme to use. See set_url_scheme() for accepted values.\n *                                  Default null.\n *     @type array  $processed_args When the function returns, the value will be the processed\/sanitized $args\n *                                  plus a \"found_avatar\" guess. Pass as a reference. Default null.\n *     @type string $extra_attr     HTML attributes to insert in the IMG element. Is not sanitized. Default empty.\n * }\n * @return array $processed_args {\n *     Along with the arguments passed in `$args`, this will contain a couple of extra arguments.\n *\n *     @type bool   $found_avatar True if we were able to find an avatar for this user,\n *                                false or not set if we couldn't.\n *     @type string $url          The URL of the avatar we found.\n * }\n *\/"}]},"get_theme_file_uri":{"name":"get_theme_file_uri","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL of a file in the theme.\n *\n * Searches in the stylesheet directory before the template directory so themes\n * which inherit from a parent theme can just override one file.\n *\n * @since 4.7.0\n *\n * @param string $file Optional. File to search for in the stylesheet directory.\n * @return string The URL of the file.\n *\/"}]},"get_parent_theme_file_uri":{"name":"get_parent_theme_file_uri","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL of a file in the parent theme.\n *\n * @since 4.7.0\n *\n * @param string $file Optional. File to return the URL for in the template directory.\n * @return string The URL of the file.\n *\/"}]},"get_theme_file_path":{"name":"get_theme_file_path","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the path of a file in the theme.\n *\n * Searches in the stylesheet directory before the template directory so themes\n * which inherit from a parent theme can just override one file.\n *\n * @since 4.7.0\n *\n * @param string $file Optional. File to search for in the stylesheet directory.\n * @return string The path of the file.\n *\/"}]},"get_parent_theme_file_path":{"name":"get_parent_theme_file_path","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the path of a file in the parent theme.\n *\n * @since 4.7.0\n *\n * @param string $file Optional. File to return the path for in the template directory.\n * @return string The path of the file.\n *\/"}]},"is_subdomain_install":{"name":"is_subdomain_install","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether a subdomain configuration is enabled.\n *\n * @since 3.0.0\n *\n * @return bool True if subdomain configuration is enabled, false otherwise.\n *\/"},{"phpdoc":"\/**\n * These functions are needed to load Multisite.\n *\n * @since 3.0.0\n *\n * @package WordPress\n * @subpackage Multisite\n *\/"}]},"wp_get_active_network_plugins":{"name":"wp_get_active_network_plugins","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns array of network plugin files to be included in global scope.\n *\n * The default directory is wp-content\/plugins. To change the default directory\n * manually, define `WP_PLUGIN_DIR` and `WP_PLUGIN_URL` in `wp-config.php`.\n *\n * @access private\n * @since 3.1.0\n *\n * @return array Files to include.\n *\/"}]},"ms_site_check":{"name":"ms_site_check","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks status of current blog.\n *\n * Checks if the blog is deleted, inactive, archived, or spammed.\n *\n * Dies with a default message if the blog does not pass the check.\n *\n * To change the default message when a blog does not pass the check,\n * use the wp-content\/blog-deleted.php, blog-inactive.php and\n * blog-suspended.php drop-ins.\n *\n * @since 3.0.0\n *\n * @return true|string Returns true on success, or drop-in file to include.\n *\/"}]},"get_network_by_path":{"name":"get_network_by_path","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$segments","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the closest matching network for a domain and path.\n *\n * @since 3.9.0\n *\n * @internal In 4.4.0, converted to a wrapper for WP_Network::get_by_path()\n *\n * @param string   $domain   Domain to check.\n * @param string   $path     Path to check.\n * @param int|null $segments Path segments to use. Defaults to null, or the full path.\n * @return WP_Network|false Network object if successful. False when no network is found.\n *\/"}]},"get_site_by_path":{"name":"get_site_by_path","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$segments","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the closest matching site object by its domain and path.\n * \n * This will not necessarily return an exact match for a domain and path. Instead, it\n * breaks the domain and path into pieces that are then used to match the closest\n * possibility from a query.\n *\n * The intent of this method is to match a site object during bootstrap for a\n * requested site address\n *\n * @since 3.9.0\n * @since 4.7.0 Updated to always return a `WP_Site` object.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string   $domain   Domain to check.\n * @param string   $path     Path to check.\n * @param int|null $segments Path segments to use. Defaults to null, or the full path.\n * @return WP_Site|false Site object if successful. False when no site is found.\n *\/"}]},"ms_load_current_site_and_network":{"name":"ms_load_current_site_and_network","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$subdomain","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Identifies the network and site of a requested domain and path and populates the\n * corresponding network and site global objects as part of the multisite bootstrap process.\n *\n * Prior to 4.6.0, this was a procedural block in `ms-settings.php`. It was wrapped into\n * a function to facilitate unit tests. It should not be used outside of core.\n *\n * Usually, it's easier to query the site first, which then declares its network.\n * In limited situations, we either can or must find the network first.\n *\n * If a network and site are found, a `true` response will be returned so that the\n * request can continue.\n *\n * If neither a network or site is found, `false` or a URL string will be returned\n * so that either an error can be shown or a redirect can occur.\n *\n * @since 4.6.0\n * @access private\n *\n * @global wpdb       $wpdb         WordPress database abstraction object.\n * @global WP_Network $current_site The current network.\n * @global WP_Site    $current_blog The current site.\n *\n * @param string $domain    The requested domain.\n * @param string $path      The requested path.\n * @param bool   $subdomain Optional. Whether a subdomain (true) or subdirectory (false) configuration.\n *                          Default false.\n * @return bool|string True if bootstrap successfully populated `$current_blog` and `$current_site`.\n *                     False if bootstrap could not be properly completed.\n *                     Redirect URL if parts exist, but the request as a whole can not be fulfilled.\n *\/"}]},"ms_not_installed":{"name":"ms_not_installed","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays a failure message.\n *\n * Used when a blog's tables do not exist. Checks for a missing $wpdb->site table as well.\n *\n * @access private\n * @since 3.0.0\n * @since 4.4.0 The `$domain` and `$path` parameters were added.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $domain The requested domain for the error to reference.\n * @param string $path   The requested path for the error to reference.\n *\/"}]},"get_current_site_name":{"name":"get_current_site_name","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$current_site","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * This deprecated function formerly set the site_name property of the $current_site object.\n *\n * This function simply returns the object, as before.\n * The bootstrap takes care of setting site_name.\n *\n * @access private\n * @since 3.0.0\n * @deprecated 3.9.0 Use get_current_site() instead.\n *\n * @param object $current_site\n * @return object\n *\/"}]},"wpmu_current_site":{"name":"wpmu_current_site","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * This deprecated function managed much of the site and network loading in multisite.\n *\n * The current bootstrap code is now responsible for parsing the site and network load as\n * well as setting the global $current_site object.\n *\n * @access private\n * @since 3.0.0\n * @deprecated 3.9.0\n *\n * @global object $current_site\n *\n * @return object\n *\/"}]},"wp_get_network":{"name":"wp_get_network","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$network","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve an object containing information about the requested network.\n *\n * @since 3.9.0\n * @deprecated 4.7.0 Use `get_network()`\n * @see get_network()\n *\n * @internal In 4.6.0, converted to use get_network()\n *\n * @param object|int $network The network's database row or ID.\n * @return WP_Network|false Object containing network information if found, false if not.\n *\/"}]},"wp_is_mobile":{"name":"wp_is_mobile","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Test if the current browser runs on a mobile device (smart phone, tablet, etc.)\n *\n * @return bool\n *\/"}]},"wp_embed_register_handler":{"name":"wp_embed_register_handler","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$regex","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$priority","rank":3,"variadic":false,"reference":false,"default":"10","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers an embed handler.\n *\n * Should probably only be used for sites that do not support oEmbed.\n *\n * @since 2.9.0\n *\n * @global WP_Embed $wp_embed\n *\n * @param string   $id       An internal ID\/name for the handler. Needs to be unique.\n * @param string   $regex    The regex that will be used to see if this handler should be used for a URL.\n * @param callable $callback The callback function that will be called if the regex is matched.\n * @param int      $priority Optional. Used to specify the order in which the registered handlers will\n *                           be tested. Default 10.\n *\/"},{"phpdoc":"\/**\n * oEmbed API: Top-level oEmbed functionality\n *\n * @package WordPress\n * @subpackage oEmbed\n * @since 4.4.0\n *\/"}]},"wp_embed_unregister_handler":{"name":"wp_embed_unregister_handler","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$priority","rank":1,"variadic":false,"reference":false,"default":"10","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Unregisters a previously-registered embed handler.\n *\n * @since 2.9.0\n *\n * @global WP_Embed $wp_embed\n *\n * @param string $id       The handler ID that should be removed.\n * @param int    $priority Optional. The priority of the handler to be removed. Default 10.\n *\/"}]},"wp_embed_defaults":{"name":"wp_embed_defaults","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates default array of embed parameters.\n *\n * The width defaults to the content width as specified by the theme. If the\n * theme does not specify a content width, then 500px is used.\n *\n * The default height is 1.5 times the width, or 1000px, whichever is smaller.\n *\n * The {@see 'embed_defaults'} filter can be used to adjust either of these values.\n *\n * @since 2.9.0\n *\n * @global int $content_width\n *\n * @param string $url Optional. The URL that should be embedded. Default empty.\n *\n * @return array Default embed parameters.\n *\/"}]},"wp_oembed_get":{"name":"wp_oembed_get","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Attempts to fetch the embed HTML for a provided URL using oEmbed.\n *\n * @since 2.9.0\n *\n * @see WP_oEmbed\n *\n * @param string $url  The URL that should be embedded.\n * @param array  $args Optional. Additional arguments and parameters for retrieving embed HTML.\n *                     Default empty.\n * @return false|string False on failure or the embed HTML on success.\n *\/"}]},"_wp_oembed_get_object":{"name":"_wp_oembed_get_object","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the initialized WP_oEmbed object.\n *\n * @since 2.9.0\n * @access private\n *\n * @staticvar WP_oEmbed $wp_oembed\n *\n * @return WP_oEmbed object.\n *\/"}]},"wp_oembed_add_provider":{"name":"wp_oembed_add_provider","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$format","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$provider","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$regex","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds a URL format and oEmbed provider URL pair.\n *\n * @since 2.9.0\n *\n * @see WP_oEmbed\n *\n * @param string  $format   The format of URL that this provider can handle. You can use asterisks\n *                          as wildcards.\n * @param string  $provider The URL to the oEmbed provider.\n * @param boolean $regex    Optional. Whether the `$format` parameter is in a RegEx format. Default false.\n *\/"}]},"wp_oembed_remove_provider":{"name":"wp_oembed_remove_provider","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$format","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes an oEmbed provider.\n *\n * @since 3.5.0\n *\n * @see WP_oEmbed\n *\n * @param string $format The URL format for the oEmbed provider to remove.\n * @return bool Was the provider removed successfully?\n *\/"}]},"wp_maybe_load_embeds":{"name":"wp_maybe_load_embeds","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines if default embed handlers should be loaded.\n *\n * Checks to make sure that the embeds library hasn't already been loaded. If\n * it hasn't, then it will load the embeds library.\n *\n * @since 2.9.0\n *\n * @see wp_embed_register_handler()\n *\/"}]},"wp_embed_handler_youtube":{"name":"wp_embed_handler_youtube","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attr","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$rawattr","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * YouTube iframe embed handler callback.\n *\n * Catches YouTube iframe embed URLs that are not parsable by oEmbed but can be translated into a URL that is.\n *\n * @since 4.0.0\n *\n * @global WP_Embed $wp_embed\n *\n * @param array  $matches The RegEx matches from the provided regex when calling\n *                        wp_embed_register_handler().\n * @param array  $attr    Embed attributes.\n * @param string $url     The original URL that was matched by the regex.\n * @param array  $rawattr The original unmodified attributes.\n * @return string The embed HTML.\n *\/"}]},"wp_embed_handler_audio":{"name":"wp_embed_handler_audio","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attr","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$rawattr","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Audio embed handler callback.\n *\n * @since 3.6.0\n *\n * @param array  $matches The RegEx matches from the provided regex when calling wp_embed_register_handler().\n * @param array  $attr Embed attributes.\n * @param string $url The original URL that was matched by the regex.\n * @param array  $rawattr The original unmodified attributes.\n * @return string The embed HTML.\n *\/"}]},"wp_embed_handler_video":{"name":"wp_embed_handler_video","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attr","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$rawattr","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Video embed handler callback.\n *\n * @since 3.6.0\n *\n * @param array  $matches The RegEx matches from the provided regex when calling wp_embed_register_handler().\n * @param array  $attr    Embed attributes.\n * @param string $url     The original URL that was matched by the regex.\n * @param array  $rawattr The original unmodified attributes.\n * @return string The embed HTML.\n *\/"}]},"wp_oembed_register_route":{"name":"wp_oembed_register_route","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers the oEmbed REST API route.\n *\n * @since 4.4.0\n *\/"}]},"wp_oembed_add_discovery_links":{"name":"wp_oembed_add_discovery_links","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds oEmbed discovery links in the website <head>.\n *\n * @since 4.4.0\n *\/"}]},"wp_oembed_add_host_js":{"name":"wp_oembed_add_host_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds the necessary JavaScript to communicate with the embedded iframes.\n *\n * @since 4.4.0\n *\/"}]},"get_post_embed_url":{"name":"get_post_embed_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the URL to embed a specific post in an iframe.\n *\n * @since 4.4.0\n *\n * @param int|WP_Post $post Optional. Post ID or object. Defaults to the current post.\n * @return string|false The post embed URL on success, false if the post doesn't exist.\n *\/"}]},"get_oembed_endpoint_url":{"name":"get_oembed_endpoint_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$permalink","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$format","rank":1,"variadic":false,"reference":false,"default":"'json'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the oEmbed endpoint URL for a given permalink.\n *\n * Pass an empty string as the first argument to get the endpoint base URL.\n *\n * @since 4.4.0\n *\n * @param string $permalink Optional. The permalink used for the `url` query arg. Default empty.\n * @param string $format    Optional. The requested response format. Default 'json'.\n * @return string The oEmbed endpoint URL.\n *\/"}]},"get_post_embed_html":{"name":"get_post_embed_html","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$width","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$height","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the embed code for a specific post.\n *\n * @since 4.4.0\n *\n * @param int         $width  The width for the response.\n * @param int         $height The height for the response.\n * @param int|WP_Post $post   Optional. Post ID or object. Default is global `$post`.\n * @return string|false Embed code on success, false if post doesn't exist.\n *\/"}]},"get_oembed_response_data":{"name":"get_oembed_response_data","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$width","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the oEmbed response data for a given post.\n *\n * @since 4.4.0\n *\n * @param WP_Post|int $post  Post object or ID.\n * @param int         $width The requested width.\n * @return array|false Response data on success, false if post doesn't exist.\n *\/"}]},"get_oembed_response_data_rich":{"name":"get_oembed_response_data_rich","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$width","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$height","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters the oEmbed response data to return an iframe embed code.\n *\n * @since 4.4.0\n *\n * @param array   $data   The response data.\n * @param WP_Post $post   The post object.\n * @param int     $width  The requested width.\n * @param int     $height The calculated height.\n * @return array The modified response data.\n *\/"}]},"wp_oembed_ensure_format":{"name":"wp_oembed_ensure_format","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$format","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Ensures that the specified format is either 'json' or 'xml'.\n *\n * @since 4.4.0\n *\n * @param string $format The oEmbed response format. Accepts 'json' or 'xml'.\n * @return string The format, either 'xml' or 'json'. Default 'json'.\n *\/"}]},"_oembed_rest_pre_serve_request":{"name":"_oembed_rest_pre_serve_request","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$served","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$result","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$server","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Hooks into the REST API output to print XML instead of JSON.\n *\n * This is only done for the oEmbed API endpoint,\n * which supports both formats.\n *\n * @access private\n * @since 4.4.0\n *\n * @param bool                      $served  Whether the request has already been served.\n * @param WP_HTTP_ResponseInterface $result  Result to send to the client. Usually a WP_REST_Response.\n * @param WP_REST_Request           $request Request used to generate the response.\n * @param WP_REST_Server            $server  Server instance.\n * @return true\n *\/"}]},"_oembed_create_xml":{"name":"_oembed_create_xml","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$node","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates an XML string from a given array.\n *\n * @since 4.4.0\n * @access private\n *\n * @param array            $data The original oEmbed response data.\n * @param SimpleXMLElement $node Optional. XML node to append the result to recursively.\n * @return string|false XML string on success, false on error.\n *\/"}]},"wp_filter_oembed_result":{"name":"wp_filter_oembed_result","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$result","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters the given oEmbed HTML.\n *\n * If the `$url` isn't on the trusted providers list,\n * we need to filter the HTML heavily for security.\n *\n * Only filters 'rich' and 'html' response types.\n *\n * @since 4.4.0\n *\n * @param string $result The oEmbed HTML result.\n * @param object $data   A data object result from an oEmbed provider.\n * @param string $url    The URL of the content to be embedded.\n * @return string The filtered and sanitized oEmbed result.\n *\/"}]},"wp_embed_excerpt_more":{"name":"wp_embed_excerpt_more","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$more_string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters the string in the 'more' link displayed after a trimmed excerpt.\n *\n * Replaces '[...]' (appended to automatically generated excerpts) with an\n * ellipsis and a \"Continue reading\" link in the embed template.\n *\n * @since 4.4.0\n *\n * @param string $more_string Default 'more' string.\n * @return string 'Continue reading' link prepended with an ellipsis.\n *\/"}]},"the_excerpt_embed":{"name":"the_excerpt_embed","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the post excerpt for the embed template.\n *\n * Intended to be used in 'The Loop'.\n *\n * @since 4.4.0\n *\/"}]},"wp_embed_excerpt_attachment":{"name":"wp_embed_excerpt_attachment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters the post excerpt for the embed template.\n *\n * Shows players for video and audio attachments.\n *\n * @since 4.4.0\n *\n * @param string $content The current post excerpt.\n * @return string The modified post excerpt.\n *\/"}]},"enqueue_embed_scripts":{"name":"enqueue_embed_scripts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueue embed iframe default CSS and JS & fire do_action('enqueue_embed_scripts')\n *\n * Enqueue PNG fallback CSS for embed iframe for legacy versions of IE.\n *\n * Allows plugins to queue scripts for the embed iframe end using wp_enqueue_script().\n * Runs first in oembed_head().\n *\n * @since 4.4.0\n *\/"}]},"print_embed_styles":{"name":"print_embed_styles","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints the CSS in the embed iframe header.\n *\n * @since 4.4.0\n *\/"}]},"print_embed_scripts":{"name":"print_embed_scripts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints the JavaScript in the embed iframe header.\n *\n * @since 4.4.0\n *\/"}]},"_oembed_filter_feed_content":{"name":"_oembed_filter_feed_content","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prepare the oembed HTML to be displayed in an RSS feed.\n *\n * @since 4.4.0\n * @access private\n *\n * @param string $content The content to filter.\n * @return string The filtered content.\n *\/"}]},"print_embed_comments_button":{"name":"print_embed_comments_button","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints the necessary markup for the embed comments button.\n *\n * @since 4.4.0\n *\/"}]},"print_embed_sharing_button":{"name":"print_embed_sharing_button","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints the necessary markup for the embed sharing button.\n *\n * @since 4.4.0\n *\/"}]},"print_embed_sharing_dialog":{"name":"print_embed_sharing_dialog","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints the necessary markup for the embed sharing dialog.\n *\n * @since 4.4.0\n *\/"}]},"the_embed_site_title":{"name":"the_embed_site_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints the necessary markup for the site title in an embed template.\n *\n * @since 4.5.0\n *\/"}]},"wp_filter_pre_oembed_result":{"name":"wp_filter_pre_oembed_result","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$result","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters the oEmbed result before any HTTP requests are made.\n *\n * If the URL belongs to the current site, the result is fetched directly instead of\n * going through the oEmbed discovery process.\n *\n * @since 4.5.3\n *\n * @param null|string $result The UNSANITIZED (and potentially unsafe) HTML that should be used to embed. Default null.\n * @param string      $url    The URL that should be inspected for discovery `<link>` tags.\n * @param array       $args   oEmbed remote get arguments.\n * @return null|string The UNSANITIZED (and potentially unsafe) HTML that should be used to embed.\n *                     Null if the URL does not belong to the current site.\n *\/"}]},"wp_schedule_single_event":{"name":"wp_schedule_single_event","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$timestamp","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$hook","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Schedules an event to run only once.\n *\n * Schedules an event which will execute once by the WordPress actions core at\n * a time which you specify. The action will fire off when someone visits your\n * WordPress site, if the schedule time has passed.\n *\n * Note that scheduling an event to occur within 10 minutes of an existing event\n * with the same action hook will be ignored unless you pass unique `$args` values\n * for each scheduled event.\n *\n * @since 2.1.0\n * @link https:\/\/codex.wordpress.org\/Function_Reference\/wp_schedule_single_event\n *\n * @param int $timestamp Unix timestamp (UTC) for when to run the event.\n * @param string $hook Action hook to execute when event is run.\n * @param array $args Optional. Arguments to pass to the hook's callback function.\n * @return false|void False if the event does not get scheduled.\n *\/"},{"phpdoc":"\/**\n * WordPress Cron API\n *\n * @package WordPress\n *\/"}]},"wp_schedule_event":{"name":"wp_schedule_event","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$timestamp","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recurrence","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$hook","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Schedule a recurring event.\n *\n * Schedules a hook which will be executed by the WordPress actions core on a\n * specific interval, specified by you. The action will trigger when someone\n * visits your WordPress site, if the scheduled time has passed.\n *\n * Valid values for the recurrence are hourly, daily, and twicedaily. These can\n * be extended using the {@see 'cron_schedules'} filter in wp_get_schedules().\n *\n * Use wp_next_scheduled() to prevent duplicates\n *\n * @since 2.1.0\n *\n * @param int $timestamp Unix timestamp (UTC) for when to run the event.\n * @param string $recurrence How often the event should recur.\n * @param string $hook Action hook to execute when event is run.\n * @param array $args Optional. Arguments to pass to the hook's callback function.\n * @return false|void False if the event does not get scheduled.\n *\/"}]},"wp_reschedule_event":{"name":"wp_reschedule_event","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$timestamp","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recurrence","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$hook","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Reschedule a recurring event.\n *\n * @since 2.1.0\n *\n * @param int $timestamp Unix timestamp (UTC) for when to run the event.\n * @param string $recurrence How often the event should recur.\n * @param string $hook Action hook to execute when event is run.\n * @param array $args Optional. Arguments to pass to the hook's callback function.\n * @return false|void False if the event does not get rescheduled.\n *\/"}]},"wp_unschedule_event":{"name":"wp_unschedule_event","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$timestamp","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$hook","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Unschedule a previously scheduled event.\n *\n * The $timestamp and $hook parameters are required so that the event can be\n * identified.\n *\n * @since 2.1.0\n *\n * @param int $timestamp Unix timestamp (UTC) for when to run the event.\n * @param string $hook Action hook, the execution of which will be unscheduled.\n * @param array $args Arguments to pass to the hook's callback function.\n * Although not passed to a callback function, these arguments are used\n * to uniquely identify the scheduled event, so they should be the same\n * as those used when originally scheduling the event.\n * @return false|void False if the event does not get unscheduled.\n *\/"}]},"wp_clear_scheduled_hook":{"name":"wp_clear_scheduled_hook","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$hook","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Unschedule all events attached to the specified hook.\n *\n * @since 2.1.0\n *\n * @param string $hook Action hook, the execution of which will be unscheduled.\n * @param array $args Optional. Arguments that were to be passed to the hook's callback function.\n *\/"}]},"wp_next_scheduled":{"name":"wp_next_scheduled","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$hook","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the next timestamp for an event.\n *\n * @since 2.1.0\n *\n * @param string $hook Action hook to execute when event is run.\n * @param array $args Optional. Arguments to pass to the hook's callback function.\n * @return false|int The Unix timestamp of the next time the scheduled event will occur.\n *\/"}]},"spawn_cron":{"name":"spawn_cron","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$gmt_time","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sends a request to run cron through HTTP request that doesn't halt page loading.\n *\n * @since 2.1.0\n *\n * @param int $gmt_time Optional. Unix timestamp (UTC). Default 0 (current time is used).\n *\/"}]},"wp_cron":{"name":"wp_cron","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Run scheduled callbacks or spawn cron for all scheduled events.\n *\n * @since 2.1.0\n *\/"}]},"wp_get_schedules":{"name":"wp_get_schedules","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve supported event recurrence schedules.\n *\n * The default supported recurrences are 'hourly', 'twicedaily', and 'daily'. A plugin may\n * add more by hooking into the {@see 'cron_schedules'} filter. The filter accepts an array\n * of arrays. The outer array has a key that is the name of the schedule or for\n * example 'weekly'. The value is an array with two keys, one is 'interval' and\n * the other is 'display'.\n *\n * The 'interval' is a number in seconds of when the cron job should run. So for\n * 'hourly', the time is 3600 or 60*60. For weekly, the value would be\n * 60*60*24*7 or 604800. The value of 'interval' would then be 604800.\n *\n * The 'display' is the description. For the 'weekly' key, the 'display' would\n * be `__( 'Once Weekly' )`.\n *\n * For your plugin, you will be passed an array. you can easily add your\n * schedule by doing the following.\n *\n *     \/\/ Filter parameter variable name is 'array'.\n *     $array['weekly'] = array(\n *         'interval' => 604800,\n *     \t   'display'  => __( 'Once Weekly' )\n *     );\n *\n *\n * @since 2.1.0\n *\n * @return array\n *\/"}]},"wp_get_schedule":{"name":"wp_get_schedule","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$hook","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the recurrence schedule for an event.\n *\n * @see wp_get_schedules() for available schedules.\n *\n * @since 2.1.0\n *\n * @param string $hook Action hook to identify the event.\n * @param array $args Optional. Arguments passed to the event's callback function.\n * @return string|false False, if no schedule. Schedule name on success.\n *\/"}]},"_get_cron_array":{"name":"_get_cron_array","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve cron info array option.\n *\n * @since 2.1.0\n * @access private\n *\n * @return false|array CRON info array.\n *\/"}]},"_set_cron_array":{"name":"_set_cron_array","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$cron","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates the CRON option with the new CRON array.\n *\n * @since 2.1.0\n * @access private\n *\n * @param array $cron Cron info array from _get_cron_array().\n *\/"}]},"_upgrade_cron_array":{"name":"_upgrade_cron_array","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$cron","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Upgrade a Cron info array.\n *\n * This function upgrades the Cron info array to version 2.\n *\n * @since 2.1.0\n * @access private\n *\n * @param array $cron Cron info array from _get_cron_array().\n * @return array An upgraded Cron info array.\n *\/"}]},"get_bookmark":{"name":"get_bookmark","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$bookmark","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"OBJECT","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filter","rank":2,"variadic":false,"reference":false,"default":"'raw'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Link\/Bookmark API\n *\n * @package WordPress\n * @subpackage Bookmark\n *\/"},{"phpdoc":"\/**\n * Retrieve Bookmark data\n *\n * @since 2.1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|stdClass $bookmark\n * @param string $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                       an stdClass object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @param string $filter Optional, default is 'raw'.\n * @return array|object|null Type returned depends on $output value.\n *\/"}]},"get_bookmark_field":{"name":"get_bookmark_field","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$field","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$bookmark","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":2,"variadic":false,"reference":false,"default":"'display'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve single bookmark data item or field.\n *\n * @since 2.3.0\n *\n * @param string $field The name of the data field to return\n * @param int $bookmark The bookmark ID to get field\n * @param string $context Optional. The context of how the field will be used.\n * @return string|WP_Error\n *\/"}]},"get_bookmarks":{"name":"get_bookmarks","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the list of bookmarks\n *\n * Attempts to retrieve from the cache first based on MD5 hash of arguments. If\n * that fails, then the query will be built from the arguments and executed. The\n * results will be stored to the cache.\n *\n * @since 2.1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string|array $args {\n *     Optional. String or array of arguments to retrieve bookmarks.\n *\n *     @type string   $orderby        How to order the links by. Accepts post fields. Default 'name'.\n *     @type string   $order          Whether to order bookmarks in ascending or descending order.\n *                                    Accepts 'ASC' (ascending) or 'DESC' (descending). Default 'ASC'.\n *     @type int      $limit          Amount of bookmarks to display. Accepts 1+ or -1 for all.\n *                                    Default -1.\n *     @type string   $category       Comma-separated list of category ids to include links from.\n *                                    Default empty.\n *     @type string   $category_name  Category to retrieve links for by name. Default empty.\n *     @type int|bool $hide_invisible Whether to show or hide links marked as 'invisible'. Accepts\n *                                    1|true or 0|false. Default 1|true.\n *     @type int|bool $show_updated   Whether to display the time the bookmark was last updated.\n *                                    Accepts 1|true or 0|false. Default 0|false.\n *     @type string   $include        Comma-separated list of bookmark IDs to include. Default empty.\n *     @type string   $exclude        Comma-separated list of bookmark IDs to exclude. Default empty.\n * }\n * @return array List of bookmark row objects.\n *\/"}]},"sanitize_bookmark":{"name":"sanitize_bookmark","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$bookmark","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"'display'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes all bookmark fields\n *\n * @since 2.3.0\n *\n * @param stdClass|array $bookmark Bookmark row\n * @param string $context Optional, default is 'display'. How to filter the\n *\t\tfields\n * @return stdClass|array Same type as $bookmark but with fields sanitized.\n *\/"}]},"sanitize_bookmark_field":{"name":"sanitize_bookmark_field","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$field","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$bookmark_id","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes a bookmark field.\n *\n * Sanitizes the bookmark fields based on what the field name is. If the field\n * has a strict value set, then it will be tested for that, else a more generic\n * filtering is applied. After the more strict filter is applied, if the `$context`\n * is 'raw' then the value is immediately return.\n *\n * Hooks exist for the more generic cases. With the 'edit' context, the {@see 'edit_$field'}\n * filter will be called and passed the `$value` and `$bookmark_id` respectively.\n *\n * With the 'db' context, the {@see 'pre_$field'} filter is called and passed the value.\n * The 'display' context is the final context and has the `$field` has the filter name\n * and is passed the `$value`, `$bookmark_id`, and `$context`, respectively.\n *\n * @since 2.3.0\n *\n * @param string $field       The bookmark field.\n * @param mixed  $value       The bookmark field value.\n * @param int    $bookmark_id Bookmark ID.\n * @param string $context     How to filter the field value. Accepts 'raw', 'edit', 'attribute',\n *                            'js', 'db', or 'display'\n * @return mixed The filtered value.\n *\/"}]},"clean_bookmark_cache":{"name":"clean_bookmark_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$bookmark_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deletes the bookmark cache.\n *\n * @since 2.7.0\n *\n * @param int $bookmark_id Bookmark ID.\n *\/"}]},"ms_upload_constants":{"name":"ms_upload_constants","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Defines constants and global variables that can be overridden, generally in wp-config.php.\n *\n * @package WordPress\n * @subpackage Multisite\n * @since 3.0.0\n *\/"},{"phpdoc":"\/**\n * Defines Multisite upload constants.\n *\n * Exists for backward compatibility with legacy file-serving through\n * wp-includes\/ms-files.php (wp-content\/blogs.php in MU).\n *\n * @since 3.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"ms_cookie_constants":{"name":"ms_cookie_constants","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Defines Multisite cookie constants.\n *\n * @since 3.0.0\n *\/"}]},"ms_file_constants":{"name":"ms_file_constants","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Defines Multisite file constants.\n *\n * Exists for backward compatibility with legacy file-serving through\n * wp-includes\/ms-files.php (wp-content\/blogs.php in MU).\n *\n * @since 3.0.0\n *\/"}]},"ms_subdomain_constants":{"name":"ms_subdomain_constants","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Defines Multisite subdomain constants and handles warnings and notices.\n *\n * VHOST is deprecated in favor of SUBDOMAIN_INSTALL, which is a bool.\n *\n * On first call, the constants are checked and defined. On second call,\n * we will have translations loaded and can trigger warnings easily.\n *\n * @since 3.0.0\n *\n * @staticvar bool $subdomain_error\n * @staticvar bool $subdomain_error_warn\n *\/"}]},"_wp_admin_bar_init":{"name":"_wp_admin_bar_init","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Instantiate the admin bar object and set it up as a global for access elsewhere.\n *\n * UNHOOKING THIS FUNCTION WILL NOT PROPERLY REMOVE THE ADMIN BAR.\n * For that, use show_admin_bar(false) or the {@see 'show_admin_bar'} filter.\n *\n * @since 3.1.0\n * @access private\n *\n * @global WP_Admin_Bar $wp_admin_bar\n *\n * @return bool Whether the admin bar was successfully initialized.\n *\/"},{"phpdoc":"\/**\n * Toolbar API: Top-level Toolbar functionality\n *\n * @package WordPress\n * @subpackage Toolbar\n * @since 3.1.0\n *\/"}]},"wp_admin_bar_render":{"name":"wp_admin_bar_render","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Renders the admin bar to the page based on the $wp_admin_bar->menu member var.\n *\n * This is called very late on the footer actions so that it will render after\n * anything else being added to the footer.\n *\n * It includes the {@see 'admin_bar_menu'} action which should be used to hook in and\n * add new menus to the admin bar. That way you can be sure that you are adding at most\n * optimal point, right before the admin bar is rendered. This also gives you access to\n * the `$post` global, among others.\n *\n * @since 3.1.0\n *\n * @global WP_Admin_Bar $wp_admin_bar\n *\/"}]},"wp_admin_bar_wp_menu":{"name":"wp_admin_bar_wp_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_admin_bar","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add the WordPress logo menu.\n *\n * @since 3.3.0\n *\n * @param WP_Admin_Bar $wp_admin_bar\n *\/"}]},"wp_admin_bar_sidebar_toggle":{"name":"wp_admin_bar_sidebar_toggle","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_admin_bar","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add the sidebar toggle button.\n *\n * @since 3.8.0\n *\n * @param WP_Admin_Bar $wp_admin_bar\n *\/"}]},"wp_admin_bar_my_account_item":{"name":"wp_admin_bar_my_account_item","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_admin_bar","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add the \"My Account\" item.\n *\n * @since 3.3.0\n *\n * @param WP_Admin_Bar $wp_admin_bar\n *\/"}]},"wp_admin_bar_my_account_menu":{"name":"wp_admin_bar_my_account_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_admin_bar","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add the \"My Account\" submenu items.\n *\n * @since 3.1.0\n *\n * @param WP_Admin_Bar $wp_admin_bar\n *\/"}]},"wp_admin_bar_site_menu":{"name":"wp_admin_bar_site_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_admin_bar","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add the \"Site Name\" menu.\n *\n * @since 3.3.0\n *\n * @param WP_Admin_Bar $wp_admin_bar\n *\/"}]},"wp_admin_bar_customize_menu":{"name":"wp_admin_bar_customize_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_admin_bar","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds the \"Customize\" link to the Toolbar.\n *\n * @since 4.3.0\n *\n * @param WP_Admin_Bar $wp_admin_bar WP_Admin_Bar instance.\n * @global WP_Customize_Manager $wp_customize\n *\/"}]},"wp_admin_bar_my_sites_menu":{"name":"wp_admin_bar_my_sites_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_admin_bar","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add the \"My Sites\/[Site Name]\" menu and all submenus.\n *\n * @since 3.1.0\n *\n * @param WP_Admin_Bar $wp_admin_bar\n *\/"}]},"wp_admin_bar_shortlink_menu":{"name":"wp_admin_bar_shortlink_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_admin_bar","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Provide a shortlink.\n *\n * @since 3.1.0\n *\n * @param WP_Admin_Bar $wp_admin_bar\n *\/"}]},"wp_admin_bar_edit_menu":{"name":"wp_admin_bar_edit_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_admin_bar","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Provide an edit link for posts and terms.\n *\n * @since 3.1.0\n *\n * @global WP_Term  $tag\n * @global WP_Query $wp_the_query\n *\n * @param WP_Admin_Bar $wp_admin_bar\n *\/"}]},"wp_admin_bar_new_content_menu":{"name":"wp_admin_bar_new_content_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_admin_bar","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add \"Add New\" menu.\n *\n * @since 3.1.0\n *\n * @param WP_Admin_Bar $wp_admin_bar\n *\/"}]},"wp_admin_bar_comments_menu":{"name":"wp_admin_bar_comments_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_admin_bar","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add edit comments link with awaiting moderation count bubble.\n *\n * @since 3.1.0\n *\n * @param WP_Admin_Bar $wp_admin_bar\n *\/"}]},"wp_admin_bar_appearance_menu":{"name":"wp_admin_bar_appearance_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_admin_bar","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add appearance submenu items to the \"Site Name\" menu.\n *\n * @since 3.1.0\n *\n * @param WP_Admin_Bar $wp_admin_bar\n *\/"}]},"wp_admin_bar_updates_menu":{"name":"wp_admin_bar_updates_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_admin_bar","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Provide an update link if theme\/plugin\/core updates are available.\n *\n * @since 3.1.0\n *\n * @param WP_Admin_Bar $wp_admin_bar\n *\/"}]},"wp_admin_bar_search_menu":{"name":"wp_admin_bar_search_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_admin_bar","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add search form.\n *\n * @since 3.3.0\n *\n * @param WP_Admin_Bar $wp_admin_bar\n *\/"}]},"wp_admin_bar_add_secondary_groups":{"name":"wp_admin_bar_add_secondary_groups","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_admin_bar","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add secondary menus.\n *\n * @since 3.3.0\n *\n * @param WP_Admin_Bar $wp_admin_bar\n *\/"}]},"wp_admin_bar_header":{"name":"wp_admin_bar_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Style and scripts for the admin bar.\n *\n * @since 3.1.0\n *\/"}]},"_admin_bar_bump_cb":{"name":"_admin_bar_bump_cb","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Default admin bar callback.\n *\n * @since 3.1.0\n *\/"}]},"show_admin_bar":{"name":"show_admin_bar","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$show","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sets the display status of the admin bar.\n *\n * This can be called immediately upon plugin load. It does not need to be called\n * from a function hooked to the {@see 'init'} action.\n *\n * @since 3.1.0\n *\n * @global bool $show_admin_bar\n *\n * @param bool $show Whether to allow the admin bar to show.\n *\/"}]},"is_admin_bar_showing":{"name":"is_admin_bar_showing","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine whether the admin bar should be showing.\n *\n * @since 3.1.0\n *\n * @global bool   $show_admin_bar\n * @global string $pagenow\n *\n * @return bool Whether the admin bar should be showing.\n *\/"}]},"_get_admin_bar_pref":{"name":"_get_admin_bar_pref","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$context","rank":0,"variadic":false,"reference":false,"default":"'front'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the admin bar display preference of a user.\n *\n * @since 3.1.0\n * @access private\n *\n * @param string $context Context of this preference check. Defaults to 'front'. The 'admin'\n * \tpreference is no longer used.\n * @param int $user Optional. ID of the user to check, defaults to 0 for current user.\n * @return bool Whether the admin bar should be showing for this user.\n *\/"}]},"wp_nav_menu":{"name":"wp_nav_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays a navigation menu.\n *\n * @since 3.0.0\n * @since 4.7.0 Added the `item_spacing` argument.\n *\n * @staticvar array $menu_id_slugs\n *\n * @param array $args {\n *     Optional. Array of nav menu arguments.\n *\n *     @type int|string|WP_Term $menu            Desired menu. Accepts (matching in order) id, slug, name, menu object. Default empty.\n *     @type string             $menu_class      CSS class to use for the ul element which forms the menu. Default 'menu'.\n *     @type string             $menu_id         The ID that is applied to the ul element which forms the menu.\n *                                               Default is the menu slug, incremented.\n *     @type string             $container       Whether to wrap the ul, and what to wrap it with. Default 'div'.\n *     @type string             $container_class Class that is applied to the container. Default 'menu-{menu slug}-container'.\n *     @type string             $container_id    The ID that is applied to the container. Default empty.\n *     @type callable|bool      $fallback_cb     If the menu doesn't exists, a callback function will fire.\n *                                               Default is 'wp_page_menu'. Set to false for no fallback.\n *     @type string             $before          Text before the link markup. Default empty.\n *     @type string             $after           Text after the link markup. Default empty.\n *     @type string             $link_before     Text before the link text. Default empty.\n *     @type string             $link_after      Text after the link text. Default empty.\n *     @type bool               $echo            Whether to echo the menu or return it. Default true.\n *     @type int                $depth           How many levels of the hierarchy are to be included. 0 means all. Default 0.\n *     @type object             $walker          Instance of a custom walker class. Default empty.\n *     @type string             $theme_location  Theme location to be used. Must be registered with register_nav_menu()\n *                                               in order to be selectable by the user.\n *     @type string             $items_wrap      How the list items should be wrapped. Default is a ul with an id and class.\n *                                               Uses printf() format with numbered placeholders.\n *     @type string             $item_spacing    Whether to preserve whitespace within the menu's HTML. Accepts 'preserve' or 'discard'. Default 'preserve'.\n * }\n * @return object|false|void Menu output if $echo is false, false if there are no items or no menu was found.\n *\/"}]},"_wp_menu_item_classes_by_context":{"name":"_wp_menu_item_classes_by_context","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$menu_items","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add the class property classes for the current context, if applicable.\n *\n * @access private\n * @since 3.0.0\n *\n * @global WP_Query   $wp_query\n * @global WP_Rewrite $wp_rewrite\n *\n * @param array $menu_items The current menu item objects to which to add the class property information.\n *\/"}]},"walk_nav_menu_tree":{"name":"walk_nav_menu_tree","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$items","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$r","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the HTML list content for nav menu items.\n *\n * @uses Walker_Nav_Menu to create HTML list content.\n * @since 3.0.0\n *\n * @param array    $items The menu items, sorted by each menu item's menu order.\n * @param int      $depth Depth of the item in reference to parents.\n * @param stdClass $r     An object containing wp_nav_menu() arguments.\n * @return string The HTML list content for the menu items.\n *\/"}]},"_nav_menu_item_id_use_once":{"name":"_nav_menu_item_id_use_once","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$item","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prevents a menu item ID from being used more than once.\n *\n * @since 3.0.1\n * @access private\n *\n * @staticvar array $used_ids\n * @param string $id\n * @param object $item\n * @return string\n *\/"}]},"check_comment":{"name":"check_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$author","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$email","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_ip","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_agent","rank":5,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment_type","rank":6,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Core Comment API\n *\n * @package WordPress\n * @subpackage Comment\n *\/"},{"phpdoc":"\/**\n * Check whether a comment passes internal checks to be allowed to add.\n *\n * If manual comment moderation is set in the administration, then all checks,\n * regardless of their type and whitelist, will fail and the function will\n * return false.\n *\n * If the number of links exceeds the amount in the administration, then the\n * check fails. If any of the parameter contents match the blacklist of words,\n * then the check fails.\n *\n * If the comment author was approved before, then the comment is automatically\n * whitelisted.\n *\n * If all checks pass, the function will return true.\n *\n * @since 1.2.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $author       Comment author name.\n * @param string $email        Comment author email.\n * @param string $url          Comment author URL.\n * @param string $comment      Content of the comment.\n * @param string $user_ip      Comment author IP address.\n * @param string $user_agent   Comment author User-Agent.\n * @param string $comment_type Comment type, either user-submitted comment,\n *\t\t                       trackback, or pingback.\n * @return bool If all checks pass, true, otherwise false.\n *\/"}]},"get_approved_comments":{"name":"get_approved_comments","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the approved comments for post $post_id.\n *\n * @since 2.0.0\n * @since 4.1.0 Refactored to leverage WP_Comment_Query over a direct query.\n *\n * @param  int   $post_id The ID of the post.\n * @param  array $args    Optional. See WP_Comment_Query::query() for information on accepted arguments.\n * @return int|array $comments The approved comments, or number of comments if `$count`\n *                             argument is true.\n *\/"}]},"get_comment":{"name":"get_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":true,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"OBJECT","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves comment data given a comment ID or comment object.\n *\n * If an object is passed then the comment data will be cached and then returned\n * after being passed through a filter. If the comment is empty, then the global\n * comment variable will be used, if it is set.\n *\n * @since 2.0.0\n *\n * @global WP_Comment $comment\n *\n * @param WP_Comment|string|int $comment Comment to retrieve.\n * @param string                $output  Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                                       a WP_Comment object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @return WP_Comment|array|null Depends on $output value.\n *\/"}]},"get_comments":{"name":"get_comments","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve a list of comments.\n *\n * The comment list can be for the blog as a whole or for an individual post.\n *\n * @since 2.7.0\n *\n * @param string|array $args Optional. Array or string of arguments. See WP_Comment_Query::parse_query()\n *                           for information on accepted arguments. Default empty.\n * @return int|array List of comments or number of found comments if `$count` argument is true.\n *\/"}]},"get_comment_statuses":{"name":"get_comment_statuses","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve all of the WordPress supported comment statuses.\n *\n * Comments have a limited set of valid status values, this provides the comment\n * status values and descriptions.\n *\n * @since 2.7.0\n *\n * @return array List of comment statuses.\n *\/"}]},"get_default_comment_status":{"name":"get_default_comment_status","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"'post'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment_type","rank":1,"variadic":false,"reference":false,"default":"'comment'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the default comment status for a post type.\n *\n * @since 4.3.0\n *\n * @param string $post_type    Optional. Post type. Default 'post'.\n * @param string $comment_type Optional. Comment type. Default 'comment'.\n * @return string Expected return value is 'open' or 'closed'.\n *\/"}]},"get_lastcommentmodified":{"name":"get_lastcommentmodified","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$timezone","rank":0,"variadic":false,"reference":false,"default":"'server'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * The date the last comment was modified.\n *\n * @since 1.5.0\n * @since 4.7.0 Replaced caching the modified date in a local static variable\n *              with the Object Cache API.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $timezone Which timezone to use in reference to 'gmt', 'blog', or 'server' locations.\n * @return string|false Last comment modified date on success, false on failure.\n *\/"}]},"get_comment_count":{"name":"get_comment_count","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * The amount of comments in a post or total comments.\n *\n * A lot like wp_count_comments(), in that they both return comment stats (albeit with different types).\n * The wp_count_comments() actually caches, but this function does not.\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int $post_id Optional. Comment amount in post if > 0, else total comments blog wide.\n * @return array The amount of spam, approved, awaiting moderation, and total comments.\n *\/"}]},"add_comment_meta":{"name":"add_comment_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$unique","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add meta data field to a comment.\n *\n * @since 2.9.0\n * @link https:\/\/codex.wordpress.org\/Function_Reference\/add_comment_meta\n *\n * @param int $comment_id Comment ID.\n * @param string $meta_key Metadata name.\n * @param mixed $meta_value Metadata value.\n * @param bool $unique Optional, default is false. Whether the same key should not be added.\n * @return int|bool Meta ID on success, false on failure.\n *\/"}]},"delete_comment_meta":{"name":"delete_comment_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove metadata matching criteria from a comment.\n *\n * You can match based on the key, or key and value. Removing based on key and\n * value, will keep from removing duplicate metadata with the same key. It also\n * allows removing all metadata matching key, if needed.\n *\n * @since 2.9.0\n * @link https:\/\/codex.wordpress.org\/Function_Reference\/delete_comment_meta\n *\n * @param int $comment_id comment ID\n * @param string $meta_key Metadata name.\n * @param mixed $meta_value Optional. Metadata value.\n * @return bool True on success, false on failure.\n *\/"}]},"get_comment_meta":{"name":"get_comment_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$single","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve comment meta field for a comment.\n *\n * @since 2.9.0\n * @link https:\/\/codex.wordpress.org\/Function_Reference\/get_comment_meta\n *\n * @param int $comment_id Comment ID.\n * @param string $key Optional. The meta key to retrieve. By default, returns data for all keys.\n * @param bool $single Whether to return a single value.\n * @return mixed Will be an array if $single is false. Will be value of meta data field if $single\n *  is true.\n *\/"}]},"update_comment_meta":{"name":"update_comment_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$prev_value","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update comment meta field based on comment ID.\n *\n * Use the $prev_value parameter to differentiate between meta fields with the\n * same key and comment ID.\n *\n * If the meta field for the comment does not exist, it will be added.\n *\n * @since 2.9.0\n * @link https:\/\/codex.wordpress.org\/Function_Reference\/update_comment_meta\n *\n * @param int $comment_id Comment ID.\n * @param string $meta_key Metadata key.\n * @param mixed $meta_value Metadata value.\n * @param mixed $prev_value Optional. Previous value to check before removing.\n * @return int|bool Meta ID if the key didn't exist, true on successful update, false on failure.\n *\/"}]},"wp_queue_comments_for_comment_meta_lazyload":{"name":"wp_queue_comments_for_comment_meta_lazyload","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comments","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Queues comments for metadata lazy-loading.\n *\n * @since 4.5.0\n *\n * @param array $comments Array of comment objects.\n *\/"}]},"wp_set_comment_cookies":{"name":"wp_set_comment_cookies","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sets the cookies used to store an unauthenticated commentator's identity. Typically used\n * to recall previous comments by this commentator that are still held in moderation.\n *\n * @param WP_Comment $comment Comment object.\n * @param object     $user    Comment author's object.\n *\n * @since 3.4.0\n *\/"}]},"sanitize_comment_cookies":{"name":"sanitize_comment_cookies","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes the cookies sent to the user already.\n *\n * Will only do anything if the cookies have already been created for the user.\n * Mostly used after cookies had been sent to use elsewhere.\n *\n * @since 2.0.4\n *\/"}]},"wp_allow_comment":{"name":"wp_allow_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$commentdata","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$avoid_die","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Validates whether this comment is allowed to be made.\n *\n * @since 2.0.0\n * @since 4.7.0 The `$avoid_die` parameter was added, allowing the function to\n *              return a WP_Error object instead of dying.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $commentdata Contains information on the comment.\n * @param bool  $avoid_die   When true, a disallowed comment will result in the function\n *                           returning a WP_Error object, rather than executing wp_die().\n *                           Default false.\n * @return int|string|WP_Error Allowed comments return the approval status (0|1|'spam').\n *                             If `$avoid_die` is true, disallowed comments return a WP_Error.\n *\/"}]},"check_comment_flood_db":{"name":"check_comment_flood_db","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Hooks WP's native database-based comment-flood check.\n *\n * This wrapper maintains backward compatibility with plugins that expect to\n * be able to unhook the legacy check_comment_flood_db() function from\n * 'check_comment_flood' using remove_action().\n *\n * @since 2.3.0\n * @since 4.7.0 Converted to be an add_filter() wrapper.\n *\/"}]},"wp_check_comment_flood":{"name":"wp_check_comment_flood","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$is_flood","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ip","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$email","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$date","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$avoid_die","rank":4,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks whether comment flooding is occurring.\n *\n * Won't run, if current user can manage options, so to not block\n * administrators.\n *\n * @since 4.7.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param bool   $is_flood  Is a comment flooding occurring?\n * @param string $ip        Comment IP.\n * @param string $email     Comment author email address.\n * @param string $date      MySQL time string.\n * @param bool   $avoid_die When true, a disallowed comment will result in the function\n *                          returning a WP_Error object, rather than executing wp_die().\n *                          Default false.\n * @return bool Whether comment flooding is occurring.\n *\/"}]},"separate_comments":{"name":"separate_comments","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comments","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Separates an array of comments into an array keyed by comment_type.\n *\n * @since 2.7.0\n *\n * @param array $comments Array of comments\n * @return array Array of comments keyed by comment_type.\n *\/"}]},"get_comment_pages_count":{"name":"get_comment_pages_count","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comments","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$per_page","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$threaded","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Calculate the total number of comment pages.\n *\n * @since 2.7.0\n *\n * @uses Walker_Comment\n *\n * @global WP_Query $wp_query\n *\n * @param array $comments Optional array of WP_Comment objects. Defaults to $wp_query->comments\n * @param int   $per_page Optional comments per page.\n * @param bool  $threaded Optional control over flat or threaded comments.\n * @return int Number of comment pages.\n *\/"}]},"get_page_of_comment":{"name":"get_page_of_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Calculate what page number a comment will appear on for comment paging.\n *\n * @since 2.7.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int   $comment_ID Comment ID.\n * @param array $args {\n *      Array of optional arguments.\n *      @type string     $type      Limit paginated comments to those matching a given type. Accepts 'comment',\n *                                  'trackback', 'pingback', 'pings' (trackbacks and pingbacks), or 'all'.\n *                                  Default is 'all'.\n *      @type int        $per_page  Per-page count to use when calculating pagination. Defaults to the value of the\n *                                  'comments_per_page' option.\n *      @type int|string $max_depth If greater than 1, comment page will be determined for the top-level parent of\n *                                  `$comment_ID`. Defaults to the value of the 'thread_comments_depth' option.\n * } *\n * @return int|null Comment page number or null on error.\n *\/"}]},"wp_get_comment_fields_max_lengths":{"name":"wp_get_comment_fields_max_lengths","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the maximum character lengths for the comment form fields.\n *\n * @since 4.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @return array Maximum character length for the comment form fields.\n *\/"}]},"wp_check_comment_data_max_lengths":{"name":"wp_check_comment_data_max_lengths","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Compares the lengths of comment data against the maximum character limits.\n *\n * @since 4.7.0\n *\n * @param array $comment_data Array of arguments for inserting a comment.\n * @return WP_Error|true WP_Error when a comment field exceeds the limit,\n *                       otherwise true.\n *\/"}]},"wp_blacklist_check":{"name":"wp_blacklist_check","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$author","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$email","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_ip","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_agent","rank":5,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Does comment contain blacklisted characters or words.\n *\n * @since 1.5.0\n *\n * @param string $author The author of the comment\n * @param string $email The email of the comment\n * @param string $url The url used in the comment\n * @param string $comment The comment content\n * @param string $user_ip The comment author IP address\n * @param string $user_agent The author's browser user agent\n * @return bool True if comment contains blacklisted content, false if comment does not\n *\/"}]},"wp_count_comments":{"name":"wp_count_comments","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve total comments for blog or single post.\n *\n * The properties of the returned object contain the 'moderated', 'approved',\n * and spam comments for either the entire blog or single post. Those properties\n * contain the amount of comments that match the status. The 'total_comments'\n * property contains the integer of total comments.\n *\n * The comment stats are cached and then retrieved, if they already exist in the\n * cache.\n *\n * @since 2.5.0\n *\n * @param int $post_id Optional. Post ID.\n * @return object|array Comment stats.\n *\/"}]},"wp_delete_comment":{"name":"wp_delete_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$force_delete","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Trashes or deletes a comment.\n *\n * The comment is moved to trash instead of permanently deleted unless trash is\n * disabled, item is already in the trash, or $force_delete is true.\n *\n * The post comment count will be updated if the comment was approved and has a\n * post ID available.\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|WP_Comment $comment_id   Comment ID or WP_Comment object.\n * @param bool           $force_delete Whether to bypass trash and force deletion. Default is false.\n * @return bool True on success, false on failure.\n *\/"}]},"wp_trash_comment":{"name":"wp_trash_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Moves a comment to the Trash\n *\n * If trash is disabled, comment is permanently deleted.\n *\n * @since 2.9.0\n *\n * @param int|WP_Comment $comment_id Comment ID or WP_Comment object.\n * @return bool True on success, false on failure.\n *\/"}]},"wp_untrash_comment":{"name":"wp_untrash_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes a comment from the Trash\n *\n * @since 2.9.0\n *\n * @param int|WP_Comment $comment_id Comment ID or WP_Comment object.\n * @return bool True on success, false on failure.\n *\/"}]},"wp_spam_comment":{"name":"wp_spam_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Marks a comment as Spam\n *\n * @since 2.9.0\n *\n * @param int|WP_Comment $comment_id Comment ID or WP_Comment object.\n * @return bool True on success, false on failure.\n *\/"}]},"wp_unspam_comment":{"name":"wp_unspam_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes a comment from the Spam\n *\n * @since 2.9.0\n *\n * @param int|WP_Comment $comment_id Comment ID or WP_Comment object.\n * @return bool True on success, false on failure.\n *\/"}]},"wp_get_comment_status":{"name":"wp_get_comment_status","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * The status of a comment by ID.\n *\n * @since 1.0.0\n *\n * @param int|WP_Comment $comment_id Comment ID or WP_Comment object\n * @return false|string Status might be 'trash', 'approved', 'unapproved', 'spam'. False on failure.\n *\/"}]},"wp_transition_comment_status":{"name":"wp_transition_comment_status","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$new_status","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_status","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Call hooks for when a comment status transition occurs.\n *\n * Calls hooks for comment status transitions. If the new comment status is not the same\n * as the previous comment status, then two hooks will be ran, the first is\n * {@see 'transition_comment_status'} with new status, old status, and comment data. The\n * next action called is {@see comment_$old_status_to_$new_status'}. It has the\n * comment data.\n *\n * The final action will run whether or not the comment statuses are the same. The\n * action is named {@see 'comment_$new_status_$comment->comment_type'}.\n *\n * @since 2.7.0\n *\n * @param string $new_status New comment status.\n * @param string $old_status Previous comment status.\n * @param object $comment Comment data.\n *\/"}]},"_clear_modified_cache_on_transition_comment_status":{"name":"_clear_modified_cache_on_transition_comment_status","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$new_status","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_status","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Clear the lastcommentmodified cached value when a comment status is changed.\n *\n * Deletes the lastcommentmodified cache key when a comment enters or leaves\n * 'approved' status.\n *\n * @since 4.7.0\n * @access private\n *\n * @param string $new_status The new comment status.\n * @param string $old_status The old comment status.\n *\/"}]},"wp_get_current_commenter":{"name":"wp_get_current_commenter","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get current commenter's name, email, and URL.\n *\n * Expects cookies content to already be sanitized. User of this function might\n * wish to recheck the returned array for validity.\n *\n * @see sanitize_comment_cookies() Use to sanitize cookies\n *\n * @since 2.0.4\n *\n * @return array Comment author, email, url respectively.\n *\/"}]},"wp_insert_comment":{"name":"wp_insert_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$commentdata","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Inserts a comment into the database.\n *\n * @since 2.0.0\n * @since 4.4.0 Introduced `$comment_meta` argument.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $commentdata {\n *     Array of arguments for inserting a new comment.\n *\n *     @type string     $comment_agent        The HTTP user agent of the `$comment_author` when\n *                                            the comment was submitted. Default empty.\n *     @type int|string $comment_approved     Whether the comment has been approved. Default 1.\n *     @type string     $comment_author       The name of the author of the comment. Default empty.\n *     @type string     $comment_author_email The email address of the `$comment_author`. Default empty.\n *     @type string     $comment_author_IP    The IP address of the `$comment_author`. Default empty.\n *     @type string     $comment_author_url   The URL address of the `$comment_author`. Default empty.\n *     @type string     $comment_content      The content of the comment. Default empty.\n *     @type string     $comment_date         The date the comment was submitted. To set the date\n *                                            manually, `$comment_date_gmt` must also be specified.\n *                                            Default is the current time.\n *     @type string     $comment_date_gmt     The date the comment was submitted in the GMT timezone.\n *                                            Default is `$comment_date` in the site's GMT timezone.\n *     @type int        $comment_karma        The karma of the comment. Default 0.\n *     @type int        $comment_parent       ID of this comment's parent, if any. Default 0.\n *     @type int        $comment_post_ID      ID of the post that relates to the comment, if any.\n *                                            Default 0.\n *     @type string     $comment_type         Comment type. Default empty.\n *     @type array      $comment_meta         Optional. Array of key\/value pairs to be stored in commentmeta for the\n *                                            new comment.\n *     @type int        $user_id              ID of the user who submitted the comment. Default 0.\n * }\n * @return int|false The new comment's ID on success, false on failure.\n *\/"}]},"wp_filter_comment":{"name":"wp_filter_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$commentdata","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters and sanitizes comment data.\n *\n * Sets the comment data 'filtered' field to true when finished. This can be\n * checked as to whether the comment should be filtered and to keep from\n * filtering the same comment more than once.\n *\n * @since 2.0.0\n *\n * @param array $commentdata Contains information on the comment.\n * @return array Parsed comment information.\n *\/"}]},"wp_throttle_comment_flood":{"name":"wp_throttle_comment_flood","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$block","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$time_lastcomment","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$time_newcomment","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether a comment should be blocked because of comment flood.\n *\n * @since 2.1.0\n *\n * @param bool $block Whether plugin has already blocked comment.\n * @param int $time_lastcomment Timestamp for last comment.\n * @param int $time_newcomment Timestamp for new comment.\n * @return bool Whether comment should be blocked.\n *\/"}]},"wp_new_comment":{"name":"wp_new_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$commentdata","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$avoid_die","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds a new comment to the database.\n *\n * Filters new comment to ensure that the fields are sanitized and valid before\n * inserting comment into database. Calls {@see 'comment_post'} action with comment ID\n * and whether comment is approved by WordPress. Also has {@see 'preprocess_comment'}\n * filter for processing the comment data before the function handles it.\n *\n * We use `REMOTE_ADDR` here directly. If you are behind a proxy, you should ensure\n * that it is properly set, such as in wp-config.php, for your environment.\n *\n * See {@link https:\/\/core.trac.wordpress.org\/ticket\/9235}\n *\n * @since 1.5.0\n * @since 4.3.0 'comment_agent' and 'comment_author_IP' can be set via `$commentdata`.\n * @since 4.7.0 The `$avoid_die` parameter was added, allowing the function to\n *              return a WP_Error object instead of dying.\n *\n * @see wp_insert_comment()\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $commentdata {\n *     Comment data.\n *\n *     @type string $comment_author       The name of the comment author.\n *     @type string $comment_author_email The comment author email address.\n *     @type string $comment_author_url   The comment author URL.\n *     @type string $comment_content      The content of the comment.\n *     @type string $comment_date         The date the comment was submitted. Default is the current time.\n *     @type string $comment_date_gmt     The date the comment was submitted in the GMT timezone.\n *                                        Default is `$comment_date` in the GMT timezone.\n *     @type int    $comment_parent       The ID of this comment's parent, if any. Default 0.\n *     @type int    $comment_post_ID      The ID of the post that relates to the comment.\n *     @type int    $user_id              The ID of the user who submitted the comment. Default 0.\n *     @type int    $user_ID              Kept for backward-compatibility. Use `$user_id` instead.\n *     @type string $comment_agent        Comment author user agent. Default is the value of 'HTTP_USER_AGENT'\n *                                        in the `$_SERVER` superglobal sent in the original request.\n *     @type string $comment_author_IP    Comment author IP address in IPv4 format. Default is the value of\n *                                        'REMOTE_ADDR' in the `$_SERVER` superglobal sent in the original request.\n * }\n * @param bool $avoid_die Should errors be returned as WP_Error objects instead of\n *                        executing wp_die()? Default false.\n * @return int|false|WP_Error The ID of the comment on success, false or WP_Error on failure.\n *\/"}]},"wp_new_comment_notify_moderator":{"name":"wp_new_comment_notify_moderator","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Send a comment moderation notification to the comment moderator.\n *\n * @since 4.4.0\n *\n * @param int $comment_ID ID of the comment.\n * @return bool True on success, false on failure.\n *\/"}]},"wp_new_comment_notify_postauthor":{"name":"wp_new_comment_notify_postauthor","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Send a notification of a new comment to the post author.\n *\n * @since 4.4.0\n *\n * Uses the {@see 'notify_post_author'} filter to determine whether the post author\n * should be notified when a new comment is added, overriding site setting.\n *\n * @param int $comment_ID Comment ID.\n * @return bool True on success, false on failure.\n *\/"}]},"wp_set_comment_status":{"name":"wp_set_comment_status","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment_status","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$wp_error","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sets the status of a comment.\n *\n * The {@see 'wp_set_comment_status'} action is called after the comment is handled.\n * If the comment status is not in the list, then false is returned.\n *\n * @since 1.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|WP_Comment $comment_id     Comment ID or WP_Comment object.\n * @param string         $comment_status New comment status, either 'hold', 'approve', 'spam', or 'trash'.\n * @param bool           $wp_error       Whether to return a WP_Error object if there is a failure. Default is false.\n * @return bool|WP_Error True on success, false or WP_Error on failure.\n *\/"}]},"wp_update_comment":{"name":"wp_update_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$commentarr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates an existing comment in the database.\n *\n * Filters the comment and makes sure certain fields are valid before updating.\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $commentarr Contains information on the comment.\n * @return int Comment was updated if value is 1, or was not updated if value is 0.\n *\/"}]},"wp_defer_comment_counting":{"name":"wp_defer_comment_counting","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$defer","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether to defer comment counting.\n *\n * When setting $defer to true, all post comment counts will not be updated\n * until $defer is set to false. When $defer is set to false, then all\n * previously deferred updated post comment counts will then be automatically\n * updated without having to call wp_update_comment_count() after.\n *\n * @since 2.5.0\n * @staticvar bool $_defer\n *\n * @param bool $defer\n * @return bool\n *\/"}]},"wp_update_comment_count":{"name":"wp_update_comment_count","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$do_deferred","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates the comment count for post(s).\n *\n * When $do_deferred is false (is by default) and the comments have been set to\n * be deferred, the post_id will be added to a queue, which will be updated at a\n * later date and only updated once per post ID.\n *\n * If the comments have not be set up to be deferred, then the post will be\n * updated. When $do_deferred is set to true, then all previous deferred post\n * IDs will be updated along with the current $post_id.\n *\n * @since 2.1.0\n * @see wp_update_comment_count_now() For what could cause a false return value\n *\n * @staticvar array $_deferred\n *\n * @param int|null $post_id     Post ID.\n * @param bool     $do_deferred Optional. Whether to process previously deferred\n *                              post comment counts. Default false.\n * @return bool|void True on success, false on failure or if post with ID does\n *                   not exist.\n *\/"}]},"wp_update_comment_count_now":{"name":"wp_update_comment_count_now","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates the comment count for the post.\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int $post_id Post ID\n * @return bool True on success, false on '0' $post_id or if post with ID does not exist.\n *\/"}]},"discover_pingback_server_uri":{"name":"discover_pingback_server_uri","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Finds a pingback server URI based on the given URL.\n *\n * Checks the HTML for the rel=\"pingback\" link and x-pingback headers. It does\n * a check for the x-pingback headers first and returns that, if available. The\n * check for the rel=\"pingback\" has more overhead than just the header.\n *\n * @since 1.5.0\n *\n * @param string $url URL to ping.\n * @param int $deprecated Not Used.\n * @return false|string False on failure, string containing URI on success.\n *\/"}]},"do_all_pings":{"name":"do_all_pings","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Perform all pingbacks, enclosures, trackbacks, and send to pingback services.\n *\n * @since 2.1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"do_trackbacks":{"name":"do_trackbacks","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Perform trackbacks.\n *\n * @since 1.5.0\n * @since 4.7.0 $post_id can be a WP_Post object.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|WP_Post $post_id Post object or ID to do trackbacks on.\n *\/"}]},"generic_ping":{"name":"generic_ping","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sends pings to all of the ping site services.\n *\n * @since 1.2.0\n *\n * @param int $post_id Post ID.\n * @return int Same as Post ID from parameter\n *\/"}]},"pingback":{"name":"pingback","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Pings back the links found in a post.\n *\n * @since 0.71\n * @since 4.7.0 $post_id can be a WP_Post object.\n *\n * @param string $content Post content to check for links. If empty will retrieve from post.\n * @param int|WP_Post $post_id Post Object or ID.\n *\/"}]},"privacy_ping_filter":{"name":"privacy_ping_filter","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$sites","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether blog is public before returning sites.\n *\n * @since 2.1.0\n *\n * @param mixed $sites Will return if blog is public, will not return if not public.\n * @return mixed Empty string if blog is not public, returns $sites, if site is public.\n *\/"}]},"trackback":{"name":"trackback","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$trackback_url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excerpt","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ID","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Send a Trackback.\n *\n * Updates database when sending trackback to prevent duplicates.\n *\n * @since 0.71\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $trackback_url URL to send trackbacks.\n * @param string $title Title of post.\n * @param string $excerpt Excerpt of post.\n * @param int $ID Post ID.\n * @return int|false|void Database query from update.\n *\/"}]},"weblog_ping":{"name":"weblog_ping","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$server","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Send a pingback.\n *\n * @since 1.2.0\n *\n * @param string $server Host of blog to connect to.\n * @param string $path Path to send the ping.\n *\/"}]},"pingback_ping_source_uri":{"name":"pingback_ping_source_uri","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$source_uri","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Default filter attached to pingback_ping_source_uri to validate the pingback's Source URI\n *\n * @since 3.5.1\n * @see wp_http_validate_url()\n *\n * @param string $source_uri\n * @return string\n *\/"}]},"xmlrpc_pingback_error":{"name":"xmlrpc_pingback_error","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$ixr_error","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Default filter attached to xmlrpc_pingback_error.\n *\n * Returns a generic pingback error code unless the error code is 48,\n * which reports that the pingback is already registered.\n *\n * @since 3.5.1\n * @link https:\/\/www.hixie.ch\/specs\/pingback\/pingback#TOC3\n *\n * @param IXR_Error $ixr_error\n * @return IXR_Error\n *\/"}]},"clean_comment_cache":{"name":"clean_comment_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes a comment from the object cache.\n *\n * @since 2.3.0\n *\n * @param int|array $ids Comment ID or an array of comment IDs to remove from cache.\n *\/"}]},"update_comment_cache":{"name":"update_comment_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comments","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$update_meta_cache","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates the comment cache of given comments.\n *\n * Will add the comments in $comments to the cache. If comment ID already exists\n * in the comment cache then it will not be updated. The comment is added to the\n * cache using the comment group with the key using the ID of the comments.\n *\n * @since 2.3.0\n * @since 4.4.0 Introduced the `$update_meta_cache` parameter.\n *\n * @param array $comments          Array of comment row objects\n * @param bool  $update_meta_cache Whether to update commentmeta cache. Default true.\n *\/"}]},"_prime_comment_caches":{"name":"_prime_comment_caches","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$update_meta_cache","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds any comments from the given IDs to the cache that do not already exist in cache.\n *\n * @since 4.4.0\n * @access private\n *\n * @see update_comment_cache()\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $comment_ids       Array of comment IDs.\n * @param bool  $update_meta_cache Optional. Whether to update the meta cache. Default true.\n *\/"}]},"_close_comments_for_old_posts":{"name":"_close_comments_for_old_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$posts","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$query","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Close comments on old posts on the fly, without any extra DB queries. Hooked to the_posts.\n *\n * @access private\n * @since 2.7.0\n *\n * @param WP_Post  $posts Post data object.\n * @param WP_Query $query Query object.\n * @return array\n *\/"}]},"_close_comments_for_old_post":{"name":"_close_comments_for_old_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$open","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Close comments on an old post. Hooked to comments_open and pings_open.\n *\n * @access private\n * @since 2.7.0\n *\n * @param bool $open Comments open or closed\n * @param int $post_id Post ID\n * @return bool $open\n *\/"}]},"wp_handle_comment_submission":{"name":"wp_handle_comment_submission","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles the submission of a comment, usually posted to wp-comments-post.php via a comment form.\n *\n * This function expects unslashed data, as opposed to functions such as `wp_new_comment()` which\n * expect slashed data.\n *\n * @since 4.4.0\n *\n * @param array $comment_data {\n *     Comment data.\n *\n *     @type string|int $comment_post_ID             The ID of the post that relates to the comment.\n *     @type string     $author                      The name of the comment author.\n *     @type string     $email                       The comment author email address.\n *     @type string     $url                         The comment author URL.\n *     @type string     $comment                     The content of the comment.\n *     @type string|int $comment_parent              The ID of this comment's parent, if any. Default 0.\n *     @type string     $_wp_unfiltered_html_comment The nonce value for allowing unfiltered HTML.\n * }\n * @return WP_Comment|WP_Error A WP_Comment object on success, a WP_Error object on failure.\n *\/"}]},"wp_get_nav_menu_object":{"name":"wp_get_nav_menu_object","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$menu","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Navigation Menu functions\n *\n * @package WordPress\n * @subpackage Nav_Menus\n * @since 3.0.0\n *\/"},{"phpdoc":"\/**\n * Returns a navigation menu object.\n *\n * @since 3.0.0\n *\n * @param int|string|WP_Term $menu Menu ID, slug, or name - or the menu object.\n * @return WP_Term|false False if $menu param isn't supplied or term does not exist, menu object if successful.\n *\/"}]},"is_nav_menu":{"name":"is_nav_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$menu","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if the given ID is a navigation menu.\n *\n * Returns true if it is; false otherwise.\n *\n * @since 3.0.0\n *\n * @param int|string $menu The menu to check (ID, slug, or name).\n * @return bool Whether the menu exists.\n *\/"}]},"register_nav_menus":{"name":"register_nav_menus","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$locations","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers navigation menu locations for a theme.\n *\n * @since 3.0.0\n *\n * @global array $_wp_registered_nav_menus\n *\n * @param array $locations Associative array of menu location identifiers (like a slug) and descriptive text.\n *\/"}]},"unregister_nav_menu":{"name":"unregister_nav_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$location","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Unregisters a navigation menu location for a theme.\n *\n * @global array $_wp_registered_nav_menus\n *\n * @param string $location The menu location identifier.\n * @return bool True on success, false on failure.\n *\/"}]},"register_nav_menu":{"name":"register_nav_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$location","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$description","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers a navigation menu location for a theme.\n *\n * @since 3.0.0\n *\n * @param string $location    Menu location identifier, like a slug.\n * @param string $description Menu location descriptive text.\n *\/"}]},"get_registered_nav_menus":{"name":"get_registered_nav_menus","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves all registered navigation menu locations in a theme.\n *\n * @since 3.0.0\n *\n * @global array $_wp_registered_nav_menus\n *\n * @return array Registered navigation menu locations. If none are registered, an empty array.\n *\/"}]},"get_nav_menu_locations":{"name":"get_nav_menu_locations","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves all registered navigation menu locations and the menus assigned to them.\n *\n * @since 3.0.0\n *\n * @return array Registered navigation menu locations and the menus assigned them.\n *               If none are registered, an empty array.\n *\/"}]},"has_nav_menu":{"name":"has_nav_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$location","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines whether a registered nav menu location has a menu assigned to it.\n *\n * @since 3.0.0\n *\n * @param string $location Menu location identifier.\n * @return bool Whether location has a menu.\n *\/"}]},"is_nav_menu_item":{"name":"is_nav_menu_item","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$menu_item_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines whether the given ID is a nav menu item.\n *\n * @since 3.0.0\n *\n * @param int $menu_item_id The ID of the potential nav menu item.\n * @return bool Whether the given ID is that of a nav menu item.\n *\/"}]},"wp_create_nav_menu":{"name":"wp_create_nav_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$menu_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates a navigation menu.\n *\n * Note that `$menu_name` is expected to be pre-slashed.\n *\n * @since 3.0.0\n *\n * @param string $menu_name Menu name.\n * @return int|WP_Error Menu ID on success, WP_Error object on failure.\n *\/"}]},"wp_delete_nav_menu":{"name":"wp_delete_nav_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$menu","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Delete a Navigation Menu.\n *\n * @since 3.0.0\n *\n * @param string $menu Menu ID, slug, or name.\n * @return bool|WP_Error True on success, false or WP_Error object on failure.\n *\/"}]},"wp_update_nav_menu_object":{"name":"wp_update_nav_menu_object","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$menu_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_data","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Save the properties of a menu or create a new menu with those properties.\n *\n * Note that `$menu_data` is expected to be pre-slashed.\n *\n * @since 3.0.0\n *\n * @param int   $menu_id   The ID of the menu or \"0\" to create a new menu.\n * @param array $menu_data The array of menu data.\n * @return int|WP_Error Menu ID on success, WP_Error object on failure.\n *\/"}]},"wp_update_nav_menu_item":{"name":"wp_update_nav_menu_item","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$menu_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_item_db_id","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_item_data","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Save the properties of a menu item or create a new one.\n *\n * The menu-item-title, menu-item-description, and menu-item-attr-title are expected\n * to be pre-slashed since they are passed directly into `wp_insert_post()`.\n *\n * @since 3.0.0\n *\n * @param int   $menu_id         The ID of the menu. Required. If \"0\", makes the menu item a draft orphan.\n * @param int   $menu_item_db_id The ID of the menu item. If \"0\", creates a new menu item.\n * @param array $menu_item_data  The menu item's data.\n * @return int|WP_Error The menu item's database ID or WP_Error object on failure.\n *\/"}]},"wp_get_nav_menus":{"name":"wp_get_nav_menus","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns all navigation menu objects.\n *\n * @since 3.0.0\n * @since 4.1.0 Default value of the 'orderby' argument was changed from 'none'\n *              to 'name'.\n *\n * @param array $args Optional. Array of arguments passed on to get_terms().\n *                    Default empty array.\n * @return array Menu objects.\n *\/"}]},"_is_valid_nav_menu_item":{"name":"_is_valid_nav_menu_item","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$item","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return if a menu item is valid.\n *\n * @link https:\/\/core.trac.wordpress.org\/ticket\/13958\n *\n * @since 3.2.0\n * @access private\n *\n * @param object $item The menu item to check.\n * @return bool False if invalid, otherwise true.\n *\/"}]},"wp_get_nav_menu_items":{"name":"wp_get_nav_menu_items","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$menu","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return all menu items of a navigation menu.\n *\n * @since 3.0.0\n *\n * @global string $_menu_item_sort_prop\n * @staticvar array $fetched\n *\n * @param string $menu Menu name, ID, or slug.\n * @param array  $args Optional. Arguments to pass to get_posts().\n * @return false|array $items Array of menu items, otherwise false.\n *\/"}]},"wp_setup_nav_menu_item":{"name":"wp_setup_nav_menu_item","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$menu_item","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Decorates a menu item object with the shared navigation menu item properties.\n *\n * Properties:\n * - ID:               The term_id if the menu item represents a taxonomy term.\n * - attr_title:       The title attribute of the link element for this menu item.\n * - classes:          The array of class attribute values for the link element of this menu item.\n * - db_id:            The DB ID of this item as a nav_menu_item object, if it exists (0 if it doesn't exist).\n * - description:      The description of this menu item.\n * - menu_item_parent: The DB ID of the nav_menu_item that is this item's menu parent, if any. 0 otherwise.\n * - object:           The type of object originally represented, such as \"category,\" \"post\", or \"attachment.\"\n * - object_id:        The DB ID of the original object this menu item represents, e.g. ID for posts and term_id for categories.\n * - post_parent:      The DB ID of the original object's parent object, if any (0 otherwise).\n * - post_title:       A \"no title\" label if menu item represents a post that lacks a title.\n * - target:           The target attribute of the link element for this menu item.\n * - title:            The title of this menu item.\n * - type:             The family of objects originally represented, such as \"post_type\" or \"taxonomy.\"\n * - type_label:       The singular label used to describe this type of menu item.\n * - url:              The URL to which this menu item points.\n * - xfn:              The XFN relationship expressed in the link of this menu item.\n * - _invalid:         Whether the menu item represents an object that no longer exists.\n *\n * @since 3.0.0\n *\n * @param object $menu_item The menu item to modify.\n * @return object $menu_item The menu item with standard menu item properties.\n *\/"}]},"wp_get_associated_nav_menu_items":{"name":"wp_get_associated_nav_menu_items","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_type","rank":1,"variadic":false,"reference":false,"default":"'post_type'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the menu items associated with a particular object.\n *\n * @since 3.0.0\n *\n * @param int    $object_id   The ID of the original object.\n * @param string $object_type The type of object, such as \"taxonomy\" or \"post_type.\"\n * @param string $taxonomy    If $object_type is \"taxonomy\", $taxonomy is the name of the tax that $object_id belongs to\n * @return array The array of menu item IDs; empty array if none;\n *\/"}]},"_wp_delete_post_menu_item":{"name":"_wp_delete_post_menu_item","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback for handling a menu item when its original object is deleted.\n *\n * @since 3.0.0\n * @access private\n *\n * @param int $object_id The ID of the original object being trashed.\n *\n *\/"}]},"_wp_delete_tax_menu_item":{"name":"_wp_delete_tax_menu_item","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$object_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tt_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Serves as a callback for handling a menu item when its original object is deleted.\n *\n * @since 3.0.0\n * @access private\n *\n * @param int    $object_id Optional. The ID of the original object being trashed. Default 0.\n * @param int    $tt_id     Term taxonomy ID. Unused.\n * @param string $taxonomy  Taxonomy slug.\n *\/"}]},"_wp_auto_add_pages_to_menu":{"name":"_wp_auto_add_pages_to_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$new_status","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_status","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Automatically add newly published page objects to menus with that as an option.\n *\n * @since 3.0.0\n * @access private\n *\n * @param string $new_status The new status of the post object.\n * @param string $old_status The old status of the post object.\n * @param object $post       The post object being transitioned from one status to another.\n *\/"}]},"wp_underscore_audio_template":{"name":"wp_underscore_audio_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output the markup for a audio tag to be used in an Underscore template\n * when data.model is passed.\n *\n * @since 3.9.0\n *\/"},{"phpdoc":"\/**\n * WordPress media templates.\n *\n * @package WordPress\n * @subpackage Media\n * @since 3.5.0\n *\/"}]},"wp_underscore_video_template":{"name":"wp_underscore_video_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output the markup for a video tag to be used in an Underscore template\n * when data.model is passed.\n *\n * @since 3.9.0\n *\/"}]},"wp_print_media_templates":{"name":"wp_print_media_templates","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints the templates used in the media manager.\n *\n * @since 3.5.0\n *\n * @global bool $is_IE\n *\/"}]},"_walk_bookmarks":{"name":"_walk_bookmarks","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$bookmarks","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * The formatted output of a list of bookmarks.\n *\n * The $bookmarks array must contain bookmark objects and will be iterated over\n * to retrieve the bookmark to be used in the output.\n *\n * The output is formatted as HTML with no way to change that format. However,\n * what is between, before, and after can be changed. The link itself will be\n * HTML.\n *\n * This function is used internally by wp_list_bookmarks() and should not be\n * used by themes.\n *\n * @since 2.1.0\n * @access private\n *\n * @param array $bookmarks List of bookmarks to traverse.\n * @param string|array $args {\n *     Optional. Bookmarks arguments.\n *\n *     @type int|bool $show_updated     Whether to show the time the bookmark was last updated.\n *                                      Accepts 1|true or 0|false. Default 0|false.\n *     @type int|bool $show_description Whether to show the bookmakr description. Accepts 1|true,\n *                                      Accepts 1|true or 0|false. Default 0|false.\n *     @type int|bool $show_images      Whether to show the link image if available. Accepts 1|true\n *                                      or 0|false. Default 1|true.\n *     @type int|bool $show_name        Whether to show link name if available. Accepts 1|true or\n *                                      0|false. Default 0|false.\n *     @type string   $before           The HTML or text to prepend to each bookmark. Default `<li>`.\n *     @type string   $after            The HTML or text to append to each bookmark. Default `<\/li>`.\n *     @type string   $link_before      The HTML or text to prepend to each bookmark inside the anchor\n *                                      tags. Default empty.\n *     @type string   $link_after       The HTML or text to append to each bookmark inside the anchor\n *                                      tags. Default empty.\n *     @type string   $between          The string for use in between the link, description, and image.\n *                                      Default \"\\n\".\n *     @type int|bool $show_rating      Whether to show the link rating. Accepts 1|true or 0|false.\n *                                      Default 0|false.\n *\n * }\n * @return string Formatted output in HTML\n *\/"},{"phpdoc":"\/**\n * Bookmark Template Functions for usage in Themes\n *\n * @package WordPress\n * @subpackage Template\n *\/"}]},"wp_list_bookmarks":{"name":"wp_list_bookmarks","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve or echo all of the bookmarks.\n *\n * List of default arguments are as follows:\n *\n * These options define how the Category name will appear before the category\n * links are displayed, if 'categorize' is 1. If 'categorize' is 0, then it will\n * display for only the 'title_li' string and only if 'title_li' is not empty.\n *\n * @since 2.1.0\n *\n * @see _walk_bookmarks()\n *\n * @param string|array $args {\n *     Optional. String or array of arguments to list bookmarks.\n *\n *     @type string   $orderby          How to order the links by. Accepts post fields. Default 'name'.\n *     @type string   $order            Whether to order bookmarks in ascending or descending order.\n *                                      Accepts 'ASC' (ascending) or 'DESC' (descending). Default 'ASC'.\n *     @type int      $limit            Amount of bookmarks to display. Accepts 1+ or -1 for all.\n *                                      Default -1.\n *     @type string   $category         Comma-separated list of category ids to include links from.\n *                                      Default empty.\n *     @type string   $category_name    Category to retrieve links for by name. Default empty.\n *     @type int|bool $hide_invisible   Whether to show or hide links marked as 'invisible'. Accepts\n *                                      1|true or 0|false. Default 1|true.\n *     @type int|bool $show_updated     Whether to display the time the bookmark was last updated.\n *                                      Accepts 1|true or 0|false. Default 0|false.\n *     @type int|bool $echo             Whether to echo or return the formatted bookmarks. Accepts\n *                                      1|true (echo) or 0|false (return). Default 1|true.\n *     @type int|bool $categorize       Whether to show links listed by category or in a single column.\n *                                      Accepts 1|true (by category) or 0|false (one column). Default 1|true.\n *     @type int|bool $show_description Whether to show the bookmark descriptions. Accepts 1|true or 0|false.\n *                                      Default 0|false.\n *     @type string   $title_li         What to show before the links appear. Default 'Bookmarks'.\n *     @type string   $title_before     The HTML or text to prepend to the $title_li string. Default '<h2>'.\n *     @type string   $title_after      The HTML or text to append to the $title_li string. Default '<\/h2>'.\n *     @type string   $class            The CSS class to use for the $title_li. Default 'linkcat'.\n *     @type string   $category_before  The HTML or text to prepend to $title_before if $categorize is true.\n *                                      String must contain '%id' and '%class' to inherit the category ID and\n *                                      the $class argument used for formatting in themes.\n *                                      Default '<li id=\"%id\" class=\"%class\">'.\n *     @type string   $category_after   The HTML or text to append to $title_after if $categorize is true.\n *                                      Default '<\/li>'.\n *     @type string   $category_orderby How to order the bookmark category based on term scheme if $categorize\n *                                      is true. Default 'name'.\n *     @type string   $category_order   Whether to order categories in ascending or descending order if\n *                                      $categorize is true. Accepts 'ASC' (ascending) or 'DESC' (descending).\n *                                      Default 'ASC'.\n * }\n * @return string|void Will only return if echo option is set to not echo. Default is not return anything.\n *\/"}]},"wp_set_current_user":{"name":"wp_set_current_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Changes the current user by ID or name.\n *\n * Set $id to null and specify a name if you do not know a user's ID.\n *\n * Some WordPress functionality is based on the current user and not based on\n * the signed in user. Therefore, it opens the ability to edit and perform\n * actions on users who aren't signed in.\n *\n * @since 2.0.3\n * @global WP_User $current_user The current user object which holds the user data.\n *\n * @param int    $id   User ID\n * @param string $name User's username\n * @return WP_User Current user User object\n *\/"}]},"wp_get_current_user":{"name":"wp_get_current_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the current user object.\n *\n * Will set the current user, if the current user is not set. The current user\n * will be set to the logged-in person. If no user is logged-in, then it will\n * set the current user to 0, which is invalid and won't have any permissions.\n *\n * @since 2.0.3\n *\n * @see _wp_get_current_user()\n * @global WP_User $current_user Checks if the current user is set.\n *\n * @return WP_User Current WP_User instance.\n *\/"}]},"get_userdata":{"name":"get_userdata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve user info by user ID.\n *\n * @since 0.71\n *\n * @param int $user_id User ID\n * @return WP_User|false WP_User object on success, false on failure.\n *\/"}]},"get_user_by":{"name":"get_user_by","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$field","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve user info by a given field\n *\n * @since 2.8.0\n * @since 4.4.0 Added 'ID' as an alias of 'id' for the `$field` parameter.\n *\n * @param string     $field The field to retrieve the user with. id | ID | slug | email | login.\n * @param int|string $value A value for $field. A user ID, slug, email address, or login name.\n * @return WP_User|false WP_User object on success, false on failure.\n *\/"}]},"cache_users":{"name":"cache_users","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve info for user lists to prevent multiple queries by get_userdata()\n *\n * @since 3.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $user_ids User ID numbers list\n *\/"}]},"wp_mail":{"name":"wp_mail","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$to","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$subject","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attachments","rank":4,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Send mail, similar to PHP's mail\n *\n * A true return value does not automatically mean that the user received the\n * email successfully. It just only means that the method used was able to\n * process the request without any errors.\n *\n * Using the two 'wp_mail_from' and 'wp_mail_from_name' hooks allow from\n * creating a from address like 'Name <email@address.com>' when both are set. If\n * just 'wp_mail_from' is set, then just the email address will be used with no\n * name.\n *\n * The default content type is 'text\/plain' which does not allow using HTML.\n * However, you can set the content type of the email by using the\n * {@see 'wp_mail_content_type'} filter.\n *\n * The default charset is based on the charset used on the blog. The charset can\n * be set using the {@see 'wp_mail_charset'} filter.\n *\n * @since 1.2.1\n *\n * @global PHPMailer $phpmailer\n *\n * @param string|array $to          Array or comma-separated list of email addresses to send message.\n * @param string       $subject     Email subject\n * @param string       $message     Message contents\n * @param string|array $headers     Optional. Additional headers.\n * @param string|array $attachments Optional. Files to attach.\n * @return bool Whether the email contents were sent successfully.\n *\/"}]},"wp_authenticate":{"name":"wp_authenticate","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$username","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$password","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Authenticate a user, confirming the login credentials are valid.\n *\n * @since 2.5.0\n * @since 4.5.0 `$username` now accepts an email address.\n *\n * @param string $username User's username or email address.\n * @param string $password User's password.\n * @return WP_User|WP_Error WP_User object if the credentials are valid,\n *                          otherwise WP_Error.\n *\/"}]},"wp_logout":{"name":"wp_logout","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Log the current user out.\n *\n * @since 2.5.0\n *\/"}]},"wp_validate_auth_cookie":{"name":"wp_validate_auth_cookie","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$cookie","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Validates authentication cookie.\n *\n * The checks include making sure that the authentication cookie is set and\n * pulling in the contents (if $cookie is not used).\n *\n * Makes sure the cookie is not expired. Verifies the hash in cookie is what is\n * should be and compares the two.\n *\n * @since 2.5.0\n *\n * @global int $login_grace_period\n *\n * @param string $cookie Optional. If used, will validate contents instead of cookie's\n * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in\n * @return false|int False if invalid cookie, User ID if valid.\n *\/"}]},"wp_generate_auth_cookie":{"name":"wp_generate_auth_cookie","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$expiration","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":2,"variadic":false,"reference":false,"default":"'auth'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$token","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Generate authentication cookie contents.\n *\n * @since 2.5.0\n *\n * @param int    $user_id    User ID\n * @param int    $expiration The time the cookie expires as a UNIX timestamp.\n * @param string $scheme     Optional. The cookie scheme to use: auth, secure_auth, or logged_in\n * @param string $token      User's session token to use for this cookie\n * @return string Authentication cookie contents. Empty string if user does not exist.\n *\/"}]},"wp_parse_auth_cookie":{"name":"wp_parse_auth_cookie","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$cookie","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Parse a cookie into its components\n *\n * @since 2.7.0\n *\n * @param string $cookie\n * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in\n * @return array|false Authentication cookie components\n *\/"}]},"wp_set_auth_cookie":{"name":"wp_set_auth_cookie","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$remember","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$secure","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$token","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Log in a user by setting authentication cookies.\n *\n * The $remember parameter increases the time that the cookie will be kept. The\n * default the cookie is kept without remembering is two days. When $remember is\n * set, the cookies will be kept for 14 days or two weeks.\n *\n * @since 2.5.0\n * @since 4.3.0 Added the `$token` parameter.\n *\n * @param int    $user_id  User ID\n * @param bool   $remember Whether to remember the user\n * @param mixed  $secure   Whether the admin cookies should only be sent over HTTPS.\n *                         Default is_ssl().\n * @param string $token    Optional. User's session token to use for this cookie.\n *\/"}]},"wp_clear_auth_cookie":{"name":"wp_clear_auth_cookie","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes all of the cookies associated with authentication.\n *\n * @since 2.5.0\n *\/"}]},"is_user_logged_in":{"name":"is_user_logged_in","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks if the current visitor is a logged in user.\n *\n * @since 2.0.0\n *\n * @return bool True if user is logged in, false if not logged in.\n *\/"}]},"auth_redirect":{"name":"auth_redirect","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks if a user is logged in, if not it redirects them to the login page.\n *\n * @since 1.5.0\n *\/"}]},"check_admin_referer":{"name":"check_admin_referer","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$query_arg","rank":1,"variadic":false,"reference":false,"default":"'_wpnonce'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Makes sure that a user was referred from another admin page.\n *\n * To avoid security exploits.\n *\n * @since 1.2.0\n *\n * @param int|string $action    Action nonce.\n * @param string     $query_arg Optional. Key to check for nonce in `$_REQUEST` (since 2.5).\n *                              Default '_wpnonce'.\n * @return false|int False if the nonce is invalid, 1 if the nonce is valid and generated between\n *                   0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.\n *\/"}]},"check_ajax_referer":{"name":"check_ajax_referer","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$query_arg","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$die","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Verifies the Ajax request to prevent processing requests external of the blog.\n *\n * @since 2.0.3\n *\n * @param int|string   $action    Action nonce.\n * @param false|string $query_arg Optional. Key to check for the nonce in `$_REQUEST` (since 2.5). If false,\n *                                `$_REQUEST` values will be evaluated for '_ajax_nonce', and '_wpnonce'\n *                                (in that order). Default false.\n * @param bool         $die       Optional. Whether to die early when the nonce cannot be verified.\n *                                Default true.\n * @return false|int False if the nonce is invalid, 1 if the nonce is valid and generated between\n *                   0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.\n *\/"}]},"wp_redirect":{"name":"wp_redirect","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$location","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$status","rank":1,"variadic":false,"reference":false,"default":"302","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Redirects to another page.\n *\n * Note: wp_redirect() does not exit automatically, and should almost always be\n * followed by a call to `exit;`:\n *\n *     wp_redirect( $url );\n *     exit;\n *\n * Exiting can also be selectively manipulated by using wp_redirect() as a conditional\n * in conjunction with the {@see 'wp_redirect'} and {@see 'wp_redirect_location'} hooks:\n *\n *     if ( wp_redirect( $url ) ) {\n *         exit;\n *     }\n *\n * @since 1.5.1\n *\n * @global bool $is_IIS\n *\n * @param string $location The path to redirect to.\n * @param int    $status   Status code to use.\n * @return bool False if $location is not provided, true otherwise.\n *\/"}]},"wp_sanitize_redirect":{"name":"wp_sanitize_redirect","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$location","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitizes a URL for use in a redirect.\n *\n * @since 2.3.0\n *\n * @param string $location The path to redirect to.\n * @return string Redirect-sanitized URL.\n **\/"}]},"_wp_sanitize_utf8_in_redirect":{"name":"_wp_sanitize_utf8_in_redirect","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * URL encode UTF-8 characters in a URL.\n *\n * @ignore\n * @since 4.2.0\n * @access private\n *\n * @see wp_sanitize_redirect()\n *\n * @param array $matches RegEx matches against the redirect location.\n * @return string URL-encoded version of the first RegEx match.\n *\/"}]},"wp_safe_redirect":{"name":"wp_safe_redirect","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$location","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$status","rank":1,"variadic":false,"reference":false,"default":"302","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Performs a safe (local) redirect, using wp_redirect().\n *\n * Checks whether the $location is using an allowed host, if it has an absolute\n * path. A plugin can therefore set or remove allowed host(s) to or from the\n * list.\n *\n * If the host is not allowed, then the redirect defaults to wp-admin on the siteurl\n * instead. This prevents malicious redirects which redirect to another host,\n * but only used in a few places.\n *\n * @since 2.3.0\n *\n * @param string $location The path to redirect to.\n * @param int    $status   Status code to use.\n *\/"}]},"wp_validate_redirect":{"name":"wp_validate_redirect","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$location","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Validates a URL for use in a redirect.\n *\n * Checks whether the $location is using an allowed host, if it has an absolute\n * path. A plugin can therefore set or remove allowed host(s) to or from the\n * list.\n *\n * If the host is not allowed, then the redirect is to $default supplied\n *\n * @since 2.8.1\n *\n * @param string $location The redirect to validate\n * @param string $default  The value to return if $location is not allowed\n * @return string redirect-sanitized URL\n **\/"}]},"wp_notify_postauthor":{"name":"wp_notify_postauthor","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Notify an author (and\/or others) of a comment\/trackback\/pingback on a post.\n *\n * @since 1.0.0\n *\n * @param int|WP_Comment  $comment_id Comment ID or WP_Comment object.\n * @param string          $deprecated Not used\n * @return bool True on completion. False if no email addresses were specified.\n *\/"}]},"wp_notify_moderator":{"name":"wp_notify_moderator","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Notifies the moderator of the site about a new comment that is awaiting approval.\n *\n * @since 1.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * Uses the {@see 'notify_moderator'} filter to determine whether the site moderator\n * should be notified, overriding the site setting.\n *\n * @param int $comment_id Comment ID.\n * @return true Always returns true.\n *\/"}]},"wp_password_change_notification":{"name":"wp_password_change_notification","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Notify the blog admin of a user changing password, normally via email.\n *\n * @since 2.7.0\n *\n * @param WP_User $user User object.\n *\/"}]},"wp_new_user_notification":{"name":"wp_new_user_notification","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$notify","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Email login credentials to a newly-registered user.\n *\n * A new user registration notification is also sent to admin email.\n *\n * @since 2.0.0\n * @since 4.3.0 The `$plaintext_pass` parameter was changed to `$notify`.\n * @since 4.3.1 The `$plaintext_pass` parameter was deprecated. `$notify` added as a third parameter.\n * @since 4.6.0 The `$notify` parameter accepts 'user' for sending notification only to the user created.\n *\n * @global wpdb         $wpdb      WordPress database object for queries.\n * @global PasswordHash $wp_hasher Portable PHP password hashing framework instance.\n *\n * @param int    $user_id    User ID.\n * @param null   $deprecated Not used (argument deprecated).\n * @param string $notify     Optional. Type of notification that should happen. Accepts 'admin' or an empty\n *                           string (admin only), 'user', or 'both' (admin and user). Default empty.\n *\/"}]},"wp_nonce_tick":{"name":"wp_nonce_tick","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the time-dependent variable for nonce creation.\n *\n * A nonce has a lifespan of two ticks. Nonces in their second tick may be\n * updated, e.g. by autosave.\n *\n * @since 2.5.0\n *\n * @return float Float value rounded up to the next highest integer.\n *\/"}]},"wp_verify_nonce":{"name":"wp_verify_nonce","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$nonce","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$action","rank":1,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Verify that correct nonce was used with time limit.\n *\n * The user is given an amount of time to use the token, so therefore, since the\n * UID and $action remain the same, the independent variable is the time.\n *\n * @since 2.0.3\n *\n * @param string     $nonce  Nonce that was used in the form to verify\n * @param string|int $action Should give context to what is taking place and be the same when nonce was created.\n * @return false|int False if the nonce is invalid, 1 if the nonce is valid and generated between\n *                   0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.\n *\/"}]},"wp_create_nonce":{"name":"wp_create_nonce","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates a cryptographic token tied to a specific action, user, user session,\n * and window of time.\n *\n * @since 2.0.3\n * @since 4.0.0 Session tokens were integrated with nonce creation\n *\n * @param string|int $action Scalar value to add context to the nonce.\n * @return string The token.\n *\/"}]},"wp_salt":{"name":"wp_salt","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$scheme","rank":0,"variadic":false,"reference":false,"default":"'auth'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get salt to add to hashes.\n *\n * Salts are created using secret keys. Secret keys are located in two places:\n * in the database and in the wp-config.php file. The secret key in the database\n * is randomly generated and will be appended to the secret keys in wp-config.php.\n *\n * The secret keys in wp-config.php should be updated to strong, random keys to maximize\n * security. Below is an example of how the secret key constants are defined.\n * Do not paste this example directly into wp-config.php. Instead, have a\n * {@link https:\/\/api.wordpress.org\/secret-key\/1.1\/salt\/ secret key created} just\n * for you.\n *\n *     define('AUTH_KEY',         ' Xakm<o xQy rw4EMsLKM-?!T+,PFF})H4lzcW57AF0U@N@< >M%G4Yt>f`z]MON');\n *     define('SECURE_AUTH_KEY',  'LzJ}op]mr|6+![P}Ak:uNdJCJZd>(Hx.-Mh#Tz)pCIU#uGEnfFz|f ;;eU%\/U^O~');\n *     define('LOGGED_IN_KEY',    '|i|Ux`9<p-h$aFf(qnT:sDO:D1P^wZ$$\/Ra@miTJi9G;ddp_<q}6H1)o|a +&JCM');\n *     define('NONCE_KEY',        '%:R{[P|,s.KuMltH5}cI;\/k<Gx~j!f0I)m_sIyu+&NJZ)-iO>z7X>QYR0Z_XnZ@|');\n *     define('AUTH_SALT',        'eZyT)-Naw]F8CwA*VaW#q*|.)g@o}||wf~@C-YSt}(dh_r6EbI#A,y|nU2{B#JBW');\n *     define('SECURE_AUTH_SALT', '!=oLUTXh,QW=H `}`L|9\/^4-3 STz},T(w}W<I`.JjPi)<Bmf1v,HpGe}T1:Xt7n');\n *     define('LOGGED_IN_SALT',   '+XSqHc;@Q*K_b|Z?NC[3H!!EONbh.n<+=uKR:>*c(u`g~EJBf#8u#R{mUEZrozmm');\n *     define('NONCE_SALT',       'h`GXHhD>SLWVfg1(1(N{;.V!MoE(SfbA_ksP@&`+AycHcAV$+?@3q+rxV{%^VyKT');\n *\n * Salting passwords helps against tools which has stored hashed values of\n * common dictionary strings. The added values makes it harder to crack.\n *\n * @since 2.5.0\n *\n * @link https:\/\/api.wordpress.org\/secret-key\/1.1\/salt\/ Create secrets for wp-config.php\n *\n * @staticvar array $cached_salts\n * @staticvar array $duplicated_keys\n *\n * @param string $scheme Authentication scheme (auth, secure_auth, logged_in, nonce)\n * @return string Salt value\n *\/"}]},"wp_hash":{"name":"wp_hash","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":1,"variadic":false,"reference":false,"default":"'auth'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get hash of given string.\n *\n * @since 2.0.3\n *\n * @param string $data   Plain text to hash\n * @param string $scheme Authentication scheme (auth, secure_auth, logged_in, nonce)\n * @return string Hash of $data\n *\/"}]},"wp_hash_password":{"name":"wp_hash_password","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$password","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create a hash (encrypt) of a plain text password.\n *\n * For integration with other applications, this function can be overwritten to\n * instead use the other package password checking algorithm.\n *\n * @since 2.5.0\n *\n * @global PasswordHash $wp_hasher PHPass object\n *\n * @param string $password Plain text user password to hash\n * @return string The hash string of the password\n *\/"}]},"wp_check_password":{"name":"wp_check_password","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$password","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$hash","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_id","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks the plaintext password against the encrypted Password.\n *\n * Maintains compatibility between old version and the new cookie authentication\n * protocol using PHPass library. The $hash parameter is the encrypted password\n * and the function compares the plain text password when encrypted similarly\n * against the already encrypted password to see if they match.\n *\n * For integration with other applications, this function can be overwritten to\n * instead use the other package password checking algorithm.\n *\n * @since 2.5.0\n *\n * @global PasswordHash $wp_hasher PHPass object used for checking the password\n *\tagainst the $hash + $password\n * @uses PasswordHash::CheckPassword\n *\n * @param string     $password Plaintext user's password\n * @param string     $hash     Hash of the user's password to check against.\n * @param string|int $user_id  Optional. User ID.\n * @return bool False, if the $password does not match the hashed password\n *\/"}]},"wp_generate_password":{"name":"wp_generate_password","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$length","rank":0,"variadic":false,"reference":false,"default":"12","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$special_chars","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$extra_special_chars","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Generates a random password drawn from the defined set of characters.\n *\n * @since 2.5.0\n *\n * @param int  $length              Optional. The length of password to generate. Default 12.\n * @param bool $special_chars       Optional. Whether to include standard special characters.\n *                                  Default true.\n * @param bool $extra_special_chars Optional. Whether to include other special characters.\n *                                  Used when generating secret keys and salts. Default false.\n * @return string The random password.\n *\/"}]},"wp_rand":{"name":"wp_rand","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$min","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Generates a random number\n *\n * @since 2.6.2\n * @since 4.4.0 Uses PHP7 random_int() or the random_compat library if available.\n *\n * @global string $rnd_value\n * @staticvar string $seed\n * @staticvar bool $external_rand_source_available\n *\n * @param int $min Lower limit for the generated number\n * @param int $max Upper limit for the generated number\n * @return int A random number between min and max\n *\/"}]},"wp_set_password":{"name":"wp_set_password","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$password","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Updates the user's password with a new encrypted one.\n *\n * For integration with other applications, this function can be overwritten to\n * instead use the other package password checking algorithm.\n *\n * Please note: This function should be used sparingly and is really only meant for single-time\n * application. Leveraging this improperly in a plugin or theme could result in an endless loop\n * of password resets if precautions are not taken to ensure it does not execute on every page load.\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $password The plaintext new user password\n * @param int    $user_id  User ID\n *\/"}]},"get_avatar":{"name":"get_avatar","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id_or_email","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":1,"variadic":false,"reference":false,"default":"96","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$alt","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the avatar `<img>` tag for a user, email address, MD5 hash, comment, or post.\n *\n * @since 2.5.0\n * @since 4.2.0 Optional `$args` parameter added.\n *\n * @param mixed $id_or_email The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,\n *                           user email, WP_User object, WP_Post object, or WP_Comment object.\n * @param int    $size       Optional. Height and width of the avatar image file in pixels. Default 96.\n * @param string $default    Optional. URL for the default image or a default type. Accepts '404'\n *                           (return a 404 instead of a default image), 'retro' (8bit), 'monsterid'\n *                           (monster), 'wavatar' (cartoon face), 'indenticon' (the \"quilt\"),\n *                           'mystery', 'mm', or 'mysteryman' (The Oyster Man), 'blank' (transparent GIF),\n *                           or 'gravatar_default' (the Gravatar logo). Default is the value of the\n *                           'avatar_default' option, with a fallback of 'mystery'.\n * @param string $alt        Optional. Alternative text to use in &lt;img&gt; tag. Default empty.\n * @param array  $args       {\n *     Optional. Extra arguments to retrieve the avatar.\n *\n *     @type int          $height        Display height of the avatar in pixels. Defaults to $size.\n *     @type int          $width         Display width of the avatar in pixels. Defaults to $size.\n *     @type bool         $force_default Whether to always show the default image, never the Gravatar. Default false.\n *     @type string       $rating        What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are\n *                                       judged in that order. Default is the value of the 'avatar_rating' option.\n *     @type string       $scheme        URL scheme to use. See set_url_scheme() for accepted values.\n *                                       Default null.\n *     @type array|string $class         Array or string of additional classes to add to the &lt;img&gt; element.\n *                                       Default null.\n *     @type bool         $force_display Whether to always show the avatar - ignores the show_avatars option.\n *                                       Default false.\n *     @type string       $extra_attr    HTML attributes to insert in the IMG element. Is not sanitized. Default empty.\n * }\n * @return false|string `<img>` tag for the user's avatar. False on failure.\n *\/"}]},"wp_text_diff":{"name":"wp_text_diff","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$left_string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$right_string","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays a human readable HTML representation of the difference between two strings.\n *\n * The Diff is available for getting the changes between versions. The output is\n * HTML, so the primary use is for displaying the changes. If the two strings\n * are equivalent, then an empty string will be returned.\n *\n * The arguments supported and can be changed are listed below.\n *\n * 'title' : Default is an empty string. Titles the diff in a manner compatible\n *\t\twith the output.\n * 'title_left' : Default is an empty string. Change the HTML to the left of the\n *\t\ttitle.\n * 'title_right' : Default is an empty string. Change the HTML to the right of\n *\t\tthe title.\n *\n * @since 2.6.0\n *\n * @see wp_parse_args() Used to change defaults to user defined settings.\n * @uses Text_Diff\n * @uses WP_Text_Diff_Renderer_Table\n *\n * @param string       $left_string  \"old\" (left) version of string\n * @param string       $right_string \"new\" (right) version of string\n * @param string|array $args         Optional. Change 'title', 'title_left', and 'title_right' defaults.\n * @return string Empty string if strings are equivalent or HTML with differences.\n *\/"}]},"wp_initial_constants":{"name":"wp_initial_constants","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Defines constants and global variables that can be overridden, generally in wp-config.php.\n *\n * @package WordPress\n *\/"},{"phpdoc":"\/**\n * Defines initial WordPress constants\n *\n * @see wp_debug_mode()\n *\n * @since 3.0.0\n *\n * @global int $blog_id\n *\/"}]},"wp_plugin_directory_constants":{"name":"wp_plugin_directory_constants","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Defines plugin directory WordPress constants\n *\n * Defines must-use plugin directory constants, which may be overridden in the sunrise.php drop-in\n *\n * @since 3.0.0\n *\/"}]},"wp_cookie_constants":{"name":"wp_cookie_constants","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Defines cookie related WordPress constants\n *\n * Defines constants after multisite is loaded.\n * @since 3.0.0\n *\/"}]},"wp_ssl_constants":{"name":"wp_ssl_constants","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Defines cookie related WordPress constants\n *\n * @since 3.0.0\n *\/"}]},"wp_functionality_constants":{"name":"wp_functionality_constants","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Defines functionality related WordPress constants\n *\n * @since 3.0.0\n *\/"}]},"wp_templating_constants":{"name":"wp_templating_constants","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Defines templating related WordPress constants\n *\n * @since 3.0.0\n *\/"}]},"get_query_var":{"name":"get_query_var","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$var","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * WordPress Query API\n *\n * The query API attempts to get which part of WordPress the user is on. It\n * also provides functionality for getting URL query information.\n *\n * @link https:\/\/codex.wordpress.org\/The_Loop More information on The Loop.\n *\n * @package WordPress\n * @subpackage Query\n *\/"},{"phpdoc":"\/**\n * Retrieve variable in the WP_Query class.\n *\n * @since 1.5.0\n * @since 3.9.0 The `$default` argument was introduced.\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @param string $var       The variable key to retrieve.\n * @param mixed  $default   Optional. Value to return if the query variable is not set. Default empty.\n * @return mixed Contents of the query variable.\n *\/"}]},"get_queried_object":{"name":"get_queried_object","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the currently-queried object.\n *\n * Wrapper for WP_Query::get_queried_object().\n *\n * @since 3.1.0\n * @access public\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return object Queried object.\n *\/"}]},"get_queried_object_id":{"name":"get_queried_object_id","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve ID of the current queried object.\n *\n * Wrapper for WP_Query::get_queried_object_id().\n *\n * @since 3.1.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return int ID of the queried object.\n *\/"}]},"set_query_var":{"name":"set_query_var","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$var","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set query variable.\n *\n * @since 2.2.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @param string $var   Query variable key.\n * @param mixed  $value Query variable value.\n *\/"}]},"query_posts":{"name":"query_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sets up The Loop with query parameters.\n *\n * Note: This function will completely override the main query and isn't intended for use\n * by plugins or themes. Its overly-simplistic approach to modifying the main query can be\n * problematic and should be avoided wherever possible. In most cases, there are better,\n * more performant options for modifying the main query such as via the {@see 'pre_get_posts'}\n * action within WP_Query.\n *\n * This must not be used within the WordPress Loop.\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @param array|string $query Array or string of WP_Query arguments.\n * @return array List of post objects.\n *\/"}]},"wp_reset_query":{"name":"wp_reset_query","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Destroys the previous query and sets up a new query.\n *\n * This should be used after query_posts() and before another query_posts().\n * This will remove obscure bugs that occur when the previous WP_Query object\n * is not destroyed properly before another is set up.\n *\n * @since 2.3.0\n *\n * @global WP_Query $wp_query     Global WP_Query instance.\n * @global WP_Query $wp_the_query Copy of the global WP_Query instance created during wp_reset_query().\n *\/"}]},"wp_reset_postdata":{"name":"wp_reset_postdata","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * After looping through a separate query, this function restores\n * the $post global to the current post in the main query.\n *\n * @since 3.0.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\/"}]},"is_archive":{"name":"is_archive","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for an existing archive page?\n *\n * Month, Year, Category, Author, Post Type archive...\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool\n *\/"}]},"is_post_type_archive":{"name":"is_post_type_archive","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_types","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for an existing post type archive page?\n *\n * @since 3.1.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @param string|array $post_types Optional. Post type or array of posts types to check against.\n * @return bool\n *\/"}]},"is_attachment":{"name":"is_attachment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attachment","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for an existing attachment page?\n *\n * @since 2.0.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @param int|string|array|object $attachment Attachment ID, title, slug, or array of such.\n * @return bool\n *\/"}]},"is_author":{"name":"is_author","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$author","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for an existing author archive page?\n *\n * If the $author parameter is specified, this function will additionally\n * check if the query is for one of the authors specified.\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @param mixed $author Optional. User ID, nickname, nicename, or array of User IDs, nicknames, and nicenames\n * @return bool\n *\/"}]},"is_category":{"name":"is_category","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$category","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for an existing category archive page?\n *\n * If the $category parameter is specified, this function will additionally\n * check if the query is for one of the categories specified.\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @param mixed $category Optional. Category ID, name, slug, or array of Category IDs, names, and slugs.\n * @return bool\n *\/"}]},"is_tag":{"name":"is_tag","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for an existing tag archive page?\n *\n * If the $tag parameter is specified, this function will additionally\n * check if the query is for one of the tags specified.\n *\n * @since 2.3.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @param mixed $tag Optional. Tag ID, name, slug, or array of Tag IDs, names, and slugs.\n * @return bool\n *\/"}]},"is_tax":{"name":"is_tax","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$term","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for an existing custom taxonomy archive page?\n *\n * If the $taxonomy parameter is specified, this function will additionally\n * check if the query is for that specific $taxonomy.\n *\n * If the $term parameter is specified in addition to the $taxonomy parameter,\n * this function will additionally check if the query is for one of the terms\n * specified.\n *\n * @since 2.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @param string|array     $taxonomy Optional. Taxonomy slug or slugs.\n * @param int|string|array $term     Optional. Term ID, name, slug or array of Term IDs, names, and slugs.\n * @return bool True for custom taxonomy archive pages, false for built-in taxonomies (category and tag archives).\n *\/"}]},"is_date":{"name":"is_date","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for an existing date archive?\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool\n *\/"}]},"is_day":{"name":"is_day","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for an existing day archive?\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool\n *\/"}]},"is_feed":{"name":"is_feed","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$feeds","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for a feed?\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @param string|array $feeds Optional feed types to check.\n * @return bool\n *\/"}]},"is_comment_feed":{"name":"is_comment_feed","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for a comments feed?\n *\n * @since 3.0.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool\n *\/"}]},"is_front_page":{"name":"is_front_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for the front page of the site?\n *\n * This is for what is displayed at your site's main URL.\n *\n * Depends on the site's \"Front page displays\" Reading Settings 'show_on_front' and 'page_on_front'.\n *\n * If you set a static page for the front page of your site, this function will return\n * true when viewing that page.\n *\n * Otherwise the same as @see is_home()\n *\n * @since 2.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool True, if front of site.\n *\/"}]},"is_home":{"name":"is_home","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines if the query is for the blog homepage.\n *\n * The blog homepage is the page that shows the time-based blog content of the site.\n *\n * is_home() is dependent on the site's \"Front page displays\" Reading Settings 'show_on_front'\n * and 'page_for_posts'.\n *\n * If a static page is set for the front page of the site, this function will return true only\n * on the page you set as the \"Posts page\".\n *\n * @since 1.5.0\n *\n * @see is_front_page()\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool True if blog view homepage, otherwise false.\n *\/"}]},"is_month":{"name":"is_month","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for an existing month archive?\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool\n *\/"}]},"is_page":{"name":"is_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$page","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for an existing single page?\n *\n * If the $page parameter is specified, this function will additionally\n * check if the query is for one of the pages specified.\n *\n * @see is_single()\n * @see is_singular()\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @param int|string|array $page Optional. Page ID, title, slug, or array of such. Default empty.\n * @return bool Whether the query is for an existing single page.\n *\/"}]},"is_paged":{"name":"is_paged","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for paged result and not for the first page?\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool\n *\/"}]},"is_preview":{"name":"is_preview","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for a post or page preview?\n *\n * @since 2.0.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool\n *\/"}]},"is_robots":{"name":"is_robots","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for the robots file?\n *\n * @since 2.1.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool\n *\/"}]},"is_search":{"name":"is_search","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for a search?\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool\n *\/"}]},"is_single":{"name":"is_single","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for an existing single post?\n *\n * Works for any post type, except attachments and pages\n *\n * If the $post parameter is specified, this function will additionally\n * check if the query is for one of the Posts specified.\n *\n * @see is_page()\n * @see is_singular()\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @param int|string|array $post Optional. Post ID, title, slug, or array of such. Default empty.\n * @return bool Whether the query is for an existing single post.\n *\/"}]},"is_singular":{"name":"is_singular","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_types","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for an existing single post of any post type (post, attachment, page, ... )?\n *\n * If the $post_types parameter is specified, this function will additionally\n * check if the query is for one of the Posts Types specified.\n *\n * @see is_page()\n * @see is_single()\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @param string|array $post_types Optional. Post type or array of post types. Default empty.\n * @return bool Whether the query is for an existing single post of any of the given post types.\n *\/"}]},"is_time":{"name":"is_time","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for a specific time?\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool\n *\/"}]},"is_trackback":{"name":"is_trackback","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for a trackback endpoint call?\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool\n *\/"}]},"is_year":{"name":"is_year","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for an existing year archive?\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool\n *\/"}]},"is_404":{"name":"is_404","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query a 404 (returns no results)?\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool\n *\/"}]},"is_embed":{"name":"is_embed","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query for an embedded post?\n *\n * @since 4.4.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool Whether we're in an embedded post or not.\n *\/"}]},"is_main_query":{"name":"is_main_query","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the query the main query?\n *\n * @since 3.3.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool\n *\/"}]},"have_posts":{"name":"have_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether current WordPress query has results to loop over.\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool\n *\/"}]},"in_the_loop":{"name":"in_the_loop","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether the caller is in the Loop.\n *\n * @since 2.0.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool True if caller is within loop, false if loop hasn't started or ended.\n *\/"}]},"rewind_posts":{"name":"rewind_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Rewind the loop posts.\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\/"}]},"the_post":{"name":"the_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Iterate the post index in the loop.\n *\n * @since 1.5.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\/"}]},"have_comments":{"name":"have_comments","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether there are comments to loop over.\n *\n * @since 2.2.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return bool\n *\/"}]},"the_comment":{"name":"the_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Iterate comment index in the comment loop.\n *\n * @since 2.2.0\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @return object\n *\/"}]},"wp_old_slug_redirect":{"name":"wp_old_slug_redirect","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Redirect old slugs to the correct permalink.\n *\n * Attempts to find the current slug from the past slugs.\n *\n * @since 2.1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\/"}]},"setup_postdata":{"name":"setup_postdata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set up global post data.\n *\n * @since 1.5.0\n * @since 4.4.0 Added the ability to pass a post ID to `$post`.\n *\n * @global WP_Query $wp_query Global WP_Query instance.\n *\n * @param WP_Post|object|int $post WP_Post instance or Post ID\/object.\n * @return bool True when finished.\n *\/"}]},"set_current_user":{"name":"set_current_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Changes the current user by ID or name.\n *\n * Set $id to null and specify a name if you do not know a user's ID.\n *\n * @since 2.0.1\n * @deprecated 3.0.0 Use wp_set_current_user()\n * @see wp_set_current_user()\n *\n * @param int|null $id User ID.\n * @param string $name Optional. The user's username\n * @return WP_User returns wp_set_current_user()\n *\/"}]},"get_currentuserinfo":{"name":"get_currentuserinfo","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Populate global variables with information about the currently logged in user.\n *\n * @since 0.71\n * @deprecated 4.5.0 Use wp_get_current_user()\n * @see wp_get_current_user()\n *\n * @return bool|WP_User False on XMLRPC Request and invalid auth cookie, WP_User instance otherwise.\n *\/"}]},"get_userdatabylogin":{"name":"get_userdatabylogin","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_login","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve user info by login name.\n *\n * @since 0.71\n * @deprecated 3.3.0 Use get_user_by()\n * @see get_user_by()\n *\n * @param string $user_login User's username\n * @return bool|object False on failure, User DB row object\n *\/"}]},"get_user_by_email":{"name":"get_user_by_email","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$email","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve user info by email.\n *\n * @since 2.5.0\n * @deprecated 3.3.0 Use get_user_by()\n * @see get_user_by()\n *\n * @param string $email User's email address\n * @return bool|object False on failure, User DB row object\n *\/"}]},"wp_setcookie":{"name":"wp_setcookie","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$username","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$password","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$already_md5","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$home","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$siteurl","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$remember","rank":5,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sets a cookie for a user who just logged in. This function is deprecated.\n *\n * @since 1.5.0\n * @deprecated 2.5.0 Use wp_set_auth_cookie()\n * @see wp_set_auth_cookie()\n *\n * @param string $username The user's username\n * @param string $password Optional. The user's password\n * @param bool $already_md5 Optional. Whether the password has already been through MD5\n * @param string $home Optional. Will be used instead of COOKIEPATH if set\n * @param string $siteurl Optional. Will be used instead of SITECOOKIEPATH if set\n * @param bool $remember Optional. Remember that the user is logged in\n *\/"}]},"wp_clearcookie":{"name":"wp_clearcookie","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Clears the authentication cookie, logging the user out. This function is deprecated.\n *\n * @since 1.5.0\n * @deprecated 2.5.0 Use wp_clear_auth_cookie()\n * @see wp_clear_auth_cookie()\n *\/"}]},"wp_get_cookie_login":{"name":"wp_get_cookie_login","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the user cookie login. This function is deprecated.\n *\n * This function is deprecated and should no longer be extended as it won't be\n * used anywhere in WordPress. Also, plugins shouldn't use it either.\n *\n * @since 2.0.3\n * @deprecated 2.5.0\n *\n * @return bool Always returns false\n *\/"}]},"wp_login":{"name":"wp_login","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$username","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$password","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks a users login information and logs them in if it checks out. This function is deprecated.\n *\n * Use the global $error to get the reason why the login failed. If the username\n * is blank, no error will be set, so assume blank username on that case.\n *\n * Plugins extending this function should also provide the global $error and set\n * what the error is, so that those checking the global for why there was a\n * failure can utilize it later.\n *\n * @since 1.2.2\n * @deprecated 2.5.0 Use wp_signon()\n * @see wp_signon()\n *\n * @global string $error Error when false is returned\n *\n * @param string $username   User's username\n * @param string $password   User's password\n * @param string $deprecated Not used\n * @return bool False on login failure, true on successful check\n *\/"}]},"get_locale":{"name":"get_locale","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the current locale.\n *\n * If the locale is set, then it will filter the locale in the {@see 'locale'}\n * filter hook and return the value.\n *\n * If the locale is not set already, then the WPLANG constant is used if it is\n * defined. Then it is filtered through the {@see 'locale'} filter hook and\n * the value for the locale global set and the locale is returned.\n *\n * The process to get the locale should only be done once, but the locale will\n * always be filtered using the {@see 'locale'} hook.\n *\n * @since 1.5.0\n *\n * @global string $locale\n * @global string $wp_local_package\n *\n * @return string The locale of the blog or from the {@see 'locale'} hook.\n *\/"},{"phpdoc":"\/**\n * Core Translation API\n *\n * @package WordPress\n * @subpackage i18n\n * @since 1.2.0\n *\/"}]},"get_user_locale":{"name":"get_user_locale","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the locale of a user.\n *\n * If the user has a locale set to a non-empty string then it will be\n * returned. Otherwise it returns the locale of get_locale().\n *\n * @since 4.7.0\n *\n * @param int|WP_User $user_id User's ID or a WP_User object. Defaults to current user.\n * @return string The locale of the user.\n *\/"}]},"translate":{"name":"translate","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":1,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the translation of $text.\n *\n * If there is no translation, or the text domain isn't loaded, the original text is returned.\n *\n * *Note:* Don't use translate() directly, use __() or related functions.\n *\n * @since 2.2.0\n *\n * @param string $text   Text to translate.\n * @param string $domain Optional. Text domain. Unique identifier for retrieving translated strings.\n *                       Default 'default'.\n * @return string Translated text\n *\/"}]},"before_last_bar":{"name":"before_last_bar","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove last item on a pipe-delimited string.\n *\n * Meant for removing the last item in a string, such as 'Role name|User role'. The original\n * string will be returned if no pipe '|' characters are found in the string.\n *\n * @since 2.8.0\n *\n * @param string $string A pipe-delimited string.\n * @return string Either $string or everything before the last pipe.\n *\/"}]},"translate_with_gettext_context":{"name":"translate_with_gettext_context","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":2,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the translation of $text in the context defined in $context.\n *\n * If there is no translation, or the text domain isn't loaded the original\n * text is returned.\n *\n * *Note:* Don't use translate_with_gettext_context() directly, use _x() or related functions.\n *\n * @since 2.8.0\n *\n * @param string $text    Text to translate.\n * @param string $context Context information for the translators.\n * @param string $domain  Optional. Text domain. Unique identifier for retrieving translated strings.\n *                        Default 'default'.\n * @return string Translated text on success, original text on failure.\n *\/"}]},"esc_attr__":{"name":"esc_attr__","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":1,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the translation of $text and escapes it for safe use in an attribute.\n *\n * If there is no translation, or the text domain isn't loaded, the original text is returned.\n *\n * @since 2.8.0\n *\n * @param string $text   Text to translate.\n * @param string $domain Optional. Text domain. Unique identifier for retrieving translated strings.\n *                       Default 'default'.\n * @return string Translated text on success, original text on failure.\n *\/"}]},"esc_html__":{"name":"esc_html__","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":1,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the translation of $text and escapes it for safe use in HTML output.\n *\n * If there is no translation, or the text domain isn't loaded, the original text is returned.\n *\n * @since 2.8.0\n *\n * @param string $text   Text to translate.\n * @param string $domain Optional. Text domain. Unique identifier for retrieving translated strings.\n *                       Default 'default'.\n * @return string Translated text\n *\/"}]},"_e":{"name":"_e","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":1,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display translated text.\n *\n * @since 1.2.0\n *\n * @param string $text   Text to translate.\n * @param string $domain Optional. Text domain. Unique identifier for retrieving translated strings.\n *                       Default 'default'.\n *\/"}]},"esc_attr_e":{"name":"esc_attr_e","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":1,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display translated text that has been escaped for safe use in an attribute.\n *\n * @since 2.8.0\n *\n * @param string $text   Text to translate.\n * @param string $domain Optional. Text domain. Unique identifier for retrieving translated strings.\n *                       Default 'default'.\n *\/"}]},"esc_html_e":{"name":"esc_html_e","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":1,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display translated text that has been escaped for safe use in HTML output.\n *\n * @since 2.8.0\n *\n * @param string $text   Text to translate.\n * @param string $domain Optional. Text domain. Unique identifier for retrieving translated strings.\n *                       Default 'default'.\n *\/"}]},"_ex":{"name":"_ex","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":2,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display translated string with gettext context.\n *\n * @since 3.0.0\n *\n * @param string $text    Text to translate.\n * @param string $context Context information for the translators.\n * @param string $domain  Optional. Text domain. Unique identifier for retrieving translated strings.\n *                        Default 'default'.\n * @return string Translated context string without pipe.\n *\/"}]},"esc_attr_x":{"name":"esc_attr_x","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":2,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Translate string with gettext context, and escapes it for safe use in an attribute.\n *\n * @since 2.8.0\n *\n * @param string $text    Text to translate.\n * @param string $context Context information for the translators.\n * @param string $domain  Optional. Text domain. Unique identifier for retrieving translated strings.\n *                        Default 'default'.\n * @return string Translated text\n *\/"}]},"esc_html_x":{"name":"esc_html_x","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":2,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Translate string with gettext context, and escapes it for safe use in HTML output.\n *\n * @since 2.9.0\n *\n * @param string $text    Text to translate.\n * @param string $context Context information for the translators.\n * @param string $domain  Optional. Text domain. Unique identifier for retrieving translated strings.\n *                        Default 'default'.\n * @return string Translated text.\n *\/"}]},"_n":{"name":"_n","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$single","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$plural","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$number","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":3,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Translates and retrieves the singular or plural form based on the supplied number.\n *\n * Used when you want to use the appropriate form of a string based on whether a\n * number is singular or plural.\n *\n * Example:\n *\n *     printf( _n( '%s person', '%s people', $count, 'text-domain' ), number_format_i18n( $count ) );\n *\n * @since 2.8.0\n *\n * @param string $single The text to be used if the number is singular.\n * @param string $plural The text to be used if the number is plural.\n * @param int    $number The number to compare against to use either the singular or plural form.\n * @param string $domain Optional. Text domain. Unique identifier for retrieving translated strings.\n *                       Default 'default'.\n * @return string The translated singular or plural form.\n *\/"}]},"_nx":{"name":"_nx","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$single","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$plural","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$number","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":4,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Translates and retrieves the singular or plural form based on the supplied number, with gettext context.\n *\n * This is a hybrid of _n() and _x(). It supports context and plurals.\n *\n * Used when you want to use the appropriate form of a string with context based on whether a\n * number is singular or plural.\n *\n * Example of a generic phrase which is disambiguated via the context parameter:\n *\n *     printf( _nx( '%s group', '%s groups', $people, 'group of people', 'text-domain' ), number_format_i18n( $people ) );\n *     printf( _nx( '%s group', '%s groups', $animals, 'group of animals', 'text-domain' ), number_format_i18n( $animals ) );\n *\n * @since 2.8.0\n *\n * @param string $single  The text to be used if the number is singular.\n * @param string $plural  The text to be used if the number is plural.\n * @param int    $number  The number to compare against to use either the singular or plural form.\n * @param string $context Context information for the translators.\n * @param string $domain  Optional. Text domain. Unique identifier for retrieving translated strings.\n *                        Default 'default'.\n * @return string The translated singular or plural form.\n *\/"}]},"_n_noop":{"name":"_n_noop","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$singular","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$plural","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers plural strings in POT file, but does not translate them.\n *\n * Used when you want to keep structures with translatable plural\n * strings and use them later when the number is known.\n *\n * Example:\n *\n *     $message = _n_noop( '%s post', '%s posts', 'text-domain' );\n *     ...\n *     printf( translate_nooped_plural( $message, $count, 'text-domain' ), number_format_i18n( $count ) );\n *\n * @since 2.5.0\n *\n * @param string $singular Singular form to be localized.\n * @param string $plural   Plural form to be localized.\n * @param string $domain   Optional. Text domain. Unique identifier for retrieving translated strings.\n *                         Default null.\n * @return array {\n *     Array of translation information for the strings.\n *\n *     @type string $0        Singular form to be localized. No longer used.\n *     @type string $1        Plural form to be localized. No longer used.\n *     @type string $singular Singular form to be localized.\n *     @type string $plural   Plural form to be localized.\n *     @type null   $context  Context information for the translators.\n *     @type string $domain   Text domain.\n * }\n *\/"}]},"_nx_noop":{"name":"_nx_noop","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$singular","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$plural","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers plural strings with gettext context in POT file, but does not translate them.\n *\n * Used when you want to keep structures with translatable plural\n * strings and use them later when the number is known.\n *\n * Example of a generic phrase which is disambiguated via the context parameter:\n *\n *     $messages = array(\n *      \t'people'  => _nx_noop( '%s group', '%s groups', 'people', 'text-domain' ),\n *      \t'animals' => _nx_noop( '%s group', '%s groups', 'animals', 'text-domain' ),\n *     );\n *     ...\n *     $message = $messages[ $type ];\n *     printf( translate_nooped_plural( $message, $count, 'text-domain' ), number_format_i18n( $count ) );\n *\n * @since 2.8.0\n *\n * @param string $singular Singular form to be localized.\n * @param string $plural   Plural form to be localized.\n * @param string $context  Context information for the translators.\n * @param string $domain   Optional. Text domain. Unique identifier for retrieving translated strings.\n *                         Default null.\n * @return array {\n *     Array of translation information for the strings.\n *\n *     @type string $0        Singular form to be localized. No longer used.\n *     @type string $1        Plural form to be localized. No longer used.\n *     @type string $2        Context information for the translators. No longer used.\n *     @type string $singular Singular form to be localized.\n *     @type string $plural   Plural form to be localized.\n *     @type string $context  Context information for the translators.\n *     @type string $domain   Text domain.\n * }\n *\/"}]},"translate_nooped_plural":{"name":"translate_nooped_plural","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$nooped_plural","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$count","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":2,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Translates and retrieves the singular or plural form of a string that's been registered\n * with _n_noop() or _nx_noop().\n *\n * Used when you want to use a translatable plural string once the number is known.\n *\n * Example:\n *\n *     $message = _n_noop( '%s post', '%s posts', 'text-domain' );\n *     ...\n *     printf( translate_nooped_plural( $message, $count, 'text-domain' ), number_format_i18n( $count ) );\n *\n * @since 3.1.0\n *\n * @param array  $nooped_plural Array with singular, plural, and context keys, usually the result of _n_noop() or _nx_noop().\n * @param int    $count         Number of objects.\n * @param string $domain        Optional. Text domain. Unique identifier for retrieving translated strings. If $nooped_plural contains\n *                              a text domain passed to _n_noop() or _nx_noop(), it will override this value. Default 'default'.\n * @return string Either $single or $plural translated text.\n *\/"}]},"load_textdomain":{"name":"load_textdomain","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mofile","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load a .mo file into the text domain $domain.\n *\n * If the text domain already exists, the translations will be merged. If both\n * sets have the same string, the translation from the original value will be taken.\n *\n * On success, the .mo file will be placed in the $l10n global by $domain\n * and will be a MO object.\n *\n * @since 1.5.0\n *\n * @global array $l10n          An array of all currently loaded text domains.\n * @global array $l10n_unloaded An array of all text domains that have been unloaded again.\n *\n * @param string $domain Text domain. Unique identifier for retrieving translated strings.\n * @param string $mofile Path to the .mo file.\n * @return bool True on success, false on failure.\n *\/"}]},"unload_textdomain":{"name":"unload_textdomain","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Unload translations for a text domain.\n *\n * @since 3.0.0\n *\n * @global array $l10n          An array of all currently loaded text domains.\n * @global array $l10n_unloaded An array of all text domains that have been unloaded again.\n *\n * @param string $domain Text domain. Unique identifier for retrieving translated strings.\n * @return bool Whether textdomain was unloaded.\n *\/"}]},"load_default_textdomain":{"name":"load_default_textdomain","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$locale","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load default translated strings based on locale.\n *\n * Loads the .mo file in WP_LANG_DIR constant path from WordPress root.\n * The translated (.mo) file is named based on the locale.\n *\n * @see load_textdomain()\n *\n * @since 1.5.0\n *\n * @param string $locale Optional. Locale to load. Default is the value of get_locale().\n * @return bool Whether the textdomain was loaded.\n *\/"}]},"load_plugin_textdomain":{"name":"load_plugin_textdomain","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$plugin_rel_path","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Loads a plugin's translated strings.\n *\n * If the path is not given then it will be the root of the plugin directory.\n *\n * The .mo file should be named based on the text domain with a dash, and then the locale exactly.\n *\n * @since 1.5.0\n * @since 4.6.0 The function now tries to load the .mo file from the languages directory first.\n *\n * @param string $domain          Unique identifier for retrieving translated strings\n * @param string $deprecated      Optional. Use the $plugin_rel_path parameter instead. Default false.\n * @param string $plugin_rel_path Optional. Relative path to WP_PLUGIN_DIR where the .mo file resides.\n *                                Default false.\n * @return bool True when textdomain is successfully loaded, false otherwise.\n *\/"}]},"load_muplugin_textdomain":{"name":"load_muplugin_textdomain","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mu_plugin_rel_path","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load the translated strings for a plugin residing in the mu-plugins directory.\n *\n * @since 3.0.0\n * @since 4.6.0 The function now tries to load the .mo file from the languages directory first.\n *\n * @param string $domain             Text domain. Unique identifier for retrieving translated strings.\n * @param string $mu_plugin_rel_path Optional. Relative to `WPMU_PLUGIN_DIR` directory in which the .mo\n *                                   file resides. Default empty string.\n * @return bool True when textdomain is successfully loaded, false otherwise.\n *\/"}]},"load_theme_textdomain":{"name":"load_theme_textdomain","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load the theme's translated strings.\n *\n * If the current locale exists as a .mo file in the theme's root directory, it\n * will be included in the translated strings by the $domain.\n *\n * The .mo files must be named based on the locale exactly.\n *\n * @since 1.5.0\n * @since 4.6.0 The function now tries to load the .mo file from the languages directory first.\n *\n * @param string $domain Text domain. Unique identifier for retrieving translated strings.\n * @param string $path   Optional. Path to the directory containing the .mo file.\n *                       Default false.\n * @return bool True when textdomain is successfully loaded, false otherwise.\n *\/"}]},"load_child_theme_textdomain":{"name":"load_child_theme_textdomain","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load the child themes translated strings.\n *\n * If the current locale exists as a .mo file in the child themes\n * root directory, it will be included in the translated strings by the $domain.\n *\n * The .mo files must be named based on the locale exactly.\n *\n * @since 2.9.0\n *\n * @param string $domain Text domain. Unique identifier for retrieving translated strings.\n * @param string $path   Optional. Path to the directory containing the .mo file.\n *                       Default false.\n * @return bool True when the theme textdomain is successfully loaded, false otherwise.\n *\/"}]},"_load_textdomain_just_in_time":{"name":"_load_textdomain_just_in_time","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Loads plugin and theme textdomains just-in-time.\n *\n * When a textdomain is encountered for the first time, we try to load\n * the translation file from `wp-content\/languages`, removing the need\n * to call load_plugin_texdomain() or load_theme_texdomain().\n *\n * @since 4.6.0\n * @access private\n *\n * @see get_translations_for_domain()\n * @global array $l10n_unloaded An array of all text domains that have been unloaded again.\n *\n * @param string $domain Text domain. Unique identifier for retrieving translated strings.\n * @return bool True when the textdomain is successfully loaded, false otherwise.\n *\/"}]},"_get_path_to_translation":{"name":"_get_path_to_translation","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$reset","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the path to a translation file for loading a textdomain just in time.\n *\n * Caches the retrieved results internally.\n *\n * @since 4.7.0\n * @access private\n *\n * @see _load_textdomain_just_in_time()\n *\n * @param string $domain Text domain. Unique identifier for retrieving translated strings.\n * @param bool   $reset  Whether to reset the internal cache. Used by the switch to locale functionality.\n * @return string|false The path to the translation file or false if no translation file was found.\n *\/"}]},"_get_path_to_translation_from_lang_dir":{"name":"_get_path_to_translation_from_lang_dir","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the path to a translation file in the languages directory for the current locale.\n *\n * Holds a cached list of available .mo files to improve performance.\n *\n * @since 4.7.0\n * @access private\n *\n * @see _get_path_to_translation()\n *\n * @param string $domain Text domain. Unique identifier for retrieving translated strings.\n * @return string|false The path to the translation file or false if no translation file was found.\n *\/"}]},"get_translations_for_domain":{"name":"get_translations_for_domain","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return the Translations instance for a text domain.\n *\n * If there isn't one, returns empty Translations instance.\n *\n * @since 2.8.0\n *\n * @global array $l10n\n *\n * @param string $domain Text domain. Unique identifier for retrieving translated strings.\n * @return Translations|NOOP_Translations A Translations instance.\n *\/"}]},"is_textdomain_loaded":{"name":"is_textdomain_loaded","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether there are translations for the text domain.\n *\n * @since 3.0.0\n *\n * @global array $l10n\n *\n * @param string $domain Text domain. Unique identifier for retrieving translated strings.\n * @return bool Whether there are translations.\n *\/"}]},"translate_user_role":{"name":"translate_user_role","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Translates role name.\n *\n * Since the role names are in the database and not in the source there\n * are dummy gettext calls to get them into the POT file and this function\n * properly translates them back.\n *\n * The before_last_bar() call is needed, because older installs keep the roles\n * using the old context format: 'Role name|User role' and just skipping the\n * content after the last bar is easier than fixing them in the DB. New installs\n * won't suffer from that problem.\n *\n * @since 2.8.0\n *\n * @param string $name The role name.\n * @return string Translated role name on success, original name on failure.\n *\/"}]},"get_available_languages":{"name":"get_available_languages","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get all available languages based on the presence of *.mo files in a given directory.\n *\n * The default directory is WP_LANG_DIR.\n *\n * @since 3.0.0\n * @since 4.7.0 The results are now filterable with the {@see 'get_available_languages'} filter.\n *\n * @param string $dir A directory to search for language files.\n *                    Default WP_LANG_DIR.\n * @return array An array of language codes or an empty array if no languages are present. Language codes are formed by stripping the .mo extension from the language file names.\n *\/"}]},"wp_get_installed_translations":{"name":"wp_get_installed_translations","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get installed translations.\n *\n * Looks in the wp-content\/languages directory for translations of\n * plugins or themes.\n *\n * @since 3.7.0\n *\n * @param string $type What to search for. Accepts 'plugins', 'themes', 'core'.\n * @return array Array of language data.\n *\/"}]},"wp_get_pomo_file_data":{"name":"wp_get_pomo_file_data","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$po_file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Extract headers from a PO file.\n *\n * @since 3.7.0\n *\n * @param string $po_file Path to PO file.\n * @return array PO file headers.\n *\/"}]},"wp_dropdown_languages":{"name":"wp_dropdown_languages","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Language selector.\n *\n * @since 4.0.0\n * @since 4.3.0 Introduced the `echo` argument.\n * @since 4.7.0 Introduced the `show_option_site_default` argument.\n *\n * @see get_available_languages()\n * @see wp_get_available_translations()\n *\n * @param string|array $args {\n *     Optional. Array or string of arguments for outputting the language selector.\n *\n *     @type string   $id                           ID attribute of the select element. Default empty.\n *     @type string   $name                         Name attribute of the select element. Default empty.\n *     @type array    $languages                    List of installed languages, contain only the locales.\n *                                                  Default empty array.\n *     @type array    $translations                 List of available translations. Default result of\n *                                                  wp_get_available_translations().\n *     @type string   $selected                     Language which should be selected. Default empty.\n *     @type bool|int $echo                         Whether to echo the generated markup. Accepts 0, 1, or their\n *                                                  boolean equivalents. Default 1.\n *     @type bool     $show_available_translations  Whether to show available translations. Default true.\n *     @type bool     $show_option_site_default     Whether to show an option to fall back to the site's locale. Default false.\n * }\n * @return string HTML content\n *\/"}]},"is_rtl":{"name":"is_rtl","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks if current locale is RTL.\n *\n * @since 3.0.0\n *\n * @global WP_Locale $wp_locale\n *\n * @return bool Whether locale is RTL.\n *\/"}]},"switch_to_locale":{"name":"switch_to_locale","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$locale","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Switches the translations according to the given locale.\n *\n * @since 4.7.0\n *\n * @global WP_Locale_Switcher $wp_locale_switcher\n *\n * @param string $locale The locale.\n * @return bool True on success, false on failure.\n *\/"}]},"restore_previous_locale":{"name":"restore_previous_locale","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Restores the translations according to the previous locale.\n *\n * @since 4.7.0\n *\n * @global WP_Locale_Switcher $wp_locale_switcher\n *\n * @return string|false Locale on success, false on error.\n *\/"}]},"restore_current_locale":{"name":"restore_current_locale","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Restores the translations according to the original locale.\n *\n * @since 4.7.0\n *\n * @global WP_Locale_Switcher $wp_locale_switcher\n *\n * @return string|false Locale on success, false on error.\n *\/"}]},"is_locale_switched":{"name":"is_locale_switched","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether switch_to_locale() is in effect.\n *\n * @since 4.7.0\n *\n * @global WP_Locale_Switcher $wp_locale_switcher\n *\n * @return bool True if the locale has been switched, false otherwise.\n *\/"}]},"get_query_template":{"name":"get_query_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$templates","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path to a template\n *\n * Used to quickly retrieve the path of a template without including the file\n * extension. It will also check the parent theme, if the file exists, with\n * the use of locate_template(). Allows for more generic template location\n * without the use of the other get_*_template() functions.\n *\n * @since 1.5.0\n *\n * @param string $type      Filename without extension.\n * @param array  $templates An optional list of template candidates\n * @return string Full path to template file.\n *\/"},{"phpdoc":"\/**\n * Template loading functions.\n *\n * @package WordPress\n * @subpackage Template\n *\/"}]},"get_index_template":{"name":"get_index_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path of index template in current or parent template.\n *\n * The template hierarchy is filterable via the {@see 'index_template_hierarchy'} hook.\n * The template path is filterable via the {@see 'index_template'} hook.\n *\n * @since 3.0.0\n *\n * @see get_query_template()\n *\n * @return string Full path to index template file.\n *\/"}]},"get_404_template":{"name":"get_404_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path of 404 template in current or parent template.\n *\n * The template hierarchy is filterable via the {@see '404_template_hierarchy'} hook.\n * The template path is filterable via the {@see '404_template'} hook.\n *\n * @since 1.5.0\n *\n * @see get_query_template()\n *\n * @return string Full path to 404 template file.\n *\/"}]},"get_archive_template":{"name":"get_archive_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path of archive template in current or parent template.\n *\n * The template hierarchy is filterable via the {@see 'archive_template_hierarchy'} hook.\n * The template path is filterable via the {@see 'archive_template'} hook.\n *\n * @since 1.5.0\n *\n * @see get_query_template()\n *\n * @return string Full path to archive template file.\n *\/"}]},"get_post_type_archive_template":{"name":"get_post_type_archive_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path of post type archive template in current or parent template.\n *\n * The template hierarchy is filterable via the {@see 'archive_template_hierarchy'} hook.\n * The template path is filterable via the {@see 'archive_template'} hook.\n *\n * @since 3.7.0\n *\n * @see get_archive_template()\n *\n * @return string Full path to archive template file.\n *\/"}]},"get_author_template":{"name":"get_author_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path of author template in current or parent template.\n *\n * The hierarchy for this template looks like:\n *\n * 1. author-{nicename}.php\n * 2. author-{id}.php\n * 3. author.php\n *\n * An example of this is:\n *\n * 1. author-john.php\n * 2. author-1.php\n * 3. author.php\n *\n * The template hierarchy is filterable via the {@see 'author_template_hierarchy'} hook.\n * The template path is filterable via the {@see 'author_template'} hook.\n *\n * @since 1.5.0\n *\n * @see get_query_template()\n *\n * @return string Full path to author template file.\n *\/"}]},"get_category_template":{"name":"get_category_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path of category template in current or parent template.\n *\n * The hierarchy for this template looks like:\n *\n * 1. category-{slug}.php\n * 2. category-{id}.php\n * 3. category.php\n *\n * An example of this is:\n *\n * 1. category-news.php\n * 2. category-2.php\n * 3. category.php\n *\n * The template hierarchy is filterable via the {@see 'category_template_hierarchy'} hook.\n * The template path is filterable via the {@see 'category_template'} hook.\n *\n * @since 1.5.0\n * @since 4.7.0 The decoded form of `category-{slug}.php` was added to the top of the\n *              template hierarchy when the category slug contains multibyte characters.\n *\n * @see get_query_template()\n *\n * @return string Full path to category template file.\n *\/"}]},"get_tag_template":{"name":"get_tag_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path of tag template in current or parent template.\n *\n * The hierarchy for this template looks like:\n *\n * 1. tag-{slug}.php\n * 2. tag-{id}.php\n * 3. tag.php\n *\n * An example of this is:\n *\n * 1. tag-wordpress.php\n * 2. tag-3.php\n * 3. tag.php\n *\n * The template hierarchy is filterable via the {@see 'tag_template_hierarchy'} hook.\n * The template path is filterable via the {@see 'tag_template'} hook.\n *\n * @since 2.3.0\n * @since 4.7.0 The decoded form of `tag-{slug}.php` was added to the top of the\n *              template hierarchy when the tag slug contains multibyte characters.\n *\n * @see get_query_template()\n *\n * @return string Full path to tag template file.\n *\/"}]},"get_taxonomy_template":{"name":"get_taxonomy_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path of custom taxonomy term template in current or parent template.\n *\n * The hierarchy for this template looks like:\n *\n * 1. taxonomy-{taxonomy_slug}-{term_slug}.php\n * 2. taxonomy-{taxonomy_slug}.php\n * 3. taxonomy.php\n *\n * An example of this is:\n *\n * 1. taxonomy-location-texas.php\n * 2. taxonomy-location.php\n * 3. taxonomy.php\n *\n * The template hierarchy is filterable via the {@see 'taxonomy_template_hierarchy'} hook.\n * The template path is filterable via the {@see 'taxonomy_template'} hook.\n *\n * @since 2.5.0\n * @since 4.7.0 The decoded form of `taxonomy-{taxonomy_slug}-{term_slug}.php` was added to the top of the\n *              template hierarchy when the term slug contains multibyte characters.\n *\n * @see get_query_template()\n *\n * @return string Full path to custom taxonomy term template file.\n *\/"}]},"get_date_template":{"name":"get_date_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path of date template in current or parent template.\n *\n * The template hierarchy is filterable via the {@see 'date_template_hierarchy'} hook.\n * The template path is filterable via the {@see 'date_template'} hook.\n *\n * @since 1.5.0\n *\n * @see get_query_template()\n *\n * @return string Full path to date template file.\n *\/"}]},"get_home_template":{"name":"get_home_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path of home template in current or parent template.\n *\n * The template hierarchy is filterable via the {@see 'home_template_hierarchy'} hook.\n * The template path is filterable via the {@see 'home_template'} hook.\n *\n * @since 1.5.0\n *\n * @see get_query_template()\n *\n * @return string Full path to home template file.\n *\/"}]},"get_front_page_template":{"name":"get_front_page_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path of front page template in current or parent template.\n *\n * The template hierarchy is filterable via the {@see 'frontpage_template_hierarchy'} hook.\n * The template path is filterable via the {@see 'frontpage_template'} hook.\n *\n * @since 3.0.0\n *\n * @see get_query_template()\n *\n * @return string Full path to front page template file.\n *\/"}]},"get_page_template":{"name":"get_page_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path of page template in current or parent template.\n *\n * The hierarchy for this template looks like:\n *\n * 1. {Page Template}.php\n * 2. page-{page_name}.php\n * 3. page-{id}.php\n * 4. page.php\n *\n * An example of this is:\n *\n * 1. page-templates\/full-width.php\n * 2. page-about.php\n * 3. page-4.php\n * 4. page.php\n *\n * The template hierarchy is filterable via the {@see 'page_template_hierarchy'} hook.\n * The template path is filterable via the {@see 'page_template'} hook.\n *\n * @since 1.5.0\n * @since 4.7.0 The decoded form of `page-{page_name}.php` was added to the top of the\n *              template hierarchy when the page name contains multibyte characters.\n *\n * @see get_query_template()\n *\n * @return string Full path to page template file.\n *\/"}]},"get_search_template":{"name":"get_search_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path of search template in current or parent template.\n *\n * The template hierarchy is filterable via the {@see 'search_template_hierarchy'} hook.\n * The template path is filterable via the {@see 'search_template'} hook.\n *\n * @since 1.5.0\n *\n * @see get_query_template()\n *\n * @return string Full path to search template file.\n *\/"}]},"get_single_template":{"name":"get_single_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path of single template in current or parent template. Applies to single Posts,\n * single Attachments, and single custom post types.\n *\n * The hierarchy for this template looks like:\n *\n * 1. {Post Type Template}.php\n * 2. single-{post_type}-{post_name}.php\n * 3. single-{post_type}.php\n * 4. single.php\n *\n * An example of this is:\n *\n * 1. templates\/full-width.php\n * 2. single-post-hello-world.php\n * 3. single-post.php\n * 4. single.php\n *\n * The template hierarchy is filterable via the {@see 'single_template_hierarchy'} hook.\n * The template path is filterable via the {@see 'single_template'} hook.\n *\n * @since 1.5.0\n * @since 4.4.0 `single-{post_type}-{post_name}.php` was added to the top of the template hierarchy.\n * @since 4.7.0 The decoded form of `single-{post_type}-{post_name}.php` was added to the top of the\n *              template hierarchy when the post name contains multibyte characters.\n * @since 4.7.0 {Post Type Template}.php was added to the top of the template hierarchy.\n *\n * @see get_query_template()\n *\n * @return string Full path to single template file.\n *\/"}]},"get_embed_template":{"name":"get_embed_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves an embed template path in the current or parent template.\n *\n * The hierarchy for this template looks like:\n *\n * 1. embed-{post_type}-{post_format}.php\n * 2. embed-{post_type}.php\n * 3. embed.php\n *\n * An example of this is:\n *\n * 1. embed-post-audio.php\n * 2. embed-post.php\n * 3. embed.php\n *\n * The template hierarchy is filterable via the {@see 'embed_template_hierarchy'} hook.\n * The template path is filterable via the {@see 'embed_template'} hook.\n *\n * @since 4.5.0\n *\n * @see get_query_template()\n *\n * @return string Full path to embed template file.\n *\/"}]},"get_singular_template":{"name":"get_singular_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the path of the singular template in current or parent template.\n *\n * The template hierarchy is filterable via the {@see 'singular_template_hierarchy'} hook.\n * The template path is filterable via the {@see 'singular_template'} hook.\n *\n * @since 4.3.0\n *\n * @see get_query_template()\n *\n * @return string Full path to singular template file\n *\/"}]},"get_attachment_template":{"name":"get_attachment_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path of attachment template in current or parent template.\n *\n * The hierarchy for this template looks like:\n *\n * 1. {mime_type}-{sub_type}.php\n * 2. {sub_type}.php\n * 3. {mime_type}.php\n * 4. attachment.php\n *\n * An example of this is:\n *\n * 1. image-jpeg.php\n * 2. jpeg.php\n * 3. image.php\n * 4. attachment.php\n *\n * The template hierarchy is filterable via the {@see 'attachment_template_hierarchy'} hook.\n * The template path is filterable via the {@see 'attachment_template'} hook.\n *\n * @since 2.0.0\n * @since 4.3.0 The order of the mime type logic was reversed so the hierarchy is more logical.\n *\n * @see get_query_template()\n *\n * @global array $posts\n *\n * @return string Full path to attachment template file.\n *\/"}]},"locate_template":{"name":"locate_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$template_names","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$load","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$require_once","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the name of the highest priority template file that exists.\n *\n * Searches in the STYLESHEETPATH before TEMPLATEPATH and wp-includes\/theme-compat\n * so that themes which inherit from a parent theme can just overload one file.\n *\n * @since 2.7.0\n *\n * @param string|array $template_names Template file(s) to search for, in order.\n * @param bool         $load           If true the template file will be loaded if it is found.\n * @param bool         $require_once   Whether to require_once or require. Default true. Has no effect if $load is false.\n * @return string The template filename if one is located.\n *\/"}]},"load_template":{"name":"load_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$_template_file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$require_once","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Require the template file with WordPress environment.\n *\n * The globals are set up for the template file to ensure that the WordPress\n * environment is available from within the function. The query variables are\n * also available.\n *\n * @since 1.5.0\n *\n * @global array      $posts\n * @global WP_Post    $post\n * @global bool       $wp_did_header\n * @global WP_Query   $wp_query\n * @global WP_Rewrite $wp_rewrite\n * @global wpdb       $wpdb\n * @global string     $wp_version\n * @global WP         $wp\n * @global int        $id\n * @global WP_Comment $comment\n * @global int        $user_ID\n *\n * @param string $_template_file Path to template file.\n * @param bool   $require_once   Whether to require_once or require. Default true.\n *\/"}]},"wp_get_additional_image_sizes":{"name":"wp_get_additional_image_sizes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve additional image sizes.\n *\n * @since 4.7.0\n *\n * @global array $_wp_additional_image_sizes\n *\n * @return array Additional images size data.\n *\/"},{"phpdoc":"\/**\n * WordPress API for media display.\n *\n * @package WordPress\n * @subpackage Media\n *\/"}]},"image_constrain_size_for_editor":{"name":"image_constrain_size_for_editor","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$width","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$height","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":2,"variadic":false,"reference":false,"default":"'medium'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Scale down the default size of an image.\n *\n * This is so that the image is a better fit for the editor and theme.\n *\n * The `$size` parameter accepts either an array or a string. The supported string\n * values are 'thumb' or 'thumbnail' for the given thumbnail size or defaults at\n * 128 width and 96 height in pixels. Also supported for the string value is\n * 'medium', 'medium_large' and 'full'. The 'full' isn't actually supported, but any value other\n * than the supported will result in the content_width size or 500 if that is\n * not set.\n *\n * Finally, there is a filter named {@see 'editor_max_image_size'}, that will be\n * called on the calculated array for width and height, respectively. The second\n * parameter will be the value that was in the $size parameter. The returned\n * type for the hook is an array with the width as the first element and the\n * height as the second element.\n *\n * @since 2.5.0\n *\n * @global int   $content_width\n *\n * @param int          $width   Width of the image in pixels.\n * @param int          $height  Height of the image in pixels.\n * @param string|array $size    Optional. Image size. Accepts any valid image size, or an array\n *                              of width and height values in pixels (in that order).\n *                              Default 'medium'.\n * @param string       $context Optional. Could be 'display' (like in a theme) or 'edit'\n *                              (like inserting into an editor). Default null.\n * @return array Width and height of what the result image should resize to.\n *\/"}]},"image_hwstring":{"name":"image_hwstring","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$width","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$height","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve width and height attributes using given width and height values.\n *\n * Both attributes are required in the sense that both parameters must have a\n * value, but are optional in that if you set them to false or null, then they\n * will not be added to the returned string.\n *\n * You can set the value using a string, but it will only take numeric values.\n * If you wish to put 'px' after the numbers, then it will be stripped out of\n * the return.\n *\n * @since 2.5.0\n *\n * @param int|string $width  Image width in pixels.\n * @param int|string $height Image height in pixels.\n * @return string HTML attributes for width and, or height.\n *\/"}]},"image_downsize":{"name":"image_downsize","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":1,"variadic":false,"reference":false,"default":"'medium'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Scale an image to fit a particular size (such as 'thumb' or 'medium').\n *\n * Array with image url, width, height, and whether is intermediate size, in\n * that order is returned on success is returned. $is_intermediate is true if\n * $url is a resized image, false if it is the original.\n *\n * The URL might be the original image, or it might be a resized version. This\n * function won't create a new resized copy, it will just return an already\n * resized one if it exists.\n *\n * A plugin may use the {@see 'image_downsize'} filter to hook into and offer image\n * resizing services for images. The hook must return an array with the same\n * elements that are returned in the function. The first element being the URL\n * to the new image that was resized.\n *\n * @since 2.5.0\n *\n * @param int          $id   Attachment ID for image.\n * @param array|string $size Optional. Image size to scale to. Accepts any valid image size,\n *                           or an array of width and height values in pixels (in that order).\n *                           Default 'medium'.\n * @return false|array Array containing the image URL, width, height, and boolean for whether\n *                     the image is an intermediate size. False on failure.\n *\/"}]},"add_image_size":{"name":"add_image_size","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$width","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$height","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$crop","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register a new image size.\n *\n * Cropping behavior for the image size is dependent on the value of $crop:\n * 1. If false (default), images will be scaled, not cropped.\n * 2. If an array in the form of array( x_crop_position, y_crop_position ):\n *    - x_crop_position accepts 'left' 'center', or 'right'.\n *    - y_crop_position accepts 'top', 'center', or 'bottom'.\n *    Images will be cropped to the specified dimensions within the defined crop area.\n * 3. If true, images will be cropped to the specified dimensions using center positions.\n *\n * @since 2.9.0\n *\n * @global array $_wp_additional_image_sizes Associative array of additional image sizes.\n *\n * @param string     $name   Image size identifier.\n * @param int        $width  Image width in pixels.\n * @param int        $height Image height in pixels.\n * @param bool|array $crop   Optional. Whether to crop images to specified width and height or resize.\n *                           An array can specify positioning of the crop area. Default false.\n *\/"}]},"has_image_size":{"name":"has_image_size","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if an image size exists.\n *\n * @since 3.9.0\n *\n * @param string $name The image size to check.\n * @return bool True if the image size exists, false if not.\n *\/"}]},"remove_image_size":{"name":"remove_image_size","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove a new image size.\n *\n * @since 3.9.0\n *\n * @global array $_wp_additional_image_sizes\n *\n * @param string $name The image size to remove.\n * @return bool True if the image size was successfully removed, false on failure.\n *\/"}]},"set_post_thumbnail_size":{"name":"set_post_thumbnail_size","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$width","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$height","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$crop","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers an image size for the post thumbnail.\n *\n * @since 2.9.0\n *\n * @see add_image_size() for details on cropping behavior.\n *\n * @param int        $width  Image width in pixels.\n * @param int        $height Image height in pixels.\n * @param bool|array $crop   Optional. Whether to crop images to specified width and height or resize.\n *                           An array can specify positioning of the crop area. Default false.\n *\/"}]},"get_image_tag":{"name":"get_image_tag","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$alt","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$align","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":4,"variadic":false,"reference":false,"default":"'medium'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets an img tag for an image attachment, scaling it down if requested.\n *\n * The {@see 'get_image_tag_class'} filter allows for changing the class name for the\n * image without having to use regular expressions on the HTML content. The\n * parameters are: what WordPress will use for the class, the Attachment ID,\n * image align value, and the size the image should be.\n *\n * The second filter, {@see 'get_image_tag'}, has the HTML content, which can then be\n * further manipulated by a plugin to change all attribute values and even HTML\n * content.\n *\n * @since 2.5.0\n *\n * @param int          $id    Attachment ID.\n * @param string       $alt   Image Description for the alt attribute.\n * @param string       $title Image Description for the title attribute.\n * @param string       $align Part of the class name for aligning the image.\n * @param string|array $size  Optional. Registered image size to retrieve a tag for. Accepts any\n *                            valid image size, or an array of width and height values in pixels\n *                            (in that order). Default 'medium'.\n * @return string HTML IMG element for given image attachment\n *\/"}]},"wp_constrain_dimensions":{"name":"wp_constrain_dimensions","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$current_width","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$current_height","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_width","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_height","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Calculates the new dimensions for a down-sampled image.\n *\n * If either width or height are empty, no constraint is applied on\n * that dimension.\n *\n * @since 2.5.0\n *\n * @param int $current_width  Current width of the image.\n * @param int $current_height Current height of the image.\n * @param int $max_width      Optional. Max width in pixels to constrain to. Default 0.\n * @param int $max_height     Optional. Max height in pixels to constrain to. Default 0.\n * @return array First item is the width, the second item is the height.\n *\/"}]},"image_resize_dimensions":{"name":"image_resize_dimensions","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$orig_w","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$orig_h","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dest_w","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dest_h","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$crop","rank":4,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves calculated resize dimensions for use in WP_Image_Editor.\n *\n * Calculates dimensions and coordinates for a resized image that fits\n * within a specified width and height.\n *\n * Cropping behavior is dependent on the value of $crop:\n * 1. If false (default), images will not be cropped.\n * 2. If an array in the form of array( x_crop_position, y_crop_position ):\n *    - x_crop_position accepts 'left' 'center', or 'right'.\n *    - y_crop_position accepts 'top', 'center', or 'bottom'.\n *    Images will be cropped to the specified dimensions within the defined crop area.\n * 3. If true, images will be cropped to the specified dimensions using center positions.\n *\n * @since 2.5.0\n *\n * @param int        $orig_w Original width in pixels.\n * @param int        $orig_h Original height in pixels.\n * @param int        $dest_w New width in pixels.\n * @param int        $dest_h New height in pixels.\n * @param bool|array $crop   Optional. Whether to crop image to specified width and height or resize.\n *                           An array can specify positioning of the crop area. Default false.\n * @return false|array False on failure. Returned array matches parameters for `imagecopyresampled()`.\n *\/"}]},"image_make_intermediate_size":{"name":"image_make_intermediate_size","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$width","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$height","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$crop","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Resizes an image to make a thumbnail or intermediate size.\n *\n * The returned array has the file size, the image width, and image height. The\n * {@see 'image_make_intermediate_size'} filter can be used to hook in and change the\n * values of the returned array. The only parameter is the resized file path.\n *\n * @since 2.5.0\n *\n * @param string $file   File path.\n * @param int    $width  Image width.\n * @param int    $height Image height.\n * @param bool   $crop   Optional. Whether to crop image to specified width and height or resize.\n *                       Default false.\n * @return false|array False, if no image was created. Metadata array on success.\n *\/"}]},"wp_image_matches_ratio":{"name":"wp_image_matches_ratio","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$source_width","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$source_height","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$target_width","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$target_height","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Helper function to test if aspect ratios for two images match.\n *\n * @since 4.6.0\n *\n * @param int $source_width  Width of the first image in pixels.\n * @param int $source_height Height of the first image in pixels.\n * @param int $target_width  Width of the second image in pixels.\n * @param int $target_height Height of the second image in pixels.\n * @return bool True if aspect ratios match within 1px. False if not.\n *\/"}]},"image_get_intermediate_size":{"name":"image_get_intermediate_size","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":1,"variadic":false,"reference":false,"default":"'thumbnail'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the image's intermediate size (resized) path, width, and height.\n *\n * The $size parameter can be an array with the width and height respectively.\n * If the size matches the 'sizes' metadata array for width and height, then it\n * will be used. If there is no direct match, then the nearest image size larger\n * than the specified size will be used. If nothing is found, then the function\n * will break out and return false.\n *\n * The metadata 'sizes' is used for compatible sizes that can be used for the\n * parameter $size value.\n *\n * The url path will be given, when the $size parameter is a string.\n *\n * If you are passing an array for the $size, you should consider using\n * add_image_size() so that a cropped version is generated. It's much more\n * efficient than having to find the closest-sized image and then having the\n * browser scale down the image.\n *\n * @since 2.5.0\n *\n * @param int          $post_id Attachment ID.\n * @param array|string $size    Optional. Image size. Accepts any valid image size, or an array\n *                              of width and height values in pixels (in that order).\n *                              Default 'thumbnail'.\n * @return false|array $data {\n *     Array of file relative path, width, and height on success. Additionally includes absolute\n *     path and URL if registered size is passed to $size parameter. False on failure.\n *\n *     @type string $file   Image's path relative to uploads directory\n *     @type int    $width  Width of image\n *     @type int    $height Height of image\n *     @type string $path   Image's absolute filesystem path.\n *     @type string $url    Image's URL.\n * }\n *\/"}]},"get_intermediate_image_sizes":{"name":"get_intermediate_image_sizes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the available intermediate image sizes.\n *\n * @since 3.0.0\n *\n * @return array Returns a filtered array of image size strings.\n *\/"}]},"wp_get_attachment_image_src":{"name":"wp_get_attachment_image_src","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attachment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":1,"variadic":false,"reference":false,"default":"'thumbnail'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$icon","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve an image to represent an attachment.\n *\n * A mime icon for files, thumbnail or intermediate size for images.\n *\n * The returned array contains four values: the URL of the attachment image src,\n * the width of the image file, the height of the image file, and a boolean\n * representing whether the returned array describes an intermediate (generated)\n * image size or the original, full-sized upload.\n *\n * @since 2.5.0\n *\n * @param int          $attachment_id Image attachment ID.\n * @param string|array $size          Optional. Image size. Accepts any valid image size, or an array of width\n *                                    and height values in pixels (in that order). Default 'thumbnail'.\n * @param bool         $icon          Optional. Whether the image should be treated as an icon. Default false.\n * @return false|array Returns an array (url, width, height, is_intermediate), or false, if no image is available.\n *\/"}]},"wp_get_attachment_image":{"name":"wp_get_attachment_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attachment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":1,"variadic":false,"reference":false,"default":"'thumbnail'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$icon","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attr","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get an HTML img element representing an image attachment\n *\n * While `$size` will accept an array, it is better to register a size with\n * add_image_size() so that a cropped version is generated. It's much more\n * efficient than having to find the closest-sized image and then having the\n * browser scale down the image.\n *\n * @since 2.5.0\n *\n * @param int          $attachment_id Image attachment ID.\n * @param string|array $size          Optional. Image size. Accepts any valid image size, or an array of width\n *                                    and height values in pixels (in that order). Default 'thumbnail'.\n * @param bool         $icon          Optional. Whether the image should be treated as an icon. Default false.\n * @param string|array $attr          Optional. Attributes for the image markup. Default empty.\n * @return string HTML img element or empty string on failure.\n *\/"}]},"wp_get_attachment_image_url":{"name":"wp_get_attachment_image_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attachment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":1,"variadic":false,"reference":false,"default":"'thumbnail'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$icon","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the URL of an image attachment.\n *\n * @since 4.4.0\n *\n * @param int          $attachment_id Image attachment ID.\n * @param string|array $size          Optional. Image size to retrieve. Accepts any valid image size, or an array\n *                                    of width and height values in pixels (in that order). Default 'thumbnail'.\n * @param bool         $icon          Optional. Whether the image should be treated as an icon. Default false.\n * @return string|false Attachment URL or false if no image is available.\n *\/"}]},"_wp_get_attachment_relative_path":{"name":"_wp_get_attachment_relative_path","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the attachment path relative to the upload directory.\n *\n * @since 4.4.1\n * @access private\n *\n * @param string $file Attachment file name.\n * @return string Attachment path relative to the upload directory.\n *\/"}]},"_wp_get_image_size_from_meta":{"name":"_wp_get_image_size_from_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$size_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$image_meta","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the image size as array from its meta data.\n *\n * Used for responsive images.\n *\n * @since 4.4.0\n * @access private\n *\n * @param string $size_name  Image size. Accepts any valid image size name ('thumbnail', 'medium', etc.).\n * @param array  $image_meta The image meta data.\n * @return array|bool Array of width and height values in pixels (in that order)\n *                    or false if the size doesn't exist.\n *\/"}]},"wp_get_attachment_image_srcset":{"name":"wp_get_attachment_image_srcset","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attachment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":1,"variadic":false,"reference":false,"default":"'medium'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$image_meta","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the value for an image attachment's 'srcset' attribute.\n *\n * @since 4.4.0\n *\n * @see wp_calculate_image_srcset()\n *\n * @param int          $attachment_id Image attachment ID.\n * @param array|string $size          Optional. Image size. Accepts any valid image size, or an array of\n *                                    width and height values in pixels (in that order). Default 'medium'.\n * @param array        $image_meta    Optional. The image meta data as returned by 'wp_get_attachment_metadata()'.\n *                                    Default null.\n * @return string|bool A 'srcset' value string or false.\n *\/"}]},"wp_calculate_image_srcset":{"name":"wp_calculate_image_srcset","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$size_array","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$image_src","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$image_meta","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attachment_id","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * A helper function to calculate the image sources to include in a 'srcset' attribute.\n *\n * @since 4.4.0\n *\n * @param array  $size_array    Array of width and height values in pixels (in that order).\n * @param string $image_src     The 'src' of the image.\n * @param array  $image_meta    The image meta data as returned by 'wp_get_attachment_metadata()'.\n * @param int    $attachment_id Optional. The image attachment ID to pass to the filter. Default 0.\n * @return string|bool          The 'srcset' attribute value. False on error or when only one source exists.\n *\/"}]},"wp_get_attachment_image_sizes":{"name":"wp_get_attachment_image_sizes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attachment_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":1,"variadic":false,"reference":false,"default":"'medium'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$image_meta","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the value for an image attachment's 'sizes' attribute.\n *\n * @since 4.4.0\n *\n * @see wp_calculate_image_sizes()\n *\n * @param int          $attachment_id Image attachment ID.\n * @param array|string $size          Optional. Image size. Accepts any valid image size, or an array of width\n *                                    and height values in pixels (in that order). Default 'medium'.\n * @param array        $image_meta    Optional. The image meta data as returned by 'wp_get_attachment_metadata()'.\n *                                    Default null.\n * @return string|bool A valid source size value for use in a 'sizes' attribute or false.\n *\/"}]},"wp_calculate_image_sizes":{"name":"wp_calculate_image_sizes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$size","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$image_src","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$image_meta","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attachment_id","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates a 'sizes' attribute value for an image.\n *\n * @since 4.4.0\n *\n * @param array|string $size          Image size to retrieve. Accepts any valid image size, or an array\n *                                    of width and height values in pixels (in that order). Default 'medium'.\n * @param string       $image_src     Optional. The URL to the image file. Default null.\n * @param array        $image_meta    Optional. The image meta data as returned by 'wp_get_attachment_metadata()'.\n *                                    Default null.\n * @param int          $attachment_id Optional. Image attachment ID. Either `$image_meta` or `$attachment_id`\n *                                    is needed when using the image size name as argument for `$size`. Default 0.\n * @return string|bool A valid source size value for use in a 'sizes' attribute or false.\n *\/"}]},"wp_make_content_images_responsive":{"name":"wp_make_content_images_responsive","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filters 'img' elements in post content to add 'srcset' and 'sizes' attributes.\n *\n * @since 4.4.0\n *\n * @see wp_image_add_srcset_and_sizes()\n *\n * @param string $content The raw post content to be filtered.\n * @return string Converted content with 'srcset' and 'sizes' attributes added to images.\n *\/"}]},"wp_image_add_srcset_and_sizes":{"name":"wp_image_add_srcset_and_sizes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$image","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$image_meta","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attachment_id","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds 'srcset' and 'sizes' attributes to an existing 'img' element.\n *\n * @since 4.4.0\n *\n * @see wp_calculate_image_srcset()\n * @see wp_calculate_image_sizes()\n *\n * @param string $image         An HTML 'img' element to be filtered.\n * @param array  $image_meta    The image meta data as returned by 'wp_get_attachment_metadata()'.\n * @param int    $attachment_id Image attachment ID.\n * @return string Converted 'img' element with 'srcset' and 'sizes' attributes added.\n *\/"}]},"_wp_post_thumbnail_class_filter":{"name":"_wp_post_thumbnail_class_filter","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds a 'wp-post-image' class to post thumbnails. Internal use only.\n *\n * Uses the {@see 'begin_fetch_post_thumbnail_html'} and {@see 'end_fetch_post_thumbnail_html'}\n * action hooks to dynamically add\/remove itself so as to only filter post thumbnails.\n *\n * @ignore\n * @since 2.9.0\n *\n * @param array $attr Thumbnail attributes including src, class, alt, title.\n * @return array Modified array of attributes including the new 'wp-post-image' class.\n *\/"}]},"_wp_post_thumbnail_class_filter_add":{"name":"_wp_post_thumbnail_class_filter_add","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds '_wp_post_thumbnail_class_filter' callback to the 'wp_get_attachment_image_attributes'\n * filter hook. Internal use only.\n *\n * @ignore\n * @since 2.9.0\n *\n * @param array $attr Thumbnail attributes including src, class, alt, title.\n *\/"}]},"_wp_post_thumbnail_class_filter_remove":{"name":"_wp_post_thumbnail_class_filter_remove","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes the '_wp_post_thumbnail_class_filter' callback from the 'wp_get_attachment_image_attributes'\n * filter hook. Internal use only.\n *\n * @ignore\n * @since 2.9.0\n *\n * @param array $attr Thumbnail attributes including src, class, alt, title.\n *\/"}]},"img_caption_shortcode":{"name":"img_caption_shortcode","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$content","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Builds the Caption shortcode output.\n *\n * Allows a plugin to replace the content that would otherwise be returned. The\n * filter is {@see 'img_caption_shortcode'} and passes an empty string, the attr\n * parameter and the content parameter values.\n *\n * The supported attributes for the shortcode are 'id', 'align', 'width', and\n * 'caption'.\n *\n * @since 2.6.0\n *\n * @param array  $attr {\n *     Attributes of the caption shortcode.\n *\n *     @type string $id      ID of the div element for the caption.\n *     @type string $align   Class name that aligns the caption. Default 'alignnone'. Accepts 'alignleft',\n *                           'aligncenter', alignright', 'alignnone'.\n *     @type int    $width   The width of the caption, in pixels.\n *     @type string $caption The caption text.\n *     @type string $class   Additional class name(s) added to the caption container.\n * }\n * @param string $content Shortcode content.\n * @return string HTML content to display the caption.\n *\/"}]},"gallery_shortcode":{"name":"gallery_shortcode","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Builds the Gallery shortcode output.\n *\n * This implements the functionality of the Gallery Shortcode for displaying\n * WordPress images on a post.\n *\n * @since 2.5.0\n *\n * @staticvar int $instance\n *\n * @param array $attr {\n *     Attributes of the gallery shortcode.\n *\n *     @type string       $order      Order of the images in the gallery. Default 'ASC'. Accepts 'ASC', 'DESC'.\n *     @type string       $orderby    The field to use when ordering the images. Default 'menu_order ID'.\n *                                    Accepts any valid SQL ORDERBY statement.\n *     @type int          $id         Post ID.\n *     @type string       $itemtag    HTML tag to use for each image in the gallery.\n *                                    Default 'dl', or 'figure' when the theme registers HTML5 gallery support.\n *     @type string       $icontag    HTML tag to use for each image's icon.\n *                                    Default 'dt', or 'div' when the theme registers HTML5 gallery support.\n *     @type string       $captiontag HTML tag to use for each image's caption.\n *                                    Default 'dd', or 'figcaption' when the theme registers HTML5 gallery support.\n *     @type int          $columns    Number of columns of images to display. Default 3.\n *     @type string|array $size       Size of the images to display. Accepts any valid image size, or an array of width\n *                                    and height values in pixels (in that order). Default 'thumbnail'.\n *     @type string       $ids        A comma-separated list of IDs of attachments to display. Default empty.\n *     @type string       $include    A comma-separated list of IDs of attachments to include. Default empty.\n *     @type string       $exclude    A comma-separated list of IDs of attachments to exclude. Default empty.\n *     @type string       $link       What to link each image to. Default empty (links to the attachment page).\n *                                    Accepts 'file', 'none'.\n * }\n * @return string HTML content to display gallery.\n *\/"}]},"wp_underscore_playlist_templates":{"name":"wp_underscore_playlist_templates","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the templates used by playlists.\n *\n * @since 3.9.0\n *\/"}]},"wp_playlist_scripts":{"name":"wp_playlist_scripts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs and enqueue default scripts and styles for playlists.\n *\n * @since 3.9.0\n *\n * @param string $type Type of playlist. Accepts 'audio' or 'video'.\n *\/"}]},"wp_playlist_shortcode":{"name":"wp_playlist_shortcode","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Builds the Playlist shortcode output.\n *\n * This implements the functionality of the playlist shortcode for displaying\n * a collection of WordPress audio or video files in a post.\n *\n * @since 3.9.0\n *\n * @global int $content_width\n * @staticvar int $instance\n *\n * @param array $attr {\n *     Array of default playlist attributes.\n *\n *     @type string  $type         Type of playlist to display. Accepts 'audio' or 'video'. Default 'audio'.\n *     @type string  $order        Designates ascending or descending order of items in the playlist.\n *                                 Accepts 'ASC', 'DESC'. Default 'ASC'.\n *     @type string  $orderby      Any column, or columns, to sort the playlist. If $ids are\n *                                 passed, this defaults to the order of the $ids array ('post__in').\n *                                 Otherwise default is 'menu_order ID'.\n *     @type int     $id           If an explicit $ids array is not present, this parameter\n *                                 will determine which attachments are used for the playlist.\n *                                 Default is the current post ID.\n *     @type array   $ids          Create a playlist out of these explicit attachment IDs. If empty,\n *                                 a playlist will be created from all $type attachments of $id.\n *                                 Default empty.\n *     @type array   $exclude      List of specific attachment IDs to exclude from the playlist. Default empty.\n *     @type string  $style        Playlist style to use. Accepts 'light' or 'dark'. Default 'light'.\n *     @type bool    $tracklist    Whether to show or hide the playlist. Default true.\n *     @type bool    $tracknumbers Whether to show or hide the numbers next to entries in the playlist. Default true.\n *     @type bool    $images       Show or hide the video or audio thumbnail (Featured Image\/post\n *                                 thumbnail). Default true.\n *     @type bool    $artists      Whether to show or hide artist name in the playlist. Default true.\n * }\n *\n * @return string Playlist output. Empty string if the passed type is unsupported.\n *\/"}]},"wp_mediaelement_fallback":{"name":"wp_mediaelement_fallback","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Provides a No-JS Flash fallback as a last resort for audio \/ video.\n *\n * @since 3.6.0\n *\n * @param string $url The media element URL.\n * @return string Fallback HTML.\n *\/"}]},"wp_get_audio_extensions":{"name":"wp_get_audio_extensions","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns a filtered list of WP-supported audio formats.\n *\n * @since 3.6.0\n *\n * @return array Supported audio formats.\n *\/"}]},"wp_get_attachment_id3_keys":{"name":"wp_get_attachment_id3_keys","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attachment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"'display'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns useful keys to use to lookup data from an attachment's stored metadata.\n *\n * @since 3.9.0\n *\n * @param WP_Post $attachment The current attachment, provided for context.\n * @param string  $context    Optional. The context. Accepts 'edit', 'display'. Default 'display'.\n * @return array Key\/value pairs of field keys to labels.\n *\/"}]},"wp_audio_shortcode":{"name":"wp_audio_shortcode","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$content","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Builds the Audio shortcode output.\n *\n * This implements the functionality of the Audio Shortcode for displaying\n * WordPress mp3s in a post.\n *\n * @since 3.6.0\n *\n * @staticvar int $instance\n *\n * @param array  $attr {\n *     Attributes of the audio shortcode.\n *\n *     @type string $src      URL to the source of the audio file. Default empty.\n *     @type string $loop     The 'loop' attribute for the `<audio>` element. Default empty.\n *     @type string $autoplay The 'autoplay' attribute for the `<audio>` element. Default empty.\n *     @type string $preload  The 'preload' attribute for the `<audio>` element. Default 'none'.\n *     @type string $class    The 'class' attribute for the `<audio>` element. Default 'wp-audio-shortcode'.\n *     @type string $style    The 'style' attribute for the `<audio>` element. Default 'width: 100%;'.\n * }\n * @param string $content Shortcode content.\n * @return string|void HTML content to display audio.\n *\/"}]},"wp_get_video_extensions":{"name":"wp_get_video_extensions","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns a filtered list of WP-supported video formats.\n *\n * @since 3.6.0\n *\n * @return array List of supported video formats.\n *\/"}]},"wp_video_shortcode":{"name":"wp_video_shortcode","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$content","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Builds the Video shortcode output.\n *\n * This implements the functionality of the Video Shortcode for displaying\n * WordPress mp4s in a post.\n *\n * @since 3.6.0\n *\n * @global int $content_width\n * @staticvar int $instance\n *\n * @param array  $attr {\n *     Attributes of the shortcode.\n *\n *     @type string $src      URL to the source of the video file. Default empty.\n *     @type int    $height   Height of the video embed in pixels. Default 360.\n *     @type int    $width    Width of the video embed in pixels. Default $content_width or 640.\n *     @type string $poster   The 'poster' attribute for the `<video>` element. Default empty.\n *     @type string $loop     The 'loop' attribute for the `<video>` element. Default empty.\n *     @type string $autoplay The 'autoplay' attribute for the `<video>` element. Default empty.\n *     @type string $preload  The 'preload' attribute for the `<video>` element.\n *                            Default 'metadata'.\n *     @type string $class    The 'class' attribute for the `<video>` element.\n *                            Default 'wp-video-shortcode'.\n * }\n * @param string $content Shortcode content.\n * @return string|void HTML content to display video.\n *\/"}]},"previous_image_link":{"name":"previous_image_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$size","rank":0,"variadic":false,"reference":false,"default":"'thumbnail'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$text","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays previous image link that has the same post parent.\n *\n * @since 2.5.0\n *\n * @see adjacent_image_link()\n *\n * @param string|array $size Optional. Image size. Accepts any valid image size, an array of width and\n *                           height values in pixels (in that order), 0, or 'none'. 0 or 'none' will\n *                           default to 'post_title' or `$text`. Default 'thumbnail'.\n * @param string       $text Optional. Link text. Default false.\n *\/"}]},"next_image_link":{"name":"next_image_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$size","rank":0,"variadic":false,"reference":false,"default":"'thumbnail'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$text","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays next image link that has the same post parent.\n *\n * @since 2.5.0\n *\n * @see adjacent_image_link()\n *\n * @param string|array $size Optional. Image size. Accepts any valid image size, an array of width and\n *                           height values in pixels (in that order), 0, or 'none'. 0 or 'none' will\n *                           default to 'post_title' or `$text`. Default 'thumbnail'.\n * @param string       $text Optional. Link text. Default false.\n *\/"}]},"adjacent_image_link":{"name":"adjacent_image_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$prev","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":1,"variadic":false,"reference":false,"default":"'thumbnail'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$text","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays next or previous image link that has the same post parent.\n *\n * Retrieves the current attachment object from the $post global.\n *\n * @since 2.5.0\n *\n * @param bool         $prev Optional. Whether to display the next (false) or previous (true) link. Default true.\n * @param string|array $size Optional. Image size. Accepts any valid image size, or an array of width and height\n *                           values in pixels (in that order). Default 'thumbnail'.\n * @param bool         $text Optional. Link text. Default false.\n *\/"}]},"get_attachment_taxonomies":{"name":"get_attachment_taxonomies","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attachment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"'names'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves taxonomies attached to given the attachment.\n *\n * @since 2.5.0\n * @since 4.7.0 Introduced the `$output` parameter.\n *\n * @param int|array|object $attachment Attachment ID, data array, or data object.\n * @param string           $output     Output type. 'names' to return an array of taxonomy names,\n *                                     or 'objects' to return an array of taxonomy objects.\n *                                     Default is 'names'.\n * @return array Empty array on failure. List of taxonomies on success.\n *\/"}]},"get_taxonomies_for_attachments":{"name":"get_taxonomies_for_attachments","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":false,"default":"'names'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves all of the taxonomy names that are registered for attachments.\n *\n * Handles mime-type-specific taxonomies such as attachment:image and attachment:video.\n *\n * @since 3.5.0\n *\n * @see get_taxonomies()\n *\n * @param string $output Optional. The type of taxonomy output to return. Accepts 'names' or 'objects'.\n *                       Default 'names'.\n * @return array The names of all taxonomy of $object_type.\n *\/"}]},"wp_imagecreatetruecolor":{"name":"wp_imagecreatetruecolor","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$width","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$height","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create new GD image resource with transparency support\n *\n * @todo: Deprecate if possible.\n *\n * @since 2.9.0\n *\n * @param int $width  Image width in pixels.\n * @param int $height Image height in pixels..\n * @return resource The GD image resource.\n *\/"}]},"wp_expand_dimensions":{"name":"wp_expand_dimensions","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$example_width","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$example_height","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_width","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_height","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Based on a supplied width\/height example, return the biggest possible dimensions based on the max width\/height.\n *\n * @since 2.9.0\n *\n * @see wp_constrain_dimensions()\n *\n * @param int $example_width  The width of an example embed.\n * @param int $example_height The height of an example embed.\n * @param int $max_width      The maximum allowed width.\n * @param int $max_height     The maximum allowed height.\n * @return array The maximum possible width and height based on the example ratio.\n *\/"}]},"wp_max_upload_size":{"name":"wp_max_upload_size","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines the maximum upload size allowed in php.ini.\n *\n * @since 2.5.0\n *\n * @return int Allowed upload size.\n *\/"}]},"wp_get_image_editor":{"name":"wp_get_image_editor","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns a WP_Image_Editor instance and loads file into it.\n *\n * @since 3.5.0\n *\n * @param string $path Path to the file to load.\n * @param array  $args Optional. Additional arguments for retrieving the image editor.\n *                     Default empty array.\n * @return WP_Image_Editor|WP_Error The WP_Image_Editor object if successful, an WP_Error\n *                                  object otherwise.\n *\/"}]},"wp_image_editor_supports":{"name":"wp_image_editor_supports","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Tests whether there is an editor that supports a given mime type or methods.\n *\n * @since 3.5.0\n *\n * @param string|array $args Optional. Array of arguments to retrieve the image editor supports.\n *                           Default empty array.\n * @return bool True if an eligible editor is found; false otherwise.\n *\/"}]},"_wp_image_editor_choose":{"name":"_wp_image_editor_choose","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Tests which editors are capable of supporting the request.\n *\n * @ignore\n * @since 3.5.0\n *\n * @param array $args Optional. Array of arguments for choosing a capable editor. Default empty array.\n * @return string|false Class name for the first editor that claims to support the request. False if no\n *                     editor claims to support the request.\n *\/"}]},"wp_plupload_default_settings":{"name":"wp_plupload_default_settings","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints default Plupload arguments.\n *\n * @since 3.4.0\n *\/"}]},"wp_prepare_attachment_for_js":{"name":"wp_prepare_attachment_for_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attachment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prepares an attachment post object for JS, where it is expected\n * to be JSON-encoded and fit into an Attachment model.\n *\n * @since 3.5.0\n *\n * @param mixed $attachment Attachment ID or object.\n * @return array|void Array of attachment details.\n *\/"}]},"wp_enqueue_media":{"name":"wp_enqueue_media","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueues all scripts, styles, settings, and templates necessary to use\n * all media JS APIs.\n *\n * @since 3.5.0\n *\n * @global int       $content_width\n * @global wpdb      $wpdb\n * @global WP_Locale $wp_locale\n *\n * @param array $args {\n *     Arguments for enqueuing media scripts.\n *\n *     @type int|WP_Post A post object or ID.\n * }\n *\/"}]},"get_attached_media":{"name":"get_attached_media","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves media attached to the passed post.\n *\n * @since 3.6.0\n *\n * @param string      $type Mime type.\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @return array Found attachments.\n *\/"}]},"get_media_embedded_in_content":{"name":"get_media_embedded_in_content","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$types","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check the content blob for an audio, video, object, embed, or iframe tags.\n *\n * @since 3.6.0\n *\n * @param string $content A string which might contain media data.\n * @param array  $types   An array of media types: 'audio', 'video', 'object', 'embed', or 'iframe'.\n * @return array A list of found HTML media embeds.\n *\/"}]},"get_post_galleries":{"name":"get_post_galleries","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$html","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves galleries from the passed post's content.\n *\n * @since 3.6.0\n *\n * @param int|WP_Post $post Post ID or object.\n * @param bool        $html Optional. Whether to return HTML or data in the array. Default true.\n * @return array A list of arrays, each containing gallery data and srcs parsed\n *               from the expanded shortcode.\n *\/"}]},"get_post_gallery":{"name":"get_post_gallery","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$html","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check a specified post's content for gallery and, if present, return the first\n *\n * @since 3.6.0\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @param bool        $html Optional. Whether to return HTML or data. Default is true.\n * @return string|array Gallery data and srcs parsed from the expanded shortcode.\n *\/"}]},"get_post_galleries_images":{"name":"get_post_galleries_images","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the image srcs from galleries from a post's content, if present\n *\n * @since 3.6.0\n *\n * @see get_post_galleries()\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global `$post`.\n * @return array A list of lists, each containing image srcs parsed.\n *               from an expanded shortcode\n *\/"}]},"get_post_gallery_images":{"name":"get_post_gallery_images","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks a post's content for galleries and return the image srcs for the first found gallery\n *\n * @since 3.6.0\n *\n * @see get_post_gallery()\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global `$post`.\n * @return array A list of a gallery's image srcs in order.\n *\/"}]},"wp_maybe_generate_attachment_metadata":{"name":"wp_maybe_generate_attachment_metadata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attachment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Maybe attempts to generate attachment metadata, if missing.\n *\n * @since 3.9.0\n *\n * @param WP_Post $attachment Attachment object.\n *\/"}]},"attachment_url_to_postid":{"name":"attachment_url_to_postid","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Tries to convert an attachment URL into a post ID.\n *\n * @since 4.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $url The URL to resolve.\n * @return int The found post ID, or 0 on failure.\n *\/"}]},"wpview_media_sandbox_styles":{"name":"wpview_media_sandbox_styles","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the URLs for CSS files used in an iframe-sandbox'd TinyMCE media view.\n *\n * @since 4.0.0\n *\n * @return array The relevant CSS file URLs.\n *\/"}]},"wp_styles":{"name":"wp_styles","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Initialize $wp_styles if it has not been set.\n *\n * @global WP_Styles $wp_styles\n *\n * @since 4.2.0\n *\n * @return WP_Styles WP_Styles instance.\n *\/"},{"phpdoc":"\/**\n * Dependencies API: Styles functions\n *\n * @since 2.6.0\n *\n * @package WordPress\n * @subpackage Dependencies\n *\/"}]},"wp_print_styles":{"name":"wp_print_styles","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$handles","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display styles that are in the $handles queue.\n *\n * Passing an empty array to $handles prints the queue,\n * passing an array with one string prints that style,\n * and passing an array of strings prints those styles.\n *\n * @global WP_Styles $wp_styles The WP_Styles object for printing styles.\n *\n * @since 2.6.0\n *\n * @param string|bool|array $handles Styles to be printed. Default 'false'.\n * @return array On success, a processed array of WP_Dependencies items; otherwise, an empty array.\n *\/"}]},"wp_add_inline_style":{"name":"wp_add_inline_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add extra CSS styles to a registered stylesheet.\n *\n * Styles will only be added if the stylesheet in already in the queue.\n * Accepts a string $data containing the CSS. If two or more CSS code blocks\n * are added to the same stylesheet $handle, they will be printed in the order\n * they were added, i.e. the latter added styles can redeclare the previous.\n *\n * @see WP_Styles::add_inline_style()\n *\n * @since 3.3.0\n *\n * @param string $handle Name of the stylesheet to add the extra styles to.\n * @param string $data   String containing the CSS styles to be added.\n * @return bool True on success, false on failure.\n *\/"}]},"wp_register_style":{"name":"wp_register_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deps","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ver","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$media","rank":4,"variadic":false,"reference":false,"default":"'all'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register a CSS stylesheet.\n *\n * @see WP_Dependencies::add()\n * @link https:\/\/www.w3.org\/TR\/CSS2\/media.html#media-types List of CSS media types.\n *\n * @since 2.6.0\n * @since 4.3.0 A return value was added.\n *\n * @param string           $handle Name of the stylesheet. Should be unique.\n * @param string           $src    Full URL of the stylesheet, or path of the stylesheet relative to the WordPress root directory.\n * @param array            $deps   Optional. An array of registered stylesheet handles this stylesheet depends on. Default empty array.\n * @param string|bool|null $ver    Optional. String specifying stylesheet version number, if it has one, which is added to the URL\n *                                 as a query string for cache busting purposes. If version is set to false, a version\n *                                 number is automatically added equal to current installed WordPress version.\n *                                 If set to null, no version is added.\n * @param string           $media  Optional. The media for which this stylesheet has been defined.\n *                                 Default 'all'. Accepts media types like 'all', 'print' and 'screen', or media queries like\n *                                 '(orientation: portrait)' and '(max-width: 640px)'.\n * @return bool Whether the style has been registered. True on success, false on failure.\n *\/"}]},"wp_deregister_style":{"name":"wp_deregister_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove a registered stylesheet.\n *\n * @see WP_Dependencies::remove()\n *\n * @since 2.1.0\n *\n * @param string $handle Name of the stylesheet to be removed.\n *\/"}]},"wp_enqueue_style":{"name":"wp_enqueue_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deps","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ver","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$media","rank":4,"variadic":false,"reference":false,"default":"'all'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueue a CSS stylesheet.\n *\n * Registers the style if source provided (does NOT overwrite) and enqueues.\n *\n * @see WP_Dependencies::add()\n * @see WP_Dependencies::enqueue()\n * @link https:\/\/www.w3.org\/TR\/CSS2\/media.html#media-types List of CSS media types.\n *\n * @since 2.6.0\n *\n * @param string           $handle Name of the stylesheet. Should be unique.\n * @param string           $src    Full URL of the stylesheet, or path of the stylesheet relative to the WordPress root directory.\n *                                 Default empty.\n * @param array            $deps   Optional. An array of registered stylesheet handles this stylesheet depends on. Default empty array.\n * @param string|bool|null $ver    Optional. String specifying stylesheet version number, if it has one, which is added to the URL\n *                                 as a query string for cache busting purposes. If version is set to false, a version\n *                                 number is automatically added equal to current installed WordPress version.\n *                                 If set to null, no version is added.\n * @param string           $media  Optional. The media for which this stylesheet has been defined.\n *                                 Default 'all'. Accepts media types like 'all', 'print' and 'screen', or media queries like\n *                                 '(orientation: portrait)' and '(max-width: 640px)'.\n *\/"}]},"wp_dequeue_style":{"name":"wp_dequeue_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove a previously enqueued CSS stylesheet.\n *\n * @see WP_Dependencies::dequeue()\n *\n * @since 3.1.0\n *\n * @param string $handle Name of the stylesheet to be removed.\n *\/"}]},"wp_style_is":{"name":"wp_style_is","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$list","rank":1,"variadic":false,"reference":false,"default":"'enqueued'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check whether a CSS stylesheet has been added to the queue.\n *\n * @since 2.8.0\n *\n * @param string $handle Name of the stylesheet.\n * @param string $list   Optional. Status of the stylesheet to check. Default 'enqueued'.\n *                       Accepts 'enqueued', 'registered', 'queue', 'to_do', and 'done'.\n * @return bool Whether style is queued.\n *\/"}]},"wp_style_add_data":{"name":"wp_style_add_data","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add metadata to a CSS stylesheet.\n *\n * Works only if the stylesheet has already been added.\n *\n * Possible values for $key and $value:\n * 'conditional' string      Comments for IE 6, lte IE 7 etc.\n * 'rtl'         bool|string To declare an RTL stylesheet.\n * 'suffix'      string      Optional suffix, used in combination with RTL.\n * 'alt'         bool        For rel=\"alternate stylesheet\".\n * 'title'       string      For preferred\/alternate stylesheets.\n *\n * @see WP_Dependency::add_data()\n *\n * @since 3.6.0\n *\n * @param string $handle Name of the stylesheet.\n * @param string $key    Name of data point for which we're storing a value.\n *                       Accepts 'conditional', 'rtl' and 'suffix', 'alt' and 'title'.\n * @param mixed  $value  String containing the CSS data to be added.\n * @return bool True on success, false on failure.\n *\/"}]},"wp_default_scripts":{"name":"wp_default_scripts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$scripts","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register all WordPress scripts.\n *\n * Localizes some of them.\n * args order: `$scripts->add( 'handle', 'url', 'dependencies', 'query-string', 1 );`\n * when last arg === 1 queues the script for the footer\n *\n * @since 2.6.0\n *\n * @param WP_Scripts $scripts WP_Scripts object.\n *\/"}]},"wp_default_styles":{"name":"wp_default_styles","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$styles","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Assign default styles to $styles object.\n *\n * Nothing is returned, because the $styles parameter is passed by reference.\n * Meaning that whatever object is passed will be updated without having to\n * reassign the variable that was passed back to the same value. This saves\n * memory.\n *\n * Adding default styles is not the only task, it also assigns the base_url\n * property, the default version, and text direction for the object.\n *\n * @since 2.6.0\n *\n * @param WP_Styles $styles\n *\/"}]},"wp_prototype_before_jquery":{"name":"wp_prototype_before_jquery","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$js_array","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Reorder JavaScript scripts array to place prototype before jQuery.\n *\n * @since 2.3.1\n *\n * @param array $js_array JavaScript scripts array\n * @return array Reordered array, if needed.\n *\/"}]},"wp_just_in_time_script_localization":{"name":"wp_just_in_time_script_localization","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load localized data on print rather than initialization.\n *\n * These localizations require information that may not be loaded even by init.\n *\n * @since 2.5.0\n *\/"}]},"wp_localize_jquery_ui_datepicker":{"name":"wp_localize_jquery_ui_datepicker","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Localizes the jQuery UI datepicker.\n *\n * @since 4.6.0\n *\n * @link http:\/\/api.jqueryui.com\/datepicker\/#options\n *\n * @global WP_Locale $wp_locale The WordPress date and time locale object.\n *\/"}]},"wp_style_loader_src":{"name":"wp_style_loader_src","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$src","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$handle","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Administration Screen CSS for changing the styles.\n *\n * If installing the 'wp-admin\/' directory will be replaced with '.\/'.\n *\n * The $_wp_admin_css_colors global manages the Administration Screens CSS\n * stylesheet that is loaded. The option that is set is 'admin_color' and is the\n * color and key for the array. The value for the color key is an object with\n * a 'url' parameter that has the URL path to the CSS file.\n *\n * The query from $src parameter will be appended to the URL that is given from\n * the $_wp_admin_css_colors array value URL.\n *\n * @since 2.6.0\n * @global array $_wp_admin_css_colors\n *\n * @param string $src    Source URL.\n * @param string $handle Either 'colors' or 'colors-rtl'.\n * @return string|false URL path to CSS stylesheet for Administration Screens.\n *\/"}]},"print_head_scripts":{"name":"print_head_scripts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints the script queue in the HTML head on admin pages.\n *\n * Postpones the scripts that were queued for the footer.\n * print_footer_scripts() is called in the footer to print these scripts.\n *\n * @since 2.8.0\n *\n * @see wp_print_scripts()\n *\n * @global bool $concatenate_scripts\n *\n * @return array\n *\/"}]},"print_footer_scripts":{"name":"print_footer_scripts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints the scripts that were queued for the footer or too late for the HTML head.\n *\n * @since 2.8.0\n *\n * @global WP_Scripts $wp_scripts\n * @global bool       $concatenate_scripts\n *\n * @return array\n *\/"}]},"_print_scripts":{"name":"_print_scripts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print scripts (internal use only)\n *\n * @ignore\n *\n * @global WP_Scripts $wp_scripts\n * @global bool       $compress_scripts\n *\/"}]},"wp_print_head_scripts":{"name":"wp_print_head_scripts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints the script queue in the HTML head on the front end.\n *\n * Postpones the scripts that were queued for the footer.\n * wp_print_footer_scripts() is called in the footer to print these scripts.\n *\n * @since 2.8.0\n *\n * @global WP_Scripts $wp_scripts\n *\n * @return array\n *\/"}]},"_wp_footer_scripts":{"name":"_wp_footer_scripts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Private, for use in *_footer_scripts hooks\n *\n * @since 3.3.0\n *\/"}]},"wp_print_footer_scripts":{"name":"wp_print_footer_scripts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Hooks to print the scripts and styles in the footer.\n *\n * @since 2.8.0\n *\/"}]},"wp_enqueue_scripts":{"name":"wp_enqueue_scripts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Wrapper for do_action('wp_enqueue_scripts')\n *\n * Allows plugins to queue scripts for the front end using wp_enqueue_script().\n * Runs first in wp_head() where all is_home(), is_page(), etc. functions are available.\n *\n * @since 2.8.0\n *\/"}]},"print_admin_styles":{"name":"print_admin_styles","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints the styles queue in the HTML head on admin pages.\n *\n * @since 2.8.0\n *\n * @global bool $concatenate_scripts\n *\n * @return array\n *\/"}]},"print_late_styles":{"name":"print_late_styles","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints the styles that were queued too late for the HTML head.\n *\n * @since 3.3.0\n *\n * @global WP_Styles $wp_styles\n * @global bool      $concatenate_scripts\n *\n * @return array|void\n *\/"}]},"_print_styles":{"name":"_print_styles","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print styles (internal use only)\n *\n * @ignore\n * @since 3.3.0\n *\n * @global bool $compress_css\n *\/"}]},"script_concat_settings":{"name":"script_concat_settings","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine the concatenation and compression settings for scripts and styles.\n *\n * @since 2.8.0\n *\n * @global bool $concatenate_scripts\n * @global bool $compress_scripts\n * @global bool $compress_css\n *\/"}]},"get_header":{"name":"get_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load header template.\n *\n * Includes the header template for a theme or if a name is specified then a\n * specialised header will be included.\n *\n * For the parameter, if the file is called \"header-special.php\" then specify\n * \"special\".\n *\n * @since 1.5.0\n *\n * @param string $name The name of the specialised header.\n *\/"},{"phpdoc":"\/**\n * General template tags that can go anywhere in a template.\n *\n * @package WordPress\n * @subpackage Template\n *\/"}]},"get_footer":{"name":"get_footer","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load footer template.\n *\n * Includes the footer template for a theme or if a name is specified then a\n * specialised footer will be included.\n *\n * For the parameter, if the file is called \"footer-special.php\" then specify\n * \"special\".\n *\n * @since 1.5.0\n *\n * @param string $name The name of the specialised footer.\n *\/"}]},"get_sidebar":{"name":"get_sidebar","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load sidebar template.\n *\n * Includes the sidebar template for a theme or if a name is specified then a\n * specialised sidebar will be included.\n *\n * For the parameter, if the file is called \"sidebar-special.php\" then specify\n * \"special\".\n *\n * @since 1.5.0\n *\n * @param string $name The name of the specialised sidebar.\n *\/"}]},"get_template_part":{"name":"get_template_part","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$slug","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load a template part into a template\n *\n * Makes it easy for a theme to reuse sections of code in a easy to overload way\n * for child themes.\n *\n * Includes the named template part for a theme or if a name is specified then a\n * specialised part will be included. If the theme contains no {slug}.php file\n * then no template will be included.\n *\n * The template is included using require, not require_once, so you may include the\n * same template part multiple times.\n *\n * For the $name parameter, if the file is called \"{slug}-special.php\" then specify\n * \"special\".\n *\n * @since 3.0.0\n *\n * @param string $slug The slug name for the generic template.\n * @param string $name The name of the specialised template.\n *\/"}]},"get_search_form":{"name":"get_search_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$echo","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display search form.\n *\n * Will first attempt to locate the searchform.php file in either the child or\n * the parent, then load it. If it doesn't exist, then the default search form\n * will be displayed. The default search form is HTML, which will be displayed.\n * There is a filter applied to the search form HTML in order to edit or replace\n * it. The filter is {@see 'get_search_form'}.\n *\n * This function is primarily used by themes which want to hardcode the search\n * form into the sidebar and also by the search widget in WordPress.\n *\n * There is also an action that is called whenever the function is run called,\n * {@see 'pre_get_search_form'}. This can be useful for outputting JavaScript that the\n * search relies on or various formatting that applies to the beginning of the\n * search. To give a few examples of what it can be used for.\n *\n * @since 2.7.0\n *\n * @param bool $echo Default to echo and not return the form.\n * @return string|void String when $echo is false.\n *\/"}]},"wp_loginout":{"name":"wp_loginout","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$redirect","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the Log In\/Out link.\n *\n * Displays a link, which allows users to navigate to the Log In page to log in\n * or log out depending on whether they are currently logged in.\n *\n * @since 1.5.0\n *\n * @param string $redirect Optional path to redirect to on login\/logout.\n * @param bool   $echo     Default to echo and not return the link.\n * @return string|void String when retrieving.\n *\/"}]},"wp_logout_url":{"name":"wp_logout_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$redirect","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the logout URL.\n *\n * Returns the URL that allows the user to log out of the site.\n *\n * @since 2.7.0\n *\n * @param string $redirect Path to redirect to on logout.\n * @return string The logout URL. Note: HTML-encoded via esc_html() in wp_nonce_url().\n *\/"}]},"wp_login_url":{"name":"wp_login_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$redirect","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$force_reauth","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the login URL.\n *\n * @since 2.7.0\n *\n * @param string $redirect     Path to redirect to on log in.\n * @param bool   $force_reauth Whether to force reauthorization, even if a cookie is present.\n *                             Default false.\n * @return string The login URL. Not HTML-encoded.\n *\/"}]},"wp_registration_url":{"name":"wp_registration_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the URL that allows the user to register on the site.\n *\n * @since 3.6.0\n *\n * @return string User registration URL.\n *\/"}]},"wp_login_form":{"name":"wp_login_form","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Provides a simple login form for use anywhere within WordPress.\n *\n * The login format HTML is echoed by default. Pass a false value for `$echo` to return it instead.\n *\n * @since 3.0.0\n *\n * @param array $args {\n *     Optional. Array of options to control the form output. Default empty array.\n *\n *     @type bool   $echo           Whether to display the login form or return the form HTML code.\n *                                  Default true (echo).\n *     @type string $redirect       URL to redirect to. Must be absolute, as in \"https:\/\/example.com\/mypage\/\".\n *                                  Default is to redirect back to the request URI.\n *     @type string $form_id        ID attribute value for the form. Default 'loginform'.\n *     @type string $label_username Label for the username or email address field. Default 'Username or Email Address'.\n *     @type string $label_password Label for the password field. Default 'Password'.\n *     @type string $label_remember Label for the remember field. Default 'Remember Me'.\n *     @type string $label_log_in   Label for the submit button. Default 'Log In'.\n *     @type string $id_username    ID attribute value for the username field. Default 'user_login'.\n *     @type string $id_password    ID attribute value for the password field. Default 'user_pass'.\n *     @type string $id_remember    ID attribute value for the remember field. Default 'rememberme'.\n *     @type string $id_submit      ID attribute value for the submit button. Default 'wp-submit'.\n *     @type bool   $remember       Whether to display the \"rememberme\" checkbox in the form.\n *     @type string $value_username Default value for the username field. Default empty.\n *     @type bool   $value_remember Whether the \"Remember Me\" checkbox should be checked by default.\n *                                  Default false (unchecked).\n *\n * }\n * @return string|void String when retrieving.\n *\/"}]},"wp_lostpassword_url":{"name":"wp_lostpassword_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$redirect","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the URL that allows the user to retrieve the lost password\n *\n * @since 2.8.0\n *\n * @param string $redirect Path to redirect to on login.\n * @return string Lost password URL.\n *\/"}]},"wp_register":{"name":"wp_register","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$before","rank":0,"variadic":false,"reference":false,"default":"'<li>'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":1,"variadic":false,"reference":false,"default":"'<\/li>'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the Registration or Admin link.\n *\n * Display a link which allows the user to navigate to the registration page if\n * not logged in and registration is enabled or to the dashboard if logged in.\n *\n * @since 1.5.0\n *\n * @param string $before Text to output before the link. Default `<li>`.\n * @param string $after  Text to output after the link. Default `<\/li>`.\n * @param bool   $echo   Default to echo and not return the link.\n * @return string|void String when retrieving.\n *\/"}]},"wp_meta":{"name":"wp_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Theme container function for the 'wp_meta' action.\n *\n * The {@see 'wp_meta'} action can have several purposes, depending on how you use it,\n * but one purpose might have been to allow for theme switching.\n *\n * @since 1.5.0\n *\n * @link https:\/\/core.trac.wordpress.org\/ticket\/1458 Explanation of 'wp_meta' action.\n *\/"}]},"bloginfo":{"name":"bloginfo","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$show","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays information about the current site.\n *\n * @since 0.71\n *\n * @see get_bloginfo() For possible `$show` values\n *\n * @param string $show Optional. Site information to display. Default empty.\n *\/"}]},"get_site_icon_url":{"name":"get_site_icon_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$size","rank":0,"variadic":false,"reference":false,"default":"512","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns the Site Icon URL.\n *\n * @since 4.3.0\n *\n * @param int    $size    Optional. Size of the site icon. Default 512 (pixels).\n * @param string $url     Optional. Fallback url if no site icon is found. Default empty.\n * @param int    $blog_id Optional. ID of the blog to get the site icon for. Default current blog.\n * @return string Site Icon URL.\n *\/"}]},"site_icon_url":{"name":"site_icon_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$size","rank":0,"variadic":false,"reference":false,"default":"512","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the Site Icon URL.\n *\n * @since 4.3.0\n *\n * @param int    $size    Optional. Size of the site icon. Default 512 (pixels).\n * @param string $url     Optional. Fallback url if no site icon is found. Default empty.\n * @param int    $blog_id Optional. ID of the blog to get the site icon for. Default current blog.\n *\/"}]},"has_site_icon":{"name":"has_site_icon","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether the site has a Site Icon.\n *\n * @since 4.3.0\n *\n * @param int $blog_id Optional. ID of the blog in question. Default current blog.\n * @return bool Whether the site has a site icon or not.\n *\/"}]},"has_custom_logo":{"name":"has_custom_logo","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines whether the site has a custom logo.\n *\n * @since 4.5.0\n *\n * @param int $blog_id Optional. ID of the blog in question. Default is the ID of the current blog.\n * @return bool Whether the site has a custom logo or not.\n *\/"}]},"get_custom_logo":{"name":"get_custom_logo","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns a custom logo, linked to home.\n *\n * @since 4.5.0\n *\n * @param int $blog_id Optional. ID of the blog in question. Default is the ID of the current blog.\n * @return string Custom logo markup.\n *\/"}]},"the_custom_logo":{"name":"the_custom_logo","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays a custom logo, linked to home.\n *\n * @since 4.5.0\n *\n * @param int $blog_id Optional. ID of the blog in question. Default is the ID of the current blog.\n *\/"}]},"wp_get_document_title":{"name":"wp_get_document_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns document title for the current page.\n *\n * @since 4.4.0\n *\n * @global int $page  Page number of a single post.\n * @global int $paged Page number of a list of posts.\n *\n * @return string Tag with the document title.\n *\/"}]},"_wp_render_title_tag":{"name":"_wp_render_title_tag","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays title tag with content.\n *\n * @ignore\n * @since 4.1.0\n * @since 4.4.0 Improved title output replaced `wp_title()`.\n * @access private\n *\/"}]},"wp_title":{"name":"wp_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$sep","rank":0,"variadic":false,"reference":false,"default":"'&raquo;'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$display","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$seplocation","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display or retrieve page title for all areas of blog.\n *\n * By default, the page title will display the separator before the page title,\n * so that the blog title will be before the page title. This is not good for\n * title display, since the blog title shows up on most tabs and not what is\n * important, which is the page that the user is looking at.\n *\n * There are also SEO benefits to having the blog title after or to the 'right'\n * of the page title. However, it is mostly common sense to have the blog title\n * to the right with most browsers supporting tabs. You can achieve this by\n * using the seplocation parameter and setting the value to 'right'. This change\n * was introduced around 2.5.0, in case backward compatibility of themes is\n * important.\n *\n * @since 1.0.0\n *\n * @global WP_Locale $wp_locale\n *\n * @param string $sep         Optional, default is '&raquo;'. How to separate the various items\n *                            within the page title.\n * @param bool   $display     Optional, default is true. Whether to display or retrieve title.\n * @param string $seplocation Optional. Direction to display title, 'right'.\n * @return string|null String on retrieve, null when displaying.\n *\/"}]},"single_post_title":{"name":"single_post_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$prefix","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$display","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display or retrieve page title for post.\n *\n * This is optimized for single.php template file for displaying the post title.\n *\n * It does not support placing the separator after the title, but by leaving the\n * prefix parameter empty, you can set the title separator manually. The prefix\n * does not automatically place a space between the prefix, so if there should\n * be a space, the parameter value will need to have it at the end.\n *\n * @since 0.71\n *\n * @param string $prefix  Optional. What to display before the title.\n * @param bool   $display Optional, default is true. Whether to display or retrieve title.\n * @return string|void Title when retrieving.\n *\/"}]},"post_type_archive_title":{"name":"post_type_archive_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$prefix","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$display","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display or retrieve title for a post type archive.\n *\n * This is optimized for archive.php and archive-{$post_type}.php template files\n * for displaying the title of the post type.\n *\n * @since 3.1.0\n *\n * @param string $prefix  Optional. What to display before the title.\n * @param bool   $display Optional, default is true. Whether to display or retrieve title.\n * @return string|void Title when retrieving, null when displaying or failure.\n *\/"}]},"single_cat_title":{"name":"single_cat_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$prefix","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$display","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display or retrieve page title for category archive.\n *\n * Useful for category template files for displaying the category page title.\n * The prefix does not automatically place a space between the prefix, so if\n * there should be a space, the parameter value will need to have it at the end.\n *\n * @since 0.71\n *\n * @param string $prefix  Optional. What to display before the title.\n * @param bool   $display Optional, default is true. Whether to display or retrieve title.\n * @return string|void Title when retrieving.\n *\/"}]},"single_tag_title":{"name":"single_tag_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$prefix","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$display","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display or retrieve page title for tag post archive.\n *\n * Useful for tag template files for displaying the tag page title. The prefix\n * does not automatically place a space between the prefix, so if there should\n * be a space, the parameter value will need to have it at the end.\n *\n * @since 2.3.0\n *\n * @param string $prefix  Optional. What to display before the title.\n * @param bool   $display Optional, default is true. Whether to display or retrieve title.\n * @return string|void Title when retrieving.\n *\/"}]},"single_term_title":{"name":"single_term_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$prefix","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$display","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display or retrieve page title for taxonomy term archive.\n *\n * Useful for taxonomy term template files for displaying the taxonomy term page title.\n * The prefix does not automatically place a space between the prefix, so if there should\n * be a space, the parameter value will need to have it at the end.\n *\n * @since 3.1.0\n *\n * @param string $prefix  Optional. What to display before the title.\n * @param bool   $display Optional, default is true. Whether to display or retrieve title.\n * @return string|void Title when retrieving.\n *\/"}]},"single_month_title":{"name":"single_month_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$prefix","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$display","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display or retrieve page title for post archive based on date.\n *\n * Useful for when the template only needs to display the month and year,\n * if either are available. The prefix does not automatically place a space\n * between the prefix, so if there should be a space, the parameter value\n * will need to have it at the end.\n *\n * @since 0.71\n *\n * @global WP_Locale $wp_locale\n *\n * @param string $prefix  Optional. What to display before the title.\n * @param bool   $display Optional, default is true. Whether to display or retrieve title.\n * @return string|void Title when retrieving.\n *\/"}]},"the_archive_title":{"name":"the_archive_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$before","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the archive title based on the queried object.\n *\n * @since 4.1.0\n *\n * @see get_the_archive_title()\n *\n * @param string $before Optional. Content to prepend to the title. Default empty.\n * @param string $after  Optional. Content to append to the title. Default empty.\n *\/"}]},"get_the_archive_title":{"name":"get_the_archive_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the archive title based on the queried object.\n *\n * @since 4.1.0\n *\n * @return string Archive title.\n *\/"}]},"the_archive_description":{"name":"the_archive_description","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$before","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display category, tag, term, or author description.\n *\n * @since 4.1.0\n *\n * @see get_the_archive_description()\n *\n * @param string $before Optional. Content to prepend to the description. Default empty.\n * @param string $after  Optional. Content to append to the description. Default empty.\n *\/"}]},"get_the_archive_description":{"name":"get_the_archive_description","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve category, tag, term, or author description.\n *\n * @since 4.1.0\n * @since 4.7.0 Added support for author archives.\n *\n * @see term_description()\n *\n * @return string Archive description.\n *\/"}]},"get_archives_link":{"name":"get_archives_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$text","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$format","rank":2,"variadic":false,"reference":false,"default":"'html'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve archive link content based on predefined or custom code.\n *\n * The format can be one of four styles. The 'link' for head element, 'option'\n * for use in the select element, 'html' for use in list (either ol or ul HTML\n * elements). Custom content is also supported using the before and after\n * parameters.\n *\n * The 'link' format uses the `<link>` HTML element with the **archives**\n * relationship. The before and after parameters are not used. The text\n * parameter is used to describe the link.\n *\n * The 'option' format uses the option HTML element for use in select element.\n * The value is the url parameter and the before and after parameters are used\n * between the text description.\n *\n * The 'html' format, which is the default, uses the li HTML element for use in\n * the list HTML elements. The before parameter is before the link and the after\n * parameter is after the closing link.\n *\n * The custom format uses the before parameter before the link ('a' HTML\n * element) and the after parameter after the closing link tag. If the above\n * three values for the format are not used, then custom format is assumed.\n *\n * @since 1.0.0\n *\n * @param string $url    URL to archive.\n * @param string $text   Archive text description.\n * @param string $format Optional, default is 'html'. Can be 'link', 'option', 'html', or custom.\n * @param string $before Optional. Content to prepend to the description. Default empty.\n * @param string $after  Optional. Content to append to the description. Default empty.\n * @return string HTML link content for archive.\n *\/"}]},"wp_get_archives":{"name":"wp_get_archives","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display archive links based on type and format.\n *\n * @since 1.2.0\n * @since 4.4.0 $post_type arg was added.\n *\n * @see get_archives_link()\n *\n * @global wpdb      $wpdb\n * @global WP_Locale $wp_locale\n *\n * @param string|array $args {\n *     Default archive links arguments. Optional.\n *\n *     @type string     $type            Type of archive to retrieve. Accepts 'daily', 'weekly', 'monthly',\n *                                       'yearly', 'postbypost', or 'alpha'. Both 'postbypost' and 'alpha'\n *                                       display the same archive link list as well as post titles instead\n *                                       of displaying dates. The difference between the two is that 'alpha'\n *                                       will order by post title and 'postbypost' will order by post date.\n *                                       Default 'monthly'.\n *     @type string|int $limit           Number of links to limit the query to. Default empty (no limit).\n *     @type string     $format          Format each link should take using the $before and $after args.\n *                                       Accepts 'link' (`<link>` tag), 'option' (`<option>` tag), 'html'\n *                                       (`<li>` tag), or a custom format, which generates a link anchor\n *                                       with $before preceding and $after succeeding. Default 'html'.\n *     @type string     $before          Markup to prepend to the beginning of each link. Default empty.\n *     @type string     $after           Markup to append to the end of each link. Default empty.\n *     @type bool       $show_post_count Whether to display the post count alongside the link. Default false.\n *     @type bool|int   $echo            Whether to echo or return the links list. Default 1|true to echo.\n *     @type string     $order           Whether to use ascending or descending order. Accepts 'ASC', or 'DESC'.\n *                                       Default 'DESC'.\n *     @type string     $post_type       Post type. Default 'post'.\n * }\n * @return string|void String when retrieving.\n *\/"}]},"calendar_week_mod":{"name":"calendar_week_mod","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$num","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get number of days since the start of the week.\n *\n * @since 1.5.0\n *\n * @param int $num Number of day.\n * @return int Days since the start of the week.\n *\/"}]},"get_calendar":{"name":"get_calendar","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$initial","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display calendar with days that have posts as links.\n *\n * The calendar is cached, which will be retrieved, if it exists. If there are\n * no posts for the month, then it will not be displayed.\n *\n * @since 1.0.0\n *\n * @global wpdb      $wpdb\n * @global int       $m\n * @global int       $monthnum\n * @global int       $year\n * @global WP_Locale $wp_locale\n * @global array     $posts\n *\n * @param bool $initial Optional, default is true. Use initial calendar names.\n * @param bool $echo    Optional, default is true. Set to false for return.\n * @return string|void String when retrieving.\n *\/"}]},"delete_get_calendar_cache":{"name":"delete_get_calendar_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Purge the cached results of get_calendar.\n *\n * @see get_calendar\n * @since 2.1.0\n *\/"}]},"allowed_tags":{"name":"allowed_tags","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display all of the allowed tags in HTML format with attributes.\n *\n * This is useful for displaying in the comment area, which elements and\n * attributes are supported. As well as any plugins which want to display it.\n *\n * @since 1.0.1\n *\n * @global array $allowedtags\n *\n * @return string HTML allowed tags entity encoded.\n *\/"}]},"the_date_xml":{"name":"the_date_xml","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the date in iso8601 format for xml files.\n *\n * @since 1.0.0\n *\/"}]},"the_date":{"name":"the_date","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$d","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":3,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display or Retrieve the date the current post was written (once per date)\n *\n * Will only output the date if the current post's date is different from the\n * previous one output.\n *\n * i.e. Only one date listing will show per day worth of posts shown in the loop, even if the\n * function is called several times for each post.\n *\n * HTML output can be filtered with 'the_date'.\n * Date string output can be filtered with 'get_the_date'.\n *\n * @since 0.71\n *\n * @global string|int|bool $currentday\n * @global string|int|bool $previousday\n *\n * @param string $d      Optional. PHP date format defaults to the date_format option if not specified.\n * @param string $before Optional. Output before the date.\n * @param string $after  Optional. Output after the date.\n * @param bool   $echo   Optional, default is display. Whether to echo the date or return it.\n * @return string|void String if retrieving.\n *\/"}]},"get_the_date":{"name":"get_the_date","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$d","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the date on which the post was written.\n *\n * Unlike the_date() this function will always return the date.\n * Modify output with the {@see 'get_the_date'} filter.\n *\n * @since 3.0.0\n *\n * @param  string      $d    Optional. PHP date format defaults to the date_format option if not specified.\n * @param  int|WP_Post $post Optional. Post ID or WP_Post object. Default current post.\n * @return false|string Date the current post was written. False on failure.\n *\/"}]},"the_modified_date":{"name":"the_modified_date","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$d","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":3,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the date on which the post was last modified.\n *\n * @since 2.1.0\n *\n * @param string $d      Optional. PHP date format defaults to the date_format option if not specified.\n * @param string $before Optional. Output before the date.\n * @param string $after  Optional. Output after the date.\n * @param bool   $echo   Optional, default is display. Whether to echo the date or return it.\n * @return string|void String if retrieving.\n *\/"}]},"get_the_modified_date":{"name":"get_the_modified_date","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$d","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the date on which the post was last modified.\n *\n * @since 2.1.0\n * @since 4.6.0 Added the `$post` parameter.\n *\n * @param string      $d    Optional. PHP date format defaults to the date_format option if not specified.\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default current post.\n * @return false|string Date the current post was modified. False on failure.\n *\/"}]},"the_time":{"name":"the_time","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$d","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the time at which the post was written.\n *\n * @since 0.71\n *\n * @param string $d Either 'G', 'U', or php date format.\n *\/"}]},"get_the_time":{"name":"get_the_time","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$d","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the time at which the post was written.\n *\n * @since 1.5.0\n *\n * @param string      $d    Optional. Format to use for retrieving the time the post\n *                          was written. Either 'G', 'U', or php date format defaults\n *                          to the value specified in the time_format option. Default empty.\n * @param int|WP_Post $post WP_Post object or ID. Default is global $post object.\n * @return string|int|false Formatted date string or Unix timestamp if `$id` is 'U' or 'G'. False on failure.\n *\/"}]},"get_post_time":{"name":"get_post_time","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$d","rank":0,"variadic":false,"reference":false,"default":"'U'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$gmt","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$translate","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the time at which the post was written.\n *\n * @since 2.0.0\n *\n * @param string      $d         Optional. Format to use for retrieving the time the post\n *                               was written. Either 'G', 'U', or php date format. Default 'U'.\n * @param bool        $gmt       Optional. Whether to retrieve the GMT time. Default false.\n * @param int|WP_Post $post      WP_Post object or ID. Default is global $post object.\n * @param bool        $translate Whether to translate the time string. Default false.\n * @return string|int|false Formatted date string or Unix timestamp if `$id` is 'U' or 'G'. False on failure.\n *\/"}]},"the_modified_time":{"name":"the_modified_time","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$d","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the time at which the post was last modified.\n *\n * @since 2.0.0\n *\n * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option.\n *\/"}]},"get_the_modified_time":{"name":"get_the_modified_time","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$d","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the time at which the post was last modified.\n *\n * @since 2.0.0\n * @since 4.6.0 Added the `$post` parameter.\n *\n * @param string      $d     Optional. Format to use for retrieving the time the post\n *                           was modified. Either 'G', 'U', or php date format defaults\n *                           to the value specified in the time_format option. Default empty.\n * @param int|WP_Post $post  Optional. Post ID or WP_Post object. Default current post.\n * @return false|string Formatted date string or Unix timestamp. False on failure.\n *\/"}]},"get_post_modified_time":{"name":"get_post_modified_time","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$d","rank":0,"variadic":false,"reference":false,"default":"'U'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$gmt","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$translate","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the time at which the post was last modified.\n *\n * @since 2.0.0\n *\n * @param string      $d         Optional. Format to use for retrieving the time the post\n *                               was modified. Either 'G', 'U', or php date format. Default 'U'.\n * @param bool        $gmt       Optional. Whether to retrieve the GMT time. Default false.\n * @param int|WP_Post $post      WP_Post object or ID. Default is global $post object.\n * @param bool        $translate Whether to translate the time string. Default false.\n * @return string|int|false Formatted date string or Unix timestamp if `$id` is 'U' or 'G'. False on failure.\n *\/"}]},"the_weekday":{"name":"the_weekday","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the weekday on which the post was written.\n *\n * @since 0.71\n *\n * @global WP_Locale $wp_locale\n *\/"}]},"the_weekday_date":{"name":"the_weekday_date","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$before","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the weekday on which the post was written.\n *\n * Will only output the weekday if the current post's weekday is different from\n * the previous one output.\n *\n * @since 0.71\n *\n * @global WP_Locale       $wp_locale\n * @global string|int|bool $currentday\n * @global string|int|bool $previousweekday\n *\n * @param string $before Optional Output before the date.\n * @param string $after Optional Output after the date.\n *\/"}]},"wp_head":{"name":"wp_head","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Fire the wp_head action.\n *\n * See {@see 'wp_head'}.\n *\n * @since 1.2.0\n *\/"}]},"wp_footer":{"name":"wp_footer","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Fire the wp_footer action.\n *\n * See {@see 'wp_footer'}.\n *\n * @since 1.5.1\n *\/"}]},"feed_links":{"name":"feed_links","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the links to the general feeds.\n *\n * @since 2.8.0\n *\n * @param array $args Optional arguments.\n *\/"}]},"feed_links_extra":{"name":"feed_links_extra","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the links to the extra feeds such as category feeds.\n *\n * @since 2.8.0\n *\n * @param array $args Optional arguments.\n *\/"}]},"rsd_link":{"name":"rsd_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the link to the Really Simple Discovery service endpoint.\n *\n * @link http:\/\/archipelago.phrasewise.com\/rsd\n * @since 2.0.0\n *\/"}]},"wlwmanifest_link":{"name":"wlwmanifest_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the link to the Windows Live Writer manifest file.\n *\n * @link https:\/\/msdn.microsoft.com\/en-us\/library\/bb463265.aspx\n * @since 2.3.1\n *\/"}]},"noindex":{"name":"noindex","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays a noindex meta tag if required by the blog configuration.\n *\n * If a blog is marked as not being public then the noindex meta tag will be\n * output to tell web robots not to index the page content. Add this to the\n * {@see 'wp_head'} action.\n *\n * Typical usage is as a {@see 'wp_head'} callback:\n *\n *     add_action( 'wp_head', 'noindex' );\n *\n * @see wp_no_robots\n *\n * @since 2.1.0\n *\/"}]},"wp_no_robots":{"name":"wp_no_robots","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display a noindex meta tag.\n *\n * Outputs a noindex meta tag that tells web robots not to index the page content.\n * Typical usage is as a wp_head callback. add_action( 'wp_head', 'wp_no_robots' );\n *\n * @since 3.3.0\n *\/"}]},"wp_sensitive_page_meta":{"name":"wp_sensitive_page_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display a noindex,noarchive meta tag and referrer origin-when-cross-origin meta tag.\n *\n * Outputs a noindex,noarchive meta tag that tells web robots not to index or cache the page content.\n * Outputs a referrer origin-when-cross-origin meta tag that tells the browser not to send the full\n * url as a referrer to other sites when cross-origin assets are loaded.\n *\n * Typical usage is as a wp_head callback. add_action( 'wp_head', 'wp_sensitive_page_meta' );\n *\n * @since 5.0.0\n *\/"}]},"wp_site_icon":{"name":"wp_site_icon","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display site icon meta tags.\n *\n * @since 4.3.0\n *\n * @link https:\/\/www.whatwg.org\/specs\/web-apps\/current-work\/multipage\/links.html#rel-icon HTML5 specification link icon.\n *\/"}]},"wp_resource_hints":{"name":"wp_resource_hints","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints resource hints to browsers for pre-fetching, pre-rendering\n * and pre-connecting to web sites.\n *\n * Gives hints to browsers to prefetch specific pages or render them\n * in the background, to perform DNS lookups or to begin the connection\n * handshake (DNS, TCP, TLS) in the background.\n *\n * These performance improving indicators work by using `<link rel\"\u2026\">`.\n *\n * @since 4.6.0\n *\/"}]},"wp_dependencies_unique_hosts":{"name":"wp_dependencies_unique_hosts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a list of unique hosts of all enqueued scripts and styles.\n *\n * @since 4.6.0\n *\n * @return array A list of unique hosts of enqueued scripts and styles.\n *\/"}]},"user_can_richedit":{"name":"user_can_richedit","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether the user can access the visual editor.\n *\n * Checks if the user can access the visual editor and that it's supported by the user's browser.\n *\n * @since 2.0.0\n *\n * @global bool $wp_rich_edit Whether the user can access the visual editor.\n * @global bool $is_gecko     Whether the browser is Gecko-based.\n * @global bool $is_opera     Whether the browser is Opera.\n * @global bool $is_safari    Whether the browser is Safari.\n * @global bool $is_chrome    Whether the browser is Chrome.\n * @global bool $is_IE        Whether the browser is Internet Explorer.\n * @global bool $is_edge      Whether the browser is Microsoft Edge.\n *\n * @return bool True if the user can access the visual editor, false otherwise.\n *\/"}]},"wp_default_editor":{"name":"wp_default_editor","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Find out which editor should be displayed by default.\n *\n * Works out which of the two editors to display as the current editor for a\n * user. The 'html' setting is for the \"Text\" editor tab.\n *\n * @since 2.5.0\n *\n * @return string Either 'tinymce', or 'html', or 'test'\n *\/"}]},"wp_editor":{"name":"wp_editor","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$editor_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$settings","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Renders an editor.\n *\n * Using this function is the proper way to output all needed components for both TinyMCE and Quicktags.\n * _WP_Editors should not be used directly. See https:\/\/core.trac.wordpress.org\/ticket\/17144.\n *\n * NOTE: Once initialized the TinyMCE editor cannot be safely moved in the DOM. For that reason\n * running wp_editor() inside of a meta box is not a good idea unless only Quicktags is used.\n * On the post edit screen several actions can be used to include additional editors\n * containing TinyMCE: 'edit_page_form', 'edit_form_advanced' and 'dbx_post_sidebar'.\n * See https:\/\/core.trac.wordpress.org\/ticket\/19173 for more information.\n *\n * @see _WP_Editors::editor()\n * @since 3.3.0\n *\n * @param string $content   Initial content for the editor.\n * @param string $editor_id HTML ID attribute value for the textarea and TinyMCE. Can only be \/[a-z]+\/.\n * @param array  $settings  See _WP_Editors::editor().\n *\/"}]},"get_search_query":{"name":"get_search_query","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$escaped","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the contents of the search WordPress query variable.\n *\n * The search query string is passed through esc_attr() to ensure that it is safe\n * for placing in an html attribute.\n *\n * @since 2.3.0\n *\n * @param bool $escaped Whether the result is escaped. Default true.\n * \t                    Only use when you are later escaping it. Do not use unescaped.\n * @return string\n *\/"}]},"the_search_query":{"name":"the_search_query","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the contents of the search query variable.\n *\n * The search query string is passed through esc_attr() to ensure that it is safe\n * for placing in an html attribute.\n *\n * @since 2.1.0\n *\/"}]},"get_language_attributes":{"name":"get_language_attributes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$doctype","rank":0,"variadic":false,"reference":false,"default":"'html'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the language attributes for the html tag.\n *\n * Builds up a set of html attributes containing the text direction and language\n * information for the page.\n *\n * @since 4.3.0\n *\n * @param string $doctype Optional. The type of html document. Accepts 'xhtml' or 'html'. Default 'html'.\n *\/"}]},"language_attributes":{"name":"language_attributes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$doctype","rank":0,"variadic":false,"reference":false,"default":"'html'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the language attributes for the html tag.\n *\n * Builds up a set of html attributes containing the text direction and language\n * information for the page.\n *\n * @since 2.1.0\n * @since 4.3.0 Converted into a wrapper for get_language_attributes().\n *\n * @param string $doctype Optional. The type of html document. Accepts 'xhtml' or 'html'. Default 'html'.\n *\/"}]},"paginate_links":{"name":"paginate_links","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve paginated link for archive post pages.\n *\n * Technically, the function can be used to create paginated link list for any\n * area. The 'base' argument is used to reference the url, which will be used to\n * create the paginated links. The 'format' argument is then used for replacing\n * the page number. It is however, most likely and by default, to be used on the\n * archive post pages.\n *\n * The 'type' argument controls format of the returned value. The default is\n * 'plain', which is just a string with the links separated by a newline\n * character. The other possible values are either 'array' or 'list'. The\n * 'array' value will return an array of the paginated link list to offer full\n * control of display. The 'list' value will place all of the paginated links in\n * an unordered HTML list.\n *\n * The 'total' argument is the total amount of pages and is an integer. The\n * 'current' argument is the current page number and is also an integer.\n *\n * An example of the 'base' argument is \"http:\/\/example.com\/all_posts.php%_%\"\n * and the '%_%' is required. The '%_%' will be replaced by the contents of in\n * the 'format' argument. An example for the 'format' argument is \"?page=%#%\"\n * and the '%#%' is also required. The '%#%' will be replaced with the page\n * number.\n *\n * You can include the previous and next links in the list by setting the\n * 'prev_next' argument to true, which it is by default. You can set the\n * previous text, by using the 'prev_text' argument. You can set the next text\n * by setting the 'next_text' argument.\n *\n * If the 'show_all' argument is set to true, then it will show all of the pages\n * instead of a short list of the pages near the current page. By default, the\n * 'show_all' is set to false and controlled by the 'end_size' and 'mid_size'\n * arguments. The 'end_size' argument is how many numbers on either the start\n * and the end list edges, by default is 1. The 'mid_size' argument is how many\n * numbers to either side of current page, but not including current page.\n *\n * It is possible to add query vars to the link by using the 'add_args' argument\n * and see add_query_arg() for more information.\n *\n * The 'before_page_number' and 'after_page_number' arguments allow users to\n * augment the links themselves. Typically this might be to add context to the\n * numbered links so that screen reader users understand what the links are for.\n * The text strings are added before and after the page number - within the\n * anchor tag.\n *\n * @since 2.1.0\n *\n * @global WP_Query   $wp_query\n * @global WP_Rewrite $wp_rewrite\n *\n * @param string|array $args {\n *     Optional. Array or string of arguments for generating paginated links for archives.\n *\n *     @type string $base               Base of the paginated url. Default empty.\n *     @type string $format             Format for the pagination structure. Default empty.\n *     @type int    $total              The total amount of pages. Default is the value WP_Query's\n *                                      `max_num_pages` or 1.\n *     @type int    $current            The current page number. Default is 'paged' query var or 1.\n *     @type bool   $show_all           Whether to show all pages. Default false.\n *     @type int    $end_size           How many numbers on either the start and the end list edges.\n *                                      Default 1.\n *     @type int    $mid_size           How many numbers to either side of the current pages. Default 2.\n *     @type bool   $prev_next          Whether to include the previous and next links in the list. Default true.\n *     @type bool   $prev_text          The previous page text. Default '&laquo; Previous'.\n *     @type bool   $next_text          The next page text. Default 'Next &raquo;'.\n *     @type string $type               Controls format of the returned value. Possible values are 'plain',\n *                                      'array' and 'list'. Default is 'plain'.\n *     @type array  $add_args           An array of query args to add. Default false.\n *     @type string $add_fragment       A string to append to each link. Default empty.\n *     @type string $before_page_number A string to appear before the page number. Default empty.\n *     @type string $after_page_number  A string to append after the page number. Default empty.\n * }\n * @return array|string|void String of page links or array of page links.\n *\/"}]},"wp_admin_css_color":{"name":"wp_admin_css_color","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$colors","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$icons","rank":4,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers an admin colour scheme css file.\n *\n * Allows a plugin to register a new admin colour scheme. For example:\n *\n *     wp_admin_css_color( 'classic', __( 'Classic' ), admin_url( \"css\/colors-classic.css\" ), array(\n *         '#07273E', '#14568A', '#D54E21', '#2683AE'\n *     ) );\n *\n * @since 2.5.0\n *\n * @global array $_wp_admin_css_colors\n *\n * @param string $key    The unique key for this theme.\n * @param string $name   The name of the theme.\n * @param string $url    The URL of the CSS file containing the color scheme.\n * @param array  $colors Optional. An array of CSS color definition strings which are used\n *                       to give the user a feel for the theme.\n * @param array  $icons {\n *     Optional. CSS color definitions used to color any SVG icons.\n *\n *     @type string $base    SVG icon base color.\n *     @type string $focus   SVG icon color on focus.\n *     @type string $current SVG icon color of current admin menu link.\n * }\n *\/"}]},"register_admin_color_schemes":{"name":"register_admin_color_schemes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers the default Admin color schemes\n *\n * @since 3.0.0\n *\/"}]},"wp_admin_css_uri":{"name":"wp_admin_css_uri","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"'wp-admin'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the URL of a WordPress admin CSS file.\n *\n * @see WP_Styles::_css_href and its {@see 'style_loader_src'} filter.\n *\n * @since 2.3.0\n *\n * @param string $file file relative to wp-admin\/ without its \".css\" extension.\n * @return string\n *\/"}]},"wp_admin_css":{"name":"wp_admin_css","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"'wp-admin'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$force_echo","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueues or directly prints a stylesheet link to the specified CSS file.\n *\n * \"Intelligently\" decides to enqueue or to print the CSS file. If the\n * {@see 'wp_print_styles'} action has *not* yet been called, the CSS file will be\n * enqueued. If the {@see 'wp_print_styles'} action has been called, the CSS link will\n * be printed. Printing may be forced by passing true as the $force_echo\n * (second) parameter.\n *\n * For backward compatibility with WordPress 2.3 calling method: If the $file\n * (first) parameter does not correspond to a registered CSS file, we assume\n * $file is a file relative to wp-admin\/ without its \".css\" extension. A\n * stylesheet link to that generated URL is printed.\n *\n * @since 2.3.0\n *\n * @param string $file       Optional. Style handle name or file name (without \".css\" extension) relative\n * \t                         to wp-admin\/. Defaults to 'wp-admin'.\n * @param bool   $force_echo Optional. Force the stylesheet link to be printed rather than enqueued.\n *\/"}]},"add_thickbox":{"name":"add_thickbox","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueues the default ThickBox js and css.\n *\n * If any of the settings need to be changed, this can be done with another js\n * file similar to media-upload.js. That file should\n * require array('thickbox') to ensure it is loaded after.\n *\n * @since 2.5.0\n *\/"}]},"wp_generator":{"name":"wp_generator","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the XHTML generator that is generated on the wp_head hook.\n *\n * See {@see 'wp_head'}.\n *\n * @since 2.5.0\n *\/"}]},"the_generator":{"name":"the_generator","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the generator XML or Comment for RSS, ATOM, etc.\n *\n * Returns the correct generator type for the requested output format. Allows\n * for a plugin to filter generators overall the {@see 'the_generator'} filter.\n *\n * @since 2.5.0\n *\n * @param string $type The type of generator to output - (html|xhtml|atom|rss2|rdf|comment|export).\n *\/"}]},"get_the_generator":{"name":"get_the_generator","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Creates the generator XML or Comment for RSS, ATOM, etc.\n *\n * Returns the correct generator type for the requested output format. Allows\n * for a plugin to filter generators on an individual basis using the\n * {@see 'get_the_generator_$type'} filter.\n *\n * @since 2.5.0\n *\n * @param string $type The type of generator to return - (html|xhtml|atom|rss2|rdf|comment|export).\n * @return string|void The HTML content for the generator.\n *\/"}]},"checked":{"name":"checked","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$checked","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$current","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the html checked attribute.\n *\n * Compares the first two arguments and if identical marks as checked\n *\n * @since 1.0.0\n *\n * @param mixed $checked One of the values to compare\n * @param mixed $current (true) The other value to compare if not just true\n * @param bool  $echo    Whether to echo or just return the string\n * @return string html attribute or empty string\n *\/"}]},"selected":{"name":"selected","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$selected","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$current","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the html selected attribute.\n *\n * Compares the first two arguments and if identical marks as selected\n *\n * @since 1.0.0\n *\n * @param mixed $selected One of the values to compare\n * @param mixed $current  (true) The other value to compare if not just true\n * @param bool  $echo     Whether to echo or just return the string\n * @return string html attribute or empty string\n *\/"}]},"disabled":{"name":"disabled","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$disabled","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$current","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the html disabled attribute.\n *\n * Compares the first two arguments and if identical marks as disabled\n *\n * @since 3.0.0\n *\n * @param mixed $disabled One of the values to compare\n * @param mixed $current  (true) The other value to compare if not just true\n * @param bool  $echo     Whether to echo or just return the string\n * @return string html attribute or empty string\n *\/"}]},"__checked_selected_helper":{"name":"__checked_selected_helper","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$helper","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$current","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Private helper function for checked, selected, and disabled.\n *\n * Compares the first two arguments and if identical marks as $type\n *\n * @since 2.8.0\n * @access private\n *\n * @param mixed  $helper  One of the values to compare\n * @param mixed  $current (true) The other value to compare if not just true\n * @param bool   $echo    Whether to echo or just return the string\n * @param string $type    The type of checked|selected|disabled we are doing\n * @return string html attribute or empty string\n *\/"}]},"wp_heartbeat_settings":{"name":"wp_heartbeat_settings","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$settings","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Default settings for heartbeat\n *\n * Outputs the nonce used in the heartbeat XHR\n *\n * @since 3.6.0\n *\n * @param array $settings\n * @return array $settings\n *\/"}]},"get_postdata":{"name":"get_postdata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$postid","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated functions from past WordPress versions. You shouldn't use these\n * functions and look for the alternatives instead. The functions will be\n * removed in a later version.\n *\n * @package WordPress\n * @subpackage Deprecated\n *\/"},{"phpdoc":"\/**\n * Retrieves all post data for a given post.\n *\n * @since 0.71\n * @deprecated 1.5.1 Use get_post()\n * @see get_post()\n *\n * @param int $postid Post ID.\n * @return array Post data.\n *\/"}]},"start_wp":{"name":"start_wp","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sets up the WordPress Loop.\n *\n * Use The Loop instead.\n *\n * @link https:\/\/codex.wordpress.org\/The_Loop\n *\n * @since 1.0.1\n * @deprecated 1.5.0\n *\/"}]},"the_category_ID":{"name":"the_category_ID","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$echo","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns or prints a category ID.\n *\n * @since 0.71\n * @deprecated 0.71 Use get_the_category()\n * @see get_the_category()\n *\n * @param bool $echo Optional. Whether to echo the output. Default true.\n * @return int Category ID.\n *\/"}]},"the_category_head":{"name":"the_category_head","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$before","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints a category with optional text before and after.\n *\n * @since 0.71\n * @deprecated 0.71 Use get_the_category_by_ID()\n * @see get_the_category_by_ID()\n *\n * @param string $before Optional. Text to display before the category. Default empty.\n * @param string $after  Optional. Text to display after the category. Default empty.\n *\/"}]},"previous_post":{"name":"previous_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$format","rank":0,"variadic":false,"reference":false,"default":"'%'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$previous","rank":1,"variadic":false,"reference":false,"default":"'previous post: '","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":2,"variadic":false,"reference":false,"default":"'yes'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$in_same_cat","rank":3,"variadic":false,"reference":false,"default":"'no'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$limitprev","rank":4,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excluded_categories","rank":5,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints a link to the previous post.\n *\n * @since 1.5.0\n * @deprecated 2.0.0 Use previous_post_link()\n * @see previous_post_link()\n *\n * @param string $format\n * @param string $previous\n * @param string $title\n * @param string $in_same_cat\n * @param int    $limitprev\n * @param string $excluded_categories\n *\/"}]},"next_post":{"name":"next_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$format","rank":0,"variadic":false,"reference":false,"default":"'%'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$next","rank":1,"variadic":false,"reference":false,"default":"'next post: '","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":2,"variadic":false,"reference":false,"default":"'yes'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$in_same_cat","rank":3,"variadic":false,"reference":false,"default":"'no'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$limitnext","rank":4,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excluded_categories","rank":5,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints link to the next post.\n *\n * @since 0.71\n * @deprecated 2.0.0 Use next_post_link()\n * @see next_post_link()\n *\n * @param string $format\n * @param string $next\n * @param string $title\n * @param string $in_same_cat\n * @param int $limitnext\n * @param string $excluded_categories\n *\/"}]},"user_can_create_post":{"name":"user_can_create_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":1,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$category_id","rank":2,"variadic":false,"reference":false,"default":"'None'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether user can create a post.\n *\n * @since 1.5.0\n * @deprecated 2.0.0 Use current_user_can()\n * @see current_user_can()\n *\n * @param int $user_id\n * @param int $blog_id Not Used\n * @param int $category_id Not Used\n * @return bool\n *\/"}]},"user_can_create_draft":{"name":"user_can_create_draft","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":1,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$category_id","rank":2,"variadic":false,"reference":false,"default":"'None'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether user can create a post.\n *\n * @since 1.5.0\n * @deprecated 2.0.0 Use current_user_can()\n * @see current_user_can()\n *\n * @param int $user_id\n * @param int $blog_id Not Used\n * @param int $category_id Not Used\n * @return bool\n *\/"}]},"user_can_edit_post":{"name":"user_can_edit_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":2,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether user can edit a post.\n *\n * @since 1.5.0\n * @deprecated 2.0.0 Use current_user_can()\n * @see current_user_can()\n *\n * @param int $user_id\n * @param int $post_id\n * @param int $blog_id Not Used\n * @return bool\n *\/"}]},"user_can_delete_post":{"name":"user_can_delete_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":2,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether user can delete a post.\n *\n * @since 1.5.0\n * @deprecated 2.0.0 Use current_user_can()\n * @see current_user_can()\n *\n * @param int $user_id\n * @param int $post_id\n * @param int $blog_id Not Used\n * @return bool\n *\/"}]},"user_can_set_post_date":{"name":"user_can_set_post_date","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":1,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$category_id","rank":2,"variadic":false,"reference":false,"default":"'None'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether user can set new posts' dates.\n *\n * @since 1.5.0\n * @deprecated 2.0.0 Use current_user_can()\n * @see current_user_can()\n *\n * @param int $user_id\n * @param int $blog_id Not Used\n * @param int $category_id Not Used\n * @return bool\n *\/"}]},"user_can_edit_post_date":{"name":"user_can_edit_post_date","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":2,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether user can delete a post.\n *\n * @since 1.5.0\n * @deprecated 2.0.0 Use current_user_can()\n * @see current_user_can()\n *\n * @param int $user_id\n * @param int $post_id\n * @param int $blog_id Not Used\n * @return bool returns true if $user_id can edit $post_id's date\n *\/"}]},"user_can_edit_post_comments":{"name":"user_can_edit_post_comments","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":2,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether user can delete a post.\n *\n * @since 1.5.0\n * @deprecated 2.0.0 Use current_user_can()\n * @see current_user_can()\n *\n * @param int $user_id\n * @param int $post_id\n * @param int $blog_id Not Used\n * @return bool returns true if $user_id can edit $post_id's comments\n *\/"}]},"user_can_delete_post_comments":{"name":"user_can_delete_post_comments","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":2,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether user can delete a post.\n *\n * @since 1.5.0\n * @deprecated 2.0.0 Use current_user_can()\n * @see current_user_can()\n *\n * @param int $user_id\n * @param int $post_id\n * @param int $blog_id Not Used\n * @return bool returns true if $user_id can delete $post_id's comments\n *\/"}]},"user_can_edit_user":{"name":"user_can_edit_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$other_user","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Can user can edit other user.\n *\n * @since 1.5.0\n * @deprecated 2.0.0 Use current_user_can()\n * @see current_user_can()\n *\n * @param int $user_id\n * @param int $other_user\n * @return bool\n *\/"}]},"get_linksbyname":{"name":"get_linksbyname","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$cat_name","rank":0,"variadic":false,"reference":false,"default":"\"noname\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"'<br \/>'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$between","rank":3,"variadic":false,"reference":false,"default":"\" \"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_images","rank":4,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$orderby","rank":5,"variadic":false,"reference":false,"default":"'id'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_description","rank":6,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_rating","rank":7,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$limit","rank":8,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_updated","rank":9,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the links associated with category $cat_name.\n *\n * @since 0.71\n * @deprecated 2.1.0 Use get_bookmarks()\n * @see get_bookmarks()\n *\n * @param string $cat_name Optional. The category name to use. If no match is found uses all.\n * @param string $before Optional. The html to output before the link.\n * @param string $after Optional. The html to output after the link.\n * @param string $between Optional. The html to output between the link\/image and its description. Not used if no image or $show_images is true.\n * @param bool $show_images Optional. Whether to show images (if defined).\n * @param string $orderby Optional. The order to output the links. E.g. 'id', 'name', 'url', 'description' or 'rating'. Or maybe owner.\n *\t\tIf you start the name with an underscore the order will be reversed. You can also specify 'rand' as the order which will return links in a\n *\t\trandom order.\n * @param bool $show_description Optional. Whether to show the description if show_images=false\/not defined.\n * @param bool $show_rating Optional. Show rating stars\/chars.\n * @param int $limit\t\tOptional. Limit to X entries. If not specified, all entries are shown.\n * @param int $show_updated Optional. Whether to show last updated timestamp\n *\/"}]},"wp_get_linksbyname":{"name":"wp_get_linksbyname","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$category","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the links associated with the named category.\n *\n * @since 1.0.1\n * @deprecated 2.1.0 Use wp_list_bookmarks()\n * @see wp_list_bookmarks()\n *\n * @param string $category The category to use.\n * @param string $args\n * @return string|null\n *\/"}]},"get_linkobjectsbyname":{"name":"get_linkobjectsbyname","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$cat_name","rank":0,"variadic":false,"reference":false,"default":"\"noname\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$orderby","rank":1,"variadic":false,"reference":false,"default":"'name'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$limit","rank":2,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets an array of link objects associated with category $cat_name.\n *\n *     $links = get_linkobjectsbyname( 'fred' );\n *     foreach ( $links as $link ) {\n *      \techo '<li>' . $link->link_name . '<\/li>';\n *     }\n *\n * @since 1.0.1\n * @deprecated 2.1.0 Use get_bookmarks()\n * @see get_bookmarks()\n *\n * @param string $cat_name The category name to use. If no match is found uses all.\n * @param string $orderby The order to output the links. E.g. 'id', 'name', 'url', 'description', or 'rating'.\n *\t\tOr maybe owner. If you start the name with an underscore the order will be reversed. You can also\n *\t\tspecify 'rand' as the order which will return links in a random order.\n * @param int $limit Limit to X entries. If not specified, all entries are shown.\n * @return array\n *\/"}]},"get_linkobjects":{"name":"get_linkobjects","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$category","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$orderby","rank":1,"variadic":false,"reference":false,"default":"'name'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$limit","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets an array of link objects associated with category n.\n *\n * Usage:\n *\n *     $links = get_linkobjects(1);\n *     if ($links) {\n *     \tforeach ($links as $link) {\n *     \t\techo '<li>'.$link->link_name.'<br \/>'.$link->link_description.'<\/li>';\n *     \t}\n *     }\n *\n * Fields are:\n *\n * - link_id\n * - link_url\n * - link_name\n * - link_image\n * - link_target\n * - link_category\n * - link_description\n * - link_visible\n * - link_owner\n * - link_rating\n * - link_updated\n * - link_rel\n * - link_notes\n *\n * @since 1.0.1\n * @deprecated 2.1.0 Use get_bookmarks()\n * @see get_bookmarks()\n *\n * @param int $category The category to use. If no category supplied uses all\n * @param string $orderby the order to output the links. E.g. 'id', 'name', 'url',\n *\t\t'description', or 'rating'. Or maybe owner. If you start the name with an\n *\t\tunderscore the order will be reversed. You can also specify 'rand' as the\n *\t\torder which will return links in a random order.\n * @param int $limit Limit to X entries. If not specified, all entries are shown.\n * @return array\n *\/"}]},"get_linksbyname_withrating":{"name":"get_linksbyname_withrating","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$cat_name","rank":0,"variadic":false,"reference":false,"default":"\"noname\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"'<br \/>'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$between","rank":3,"variadic":false,"reference":false,"default":"\" \"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_images","rank":4,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$orderby","rank":5,"variadic":false,"reference":false,"default":"'id'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_description","rank":6,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$limit","rank":7,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_updated","rank":8,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the links associated with category 'cat_name' and display rating stars\/chars.\n *\n * @since 0.71\n * @deprecated 2.1.0 Use get_bookmarks()\n * @see get_bookmarks()\n *\n * @param string $cat_name The category name to use. If no match is found uses all\n * @param string $before The html to output before the link\n * @param string $after The html to output after the link\n * @param string $between The html to output between the link\/image and its description. Not used if no image or show_images is true\n * @param bool $show_images Whether to show images (if defined).\n * @param string $orderby the order to output the links. E.g. 'id', 'name', 'url',\n *\t\t'description', or 'rating'. Or maybe owner. If you start the name with an\n *\t\tunderscore the order will be reversed. You can also specify 'rand' as the\n *\t\torder which will return links in a random order.\n * @param bool $show_description Whether to show the description if show_images=false\/not defined\n * @param int $limit Limit to X entries. If not specified, all entries are shown.\n * @param int $show_updated Whether to show last updated timestamp\n *\/"}]},"get_links_withrating":{"name":"get_links_withrating","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$category","rank":0,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"'<br \/>'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$between","rank":3,"variadic":false,"reference":false,"default":"\" \"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_images","rank":4,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$orderby","rank":5,"variadic":false,"reference":false,"default":"'id'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_description","rank":6,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$limit","rank":7,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_updated","rank":8,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the links associated with category n and display rating stars\/chars.\n *\n * @since 0.71\n * @deprecated 2.1.0 Use get_bookmarks()\n * @see get_bookmarks()\n *\n * @param int $category The category to use. If no category supplied uses all\n * @param string $before The html to output before the link\n * @param string $after The html to output after the link\n * @param string $between The html to output between the link\/image and its description. Not used if no image or show_images == true\n * @param bool $show_images Whether to show images (if defined).\n * @param string $orderby The order to output the links. E.g. 'id', 'name', 'url',\n *\t\t'description', or 'rating'. Or maybe owner. If you start the name with an\n *\t\tunderscore the order will be reversed. You can also specify 'rand' as the\n *\t\torder which will return links in a random order.\n * @param bool $show_description Whether to show the description if show_images=false\/not defined.\n * @param int $limit Limit to X entries. If not specified, all entries are shown.\n * @param int $show_updated Whether to show last updated timestamp\n *\/"}]},"get_autotoggle":{"name":"get_autotoggle","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the auto_toggle setting.\n *\n * @since 0.71\n * @deprecated 2.1.0\n *\n * @param int $id The category to get. If no category supplied uses 0\n * @return int Only returns 0.\n *\/"}]},"list_cats":{"name":"list_cats","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$optionall","rank":0,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$all","rank":1,"variadic":false,"reference":false,"default":"'All'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sort_column","rank":2,"variadic":false,"reference":false,"default":"'ID'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sort_order","rank":3,"variadic":false,"reference":false,"default":"'asc'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$file","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$list","rank":5,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$optiondates","rank":6,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$optioncount","rank":7,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$hide_empty","rank":8,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$use_desc_for_title","rank":9,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$children","rank":10,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$child_of","rank":11,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$categories","rank":12,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recurse","rank":13,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feed","rank":14,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feed_image","rank":15,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$exclude","rank":16,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$hierarchical","rank":17,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Lists categories.\n *\n * @since 0.71\n * @deprecated 2.1.0 Use wp_list_categories()\n * @see wp_list_categories()\n *\n * @param int $optionall\n * @param string $all\n * @param string $sort_column\n * @param string $sort_order\n * @param string $file\n * @param bool $list\n * @param int $optiondates\n * @param int $optioncount\n * @param int $hide_empty\n * @param int $use_desc_for_title\n * @param bool $children\n * @param int $child_of\n * @param int $categories\n * @param int $recurse\n * @param string $feed\n * @param string $feed_image\n * @param string $exclude\n * @param bool $hierarchical\n * @return false|null\n *\/"}]},"wp_list_cats":{"name":"wp_list_cats","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Lists categories.\n *\n * @since 1.2.0\n * @deprecated 2.1.0 Use wp_list_categories()\n * @see wp_list_categories()\n *\n * @param string|array $args\n * @return false|null|string\n *\/"}]},"dropdown_cats":{"name":"dropdown_cats","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$optionall","rank":0,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$all","rank":1,"variadic":false,"reference":false,"default":"'All'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$orderby","rank":2,"variadic":false,"reference":false,"default":"'ID'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$order","rank":3,"variadic":false,"reference":false,"default":"'asc'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_last_update","rank":4,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_count","rank":5,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$hide_empty","rank":6,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$optionnone","rank":7,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$selected","rank":8,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$exclude","rank":9,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated method for generating a drop-down of categories.\n *\n * @since 0.71\n * @deprecated 2.1.0 Use wp_dropdown_categories()\n * @see wp_dropdown_categories()\n *\n * @param int $optionall\n * @param string $all\n * @param string $orderby\n * @param string $order\n * @param int $show_last_update\n * @param int $show_count\n * @param int $hide_empty\n * @param bool $optionnone\n * @param int $selected\n * @param int $exclude\n * @return string\n *\/"}]},"list_authors":{"name":"list_authors","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$optioncount","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$exclude_admin","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_fullname","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$hide_empty","rank":3,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feed","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feed_image","rank":5,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Lists authors.\n *\n * @since 1.2.0\n * @deprecated 2.1.0 Use wp_list_authors()\n * @see wp_list_authors()\n *\n * @param bool $optioncount\n * @param bool $exclude_admin\n * @param bool $show_fullname\n * @param bool $hide_empty\n * @param string $feed\n * @param string $feed_image\n * @return null|string\n *\/"}]},"wp_get_post_cats":{"name":"wp_get_post_cats","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blogid","rank":0,"variadic":false,"reference":false,"default":"'1'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_ID","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a list of post categories.\n *\n * @since 1.0.1\n * @deprecated 2.1.0 Use wp_get_post_categories()\n * @see wp_get_post_categories()\n *\n * @param int $blogid Not Used\n * @param int $post_ID\n * @return array\n *\/"}]},"wp_set_post_cats":{"name":"wp_set_post_cats","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blogid","rank":0,"variadic":false,"reference":false,"default":"'1'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_ID","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_categories","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sets the categories that the post id belongs to.\n *\n * @since 1.0.1\n * @deprecated 2.1.0\n * @deprecated Use wp_set_post_categories()\n * @see wp_set_post_categories()\n *\n * @param int $blogid Not used\n * @param int $post_ID\n * @param array $post_categories\n * @return bool|mixed\n *\/"}]},"get_archives":{"name":"get_archives","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$limit","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$format","rank":2,"variadic":false,"reference":false,"default":"'html'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_post_count","rank":5,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves a list of archives.\n *\n * @since 0.71\n * @deprecated 2.1.0 Use wp_get_archives()\n * @see wp_get_archives()\n *\n * @param string $type\n * @param string $limit\n * @param string $format\n * @param string $before\n * @param string $after\n * @param bool $show_post_count\n * @return string|null\n *\/"}]},"get_author_link":{"name":"get_author_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$echo","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$author_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$author_nicename","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns or Prints link to the author's posts.\n *\n * @since 1.2.0\n * @deprecated 2.1.0 Use get_author_posts_url()\n * @see get_author_posts_url()\n *\n * @param bool $echo\n * @param int $author_id\n * @param string $author_nicename Optional.\n * @return string|null\n *\/"}]},"link_pages":{"name":"link_pages","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$before","rank":0,"variadic":false,"reference":false,"default":"'<br \/>'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":1,"variadic":false,"reference":false,"default":"'<br \/>'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$next_or_number","rank":2,"variadic":false,"reference":false,"default":"'number'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$nextpagelink","rank":3,"variadic":false,"reference":false,"default":"'next page'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$previouspagelink","rank":4,"variadic":false,"reference":false,"default":"'previous page'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$pagelink","rank":5,"variadic":false,"reference":false,"default":"'%'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$more_file","rank":6,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print list of pages based on arguments.\n *\n * @since 0.71\n * @deprecated 2.1.0 Use wp_link_pages()\n * @see wp_link_pages()\n *\n * @param string $before\n * @param string $after\n * @param string $next_or_number\n * @param string $nextpagelink\n * @param string $previouspagelink\n * @param string $pagelink\n * @param string $more_file\n * @return string\n *\/"}]},"get_settings":{"name":"get_settings","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get value based on option.\n *\n * @since 0.71\n * @deprecated 2.1.0 Use get_option()\n * @see get_option()\n *\n * @param string $option\n * @return string\n *\/"}]},"permalink_link":{"name":"permalink_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print the permalink of the current post in the loop.\n *\n * @since 0.71\n * @deprecated 1.2.0 Use the_permalink()\n * @see the_permalink()\n *\/"}]},"permalink_single_rss":{"name":"permalink_single_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$deprecated","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print the permalink to the RSS feed.\n *\n * @since 0.71\n * @deprecated 2.3.0 Use the_permalink_rss()\n * @see the_permalink_rss()\n *\n * @param string $deprecated\n *\/"}]},"wp_get_links":{"name":"wp_get_links","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the links associated with category.\n *\n * @since 1.0.1\n * @deprecated 2.1.0 Use wp_list_bookmarks()\n * @see wp_list_bookmarks()\n *\n * @param string $args a query string\n * @return null|string\n *\/"}]},"get_links":{"name":"get_links","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$category","rank":0,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"'<br \/>'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$between","rank":3,"variadic":false,"reference":false,"default":"' '","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_images","rank":4,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$orderby","rank":5,"variadic":false,"reference":false,"default":"'name'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_description","rank":6,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_rating","rank":7,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$limit","rank":8,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$show_updated","rank":9,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":10,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the links associated with category by id.\n *\n * @since 0.71\n * @deprecated 2.1.0 Use get_bookmarks()\n * @see get_bookmarks()\n *\n * @param int $category The category to use. If no category supplied uses all\n * @param string $before the html to output before the link\n * @param string $after the html to output after the link\n * @param string $between the html to output between the link\/image and its description.\n *\t\tNot used if no image or show_images == true\n * @param bool $show_images whether to show images (if defined).\n * @param string $orderby the order to output the links. E.g. 'id', 'name', 'url',\n *\t\t'description', or 'rating'. Or maybe owner. If you start the name with an\n *\t\tunderscore the order will be reversed. You can also specify 'rand' as the order\n *\t\twhich will return links in a random order.\n * @param bool $show_description whether to show the description if show_images=false\/not defined.\n * @param bool $show_rating show rating stars\/chars\n * @param int $limit Limit to X entries. If not specified, all entries are shown.\n * @param int $show_updated whether to show last updated timestamp\n * @param bool $echo whether to echo the results, or return them instead\n * @return null|string\n *\/"}]},"get_links_list":{"name":"get_links_list","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$order","rank":0,"variadic":false,"reference":false,"default":"'name'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output entire list of links by category.\n *\n * Output a list of all links, listed by category, using the settings in\n * $wpdb->linkcategories and output it as a nested HTML unordered list.\n *\n * @since 1.0.1\n * @deprecated 2.1.0 Use wp_list_bookmarks()\n * @see wp_list_bookmarks()\n *\n * @param string $order Sort link categories by 'name' or 'id'\n *\/"}]},"links_popup_script":{"name":"links_popup_script","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"'Links'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$width","rank":1,"variadic":false,"reference":false,"default":"400","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$height","rank":2,"variadic":false,"reference":false,"default":"400","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$file","rank":3,"variadic":false,"reference":false,"default":"'links.all.php'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$count","rank":4,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Show the link to the links popup and the number of links.\n *\n * @since 0.71\n * @deprecated 2.1.0\n *\n * @param string $text the text of the link\n * @param int $width the width of the popup window\n * @param int $height the height of the popup window\n * @param string $file the page to open in the popup window\n * @param bool $count the number of links in the db\n *\/"}]},"get_linkrating":{"name":"get_linkrating","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Legacy function that retrieved the value of a link's link_rating field.\n *\n * @since 1.0.1\n * @deprecated 2.1.0 Use sanitize_bookmark_field()\n * @see sanitize_bookmark_field()\n *\n * @param object $link Link object.\n * @return mixed Value of the 'link_rating' field, false otherwise.\n *\/"}]},"get_linkcatname":{"name":"get_linkcatname","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets the name of category by id.\n *\n * @since 0.71\n * @deprecated 2.1.0 Use get_category()\n * @see get_category()\n *\n * @param int $id The category to get. If no category supplied uses 0\n * @return string\n *\/"}]},"comments_rss_link":{"name":"comments_rss_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link_text","rank":0,"variadic":false,"reference":false,"default":"'Comments RSS'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print RSS comment feed link.\n *\n * @since 1.0.1\n * @deprecated 2.5.0 Use post_comments_feed_link()\n * @see post_comments_feed_link()\n *\n * @param string $link_text\n *\/"}]},"get_category_rss_link":{"name":"get_category_rss_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$echo","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cat_ID","rank":1,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print\/Return link to category RSS2 feed.\n *\n * @since 1.2.0\n * @deprecated 2.5.0 Use get_category_feed_link()\n * @see get_category_feed_link()\n *\n * @param bool $echo\n * @param int $cat_ID\n * @return string\n *\/"}]},"get_author_rss_link":{"name":"get_author_rss_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$echo","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$author_id","rank":1,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print\/Return link to author RSS feed.\n *\n * @since 1.2.0\n * @deprecated 2.5.0 Use get_author_feed_link()\n * @see get_author_feed_link()\n *\n * @param bool $echo\n * @param int $author_id\n * @return string\n *\/"}]},"comments_rss":{"name":"comments_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return link to the post RSS feed.\n *\n * @since 1.5.0\n * @deprecated 2.2.0 Use get_post_comments_feed_link()\n * @see get_post_comments_feed_link()\n *\n * @return string\n *\/"}]},"create_user":{"name":"create_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$username","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$password","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$email","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * An alias of wp_create_user().\n *\n * @since 2.0.0\n * @deprecated 2.0.0 Use wp_create_user()\n * @see wp_create_user()\n *\n * @param string $username The user's username.\n * @param string $password The user's password.\n * @param string $email    The user's email.\n * @return int The new user's ID.\n *\/"}]},"gzip_compression":{"name":"gzip_compression","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Unused function.\n *\n * @deprecated 2.5.0\n *\/"}]},"get_commentdata":{"name":"get_commentdata","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment_ID","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$no_cache","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$include_unapproved","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve an array of comment data about comment $comment_ID.\n *\n * @since 0.71\n * @deprecated 2.7.0 Use get_comment()\n * @see get_comment()\n *\n * @param int $comment_ID The ID of the comment\n * @param int $no_cache Whether to use the cache (cast to bool)\n * @param bool $include_unapproved Whether to include unapproved comments\n * @return array The comment data\n *\/"}]},"get_catname":{"name":"get_catname","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$cat_ID","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the category name by the category ID.\n *\n * @since 0.71\n * @deprecated 2.8.0 Use get_cat_name()\n * @see get_cat_name()\n *\n * @param int $cat_ID Category ID\n * @return string category name\n *\/"}]},"get_category_children":{"name":"get_category_children","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$before","rank":1,"variadic":false,"reference":false,"default":"'\/'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$visited","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve category children list separated before and after the term IDs.\n *\n * @since 1.2.0\n * @deprecated 2.8.0 Use get_term_children()\n * @see get_term_children()\n *\n * @param int $id Category ID to retrieve children.\n * @param string $before Optional. Prepend before category term ID.\n * @param string $after Optional, default is empty string. Append after category term ID.\n * @param array $visited Optional. Category Term IDs that have already been added.\n * @return string\n *\/"}]},"get_all_category_ids":{"name":"get_all_category_ids","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves all category IDs.\n *\n * @since 2.0.0\n * @deprecated 4.0.0 Use get_terms()\n * @see get_terms()\n *\n * @link https:\/\/codex.wordpress.org\/Function_Reference\/get_all_category_ids\n *\n * @return object List of all of the category IDs.\n *\/"}]},"get_the_author_description":{"name":"get_the_author_description","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the description of the author of the current post.\n *\n * @since 1.5.0\n * @deprecated 2.8.0 Use get_the_author_meta()\n * @see get_the_author_meta()\n *\n * @return string The author's description.\n *\/"}]},"the_author_description":{"name":"the_author_description","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the description of the author of the current post.\n *\n * @since 1.0.0\n * @deprecated 2.8.0 Use the_author_meta()\n * @see the_author_meta()\n *\/"}]},"get_the_author_login":{"name":"get_the_author_login","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the login name of the author of the current post.\n *\n * @since 1.5.0\n * @deprecated 2.8.0 Use get_the_author_meta()\n * @see get_the_author_meta()\n *\n * @return string The author's login name (username).\n *\/"}]},"the_author_login":{"name":"the_author_login","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the login name of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8.0 Use the_author_meta()\n * @see the_author_meta()\n *\/"}]},"get_the_author_firstname":{"name":"get_the_author_firstname","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the first name of the author of the current post.\n *\n * @since 1.5.0\n * @deprecated 2.8.0 Use get_the_author_meta()\n * @see get_the_author_meta()\n *\n * @return string The author's first name.\n *\/"}]},"the_author_firstname":{"name":"the_author_firstname","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the first name of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8.0 Use the_author_meta()\n * @see the_author_meta()\n *\/"}]},"get_the_author_lastname":{"name":"get_the_author_lastname","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the last name of the author of the current post.\n *\n * @since 1.5.0\n * @deprecated 2.8.0 Use get_the_author_meta()\n * @see get_the_author_meta()\n *\n * @return string The author's last name.\n *\/"}]},"the_author_lastname":{"name":"the_author_lastname","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the last name of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8.0 Use the_author_meta()\n * @see the_author_meta()\n *\/"}]},"get_the_author_nickname":{"name":"get_the_author_nickname","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the nickname of the author of the current post.\n *\n * @since 1.5.0\n * @deprecated 2.8.0 Use get_the_author_meta()\n * @see get_the_author_meta()\n *\n * @return string The author's nickname.\n *\/"}]},"the_author_nickname":{"name":"the_author_nickname","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the nickname of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8.0 Use the_author_meta()\n * @see the_author_meta()\n *\/"}]},"get_the_author_email":{"name":"get_the_author_email","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the email of the author of the current post.\n *\n * @since 1.5.0\n * @deprecated 2.8.0 Use get_the_author_meta()\n * @see get_the_author_meta()\n *\n * @return string The author's username.\n *\/"}]},"the_author_email":{"name":"the_author_email","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the email of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8.0 Use the_author_meta()\n * @see the_author_meta()\n *\/"}]},"get_the_author_icq":{"name":"get_the_author_icq","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the ICQ number of the author of the current post.\n *\n * @since 1.5.0\n * @deprecated 2.8.0 Use get_the_author_meta()\n * @see get_the_author_meta()\n *\n * @return string The author's ICQ number.\n *\/"}]},"the_author_icq":{"name":"the_author_icq","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the ICQ number of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8.0 Use the_author_meta()\n * @see the_author_meta()\n *\/"}]},"get_the_author_yim":{"name":"get_the_author_yim","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the Yahoo! IM name of the author of the current post.\n *\n * @since 1.5.0\n * @deprecated 2.8.0 Use get_the_author_meta()\n * @see get_the_author_meta()\n *\n * @return string The author's Yahoo! IM name.\n *\/"}]},"the_author_yim":{"name":"the_author_yim","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the Yahoo! IM name of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8.0 Use the_author_meta()\n * @see the_author_meta()\n *\/"}]},"get_the_author_msn":{"name":"get_the_author_msn","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the MSN address of the author of the current post.\n *\n * @since 1.5.0\n * @deprecated 2.8.0 Use get_the_author_meta()\n * @see get_the_author_meta()\n *\n * @return string The author's MSN address.\n *\/"}]},"the_author_msn":{"name":"the_author_msn","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the MSN address of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8.0 Use the_author_meta()\n * @see the_author_meta()\n *\/"}]},"get_the_author_aim":{"name":"get_the_author_aim","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the AIM address of the author of the current post.\n *\n * @since 1.5.0\n * @deprecated 2.8.0 Use get_the_author_meta()\n * @see get_the_author_meta()\n *\n * @return string The author's AIM address.\n *\/"}]},"the_author_aim":{"name":"the_author_aim","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the AIM address of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8.0 Use the_author_meta('aim')\n * @see the_author_meta()\n *\/"}]},"get_author_name":{"name":"get_author_name","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$auth_id","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the specified author's preferred display name.\n *\n * @since 1.0.0\n * @deprecated 2.8.0 Use get_the_author_meta()\n * @see get_the_author_meta()\n *\n * @param int $auth_id The ID of the author.\n * @return string The author's display name.\n *\/"}]},"get_the_author_url":{"name":"get_the_author_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the URL to the home page of the author of the current post.\n *\n * @since 1.5.0\n * @deprecated 2.8.0 Use get_the_author_meta()\n * @see get_the_author_meta()\n *\n * @return string The URL to the author's page.\n *\/"}]},"the_author_url":{"name":"the_author_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the URL to the home page of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8.0 Use the_author_meta()\n * @see the_author_meta()\n *\/"}]},"get_the_author_ID":{"name":"get_the_author_ID","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the ID of the author of the current post.\n *\n * @since 1.5.0\n * @deprecated 2.8.0 Use get_the_author_meta()\n * @see get_the_author_meta()\n *\n * @return string|int The author's ID.\n *\/"}]},"the_author_ID":{"name":"the_author_ID","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the ID of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8.0 Use the_author_meta()\n * @see the_author_meta()\n *\/"}]},"the_content_rss":{"name":"the_content_rss","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$more_link_text","rank":0,"variadic":false,"reference":false,"default":"'(more...)'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$stripteaser","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$more_file","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cut","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$encode_html","rank":4,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the post content for the feed.\n *\n * For encoding the html or the $encode_html parameter, there are three possible\n * values. '0' will make urls footnotes and use make_url_footnote(). '1' will\n * encode special characters and automatically display all of the content. The\n * value of '2' will strip all HTML tags from the content.\n *\n * Also note that you cannot set the amount of words and not set the html\n * encoding. If that is the case, then the html encoding will default to 2,\n * which will strip all HTML tags.\n *\n * To restrict the amount of words of the content, you can use the cut\n * parameter. If the content is less than the amount, then there won't be any\n * dots added to the end. If there is content left over, then dots will be added\n * and the rest of the content will be removed.\n *\n * @since 0.71\n *\n * @deprecated 2.9.0 Use the_content_feed()\n * @see the_content_feed()\n *\n * @param string $more_link_text Optional. Text to display when more content is available but not displayed.\n * @param int $stripteaser Optional. Default is 0.\n * @param string $more_file Optional.\n * @param int $cut Optional. Amount of words to keep for the content.\n * @param int $encode_html Optional. How to encode the content.\n *\/"}]},"make_url_footnote":{"name":"make_url_footnote","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Strip HTML and put links at the bottom of stripped content.\n *\n * Searches for all of the links, strips them out of the content, and places\n * them at the bottom of the content with numbers.\n *\n * @since 0.71\n * @deprecated 2.9.0\n *\n * @param string $content Content to get links\n * @return string HTML stripped out of content with links at the bottom.\n *\/"}]},"_c":{"name":"_c","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":1,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve translated string with vertical bar context\n *\n * Quite a few times, there will be collisions with similar translatable text\n * found in more than two places but with different translated context.\n *\n * In order to use the separate contexts, the _c() function is used and the\n * translatable string uses a pipe ('|') which has the context the string is in.\n *\n * When the translated string is returned, it is everything before the pipe, not\n * including the pipe character. If there is no pipe in the translated text then\n * everything is returned.\n *\n * @since 2.2.0\n * @deprecated 2.9.0 Use _x()\n * @see _x()\n *\n * @param string $text Text to translate\n * @param string $domain Optional. Domain to retrieve the translated text\n * @return string Translated context string without pipe\n *\/"}]},"translate_with_context":{"name":"translate_with_context","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":1,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Translates $text like translate(), but assumes that the text\n * contains a context after its last vertical bar.\n *\n * @since 2.5.0\n * @deprecated 3.0.0 Use _x()\n * @see _x()\n *\n * @param string $text Text to translate\n * @param string $domain Domain to retrieve the translated text\n * @return string Translated text\n *\/"}]},"_nc":{"name":"_nc","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$single","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$plural","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$number","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$domain","rank":3,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Legacy version of _n(), which supports contexts.\n *\n * Strips everything from the translation after the last bar.\n *\n * @since 2.7.0\n * @deprecated 3.0.0 Use _nx()\n * @see _nx()\n *\n * @param string $single The text to be used if the number is singular.\n * @param string $plural The text to be used if the number is plural.\n * @param int    $number The number to compare against to use either the singular or plural form.\n * @param string $domain Optional. Text domain. Unique identifier for retrieving translated strings.\n *                       Default 'default'.\n * @return string The translated singular or plural form.\n *\/"}]},"__ngettext":{"name":"__ngettext","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the plural or single form based on the amount.\n *\n * @since 1.2.0\n * @deprecated 2.8.0 Use _n()\n * @see _n()\n *\/"}]},"__ngettext_noop":{"name":"__ngettext_noop","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register plural strings in POT file, but don't translate them.\n *\n * @since 2.5.0\n * @deprecated 2.8.0 Use _n_noop()\n * @see _n_noop()\n *\/"}]},"get_alloptions":{"name":"get_alloptions","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve all autoload options, or all options if no autoloaded ones exist.\n *\n * @since 1.0.0\n * @deprecated 3.0.0 Use wp_load_alloptions())\n * @see wp_load_alloptions()\n *\n * @return array List of all options.\n *\/"}]},"get_the_attachment_link":{"name":"get_the_attachment_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fullsize","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_dims","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$permalink","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve HTML content of attachment image with link.\n *\n * @since 2.0.0\n * @deprecated 2.5.0 Use wp_get_attachment_link()\n * @see wp_get_attachment_link()\n *\n * @param int $id Optional. Post ID.\n * @param bool $fullsize Optional, default is false. Whether to use full size image.\n * @param array $max_dims Optional. Max image dimensions.\n * @param bool $permalink Optional, default is false. Whether to include permalink to image.\n * @return string\n *\/"}]},"get_attachment_icon_src":{"name":"get_attachment_icon_src","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fullsize","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve icon URL and Path.\n *\n * @since 2.1.0\n * @deprecated 2.5.0 Use wp_get_attachment_image_src()\n * @see wp_get_attachment_image_src()\n *\n * @param int $id Optional. Post ID.\n * @param bool $fullsize Optional, default to false. Whether to have full image.\n * @return array Icon URL and full path to file, respectively.\n *\/"}]},"get_attachment_icon":{"name":"get_attachment_icon","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fullsize","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_dims","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve HTML content of icon attachment image element.\n *\n * @since 2.0.0\n * @deprecated 2.5.0 Use wp_get_attachment_image()\n * @see wp_get_attachment_image()\n *\n * @param int $id Optional. Post ID.\n * @param bool $fullsize Optional, default to false. Whether to have full size image.\n * @param array $max_dims Optional. Dimensions of image.\n * @return false|string HTML content.\n *\/"}]},"get_attachment_innerHTML":{"name":"get_attachment_innerHTML","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fullsize","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_dims","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve HTML content of image element.\n *\n * @since 2.0.0\n * @deprecated 2.5.0 Use wp_get_attachment_image()\n * @see wp_get_attachment_image()\n *\n * @param int $id Optional. Post ID.\n * @param bool $fullsize Optional, default to false. Whether to have full size image.\n * @param array $max_dims Optional. Dimensions of image.\n * @return false|string\n *\/"}]},"get_link":{"name":"get_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$bookmark_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"OBJECT","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filter","rank":2,"variadic":false,"reference":false,"default":"'raw'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves bookmark data based on ID.\n *\n * @since 2.0.0\n * @deprecated 2.1.0 Use get_bookmark()\n * @see get_bookmark()\n *\n * @param int    $bookmark_id ID of link\n * @param string $output      Optional. Type of output. Accepts OBJECT, ARRAY_N, or ARRAY_A.\n *                            Default OBJECT.\n * @param string $filter      Optional. How to filter the link for output. Accepts 'raw', 'edit',\n *                            'attribute', 'js', 'db', or 'display'. Default 'raw'.\n * @return object|array Bookmark object or array, depending on the type specified by `$output`.\n *\/"}]},"sanitize_url":{"name":"sanitize_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$protocols","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Performs esc_url() for database or redirect usage.\n *\n * @since 2.3.1\n * @deprecated 2.8.0 Use esc_url_raw()\n * @see esc_url_raw()\n *\n * @param string $url The URL to be cleaned.\n * @param array $protocols An array of acceptable protocols.\n * @return string The cleaned URL.\n *\/"}]},"clean_url":{"name":"clean_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$protocols","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":2,"variadic":false,"reference":false,"default":"'display'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks and cleans a URL.\n *\n * A number of characters are removed from the URL. If the URL is for displaying\n * (the default behaviour) ampersands are also replaced. The 'clean_url' filter\n * is applied to the returned cleaned URL.\n *\n * @since 1.2.0\n * @deprecated 3.0.0 Use esc_url()\n * @see esc_url()\n *\n * @param string $url The URL to be cleaned.\n * @param array $protocols Optional. An array of acceptable protocols.\n * @param string $context Optional. How the URL will be used. Default is 'display'.\n * @return string The cleaned $url after the {@see 'clean_url'} filter is applied.\n *\/"}]},"js_escape":{"name":"js_escape","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Escape single quotes, specialchar double quotes, and fix line endings.\n *\n * The filter {@see 'js_escape'} is also applied by esc_js().\n *\n * @since 2.0.4\n * @deprecated 2.8.0 Use esc_js()\n * @see esc_js()\n *\n * @param string $text The text to be escaped.\n * @return string Escaped text.\n *\/"}]},"wp_specialchars":{"name":"wp_specialchars","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$quote_style","rank":1,"variadic":false,"reference":false,"default":"ENT_NOQUOTES","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$charset","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$double_encode","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Legacy escaping for HTML blocks.\n *\n * @deprecated 2.8.0 Use esc_html()\n * @see esc_html()\n *\n * @param string       $string        String to escape.\n * @param string       $quote_style   Unused.\n * @param false|string $charset       Unused.\n * @param false        $double_encode Whether to double encode. Unused.\n * @return string Escaped `$string`.\n *\/"}]},"attribute_escape":{"name":"attribute_escape","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Escaping for HTML attributes.\n *\n * @since 2.0.6\n * @deprecated 2.8.0 Use esc_attr()\n * @see esc_attr()\n *\n * @param string $text\n * @return string\n *\/"}]},"register_sidebar_widget":{"name":"register_sidebar_widget","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output_callback","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$classname","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register widget for sidebar with backward compatibility.\n *\n * Allows $name to be an array that accepts either three elements to grab the\n * first element and the third for the name or just uses the first element of\n * the array for the name.\n *\n * Passes to wp_register_sidebar_widget() after argument list and backward\n * compatibility is complete.\n *\n * @since 2.2.0\n * @deprecated 2.8.0 Use wp_register_sidebar_widget()\n * @see wp_register_sidebar_widget()\n *\n * @param string|int $name            Widget ID.\n * @param callable   $output_callback Run when widget is called.\n * @param string     $classname       Optional. Classname widget option. Default empty.\n * @param mixed      $params ,...     Widget parameters.\n *\/"}]},"unregister_sidebar_widget":{"name":"unregister_sidebar_widget","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Serves as an alias of wp_unregister_sidebar_widget().\n *\n * @since 2.2.0\n * @deprecated 2.8.0 Use wp_unregister_sidebar_widget()\n * @see wp_unregister_sidebar_widget()\n *\n * @param int|string $id Widget ID.\n *\/"}]},"register_widget_control":{"name":"register_widget_control","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$control_callback","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$width","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$height","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers widget control callback for customizing options.\n *\n * Allows $name to be an array that accepts either three elements to grab the\n * first element and the third for the name or just uses the first element of\n * the array for the name.\n *\n * Passes to wp_register_widget_control() after the argument list has\n * been compiled.\n *\n * @since 2.2.0\n * @deprecated 2.8.0 Use wp_register_widget_control()\n * @see wp_register_widget_control()\n *\n * @param int|string $name Sidebar ID.\n * @param callable $control_callback Widget control callback to display and process form.\n * @param int $width Widget width.\n * @param int $height Widget height.\n *\/"}]},"unregister_widget_control":{"name":"unregister_widget_control","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Alias of wp_unregister_widget_control().\n *\n * @since 2.2.0\n * @deprecated 2.8.0 Use wp_unregister_widget_control()\n * @see wp_unregister_widget_control()\n *\n * @param int|string $id Widget ID.\n *\/"}]},"delete_usermeta":{"name":"delete_usermeta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove user meta data.\n *\n * @since 2.0.0\n * @deprecated 3.0.0 Use delete_user_meta()\n * @see delete_user_meta()\n *\n * @param int $user_id User ID.\n * @param string $meta_key Metadata key.\n * @param mixed $meta_value Metadata value.\n * @return bool True deletion completed and false if user_id is not a number.\n *\/"}]},"get_usermeta":{"name":"get_usermeta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve user metadata.\n *\n * If $user_id is not a number, then the function will fail over with a 'false'\n * boolean return value. Other returned values depend on whether there is only\n * one item to be returned, which be that single item type. If there is more\n * than one metadata value, then it will be list of metadata values.\n *\n * @since 2.0.0\n * @deprecated 3.0.0 Use get_user_meta()\n * @see get_user_meta()\n *\n * @param int $user_id User ID\n * @param string $meta_key Optional. Metadata key.\n * @return mixed\n *\/"}]},"update_usermeta":{"name":"update_usermeta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update metadata of user.\n *\n * There is no need to serialize values, they will be serialized if it is\n * needed. The metadata key can only be a string with underscores. All else will\n * be removed.\n *\n * Will remove the metadata, if the meta value is empty.\n *\n * @since 2.0.0\n * @deprecated 3.0.0 Use update_user_meta()\n * @see update_user_meta()\n *\n * @param int $user_id User ID\n * @param string $meta_key Metadata key.\n * @param mixed $meta_value Metadata value.\n * @return bool True on successful update, false on failure.\n *\/"}]},"get_users_of_blog":{"name":"get_users_of_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get users for the site.\n *\n * For setups that use the multisite feature. Can be used outside of the\n * multisite feature.\n *\n * @since 2.2.0\n * @deprecated 3.1.0 Use get_users()\n * @see get_users()\n *\n * @global wpdb $wpdb    WordPress database abstraction object.\n *\n * @param int $id Site ID.\n * @return array List of users that are part of that site ID\n *\/"}]},"automatic_feed_links":{"name":"automatic_feed_links","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$add","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enable\/disable automatic general feed link outputting.\n *\n * @since 2.8.0\n * @deprecated 3.0.0 Use add_theme_support()\n * @see add_theme_support()\n *\n * @param bool $add Optional, default is true. Add or remove links. Defaults to true.\n *\/"}]},"get_profile":{"name":"get_profile","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$field","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve user data based on field.\n *\n * @since 1.5.0\n * @deprecated 3.0.0 Use get_the_author_meta()\n * @see get_the_author_meta()\n *\n * @param string    $field User meta field.\n * @param false|int $user Optional. User ID to retrieve the field for. Default false (current user).\n * @return string The author's field from the current author's DB object.\n *\/"}]},"get_usernumposts":{"name":"get_usernumposts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$userid","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the number of posts a user has written.\n *\n * @since 0.71\n * @deprecated 3.0.0 Use count_user_posts()\n * @see count_user_posts()\n *\n * @param int $userid User to count posts for.\n * @return int Number of posts the given user has written.\n *\/"}]},"funky_javascript_callback":{"name":"funky_javascript_callback","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback used to change %uXXXX to &#YYY; syntax\n *\n * @since 2.8.0\n * @access private\n * @deprecated 3.0.0\n *\n * @param array $matches Single Match\n * @return string An HTML entity\n *\/"}]},"funky_javascript_fix":{"name":"funky_javascript_fix","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Fixes JavaScript bugs in browsers.\n *\n * Converts unicode characters to HTML numbered entities.\n *\n * @since 1.5.0\n * @deprecated 3.0.0\n *\n * @global $is_macIE\n * @global $is_winIE\n *\n * @param string $text Text to be made safe.\n * @return string Fixed text.\n *\/"}]},"is_taxonomy":{"name":"is_taxonomy","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks that the taxonomy name exists.\n *\n * @since 2.3.0\n * @deprecated 3.0.0 Use taxonomy_exists()\n * @see taxonomy_exists()\n *\n * @param string $taxonomy Name of taxonomy object\n * @return bool Whether the taxonomy exists.\n *\/"}]},"is_term":{"name":"is_term","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$term","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if Term exists.\n *\n * @since 2.3.0\n * @deprecated 3.0.0 Use term_exists()\n * @see term_exists()\n *\n * @param int|string $term The term to check\n * @param string $taxonomy The taxonomy name to use\n * @param int $parent ID of parent term under which to confine the exists search.\n * @return mixed Get the term id or Term Object, if exists.\n *\/"}]},"is_plugin_page":{"name":"is_plugin_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Is the current admin page generated by a plugin?\n *\n * Use global $plugin_page and\/or get_plugin_page_hookname() hooks.\n *\n * @since 1.5.0\n * @deprecated 3.1.0\n *\n * @global $plugin_page\n *\n * @return bool\n *\/"}]},"update_category_cache":{"name":"update_category_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Update the categories cache.\n *\n * This function does not appear to be used anymore or does not appear to be\n * needed. It might be a legacy function left over from when there was a need\n * for updating the category cache.\n *\n * @since 1.5.0\n * @deprecated 3.1.0\n *\n * @return bool Always return True\n *\/"}]},"wp_timezone_supported":{"name":"wp_timezone_supported","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check for PHP timezone support\n *\n * @since 2.9.0\n * @deprecated 3.2.0\n *\n * @return bool\n *\/"}]},"the_editor":{"name":"the_editor","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":1,"variadic":false,"reference":false,"default":"'content'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$prev_id","rank":2,"variadic":false,"reference":false,"default":"'title'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$media_buttons","rank":3,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tab_index","rank":4,"variadic":false,"reference":false,"default":"2","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$extended","rank":5,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays an editor: TinyMCE, HTML, or both.\n *\n * @since 2.1.0\n * @deprecated 3.3.0 Use wp_editor()\n * @see wp_editor()\n *\n * @param string $content       Textarea content.\n * @param string $id            Optional. HTML ID attribute value. Default 'content'.\n * @param string $prev_id       Optional. Unused.\n * @param bool   $media_buttons Optional. Whether to display media buttons. Default true.\n * @param int    $tab_index     Optional. Unused.\n * @param bool   $extended      Optional. Unused.\n *\/"}]},"get_user_metavalues":{"name":"get_user_metavalues","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Perform the query to get the $metavalues array(s) needed by _fill_user and _fill_many_users\n *\n * @since 3.0.0\n * @deprecated 3.3.0\n *\n * @param array $ids User ID numbers list.\n * @return array of arrays. The array is indexed by user_id, containing $metavalues object arrays.\n *\/"}]},"sanitize_user_object":{"name":"sanitize_user_object","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"'display'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize every user field.\n *\n * If the context is 'raw', then the user object or array will get minimal santization of the int fields.\n *\n * @since 2.3.0\n * @deprecated 3.3.0\n *\n * @param object|array $user The User Object or Array\n * @param string $context Optional, default is 'display'. How to sanitize user fields.\n * @return object|array The now sanitized User Object or Array (will be the same type as $user)\n *\/"}]},"get_boundary_post_rel_link":{"name":"get_boundary_post_rel_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"'%title'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$in_same_cat","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excluded_categories","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$start","rank":3,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get boundary post relational link.\n *\n * Can either be start or end post relational link.\n *\n * @since 2.8.0\n * @deprecated 3.3.0\n *\n * @param string $title Optional. Link title format.\n * @param bool $in_same_cat Optional. Whether link should be in a same category.\n * @param string $excluded_categories Optional. Excluded categories IDs.\n * @param bool $start Optional, default is true. Whether to display link to first or last post.\n * @return string\n *\/"}]},"start_post_rel_link":{"name":"start_post_rel_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"'%title'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$in_same_cat","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excluded_categories","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display relational link for the first post.\n *\n * @since 2.8.0\n * @deprecated 3.3.0\n *\n * @param string $title Optional. Link title format.\n * @param bool $in_same_cat Optional. Whether link should be in a same category.\n * @param string $excluded_categories Optional. Excluded categories IDs.\n *\/"}]},"get_index_rel_link":{"name":"get_index_rel_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get site index relational link.\n *\n * @since 2.8.0\n * @deprecated 3.3.0\n *\n * @return string\n *\/"}]},"index_rel_link":{"name":"index_rel_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display relational link for the site index.\n *\n * @since 2.8.0\n * @deprecated 3.3.0\n *\/"}]},"get_parent_post_rel_link":{"name":"get_parent_post_rel_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"'%title'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get parent post relational link.\n *\n * @since 2.8.0\n * @deprecated 3.3.0\n *\n * @param string $title Optional. Link title format. Default '%title'.\n * @return string\n *\/"}]},"parent_post_rel_link":{"name":"parent_post_rel_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"'%title'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display relational link for parent item\n *\n * @since 2.8.0\n * @deprecated 3.3.0\n *\n * @param string $title Optional. Link title format. Default '%title'.\n *\/"}]},"wp_admin_bar_dashboard_view_site_menu":{"name":"wp_admin_bar_dashboard_view_site_menu","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_admin_bar","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add the \"Dashboard\"\/\"Visit Site\" menu.\n *\n * @since 3.2.0\n * @deprecated 3.3.0\n *\n * @param WP_Admin_Bar $wp_admin_bar WP_Admin_Bar instance.\n *\/"}]},"is_blog_user":{"name":"is_blog_user","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks if the current user belong to a given site.\n *\n * @since MU\n * @deprecated 3.3.0 Use is_user_member_of_blog()\n * @see is_user_member_of_blog()\n *\n * @param int $blog_id Site ID\n * @return bool True if the current users belong to $blog_id, false if not.\n *\/"}]},"debug_fopen":{"name":"debug_fopen","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mode","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Open the file handle for debugging.\n *\n * @since 0.71\n * @deprecated 3.4.0 Use error_log()\n * @see error_log()\n *\n * @link https:\/\/secure.php.net\/manual\/en\/function.error-log.php\n *\n * @param string $filename File name.\n * @param string $mode     Type of access you required to the stream.\n * @return false Always false.\n *\/"}]},"debug_fwrite":{"name":"debug_fwrite","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$fp","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$string","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Write contents to the file used for debugging.\n *\n * @since 0.71\n * @deprecated 3.4.0 Use error_log()\n * @see error_log()\n *\n * @link https:\/\/secure.php.net\/manual\/en\/function.error-log.php\n *\n * @param mixed  $fp     Unused.\n * @param string $string Message to log.\n *\/"}]},"debug_fclose":{"name":"debug_fclose","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$fp","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Close the debugging file handle.\n *\n * @since 0.71\n * @deprecated 3.4.0 Use error_log()\n * @see error_log()\n *\n * @link https:\/\/secure.php.net\/manual\/en\/function.error-log.php\n *\n * @param mixed $fp Unused.\n *\/"}]},"get_themes":{"name":"get_themes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve list of themes with theme data in theme directory.\n *\n * The theme is broken, if it doesn't have a parent theme and is missing either\n * style.css and, or index.php. If the theme has a parent theme then it is\n * broken, if it is missing style.css; index.php is optional.\n *\n * @since 1.5.0\n * @deprecated 3.4.0 Use wp_get_themes()\n * @see wp_get_themes()\n *\n * @return array Theme list with theme data.\n *\/"}]},"get_theme":{"name":"get_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve theme data.\n *\n * @since 1.5.0\n * @deprecated 3.4.0 Use wp_get_theme()\n * @see wp_get_theme()\n *\n * @param string $theme Theme name.\n * @return array|null Null, if theme name does not exist. Theme data, if exists.\n *\/"}]},"get_current_theme":{"name":"get_current_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve current theme name.\n *\n * @since 1.5.0\n * @deprecated 3.4.0 Use wp_get_theme()\n * @see wp_get_theme()\n *\n * @return string\n *\/"}]},"clean_pre":{"name":"clean_pre","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Accepts matches array from preg_replace_callback in wpautop() or a string.\n *\n * Ensures that the contents of a `<pre>...<\/pre>` HTML block are not\n * converted into paragraphs or line-breaks.\n *\n * @since 1.2.0\n * @deprecated 3.4.0\n *\n * @param array|string $matches The array or string\n * @return string The pre block without paragraph\/line-break conversion.\n *\/"}]},"add_custom_image_header":{"name":"add_custom_image_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_head_callback","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$admin_head_callback","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$admin_preview_callback","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add callbacks for image header display.\n *\n * @since 2.1.0\n * @deprecated 3.4.0 Use add_theme_support()\n * @see add_theme_support()\n *\n * @param callable $wp_head_callback Call on the {@see 'wp_head'} action.\n * @param callable $admin_head_callback Call on custom header administration screen.\n * @param callable $admin_preview_callback Output a custom header image div on the custom header administration screen. Optional.\n *\/"}]},"remove_custom_image_header":{"name":"remove_custom_image_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove image header support.\n *\n * @since 3.1.0\n * @deprecated 3.4.0 Use remove_theme_support()\n * @see remove_theme_support()\n *\n * @return null|bool Whether support was removed.\n *\/"}]},"add_custom_background":{"name":"add_custom_background","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_head_callback","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$admin_head_callback","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$admin_preview_callback","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add callbacks for background image display.\n *\n * @since 3.0.0\n * @deprecated 3.4.0 Use add_theme_support()\n * @see add_theme_support()\n *\n * @param callable $wp_head_callback Call on the {@see 'wp_head'} action.\n * @param callable $admin_head_callback Call on custom background administration screen.\n * @param callable $admin_preview_callback Output a custom background image div on the custom background administration screen. Optional.\n *\/"}]},"remove_custom_background":{"name":"remove_custom_background","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove custom background support.\n *\n * @since 3.1.0\n * @deprecated 3.4.0 Use add_custom_background()\n * @see add_custom_background()\n *\n * @return null|bool Whether support was removed.\n *\/"}]},"get_theme_data":{"name":"get_theme_data","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$theme_file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve theme data from parsed theme file.\n *\n * @since 1.5.0\n * @deprecated 3.4.0 Use wp_get_theme()\n * @see wp_get_theme()\n *\n * @param string $theme_file Theme file path.\n * @return array Theme data.\n *\/"}]},"update_page_cache":{"name":"update_page_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$pages","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Alias of update_post_cache().\n *\n * @see update_post_cache() Posts and pages are the same, alias is intentional\n *\n * @since 1.5.1\n * @deprecated 3.4.0 Use update_post_cache()\n * @see update_post_cache()\n *\n * @param array $pages list of page objects\n *\/"}]},"clean_page_cache":{"name":"clean_page_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Will clean the page in the cache.\n *\n * Clean (read: delete) page from cache that matches $id. Will also clean cache\n * associated with 'all_page_ids' and 'get_pages'.\n *\n * @since 2.0.0\n * @deprecated 3.4.0 Use clean_post_cache\n * @see clean_post_cache()\n *\n * @param int $id Page ID to clean\n *\/"}]},"wp_explain_nonce":{"name":"wp_explain_nonce","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve nonce action \"Are you sure\" message.\n *\n * Deprecated in 3.4.1 and 3.5.0. Backported to 3.3.3.\n *\n * @since 2.0.4\n * @deprecated 3.4.1 Use wp_nonce_ays()\n * @see wp_nonce_ays()\n *\n * @param string $action Nonce action.\n * @return string Are you sure message.\n *\/"}]},"sticky_class":{"name":"sticky_class","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display \"sticky\" CSS class, if a post is sticky.\n *\n * @since 2.7.0\n * @deprecated 3.5.0 Use post_class()\n * @see post_class()\n *\n * @param int $post_id An optional post ID.\n *\/"}]},"_get_post_ancestors":{"name":"_get_post_ancestors","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve post ancestors.\n *\n * This is no longer needed as WP_Post lazy-loads the ancestors\n * property with get_post_ancestors().\n *\n * @since 2.3.4\n * @deprecated 3.5.0 Use get_post_ancestors()\n * @see get_post_ancestors()\n *\n * @param WP_Post &$post Post object, passed by reference (unused).\n *\/"}]},"wp_load_image":{"name":"wp_load_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load an image from a string, if PHP supports it.\n *\n * @since 2.1.0\n * @deprecated 3.5.0 Use wp_get_image_editor()\n * @see wp_get_image_editor()\n *\n * @param string $file Filename of the image to load.\n * @return resource The resulting image resource on success, Error string on failure.\n *\/"}]},"image_resize":{"name":"image_resize","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_w","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_h","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$crop","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$suffix","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dest_path","rank":5,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$jpeg_quality","rank":6,"variadic":false,"reference":false,"default":"90","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Scale down an image to fit a particular size and save a new copy of the image.\n *\n * The PNG transparency will be preserved using the function, as well as the\n * image type. If the file going in is PNG, then the resized image is going to\n * be PNG. The only supported image types are PNG, GIF, and JPEG.\n *\n * Some functionality requires API to exist, so some PHP version may lose out\n * support. This is not the fault of WordPress (where functionality is\n * downgraded, not actual defects), but of your PHP version.\n *\n * @since 2.5.0\n * @deprecated 3.5.0 Use wp_get_image_editor()\n * @see wp_get_image_editor()\n *\n * @param string $file Image file path.\n * @param int $max_w Maximum width to resize to.\n * @param int $max_h Maximum height to resize to.\n * @param bool $crop Optional. Whether to crop image or resize.\n * @param string $suffix Optional. File suffix.\n * @param string $dest_path Optional. New image file path.\n * @param int $jpeg_quality Optional, default is 90. Image quality percentage.\n * @return mixed WP_Error on failure. String with new destination path.\n *\/"}]},"wp_get_single_post":{"name":"wp_get_single_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$postid","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mode","rank":1,"variadic":false,"reference":false,"default":"OBJECT","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve a single post, based on post ID.\n *\n * Has categories in 'post_category' property or key. Has tags in 'tags_input'\n * property or key.\n *\n * @since 1.0.0\n * @deprecated 3.5.0 Use get_post()\n * @see get_post()\n *\n * @param int $postid Post ID.\n * @param string $mode How to return result, either OBJECT, ARRAY_N, or ARRAY_A.\n * @return WP_Post|null Post object or array holding post contents and information\n *\/"}]},"user_pass_ok":{"name":"user_pass_ok","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$user_login","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_pass","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check that the user login name and password is correct.\n *\n * @since 0.71\n * @deprecated 3.5.0 Use wp_authenticate()\n * @see wp_authenticate()\n *\n * @param string $user_login User name.\n * @param string $user_pass User password.\n * @return bool False if does not authenticate, true if username and password authenticates.\n *\/"}]},"_save_post_hook":{"name":"_save_post_hook","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback formerly fired on the save_post hook. No longer needed.\n *\n * @since 2.3.0\n * @deprecated 3.5.0\n *\/"}]},"gd_edit_image_support":{"name":"gd_edit_image_support","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$mime_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Check if the installed version of GD supports particular image type\n *\n * @since 2.9.0\n * @deprecated 3.5.0 Use wp_image_editor_supports()\n * @see wp_image_editor_supports()\n *\n * @param string $mime_type\n * @return bool\n *\/"}]},"wp_convert_bytes_to_hr":{"name":"wp_convert_bytes_to_hr","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$bytes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Converts an integer byte value to a shorthand byte value.\n *\n * @since 2.3.0\n * @deprecated 3.6.0 Use size_format()\n * @see size_format()\n *\n * @param int $bytes An integer byte value.\n * @return string A shorthand byte value.\n *\/"}]},"_search_terms_tidy":{"name":"_search_terms_tidy","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$t","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Formerly used internally to tidy up the search terms.\n *\n * @since 2.9.0\n * @access private\n * @deprecated 3.7.0\n *\n * @param string $t Search terms to \"tidy\", e.g. trim.\n * @return string Trimmed search terms.\n *\/"}]},"rich_edit_exists":{"name":"rich_edit_exists","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine if TinyMCE is available.\n *\n * Checks to see if the user has deleted the tinymce files to slim down\n * their WordPress install.\n *\n * @since 2.1.0\n * @deprecated 3.9.0\n *\n * @return bool Whether TinyMCE exists.\n *\/"}]},"default_topic_count_text":{"name":"default_topic_count_text","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$count","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Old callback for tag link tooltips.\n *\n * @since 2.7.0\n * @access private\n * @deprecated 3.9.0\n *\n * @param int $count Number of topics.\n * @return int Number of topics.\n *\/"}]},"format_to_post":{"name":"format_to_post","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Formerly used to escape strings before inserting into the DB.\n *\n * Has not performed this function for many, many years. Use wpdb::prepare() instead.\n *\n * @since 0.71\n * @deprecated 3.9.0\n *\n * @param string $content The text to format.\n * @return string The very same text.\n *\/"}]},"like_escape":{"name":"like_escape","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Formerly used to escape strings before searching the DB. It was poorly documented and never worked as described.\n *\n * @since 2.5.0\n * @deprecated 4.0.0 Use wpdb::esc_like()\n * @see wpdb::esc_like()\n *\n * @param string $text The text to be escaped.\n * @return string text, safe for inclusion in LIKE query.\n *\/"}]},"url_is_accessable_via_ssl":{"name":"url_is_accessable_via_ssl","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines if the URL can be accessed over SSL.\n *\n * Determines if the URL can be accessed over SSL by using the WordPress HTTP API to access\n * the URL using https as the scheme.\n *\n * @since 2.5.0\n * @deprecated 4.0.0\n *\n * @param string $url The URL to test.\n * @return bool Whether SSL access is available.\n *\/"}]},"preview_theme":{"name":"preview_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Start preview theme output buffer.\n *\n * Will only perform task if the user has permissions and template and preview\n * query variables exist.\n *\n * @since 2.6.0\n * @deprecated 4.3.0\n *\/"}]},"_preview_theme_template_filter":{"name":"_preview_theme_template_filter","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Private function to modify the current template when previewing a theme\n *\n * @since 2.9.0\n * @deprecated 4.3.0\n * @access private\n *\n * @return string\n *\/"}]},"_preview_theme_stylesheet_filter":{"name":"_preview_theme_stylesheet_filter","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Private function to modify the current stylesheet when previewing a theme\n *\n * @since 2.9.0\n * @deprecated 4.3.0\n * @access private\n *\n * @return string\n *\/"}]},"preview_theme_ob_filter":{"name":"preview_theme_ob_filter","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Callback function for ob_start() to capture all links in the theme.\n *\n * @since 2.6.0\n * @deprecated 4.3.0\n * @access private\n *\n * @param string $content\n * @return string\n *\/"}]},"preview_theme_ob_filter_callback":{"name":"preview_theme_ob_filter_callback","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Manipulates preview theme links in order to control and maintain location.\n *\n * Callback function for preg_replace_callback() to accept and filter matches.\n *\n * @since 2.6.0\n * @deprecated 4.3.0\n * @access private\n *\n * @param array $matches\n * @return string\n *\/"}]},"wp_richedit_pre":{"name":"wp_richedit_pre","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Formats text for the rich text editor.\n *\n * The {@see 'richedit_pre'} filter is applied here. If $text is empty the filter will\n * be applied to an empty string.\n *\n * @since 2.0.0\n * @deprecated 4.3.0\n *\n * @param string $text The text to be formatted.\n * @return string The formatted text after filter is applied.\n *\/"}]},"wp_htmledit_pre":{"name":"wp_htmledit_pre","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Formats text for the HTML editor.\n *\n * Unless $output is empty it will pass through htmlspecialchars before the\n * {@see 'htmledit_pre'} filter is applied.\n *\n * @since 2.5.0\n * @deprecated 4.3.0 Use format_for_editor()\n * @see format_for_editor()\n *\n * @param string $output The text to be formatted.\n * @return string Formatted text after filter applied.\n *\/"}]},"post_permalink":{"name":"post_permalink","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve permalink from post ID.\n *\n * @since 1.0.0\n * @deprecated 4.4.0 Use get_permalink()\n * @see get_permalink()\n *\n * @param int|WP_Post $post_id Optional. Post ID or WP_Post object. Default is global $post.\n * @return string|false\n *\/"}]},"wp_get_http":{"name":"wp_get_http","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$file_path","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$red","rank":2,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Perform a HTTP HEAD or GET request.\n *\n * If $file_path is a writable filename, this will do a GET request and write\n * the file to that path.\n *\n * @since 2.5.0\n * @deprecated 4.4.0 Use WP_Http\n * @see WP_Http\n *\n * @param string      $url       URL to fetch.\n * @param string|bool $file_path Optional. File path to write request to. Default false.\n * @param int         $red       Optional. The number of Redirects followed, Upon 5 being hit,\n *                               returns false. Default 1.\n * @return bool|string False on failure and string of headers if HEAD request.\n *\/"}]},"force_ssl_login":{"name":"force_ssl_login","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$force","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether SSL login should be forced.\n *\n * @since 2.6.0\n * @deprecated 4.4.0 Use force_ssl_admin()\n * @see force_ssl_admin()\n *\n * @param string|bool $force Optional Whether to force SSL login. Default null.\n * @return bool True if forced, false if not forced.\n *\/"}]},"get_comments_popup_template":{"name":"get_comments_popup_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path of comment popup template in current or parent template.\n *\n * @since 1.5.0\n * @deprecated 4.5.0\n *\n * @return string Full path to comments popup template file.\n *\/"}]},"is_comments_popup":{"name":"is_comments_popup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Whether the current URL is within the comments popup window.\n *\n * @since 1.5.0\n * @deprecated 4.5.0\n *\n * @return bool\n *\/"}]},"comments_popup_script":{"name":"comments_popup_script","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the JS popup script to show a comment.\n *\n * @since 0.71\n * @deprecated 4.5.0\n *\/"}]},"popuplinks":{"name":"popuplinks","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds element attributes to open links in new windows.\n *\n * @since 0.71\n * @deprecated 4.5.0\n *\n * @param string $text Content to replace links to open in a new window.\n * @return string Content that has filtered links.\n *\/"}]},"wp_embed_handler_googlevideo":{"name":"wp_embed_handler_googlevideo","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attr","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$rawattr","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * The Google Video embed handler callback.\n *\n * Deprecated function that previously assisted in turning Google Video URLs\n * into embeds but that service has since been shut down.\n *\n * @since 2.9.0\n * @deprecated 4.6.0\n *\n * @return string An empty string.\n *\/"}]},"get_paged_template":{"name":"get_paged_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve path of paged template in current or parent template.\n *\n * @since 1.5.0\n * @deprecated 4.7.0 The paged.php template is no longer part of the theme template hierarchy.\n *\n * @return string Full path to paged template file.\n *\/"}]},"wp_kses_js_entities":{"name":"wp_kses_js_entities","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Removes the HTML JavaScript entities found in early versions of Netscape 4.\n *\n * Previously, this function was pulled in from the original\n * import of kses and removed a specific vulnerability only\n * existent in early version of Netscape 4. However, this\n * vulnerability never affected any other browsers and can\n * be considered safe for the modern web.\n *\n * The regular expression which sanitized this vulnerability\n * has been removed in consideration of the performance and\n * energy demands it placed, now merely passing through its\n * input to the return.\n *\n * @since 1.0.0\n * @deprecated deprecated since 4.7\n *\n * @param string $string\n * @return string\n *\/"}]},"_usort_terms_by_ID":{"name":"_usort_terms_by_ID","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sort categories by ID.\n *\n * Used by usort() as a callback, should not be used directly. Can actually be\n * used to sort any term object.\n *\n * @since 2.3.0\n * @deprecated 4.7.0 Use wp_list_sort()\n * @access private\n *\n * @param object $a\n * @param object $b\n * @return int\n *\/"}]},"_usort_terms_by_name":{"name":"_usort_terms_by_name","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sort categories by name.\n *\n * Used by usort() as a callback, should not be used directly. Can actually be\n * used to sort any term object.\n *\n * @since 2.3.0\n * @deprecated 4.7.0 Use wp_list_sort()\n * @access private\n *\n * @param object $a\n * @param object $b\n * @return int\n *\/"}]},"_sort_nav_menu_items":{"name":"_sort_nav_menu_items","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sort menu items by the desired key.\n *\n * @since 3.0.0\n * @deprecated 4.7.0 Use wp_list_sort()\n * @access private\n *\n * @global string $_menu_item_sort_prop\n *\n * @param object $a The first object to compare\n * @param object $b The second object to compare\n * @return int -1, 0, or 1 if $a is considered to be respectively less than, equal to, or greater than $b.\n *\/"}]},"get_the_author":{"name":"get_the_author","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$deprecated","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Author Template functions for use in themes.\n *\n * These functions must be used within the WordPress Loop.\n *\n * @link https:\/\/codex.wordpress.org\/Author_Templates\n *\n * @package WordPress\n * @subpackage Template\n *\/"},{"phpdoc":"\/**\n * Retrieve the author of the current post.\n *\n * @since 1.5.0\n *\n * @global object $authordata The current author's DB object.\n *\n * @param string $deprecated Deprecated.\n * @return string|null The author's display name.\n *\/"}]},"the_author":{"name":"the_author","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$deprecated","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated_echo","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the name of the author of the current post.\n *\n * The behavior of this function is based off of old functionality predating\n * get_the_author(). This function is not deprecated, but is designed to echo\n * the value from get_the_author() and as an result of any old theme that might\n * still use the old behavior will also pass the value from get_the_author().\n *\n * The normal, expected behavior of this function is to echo the author and not\n * return it. However, backward compatibility has to be maintained.\n *\n * @since 0.71\n * @see get_the_author()\n * @link https:\/\/codex.wordpress.org\/Template_Tags\/the_author\n *\n * @param string $deprecated Deprecated.\n * @param string $deprecated_echo Deprecated. Use get_the_author(). Echo the string or return it.\n * @return string|null The author's display name, from get_the_author().\n *\/"}]},"get_the_modified_author":{"name":"get_the_modified_author","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the author who last edited the current post.\n *\n * @since 2.8.0\n *\n * @return string|void The author's display name.\n *\/"}]},"the_modified_author":{"name":"the_modified_author","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the name of the author who last edited the current post,\n * if the author's ID is available.\n *\n * @since 2.8.0\n *\n * @see get_the_author()\n *\/"}]},"get_the_author_meta":{"name":"get_the_author_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$field","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_id","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the requested data of the author of the current post.\n * @link https:\/\/codex.wordpress.org\/Template_Tags\/the_author_meta\n * @since 2.8.0\n *\n * @global object $authordata The current author's DB object.\n *\n * @param string $field selects the field of the users record.\n * @param int $user_id Optional. User ID.\n * @return string The author's field from the current author's DB object.\n *\/"}]},"the_author_meta":{"name":"the_author_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$field","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$user_id","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs the field from the user's DB object. Defaults to current post's author.\n *\n * @link https:\/\/codex.wordpress.org\/Template_Tags\/the_author_meta\n *\n * @since 2.8.0\n *\n * @param string $field selects the field of the users record.\n * @param int $user_id Optional. User ID.\n *\/"}]},"get_the_author_link":{"name":"get_the_author_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve either author's link or author's name.\n *\n * If the author has a home page set, return an HTML link, otherwise just return the\n * author's name.\n *\n * @return string|null An HTML link if the author's url exist in user meta,\n *                     else the result of get_the_author().\n *\/"}]},"the_author_link":{"name":"the_author_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display either author's link or author's name.\n *\n * If the author has a home page set, echo an HTML link, otherwise just echo the\n * author's name.\n *\n * @link https:\/\/codex.wordpress.org\/Template_Tags\/the_author_link\n *\n * @since 2.1.0\n *\/"}]},"get_the_author_posts":{"name":"get_the_author_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the number of posts by the author of the current post.\n *\n * @since 1.5.0\n *\n * @return int The number of posts by the author.\n *\/"}]},"the_author_posts":{"name":"the_author_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display the number of posts by the author of the current post.\n *\n * @link https:\/\/codex.wordpress.org\/Template_Tags\/the_author_posts\n * @since 0.71\n *\/"}]},"get_the_author_posts_link":{"name":"get_the_author_posts_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves an HTML link to the author page of the current post's author.\n *\n * Returns an HTML-formatted link using get_author_posts_url().\n *\n * @since 4.4.0\n *\n * @global object $authordata The current author's DB object.\n *\n * @return string An HTML link to the author page.\n *\/"}]},"the_author_posts_link":{"name":"the_author_posts_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$deprecated","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays an HTML link to the author page of the current post's author.\n *\n * @since 1.2.0\n * @since 4.4.0 Converted into a wrapper for get_the_author_posts_link()\n *\n * @param string $deprecated Unused.\n *\/"}]},"get_author_posts_url":{"name":"get_author_posts_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$author_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$author_nicename","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the URL to the author page for the user with the ID provided.\n *\n * @since 2.1.0\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param int    $author_id       Author ID.\n * @param string $author_nicename Optional. The author's nicename (slug). Default empty.\n * @return string The URL to the author's page.\n *\/"}]},"wp_list_authors":{"name":"wp_list_authors","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * List all the authors of the site, with several options available.\n *\n * @link https:\/\/codex.wordpress.org\/Template_Tags\/wp_list_authors\n *\n * @since 1.2.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string|array $args {\n *     Optional. Array or string of default arguments.\n *\n *     @type string       $orderby       How to sort the authors. Accepts 'nicename', 'email', 'url', 'registered',\n *                                       'user_nicename', 'user_email', 'user_url', 'user_registered', 'name',\n *                                       'display_name', 'post_count', 'ID', 'meta_value', 'user_login'. Default 'name'.\n *     @type string       $order         Sorting direction for $orderby. Accepts 'ASC', 'DESC'. Default 'ASC'.\n *     @type int          $number        Maximum authors to return or display. Default empty (all authors).\n *     @type bool         $optioncount   Show the count in parenthesis next to the author's name. Default false.\n *     @type bool         $exclude_admin Whether to exclude the 'admin' account, if it exists. Default false.\n *     @type bool         $show_fullname Whether to show the author's full name. Default false.\n *     @type bool         $hide_empty    Whether to hide any authors with no posts. Default true.\n *     @type string       $feed          If not empty, show a link to the author's feed and use this text as the alt\n *                                       parameter of the link. Default empty.\n *     @type string       $feed_image    If not empty, show a link to the author's feed and use this image URL as\n *                                       clickable anchor. Default empty.\n *     @type string       $feed_type     The feed type to link to, such as 'rss2'. Defaults to default feed type.\n *     @type bool         $echo          Whether to output the result or instead return it. Default true.\n *     @type string       $style         If 'list', each author is wrapped in an `<li>` element, otherwise the authors\n *                                       will be separated by commas.\n *     @type bool         $html          Whether to list the items in HTML form or plaintext. Default true.\n *     @type array|string $exclude       Array or comma\/space-separated list of author IDs to exclude. Default empty.\n *     @type array|string $include       Array or comma\/space-separated list of author IDs to include. Default empty.\n * }\n * @return string|void The output, if echo is set to false.\n *\/"}]},"is_multi_author":{"name":"is_multi_author","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Does this site have more than one author\n *\n * Checks to see if more than one author has published posts.\n *\n * @since 3.2.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @return bool Whether or not we have more than one author\n *\/"}]},"__clear_multi_author_cache":{"name":"__clear_multi_author_cache","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Helper function to clear the cache for number of authors.\n *\n * @private\n *\/"}]},"RandomCompat_strlen":{"name":"RandomCompat_strlen","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$binary_string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n         * strlen() implementation that isn't brittle to mbstring.func_overload\n         *\n         * This version just used the default strlen()\n         *\n         * @param string $binary_string\n         *\n         * @throws TypeError\n         *\n         * @return int\n         *\/"}]},"RandomCompat_substr":{"name":"RandomCompat_substr","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$binary_string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$start","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$length","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n         * substr() implementation that isn't brittle to mbstring.func_overload\n         *\n         * This version just uses the default substr()\n         *\n         * @param string $binary_string\n         * @param int $start\n         * @param int $length (optional)\n         *\n         * @throws TypeError\n         *\n         * @return string\n         *\/"}]},"random_bytes":{"name":"random_bytes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$length","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n             * We don't have any more options, so let's throw an exception right now\n             * and hope the developer won't let it fail silently.\n             *\/"}]},"RandomCompat_intval":{"name":"RandomCompat_intval","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$number","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fail_open","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n     * Cast to an integer if we can, safely.\n     * \n     * If you pass it a float in the range (~PHP_INT_MAX, PHP_INT_MAX)\n     * (non-inclusive), it will sanely cast it to an int. If you it's equal to\n     * ~PHP_INT_MAX or PHP_INT_MAX, we let it fail as not an integer. Floats \n     * lose precision, so the <= and => operators might accidentally let a float\n     * through.\n     * \n     * @param int|float $number    The number we want to convert to an int\n     * @param boolean   $fail_open Set to true to not throw an exception\n     * \n     * @return int (or float if $fail_open)\n     *\n     * @throws TypeError\n     *\/"}]},"hello_dolly_get_lyric":{"name":"hello_dolly_get_lyric","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * @package Hello_Dolly\n * @version 1.6\n *\/"}]},"hello_dolly":{"name":"hello_dolly","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[]},"dolly_css":{"name":"dolly_css","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[]},"twentyseventeen_setup":{"name":"twentyseventeen_setup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sets up theme defaults and registers support for various WordPress features.\n *\n * Note that this function is hooked into the after_setup_theme hook, which\n * runs before the init hook. The init hook is too late for some features, such\n * as indicating support for post thumbnails.\n *\/"}]},"twentyseventeen_content_width":{"name":"twentyseventeen_content_width","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set the content width in pixels, based on the theme's design and stylesheet.\n *\n * Priority 0 to make it available to lower priority callbacks.\n *\n * @global int $content_width\n *\/"}]},"twentyseventeen_fonts_url":{"name":"twentyseventeen_fonts_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register custom fonts.\n *\/"}]},"twentyseventeen_resource_hints":{"name":"twentyseventeen_resource_hints","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$urls","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$relation_type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add preconnect for Google Fonts.\n *\n * @since Twenty Seventeen 1.0\n *\n * @param array  $urls           URLs to print for resource hints.\n * @param string $relation_type  The relation type the URLs are printed.\n * @return array $urls           URLs to print for resource hints.\n *\/"}]},"twentyseventeen_widgets_init":{"name":"twentyseventeen_widgets_init","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register widget area.\n *\n * @link https:\/\/developer.wordpress.org\/themes\/functionality\/sidebars\/#registering-a-sidebar\n *\/"}]},"twentyseventeen_excerpt_more":{"name":"twentyseventeen_excerpt_more","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Replaces \"[...]\" (appended to automatically generated excerpts) with ... and\n * a 'Continue reading' link.\n *\n * @since Twenty Seventeen 1.0\n *\n * @return string 'Continue reading' link prepended with an ellipsis.\n *\/"}]},"twentyseventeen_javascript_detection":{"name":"twentyseventeen_javascript_detection","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles JavaScript detection.\n *\n * Adds a `js` class to the root `<html>` element when JavaScript is detected.\n *\n * @since Twenty Seventeen 1.0\n *\/"}]},"twentyseventeen_pingback_header":{"name":"twentyseventeen_pingback_header","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a pingback url auto-discovery header for singularly identifiable articles.\n *\/"}]},"twentyseventeen_colors_css_wrap":{"name":"twentyseventeen_colors_css_wrap","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display custom color CSS.\n *\/"}]},"twentyseventeen_scripts":{"name":"twentyseventeen_scripts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueue scripts and styles.\n *\/"}]},"twentyseventeen_content_image_sizes_attr":{"name":"twentyseventeen_content_image_sizes_attr","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$sizes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add custom image sizes attribute to enhance responsive image functionality\n * for content images.\n *\n * @since Twenty Seventeen 1.0\n *\n * @param string $sizes A source size value for use in a 'sizes' attribute.\n * @param array  $size  Image size. Accepts an array of width and height\n *                      values in pixels (in that order).\n * @return string A source size value for use in a content image 'sizes' attribute.\n *\/"}]},"twentyseventeen_header_image_tag":{"name":"twentyseventeen_header_image_tag","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$html","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$header","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attr","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filter the `sizes` value in the header image markup.\n *\n * @since Twenty Seventeen 1.0\n *\n * @param string $html   The HTML image tag markup being filtered.\n * @param object $header The custom header object returned by 'get_custom_header()'.\n * @param array  $attr   Array of the attributes for the image tag.\n * @return string The filtered header image HTML.\n *\/"}]},"twentyseventeen_post_thumbnail_sizes_attr":{"name":"twentyseventeen_post_thumbnail_sizes_attr","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attachment","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add custom image sizes attribute to enhance responsive image functionality\n * for post thumbnails.\n *\n * @since Twenty Seventeen 1.0\n *\n * @param array $attr       Attributes for the image markup.\n * @param int   $attachment Image attachment ID.\n * @param array $size       Registered image size or flat array of height and width dimensions.\n * @return string A source size value for use in a post thumbnail 'sizes' attribute.\n *\/"}]},"twentyseventeen_front_page_template":{"name":"twentyseventeen_front_page_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$template","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Use front-page.php when Front page displays is set to a static page.\n *\n * @since Twenty Seventeen 1.0\n *\n * @param string $template front-page.php.\n *\n * @return string The template to be used: blank if is_home() is true (defaults to index.php), else $template.\n *\/"}]},"twentyseventeen_include_svg_icons":{"name":"twentyseventeen_include_svg_icons","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add SVG definitions to the footer.\n *\/"},{"phpdoc":"\/**\n * SVG icons related functions and filters\n *\n * @package WordPress\n * @subpackage Twenty_Seventeen\n * @since 1.0\n *\/"}]},"twentyseventeen_get_svg":{"name":"twentyseventeen_get_svg","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return SVG markup.\n *\n * @param array $args {\n *     Parameters needed to display an SVG.\n *\n *     @type string $icon  Required SVG icon filename.\n *     @type string $title Optional SVG title.\n *     @type string $desc  Optional SVG description.\n * }\n * @return string SVG markup.\n *\/"}]},"twentyseventeen_nav_menu_social_icons":{"name":"twentyseventeen_nav_menu_social_icons","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$item_output","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$item","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display SVG icons in social links menu.\n *\n * @param  string  $item_output The menu item output.\n * @param  WP_Post $item        Menu item object.\n * @param  int     $depth       Depth of the menu.\n * @param  array   $args        wp_nav_menu() arguments.\n * @return string  $item_output The menu item output with social icon.\n *\/"}]},"twentyseventeen_dropdown_icon_to_menu_link":{"name":"twentyseventeen_dropdown_icon_to_menu_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$item","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add dropdown icon if menu item has children.\n *\n * @param  string $title The menu item's title.\n * @param  object $item  The current menu item.\n * @param  array  $args  An array of wp_nav_menu() arguments.\n * @param  int    $depth Depth of menu item. Used for padding.\n * @return string $title The menu item's title with dropdown icon.\n *\/"}]},"twentyseventeen_social_links_icons":{"name":"twentyseventeen_social_links_icons","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns an array of supported social links (URL and icon name).\n *\n * @return array $social_links_icons\n *\/"}]},"twentyseventeen_customize_register":{"name":"twentyseventeen_customize_register","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_customize","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add postMessage support for site title and description for the Theme Customizer.\n *\n * @param WP_Customize_Manager $wp_customize Theme Customizer object.\n *\/"},{"phpdoc":"\/**\n * Twenty Seventeen: Customizer\n *\n * @package WordPress\n * @subpackage Twenty_Seventeen\n * @since 1.0\n *\/"}]},"twentyseventeen_sanitize_page_layout":{"name":"twentyseventeen_sanitize_page_layout","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$input","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize the page layout options.\n *\/"}]},"twentyseventeen_sanitize_colorscheme":{"name":"twentyseventeen_sanitize_colorscheme","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$input","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize the colorscheme.\n *\/"}]},"twentyseventeen_customize_partial_blogname":{"name":"twentyseventeen_customize_partial_blogname","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the site title for the selective refresh partial.\n *\n * @since Twenty Seventeen 1.0\n * @see twentyseventeen_customize_register()\n *\n * @return void\n *\/"}]},"twentyseventeen_customize_partial_blogdescription":{"name":"twentyseventeen_customize_partial_blogdescription","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the site tagline for the selective refresh partial.\n *\n * @since Twenty Seventeen 1.0\n * @see twentyseventeen_customize_register()\n *\n * @return void\n *\/"}]},"twentyseventeen_is_static_front_page":{"name":"twentyseventeen_is_static_front_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return whether we're previewing the front page and it's a static page.\n *\/"}]},"twentyseventeen_is_view_with_layout_option":{"name":"twentyseventeen_is_view_with_layout_option","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return whether we're on a view that supports a one or two column layout.\n *\/"}]},"twentyseventeen_customize_preview_js":{"name":"twentyseventeen_customize_preview_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Bind JS handlers to instantly live-preview changes.\n *\/"}]},"twentyseventeen_panels_js":{"name":"twentyseventeen_panels_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load dynamic logic for the customizer controls area.\n *\/"}]},"twentyseventeen_custom_header_setup":{"name":"twentyseventeen_custom_header_setup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set up the WordPress core custom header feature.\n *\n * @uses twentyseventeen_header_style()\n *\/"},{"phpdoc":"\/**\n * Custom header implementation\n *\n * @link https:\/\/codex.wordpress.org\/Custom_Headers\n *\n * @package WordPress\n * @subpackage Twenty_Seventeen\n * @since 1.0\n *\/"}]},"twentyseventeen_header_style":{"name":"twentyseventeen_header_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Styles the header image and text displayed on the blog.\n *\n * @see twentyseventeen_custom_header_setup().\n *\/"}]},"twentyseventeen_video_controls":{"name":"twentyseventeen_video_controls","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$settings","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Customize video play\/pause button in the custom header.\n *\/"}]},"twentyseventeen_custom_colors_css":{"name":"twentyseventeen_custom_colors_css","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Twenty Seventeen: Color Patterns\n *\n * @package WordPress\n * @subpackage Twenty_Seventeen\n * @since 1.0\n *\/"},{"phpdoc":"\/**\n * Generate the CSS for the current custom color scheme.\n *\/"}]},"twentyseventeen_posted_on":{"name":"twentyseventeen_posted_on","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints HTML with meta information for the current post-date\/time and author.\n *\/"}]},"twentyseventeen_time_link":{"name":"twentyseventeen_time_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Gets a nicely formatted string for the published date.\n *\/"}]},"twentyseventeen_entry_footer":{"name":"twentyseventeen_entry_footer","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints HTML with meta information for the categories, tags and comments.\n *\/"}]},"twentyseventeen_edit_link":{"name":"twentyseventeen_edit_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns an accessibility-friendly link to edit a post or page.\n *\n * This also gives us a little context about what exactly we're editing\n * (post or page?) so that users understand a bit more where they are in terms\n * of the template hierarchy and their content. Helpful when\/if the single-page\n * layout with multiple posts\/pages shown gets confusing.\n *\/"}]},"twentyseventeen_front_page_section":{"name":"twentyseventeen_front_page_section","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$partial","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display a front page section.\n *\n * @param $partial WP_Customize_Partial Partial associated with a selective refresh request.\n * @param $id integer Front page section to display.\n *\/"}]},"twentyseventeen_categorized_blog":{"name":"twentyseventeen_categorized_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns true if a blog has more than 1 category.\n *\n * @return bool\n *\/"}]},"twentyseventeen_category_transient_flusher":{"name":"twentyseventeen_category_transient_flusher","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Flush out the transients used in twentyseventeen_categorized_blog.\n *\/"}]},"twentyseventeen_body_classes":{"name":"twentyseventeen_body_classes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$classes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Additional features to allow styling of the templates\n *\n * @package WordPress\n * @subpackage Twenty_Seventeen\n * @since 1.0\n *\/"},{"phpdoc":"\/**\n * Adds custom classes to the array of body classes.\n *\n * @param array $classes Classes for the body element.\n * @return array\n *\/"}]},"twentyseventeen_panel_count":{"name":"twentyseventeen_panel_count","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Count our number of active panels.\n *\n * Primarily used to see if we have any panels active, duh.\n *\/"}]},"twentyseventeen_is_frontpage":{"name":"twentyseventeen_is_frontpage","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Checks to see if we're on the homepage or not.\n *\/"}]},"twentyseventeen_switch_theme":{"name":"twentyseventeen_switch_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prevent switching to Twenty Seventeen on old versions of WordPress.\n *\n * Switches to the default theme.\n *\n * @since Twenty Seventeen 1.0\n *\/"},{"phpdoc":"\/**\n * Twenty Seventeen back compat functionality\n *\n * Prevents Twenty Seventeen from running on WordPress versions prior to 4.7,\n * since this theme is not meant to be backward compatible beyond that and\n * relies on many newer functions and markup changes introduced in 4.7.\n *\n * @package WordPress\n * @subpackage Twenty_Seventeen\n * @since Twenty Seventeen 1.0\n *\/"}]},"twentyseventeen_upgrade_notice":{"name":"twentyseventeen_upgrade_notice","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds a message for unsuccessful theme switch.\n *\n * Prints an update nag after an unsuccessful attempt to switch to\n * Twenty Seventeen on WordPress versions prior to 4.7.\n *\n * @since Twenty Seventeen 1.0\n *\n * @global string $wp_version WordPress version.\n *\/"}]},"twentyseventeen_customize":{"name":"twentyseventeen_customize","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prevents the Customizer from being loaded on WordPress versions prior to 4.7.\n *\n * @since Twenty Seventeen 1.0\n *\n * @global string $wp_version WordPress version.\n *\/"}]},"twentyseventeen_preview":{"name":"twentyseventeen_preview","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prevents the Theme Preview from being loaded on WordPress versions prior to 4.7.\n *\n * @since Twenty Seventeen 1.0\n *\n * @global string $wp_version WordPress version.\n *\/"}]},"twentysixteen_setup":{"name":"twentysixteen_setup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sets up theme defaults and registers support for various WordPress features.\n *\n * Note that this function is hooked into the after_setup_theme hook, which\n * runs before the init hook. The init hook is too late for some features, such\n * as indicating support for post thumbnails.\n *\n * Create your own twentysixteen_setup() function to override in a child theme.\n *\n * @since Twenty Sixteen 1.0\n *\/"}]},"twentysixteen_content_width":{"name":"twentysixteen_content_width","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sets the content width in pixels, based on the theme's design and stylesheet.\n *\n * Priority 0 to make it available to lower priority callbacks.\n *\n * @global int $content_width\n *\n * @since Twenty Sixteen 1.0\n *\/"}]},"twentysixteen_widgets_init":{"name":"twentysixteen_widgets_init","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers a widget area.\n *\n * @link https:\/\/developer.wordpress.org\/reference\/functions\/register_sidebar\/\n *\n * @since Twenty Sixteen 1.0\n *\/"}]},"twentysixteen_fonts_url":{"name":"twentysixteen_fonts_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register Google fonts for Twenty Sixteen.\n *\n * Create your own twentysixteen_fonts_url() function to override in a child theme.\n *\n * @since Twenty Sixteen 1.0\n *\n * @return string Google fonts URL for the theme.\n *\/"}]},"twentysixteen_javascript_detection":{"name":"twentysixteen_javascript_detection","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles JavaScript detection.\n *\n * Adds a `js` class to the root `<html>` element when JavaScript is detected.\n *\n * @since Twenty Sixteen 1.0\n *\/"}]},"twentysixteen_scripts":{"name":"twentysixteen_scripts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueues scripts and styles.\n *\n * @since Twenty Sixteen 1.0\n *\/"}]},"twentysixteen_body_classes":{"name":"twentysixteen_body_classes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$classes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds custom classes to the array of body classes.\n *\n * @since Twenty Sixteen 1.0\n *\n * @param array $classes Classes for the body element.\n * @return array (Maybe) filtered body classes.\n *\/"}]},"twentysixteen_hex2rgb":{"name":"twentysixteen_hex2rgb","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$color","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Converts a HEX value to RGB.\n *\n * @since Twenty Sixteen 1.0\n *\n * @param string $color The original color, in 3- or 6-digit hexadecimal form.\n * @return array Array containing RGB (red, green, and blue) values for the given\n *               HEX code, empty array otherwise.\n *\/"}]},"twentysixteen_content_image_sizes_attr":{"name":"twentysixteen_content_image_sizes_attr","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$sizes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add custom image sizes attribute to enhance responsive image functionality\n * for content images\n *\n * @since Twenty Sixteen 1.0\n *\n * @param string $sizes A source size value for use in a 'sizes' attribute.\n * @param array  $size  Image size. Accepts an array of width and height\n *                      values in pixels (in that order).\n * @return string A source size value for use in a content image 'sizes' attribute.\n *\/"}]},"twentysixteen_post_thumbnail_sizes_attr":{"name":"twentysixteen_post_thumbnail_sizes_attr","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$attr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attachment","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$size","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add custom image sizes attribute to enhance responsive image functionality\n * for post thumbnails\n *\n * @since Twenty Sixteen 1.0\n *\n * @param array $attr Attributes for the image markup.\n * @param int   $attachment Image attachment ID.\n * @param array $size Registered image size or flat array of height and width dimensions.\n * @return string A source size value for use in a post thumbnail 'sizes' attribute.\n *\/"}]},"twentysixteen_widget_tag_cloud_args":{"name":"twentysixteen_widget_tag_cloud_args","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Modifies tag cloud widget arguments to have all tags in the widget same font size.\n *\n * @since Twenty Sixteen 1.1\n *\n * @param array $args Arguments for tag cloud widget.\n * @return array A new modified arguments.\n *\/"}]},"twentysixteen_custom_header_and_background":{"name":"twentysixteen_custom_header_and_background","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sets up the WordPress core custom header and custom background features.\n *\n * @since Twenty Sixteen 1.0\n *\n * @see twentysixteen_header_style()\n *\/"},{"phpdoc":"\/**\n * Twenty Sixteen Customizer functionality\n *\n * @package WordPress\n * @subpackage Twenty_Sixteen\n * @since Twenty Sixteen 1.0\n *\/"}]},"twentysixteen_header_style":{"name":"twentysixteen_header_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Styles the header text displayed on the site.\n *\n * Create your own twentysixteen_header_style() function to override in a child theme.\n *\n * @since Twenty Sixteen 1.0\n *\n * @see twentysixteen_custom_header_and_background().\n *\/"}]},"twentysixteen_customize_register":{"name":"twentysixteen_customize_register","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_customize","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds postMessage support for site title and description for the Customizer.\n *\n * @since Twenty Sixteen 1.0\n *\n * @param WP_Customize_Manager $wp_customize The Customizer object.\n *\/"}]},"twentysixteen_customize_partial_blogname":{"name":"twentysixteen_customize_partial_blogname","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the site title for the selective refresh partial.\n *\n * @since Twenty Sixteen 1.2\n * @see twentysixteen_customize_register()\n *\n * @return void\n *\/"}]},"twentysixteen_customize_partial_blogdescription":{"name":"twentysixteen_customize_partial_blogdescription","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the site tagline for the selective refresh partial.\n *\n * @since Twenty Sixteen 1.2\n * @see twentysixteen_customize_register()\n *\n * @return void\n *\/"}]},"twentysixteen_get_color_schemes":{"name":"twentysixteen_get_color_schemes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Registers color schemes for Twenty Sixteen.\n *\n * Can be filtered with {@see 'twentysixteen_color_schemes'}.\n *\n * The order of colors in a colors array:\n * 1. Main Background Color.\n * 2. Page Background Color.\n * 3. Link Color.\n * 4. Main Text Color.\n * 5. Secondary Text Color.\n *\n * @since Twenty Sixteen 1.0\n *\n * @return array An associative array of color scheme options.\n *\/"}]},"twentysixteen_get_color_scheme":{"name":"twentysixteen_get_color_scheme","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves the current Twenty Sixteen color scheme.\n *\n * Create your own twentysixteen_get_color_scheme() function to override in a child theme.\n *\n * @since Twenty Sixteen 1.0\n *\n * @return array An associative array of either the current or default color scheme HEX values.\n *\/"}]},"twentysixteen_get_color_scheme_choices":{"name":"twentysixteen_get_color_scheme_choices","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieves an array of color scheme choices registered for Twenty Sixteen.\n *\n * Create your own twentysixteen_get_color_scheme_choices() function to override\n * in a child theme.\n *\n * @since Twenty Sixteen 1.0\n *\n * @return array Array of color schemes.\n *\/"}]},"twentysixteen_sanitize_color_scheme":{"name":"twentysixteen_sanitize_color_scheme","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Handles sanitization for Twenty Sixteen color schemes.\n *\n * Create your own twentysixteen_sanitize_color_scheme() function to override\n * in a child theme.\n *\n * @since Twenty Sixteen 1.0\n *\n * @param string $value Color scheme name value.\n * @return string Color scheme name.\n *\/"}]},"twentysixteen_color_scheme_css":{"name":"twentysixteen_color_scheme_css","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueues front-end CSS for color scheme.\n *\n * @since Twenty Sixteen 1.0\n *\n * @see wp_add_inline_style()\n *\/"}]},"twentysixteen_customize_control_js":{"name":"twentysixteen_customize_control_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Binds the JS listener to make Customizer color_scheme control.\n *\n * Passes color scheme data as colorScheme global.\n *\n * @since Twenty Sixteen 1.0\n *\/"}]},"twentysixteen_customize_preview_js":{"name":"twentysixteen_customize_preview_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Binds JS handlers to make the Customizer preview reload changes asynchronously.\n *\n * @since Twenty Sixteen 1.0\n *\/"}]},"twentysixteen_get_color_scheme_css":{"name":"twentysixteen_get_color_scheme_css","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$colors","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns CSS for the color schemes.\n *\n * @since Twenty Sixteen 1.0\n *\n * @param array $colors Color scheme colors.\n * @return string Color scheme CSS.\n *\/"}]},"twentysixteen_color_scheme_css_template":{"name":"twentysixteen_color_scheme_css_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Outputs an Underscore template for generating CSS for the color scheme.\n *\n * The template generates the css dynamically for instant display in the\n * Customizer preview.\n *\n * @since Twenty Sixteen 1.0\n *\/"}]},"twentysixteen_page_background_color_css":{"name":"twentysixteen_page_background_color_css","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueues front-end CSS for the page background color.\n *\n * @since Twenty Sixteen 1.0\n *\n * @see wp_add_inline_style()\n *\/"}]},"twentysixteen_link_color_css":{"name":"twentysixteen_link_color_css","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueues front-end CSS for the link color.\n *\n * @since Twenty Sixteen 1.0\n *\n * @see wp_add_inline_style()\n *\/"}]},"twentysixteen_main_text_color_css":{"name":"twentysixteen_main_text_color_css","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueues front-end CSS for the main text color.\n *\n * @since Twenty Sixteen 1.0\n *\n * @see wp_add_inline_style()\n *\/"}]},"twentysixteen_secondary_text_color_css":{"name":"twentysixteen_secondary_text_color_css","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueues front-end CSS for the secondary text color.\n *\n * @since Twenty Sixteen 1.0\n *\n * @see wp_add_inline_style()\n *\/"}]},"twentysixteen_entry_meta":{"name":"twentysixteen_entry_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints HTML with meta information for the categories, tags.\n *\n * Create your own twentysixteen_entry_meta() function to override in a child theme.\n *\n * @since Twenty Sixteen 1.0\n *\/"}]},"twentysixteen_entry_date":{"name":"twentysixteen_entry_date","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints HTML with date information for current post.\n *\n * Create your own twentysixteen_entry_date() function to override in a child theme.\n *\n * @since Twenty Sixteen 1.0\n *\/"}]},"twentysixteen_entry_taxonomies":{"name":"twentysixteen_entry_taxonomies","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints HTML with category and tags for current post.\n *\n * Create your own twentysixteen_entry_taxonomies() function to override in a child theme.\n *\n * @since Twenty Sixteen 1.0\n *\/"}]},"twentysixteen_post_thumbnail":{"name":"twentysixteen_post_thumbnail","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays an optional post thumbnail.\n *\n * Wraps the post thumbnail in an anchor element on index views, or a div\n * element when on single views.\n *\n * Create your own twentysixteen_post_thumbnail() function to override in a child theme.\n *\n * @since Twenty Sixteen 1.0\n *\/"}]},"twentysixteen_excerpt":{"name":"twentysixteen_excerpt","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"'entry-summary'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n\t * Displays the optional excerpt.\n\t *\n\t * Wraps the excerpt in a div element.\n\t *\n\t * Create your own twentysixteen_excerpt() function to override in a child theme.\n\t *\n\t * @since Twenty Sixteen 1.0\n\t *\n\t * @param string $class Optional. Class string of the div element. Defaults to 'entry-summary'.\n\t *\/"}]},"twentysixteen_excerpt_more":{"name":"twentysixteen_excerpt_more","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Replaces \"[...]\" (appended to automatically generated excerpts) with ... and\n * a 'Continue reading' link.\n *\n * Create your own twentysixteen_excerpt_more() function to override in a child theme.\n *\n * @since Twenty Sixteen 1.0\n *\n * @return string 'Continue reading' link prepended with an ellipsis.\n *\/"}]},"twentysixteen_categorized_blog":{"name":"twentysixteen_categorized_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determines whether blog\/site has more than one category.\n *\n * Create your own twentysixteen_categorized_blog() function to override in a child theme.\n *\n * @since Twenty Sixteen 1.0\n *\n * @return bool True if there is more than one category, false otherwise.\n *\/"}]},"twentysixteen_category_transient_flusher":{"name":"twentysixteen_category_transient_flusher","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Flushes out the transients used in twentysixteen_categorized_blog().\n *\n * @since Twenty Sixteen 1.0\n *\/"}]},"twentysixteen_the_custom_logo":{"name":"twentysixteen_the_custom_logo","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the optional custom logo.\n *\n * Does nothing if the custom logo is not available.\n *\n * @since Twenty Sixteen 1.2\n *\/"}]},"twentysixteen_switch_theme":{"name":"twentysixteen_switch_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prevent switching to Twenty Sixteen on old versions of WordPress.\n *\n * Switches to the default theme.\n *\n * @since Twenty Sixteen 1.0\n *\/"},{"phpdoc":"\/**\n * Twenty Sixteen back compat functionality\n *\n * Prevents Twenty Sixteen from running on WordPress versions prior to 4.4,\n * since this theme is not meant to be backward compatible beyond that and\n * relies on many newer functions and markup changes introduced in 4.4.\n *\n * @package WordPress\n * @subpackage Twenty_Sixteen\n * @since Twenty Sixteen 1.0\n *\/"}]},"twentysixteen_upgrade_notice":{"name":"twentysixteen_upgrade_notice","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adds a message for unsuccessful theme switch.\n *\n * Prints an update nag after an unsuccessful attempt to switch to\n * Twenty Sixteen on WordPress versions prior to 4.4.\n *\n * @since Twenty Sixteen 1.0\n *\n * @global string $wp_version WordPress version.\n *\/"}]},"twentysixteen_customize":{"name":"twentysixteen_customize","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prevents the Customizer from being loaded on WordPress versions prior to 4.4.\n *\n * @since Twenty Sixteen 1.0\n *\n * @global string $wp_version WordPress version.\n *\/"}]},"twentysixteen_preview":{"name":"twentysixteen_preview","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prevents the Theme Preview from being loaded on WordPress versions prior to 4.4.\n *\n * @since Twenty Sixteen 1.0\n *\n * @global string $wp_version WordPress version.\n *\/"}]},"twentyeleven_setup":{"name":"twentyeleven_setup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set up theme defaults and registers support for various WordPress features.\n *\n * Note that this function is hooked into the after_setup_theme hook, which runs\n * before the init hook. The init hook is too late for some features, such as indicating\n * support post thumbnails.\n *\n * To override twentyeleven_setup() in a child theme, add your own twentyeleven_setup to your child theme's\n * functions.php file.\n *\n * @uses load_theme_textdomain()    For translation\/localization support.\n * @uses add_editor_style()         To style the visual editor.\n * @uses add_theme_support()        To add support for post thumbnails, automatic feed links, custom headers\n * \t                                and backgrounds, and post formats.\n * @uses register_nav_menus()       To add support for navigation menus.\n * @uses register_default_headers() To register the default custom header images provided with the theme.\n * @uses set_post_thumbnail_size()  To set a custom post thumbnail size.\n *\n * @since Twenty Eleven 1.0\n *\/"}]},"twentyeleven_header_style":{"name":"twentyeleven_header_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Styles the header image and text displayed on the blog.\n *\n * @since Twenty Eleven 1.0\n *\/"}]},"twentyeleven_admin_header_style":{"name":"twentyeleven_admin_header_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Styles the header image displayed on the Appearance > Header admin panel.\n *\n * Referenced via add_theme_support('custom-header') in twentyeleven_setup().\n *\n * @since Twenty Eleven 1.0\n *\/"}]},"twentyeleven_admin_header_image":{"name":"twentyeleven_admin_header_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Custom header image markup displayed on the Appearance > Header admin panel.\n *\n * Referenced via add_theme_support('custom-header') in twentyeleven_setup().\n *\n * @since Twenty Eleven 1.0\n *\/"}]},"twentyeleven_excerpt_length":{"name":"twentyeleven_excerpt_length","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$length","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set the post excerpt length to 40 words.\n *\n * To override this length in a child theme, remove\n * the filter and add your own function tied to\n * the excerpt_length filter hook.\n *\n * @since Twenty Eleven 1.0\n *\n * @param int $length The number of excerpt characters.\n * @return int The filtered number of characters.\n *\/"}]},"twentyeleven_continue_reading_link":{"name":"twentyeleven_continue_reading_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return a \"Continue Reading\" link for excerpts\n *\n * @since Twenty Eleven 1.0\n *\n * @return string The \"Continue Reading\" HTML link.\n *\/"}]},"twentyeleven_auto_excerpt_more":{"name":"twentyeleven_auto_excerpt_more","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$more","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Replace \"[...]\" in the Read More link with an ellipsis.\n *\n * The \"[...]\" is appended to automatically generated excerpts.\n *\n * To override this in a child theme, remove the filter and add your own\n * function tied to the excerpt_more filter hook.\n *\n * @since Twenty Eleven 1.0\n *\n * @param string $more The Read More text.\n * @return The filtered Read More text.\n *\/"}]},"twentyeleven_custom_excerpt_more":{"name":"twentyeleven_custom_excerpt_more","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a pretty \"Continue Reading\" link to custom post excerpts.\n *\n * To override this link in a child theme, remove the filter and add your own\n * function tied to the get_the_excerpt filter hook.\n *\n * @since Twenty Eleven 1.0\n *\n * @param string $output The \"Continue Reading\" link.\n * @return string The filtered \"Continue Reading\" link.\n *\/"}]},"twentyeleven_page_menu_args":{"name":"twentyeleven_page_menu_args","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Show a home link for the wp_nav_menu() fallback, wp_page_menu().\n *\n * @since Twenty Eleven 1.0\n *\n * @param array $args The page menu arguments. @see wp_page_menu()\n * @return array The filtered page menu arguments.\n *\/"}]},"twentyeleven_widgets_init":{"name":"twentyeleven_widgets_init","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register sidebars and widgetized areas.\n *\n * Also register the default Epherma widget.\n *\n * @since Twenty Eleven 1.0\n *\/"}]},"twentyeleven_content_nav":{"name":"twentyeleven_content_nav","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$html_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display navigation to next\/previous pages when applicable.\n *\n * @since Twenty Eleven 1.0\n *\n * @param string $html_id The HTML id attribute.\n *\/"}]},"twentyeleven_get_first_url":{"name":"twentyeleven_get_first_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return the first link from the post content. If none found, the\n * post permalink is used as a fallback.\n *\n * @since Twenty Eleven 1.0\n *\n * @uses get_url_in_content() to get the first URL from the post content.\n *\n * @return string The first link.\n *\/"}]},"twentyeleven_url_grabber":{"name":"twentyeleven_url_grabber","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return the URL for the first link found in the post content.\n *\n * @since Twenty Eleven 1.0\n *\n * @return string|bool URL or false when no link is present.\n *\/"}]},"twentyeleven_footer_sidebar_class":{"name":"twentyeleven_footer_sidebar_class","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Count the number of footer sidebars to enable dynamic classes for the footer.\n *\n * @since Twenty Eleven 1.0\n *\/"}]},"twentyeleven_comment":{"name":"twentyeleven_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Template for comments and pingbacks.\n *\n * To override this walker in a child theme without modifying the comments template\n * simply create your own twentyeleven_comment(), and that function will be used instead.\n *\n * Used as a callback by wp_list_comments() for displaying the comments.\n *\n * @since Twenty Eleven 1.0\n *\n * @param object $comment The comment object.\n * @param array  $args    An array of comment arguments. @see get_comment_reply_link()\n * @param int    $depth   The depth of the comment.\n *\/"}]},"twentyeleven_posted_on":{"name":"twentyeleven_posted_on","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print HTML with meta information for the current post-date\/time and author.\n *\n * Create your own twentyeleven_posted_on to override in a child theme\n *\n * @since Twenty Eleven 1.0\n *\/"}]},"twentyeleven_body_classes":{"name":"twentyeleven_body_classes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$classes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add two classes to the array of body classes.\n *\n * The first is if the site has only had one author with published posts.\n * The second is if a singular post being displayed\n *\n * @since Twenty Eleven 1.0\n *\n * @param array $classes Existing body classes.\n * @return array The filtered array of body classes.\n *\/"}]},"twentyeleven_get_gallery_images":{"name":"twentyeleven_get_gallery_images","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the IDs for images in a gallery.\n *\n * @uses get_post_galleries() First, if available. Falls back to shortcode parsing,\n *                            then as last option uses a get_posts() call.\n *\n * @since Twenty Eleven 1.6\n *\n * @return array List of image IDs from the post gallery.\n *\/"}]},"twentyeleven_admin_enqueue_scripts":{"name":"twentyeleven_admin_enqueue_scripts","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$hook_suffix","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Properly enqueue styles and scripts for our theme options page.\n *\n * This function is attached to the admin_enqueue_scripts action hook.\n *\n * @since Twenty Eleven 1.0\n *\n * @param string $hook_suffix An admin page's hook suffix.\n *\/"},{"phpdoc":"\/**\n * Twenty Eleven Theme Options\n *\n * @package WordPress\n * @subpackage Twenty_Eleven\n * @since Twenty Eleven 1.0\n *\/"}]},"twentyeleven_theme_options_init":{"name":"twentyeleven_theme_options_init","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register the form setting for our twentyeleven_options array.\n *\n * This function is attached to the admin_init action hook.\n *\n * This call to register_setting() registers a validation callback, twentyeleven_theme_options_validate(),\n * which is used when the option is saved, to ensure that our option values are complete, properly\n * formatted, and safe.\n *\n * @since Twenty Eleven 1.0\n *\/"}]},"twentyeleven_option_page_capability":{"name":"twentyeleven_option_page_capability","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$capability","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Change the capability required to save the 'twentyeleven_options' options group.\n *\n * @see twentyeleven_theme_options_init()     First parameter to register_setting() is the name of the options group.\n * @see twentyeleven_theme_options_add_page() The edit_theme_options capability is used for viewing the page.\n *\n * By default, the options groups for all registered settings require the manage_options capability.\n * This filter is required to change our theme options page to edit_theme_options instead.\n * By default, only administrators have either of these capabilities, but the desire here is\n * to allow for finer-grained control for roles and users.\n *\n * @param string $capability The capability used for the page, which is manage_options by default.\n * @return string The capability to actually use.\n *\/"}]},"twentyeleven_theme_options_add_page":{"name":"twentyeleven_theme_options_add_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a theme options page to the admin menu, including some help documentation.\n *\n * This function is attached to the admin_menu action hook.\n *\n * @since Twenty Eleven 1.0\n *\/"}]},"twentyeleven_theme_options_help":{"name":"twentyeleven_theme_options_help","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[]},"twentyeleven_color_schemes":{"name":"twentyeleven_color_schemes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return an array of color schemes registered for Twenty Eleven.\n *\n * @since Twenty Eleven 1.0\n *\/"}]},"twentyeleven_layouts":{"name":"twentyeleven_layouts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return an array of layout options registered for Twenty Eleven.\n *\n * @since Twenty Eleven 1.0\n *\/"}]},"twentyeleven_get_default_theme_options":{"name":"twentyeleven_get_default_theme_options","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return the default options for Twenty Eleven.\n *\n * @since Twenty Eleven 1.0\n *\n * @return array An array of default theme options.\n *\/"}]},"twentyeleven_get_default_link_color":{"name":"twentyeleven_get_default_link_color","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$color_scheme","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return the default link color for Twenty Eleven, based on color scheme.\n *\n * @since Twenty Eleven 1.0\n *\n * @param string $color_scheme Optional. Color scheme.\n *                             Default null (or the active color scheme).\n * @return string The default link color.\n*\/"}]},"twentyeleven_get_theme_options":{"name":"twentyeleven_get_theme_options","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return the options array for Twenty Eleven.\n *\n * @since Twenty Eleven 1.0\n *\/"}]},"twentyeleven_settings_field_color_scheme":{"name":"twentyeleven_settings_field_color_scheme","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the Color Scheme setting field.\n *\n * @since Twenty Eleven 1.3\n *\/"}]},"twentyeleven_settings_field_link_color":{"name":"twentyeleven_settings_field_link_color","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the Link Color setting field.\n *\n * @since Twenty Eleven 1.3\n *\/"}]},"twentyeleven_settings_field_layout":{"name":"twentyeleven_settings_field_layout","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the Layout setting field.\n *\n * @since Twenty Eleven 1.3\n *\/"}]},"twentyeleven_theme_options_render_page":{"name":"twentyeleven_theme_options_render_page","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the theme options page for Twenty Eleven.\n *\n * @since Twenty Eleven 1.2\n *\/"}]},"twentyeleven_theme_options_validate":{"name":"twentyeleven_theme_options_validate","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$input","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize and validate form input.\n *\n * Accepts an array, return a sanitized array.\n *\n * @see twentyeleven_theme_options_init()\n * @todo set up Reset Options action\n *\n * @since Twenty Eleven 1.0\n *\n * @param array $input An array of form input.\n *\/"}]},"twentyeleven_enqueue_color_scheme":{"name":"twentyeleven_enqueue_color_scheme","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueue the styles for the current color scheme.\n *\n * @since Twenty Eleven 1.0\n *\/"}]},"twentyeleven_print_link_color_style":{"name":"twentyeleven_print_link_color_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a style block to the theme for the current link color.\n *\n * This function is attached to the wp_head action hook.\n *\n * @since Twenty Eleven 1.0\n *\/"}]},"twentyeleven_layout_classes":{"name":"twentyeleven_layout_classes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$existing_classes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add Twenty Eleven layout classes to the array of body classes.\n *\n * @since Twenty Eleven 1.0\n *\n * @param array $existing_classes An array of existing body classes.\n *\/"}]},"twentyeleven_customize_register":{"name":"twentyeleven_customize_register","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_customize","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Implements Twenty Eleven theme options into Customizer\n *\n * @since Twenty Eleven 1.3\n *\n * @param object $wp_customize Customizer object.\n *\/"}]},"twentyeleven_customize_partial_blogname":{"name":"twentyeleven_customize_partial_blogname","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the site title for the selective refresh partial.\n *\n * @since Twenty Eleven 2.4\n * @see twentyeleven_customize_register()\n *\n * @return void\n *\/"}]},"twentyeleven_customize_partial_blogdescription":{"name":"twentyeleven_customize_partial_blogdescription","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the site tagline for the selective refresh partial.\n *\n * @since Twenty Eleven 2.4\n * @see twentyeleven_customize_register()\n *\n * @return void\n *\/"}]},"twentyeleven_customize_preview_js":{"name":"twentyeleven_customize_preview_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Bind JS handlers to make Customizer preview reload changes asynchronously.\n *\n * Used with blogname and blogdescription.\n *\n * @since Twenty Eleven 1.3\n *\/"}]},"twentythirteen_setup":{"name":"twentythirteen_setup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Twenty Thirteen setup.\n *\n * Sets up theme defaults and registers the various WordPress features that\n * Twenty Thirteen supports.\n *\n * @uses load_theme_textdomain() For translation\/localization support.\n * @uses add_editor_style() To add Visual Editor stylesheets.\n * @uses add_theme_support() To add support for automatic feed links, post\n * formats, and post thumbnails.\n * @uses register_nav_menu() To add support for a navigation menu.\n * @uses set_post_thumbnail_size() To set a custom post thumbnail size.\n *\n * @since Twenty Thirteen 1.0\n *\/"}]},"twentythirteen_fonts_url":{"name":"twentythirteen_fonts_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return the Google font stylesheet URL, if available.\n *\n * The use of Source Sans Pro and Bitter by default is localized. For languages\n * that use characters not supported by the font, the font can be disabled.\n *\n * @since Twenty Thirteen 1.0\n *\n * @return string Font stylesheet or empty string if disabled.\n *\/"}]},"twentythirteen_scripts_styles":{"name":"twentythirteen_scripts_styles","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueue scripts and styles for the front end.\n *\n * @since Twenty Thirteen 1.0\n *\/"}]},"twentythirteen_resource_hints":{"name":"twentythirteen_resource_hints","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$urls","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$relation_type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add preconnect for Google Fonts.\n *\n * @since Twenty Thirteen 2.1\n *\n * @param array   $urls          URLs to print for resource hints.\n * @param string  $relation_type The relation type the URLs are printed.\n * @return array URLs to print for resource hints.\n *\/"}]},"twentythirteen_wp_title":{"name":"twentythirteen_wp_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sep","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filter the page title.\n *\n * Creates a nicely formatted and more specific title element text for output\n * in head of document, based on current view.\n *\n * @since Twenty Thirteen 1.0\n *\n * @param string $title Default title text for current view.\n * @param string $sep   Optional separator.\n * @return string The filtered title.\n *\/"}]},"twentythirteen_widgets_init":{"name":"twentythirteen_widgets_init","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register two widget areas.\n *\n * @since Twenty Thirteen 1.0\n *\/"}]},"twentythirteen_paging_nav":{"name":"twentythirteen_paging_nav","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display navigation to next\/previous set of posts when applicable.\n *\n * @since Twenty Thirteen 1.0\n *\/"}]},"twentythirteen_post_nav":{"name":"twentythirteen_post_nav","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display navigation to next\/previous post when applicable.\n *\n * @since Twenty Thirteen 1.0\n *\/"}]},"twentythirteen_entry_meta":{"name":"twentythirteen_entry_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print HTML with meta information for current post: categories, tags, permalink, author, and date.\n *\n * Create your own twentythirteen_entry_meta() to override in a child theme.\n *\n * @since Twenty Thirteen 1.0\n *\/"}]},"twentythirteen_entry_date":{"name":"twentythirteen_entry_date","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$echo","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print HTML with date information for current post.\n *\n * Create your own twentythirteen_entry_date() to override in a child theme.\n *\n * @since Twenty Thirteen 1.0\n *\n * @param boolean $echo (optional) Whether to echo the date. Default true.\n * @return string The HTML-formatted post date.\n *\/"}]},"twentythirteen_the_attached_image":{"name":"twentythirteen_the_attached_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print the attached image with a link to the next attached image.\n *\n * @since Twenty Thirteen 1.0\n *\/"}]},"twentythirteen_get_link_url":{"name":"twentythirteen_get_link_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return the post URL.\n *\n * @uses get_url_in_content() to get the URL in the post meta (if it exists) or\n * the first link found in the post content.\n *\n * Falls back to the post permalink if no URL is found in the post.\n *\n * @since Twenty Thirteen 1.0\n *\n * @return string The Link format URL.\n *\/"}]},"twentythirteen_excerpt_more":{"name":"twentythirteen_excerpt_more","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$more","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Replaces \"[...]\" (appended to automatically generated excerpts) with ...\n * and a Continue reading link.\n *\n * @since Twenty Thirteen 1.4\n *\n * @param string $more Default Read More excerpt link.\n * @return string Filtered Read More excerpt link.\n *\/"}]},"twentythirteen_body_class":{"name":"twentythirteen_body_class","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$classes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Extend the default WordPress body classes.\n *\n * Adds body classes to denote:\n * 1. Single or multiple authors.\n * 2. Active widgets in the sidebar to change the layout and spacing.\n * 3. When avatars are disabled in discussion settings.\n *\n * @since Twenty Thirteen 1.0\n *\n * @param array $classes A list of existing body class values.\n * @return array The filtered body class list.\n *\/"}]},"twentythirteen_content_width":{"name":"twentythirteen_content_width","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adjust content_width value for video post formats and attachment templates.\n *\n * @since Twenty Thirteen 1.0\n *\/"}]},"twentythirteen_customize_register":{"name":"twentythirteen_customize_register","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_customize","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add postMessage support for site title and description for the Customizer.\n *\n * @since Twenty Thirteen 1.0\n *\n * @param WP_Customize_Manager $wp_customize Customizer object.\n *\/"}]},"twentythirteen_customize_partial_blogname":{"name":"twentythirteen_customize_partial_blogname","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the site title for the selective refresh partial.\n *\n * @since Twenty Thirteen 1.9\n * @see twentythirteen_customize_register()\n *\n * @return void\n *\/"}]},"twentythirteen_customize_partial_blogdescription":{"name":"twentythirteen_customize_partial_blogdescription","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the site tagline for the selective refresh partial.\n *\n * @since Twenty Thirteen 1.9\n * @see twentythirteen_customize_register()\n *\n * @return void\n *\/"}]},"twentythirteen_customize_preview_js":{"name":"twentythirteen_customize_preview_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueue Javascript postMessage handlers for the Customizer.\n *\n * Binds JavaScript handlers to make the Customizer preview\n * reload changes asynchronously.\n *\n * @since Twenty Thirteen 1.0\n *\/"}]},"twentythirteen_custom_header_setup":{"name":"twentythirteen_custom_header_setup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Implement a custom header for Twenty Thirteen\n *\n * @link https:\/\/codex.wordpress.org\/Custom_Headers\n *\n * @package WordPress\n * @subpackage Twenty_Thirteen\n * @since Twenty Thirteen 1.0\n *\/"},{"phpdoc":"\/**\n * Set up the WordPress core custom header arguments and settings.\n *\n * @uses add_theme_support() to register support for 3.4 and up.\n * @uses twentythirteen_header_style() to style front end.\n * @uses twentythirteen_admin_header_style() to style wp-admin form.\n * @uses twentythirteen_admin_header_image() to add custom markup to wp-admin form.\n * @uses register_default_headers() to set up the bundled header images.\n *\n * @since Twenty Thirteen 1.0\n *\/"}]},"twentythirteen_custom_header_fonts":{"name":"twentythirteen_custom_header_fonts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load our special font CSS files.\n *\n * @since Twenty Thirteen 1.0\n *\/"}]},"twentythirteen_header_style":{"name":"twentythirteen_header_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Style the header text displayed on the blog.\n *\n * get_header_textcolor() options: Hide text (returns 'blank'), or any hex value.\n *\n * @since Twenty Thirteen 1.0\n *\/"}]},"twentythirteen_admin_header_style":{"name":"twentythirteen_admin_header_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Style the header image displayed on the Appearance > Header admin panel.\n *\n * @since Twenty Thirteen 1.0\n *\/"}]},"twentythirteen_admin_header_image":{"name":"twentythirteen_admin_header_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output markup to be displayed on the Appearance > Header admin panel.\n *\n * This callback overrides the default markup displayed there.\n *\n * @since Twenty Thirteen 1.0\n *\/"}]},"twentythirteen_switch_theme":{"name":"twentythirteen_switch_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Twenty Thirteen back compat functionality\n *\n * Prevents Twenty Thirteen from running on WordPress versions prior to 3.6,\n * since this theme is not meant to be backward compatible and relies on\n * many new functions and markup changes introduced in 3.6.\n *\n * @package WordPress\n * @subpackage Twenty_Thirteen\n * @since Twenty Thirteen 1.0\n *\/"},{"phpdoc":"\/**\n * Prevent switching to Twenty Thirteen on old versions of WordPress.\n *\n * Switches to the default theme.\n *\n * @since Twenty Thirteen 1.0\n *\/"}]},"twentythirteen_upgrade_notice":{"name":"twentythirteen_upgrade_notice","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add message for unsuccessful theme switch.\n *\n * Prints an update nag after an unsuccessful attempt to switch to\n * Twenty Thirteen on WordPress versions prior to 3.6.\n *\n * @since Twenty Thirteen 1.0\n *\/"}]},"twentythirteen_customize":{"name":"twentythirteen_customize","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prevent the Customizer from being loaded on WordPress versions prior to 3.6.\n *\n * @since Twenty Thirteen 1.0\n *\/"}]},"twentythirteen_preview":{"name":"twentythirteen_preview","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prevent the Theme Preview from being loaded on WordPress versions prior to 3.4.\n *\n * @since Twenty Thirteen 1.0\n *\/"}]},"twentyfifteen_setup":{"name":"twentyfifteen_setup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sets up theme defaults and registers support for various WordPress features.\n *\n * Note that this function is hooked into the after_setup_theme hook, which\n * runs before the init hook. The init hook is too late for some features, such\n * as indicating support for post thumbnails.\n *\n * @since Twenty Fifteen 1.0\n *\/"}]},"twentyfifteen_widgets_init":{"name":"twentyfifteen_widgets_init","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register widget area.\n *\n * @since Twenty Fifteen 1.0\n *\n * @link https:\/\/codex.wordpress.org\/Function_Reference\/register_sidebar\n *\/"}]},"twentyfifteen_fonts_url":{"name":"twentyfifteen_fonts_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register Google fonts for Twenty Fifteen.\n *\n * @since Twenty Fifteen 1.0\n *\n * @return string Google fonts URL for the theme.\n *\/"}]},"twentyfifteen_javascript_detection":{"name":"twentyfifteen_javascript_detection","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * JavaScript Detection.\n *\n * Adds a `js` class to the root `<html>` element when JavaScript is detected.\n *\n * @since Twenty Fifteen 1.1\n *\/"}]},"twentyfifteen_scripts":{"name":"twentyfifteen_scripts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueue scripts and styles.\n *\n * @since Twenty Fifteen 1.0\n *\/"}]},"twentyfifteen_resource_hints":{"name":"twentyfifteen_resource_hints","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$urls","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$relation_type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add preconnect for Google Fonts.\n *\n * @since Twenty Fifteen 1.7\n *\n * @param array   $urls          URLs to print for resource hints.\n * @param string  $relation_type The relation type the URLs are printed.\n * @return array URLs to print for resource hints.\n *\/"}]},"twentyfifteen_post_nav_background":{"name":"twentyfifteen_post_nav_background","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add featured image as background image to post navigation elements.\n *\n * @since Twenty Fifteen 1.0\n *\n * @see wp_add_inline_style()\n *\/"}]},"twentyfifteen_nav_description":{"name":"twentyfifteen_nav_description","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$item_output","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$item","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display descriptions in main navigation.\n *\n * @since Twenty Fifteen 1.0\n *\n * @param string  $item_output The menu item output.\n * @param WP_Post $item        Menu item object.\n * @param int     $depth       Depth of the menu.\n * @param array   $args        wp_nav_menu() arguments.\n * @return string Menu item with possible description.\n *\/"}]},"twentyfifteen_search_form_modify":{"name":"twentyfifteen_search_form_modify","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$html","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a `screen-reader-text` class to the search form's submit button.\n *\n * @since Twenty Fifteen 1.0\n *\n * @param string $html Search form HTML.\n * @return string Modified search form HTML.\n *\/"}]},"twentyfifteen_customize_register":{"name":"twentyfifteen_customize_register","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_customize","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add postMessage support for site title and description for the Customizer.\n *\n * @since Twenty Fifteen 1.0\n *\n * @param WP_Customize_Manager $wp_customize Customizer object.\n *\/"},{"phpdoc":"\/**\n * Twenty Fifteen Customizer functionality\n *\n * @package WordPress\n * @subpackage Twenty_Fifteen\n * @since Twenty Fifteen 1.0\n *\/"}]},"twentyfifteen_customize_partial_blogname":{"name":"twentyfifteen_customize_partial_blogname","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the site title for the selective refresh partial.\n *\n * @since Twenty Fifteen 1.5\n * @see twentyfifteen_customize_register()\n *\n * @return void\n *\/"}]},"twentyfifteen_customize_partial_blogdescription":{"name":"twentyfifteen_customize_partial_blogdescription","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the site tagline for the selective refresh partial.\n *\n * @since Twenty Fifteen 1.5\n * @see twentyfifteen_customize_register()\n *\n * @return void\n *\/"}]},"twentyfifteen_get_color_schemes":{"name":"twentyfifteen_get_color_schemes","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register color schemes for Twenty Fifteen.\n *\n * Can be filtered with {@see 'twentyfifteen_color_schemes'}.\n *\n * The order of colors in a colors array:\n * 1. Main Background Color.\n * 2. Sidebar Background Color.\n * 3. Box Background Color.\n * 4. Main Text and Link Color.\n * 5. Sidebar Text and Link Color.\n * 6. Meta Box Background Color.\n *\n * @since Twenty Fifteen 1.0\n *\n * @return array An associative array of color scheme options.\n *\/"}]},"twentyfifteen_get_color_scheme":{"name":"twentyfifteen_get_color_scheme","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Get the current Twenty Fifteen color scheme.\n *\n * @since Twenty Fifteen 1.0\n *\n * @return array An associative array of either the current or default color scheme hex values.\n *\/"}]},"twentyfifteen_get_color_scheme_choices":{"name":"twentyfifteen_get_color_scheme_choices","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns an array of color scheme choices registered for Twenty Fifteen.\n *\n * @since Twenty Fifteen 1.0\n *\n * @return array Array of color schemes.\n *\/"}]},"twentyfifteen_sanitize_color_scheme":{"name":"twentyfifteen_sanitize_color_scheme","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitization callback for color schemes.\n *\n * @since Twenty Fifteen 1.0\n *\n * @param string $value Color scheme name value.\n * @return string Color scheme name.\n *\/"}]},"twentyfifteen_color_scheme_css":{"name":"twentyfifteen_color_scheme_css","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueues front-end CSS for color scheme.\n *\n * @since Twenty Fifteen 1.0\n *\n * @see wp_add_inline_style()\n *\/"}]},"twentyfifteen_customize_control_js":{"name":"twentyfifteen_customize_control_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Binds JS listener to make Customizer color_scheme control.\n *\n * Passes color scheme data as colorScheme global.\n *\n * @since Twenty Fifteen 1.0\n *\/"}]},"twentyfifteen_customize_preview_js":{"name":"twentyfifteen_customize_preview_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Binds JS handlers to make the Customizer preview reload changes asynchronously.\n *\n * @since Twenty Fifteen 1.0\n *\/"}]},"twentyfifteen_get_color_scheme_css":{"name":"twentyfifteen_get_color_scheme_css","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$colors","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Returns CSS for the color schemes.\n *\n * @since Twenty Fifteen 1.0\n *\n * @param array $colors Color scheme colors.\n * @return string Color scheme CSS.\n *\/"}]},"twentyfifteen_color_scheme_css_template":{"name":"twentyfifteen_color_scheme_css_template","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output an Underscore template for generating CSS for the color scheme.\n *\n * The template generates the css dynamically for instant display in the Customizer\n * preview.\n *\n * @since Twenty Fifteen 1.0\n *\/"}]},"twentyfifteen_custom_header_setup":{"name":"twentyfifteen_custom_header_setup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set up the WordPress core custom header feature.\n *\n * @uses twentyfifteen_header_style()\n *\/"},{"phpdoc":"\/**\n * Custom Header functionality for Twenty Fifteen\n *\n * @package WordPress\n * @subpackage Twenty_Fifteen\n * @since Twenty Fifteen 1.0\n *\/"}]},"twentyfifteen_hex2rgb":{"name":"twentyfifteen_hex2rgb","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$color","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Convert HEX to RGB.\n *\n * @since Twenty Fifteen 1.0\n *\n * @param string $color The original color, in 3- or 6-digit hexadecimal form.\n * @return array Array containing RGB (red, green, and blue) values for the given\n *               HEX code, empty array otherwise.\n *\/"}]},"twentyfifteen_header_style":{"name":"twentyfifteen_header_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Styles the header image and text displayed on the blog.\n *\n * @since Twenty Fifteen 1.0\n *\n * @see twentyfifteen_custom_header_setup()\n *\/"}]},"twentyfifteen_header_background_color_css":{"name":"twentyfifteen_header_background_color_css","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueues front-end CSS for the header background color.\n *\n * @since Twenty Fifteen 1.0\n *\n * @see wp_add_inline_style()\n *\/"}]},"twentyfifteen_sidebar_text_color_css":{"name":"twentyfifteen_sidebar_text_color_css","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueues front-end CSS for the sidebar text color.\n *\n * @since Twenty Fifteen 1.0\n *\/"}]},"twentyfifteen_comment_nav":{"name":"twentyfifteen_comment_nav","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display navigation to next\/previous comments when applicable.\n *\n * @since Twenty Fifteen 1.0\n *\/"}]},"twentyfifteen_entry_meta":{"name":"twentyfifteen_entry_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prints HTML with meta information for the categories, tags.\n *\n * @since Twenty Fifteen 1.0\n *\/"}]},"twentyfifteen_categorized_blog":{"name":"twentyfifteen_categorized_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Determine whether blog\/site has more than one category.\n *\n * @since Twenty Fifteen 1.0\n *\n * @return bool True of there is more than one category, false otherwise.\n *\/"}]},"twentyfifteen_category_transient_flusher":{"name":"twentyfifteen_category_transient_flusher","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Flush out the transients used in {@see twentyfifteen_categorized_blog()}.\n *\n * @since Twenty Fifteen 1.0\n *\/"}]},"twentyfifteen_post_thumbnail":{"name":"twentyfifteen_post_thumbnail","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display an optional post thumbnail.\n *\n * Wraps the post thumbnail in an anchor element on index views, or a div\n * element when on single views.\n *\n * @since Twenty Fifteen 1.0\n *\/"}]},"twentyfifteen_get_link_url":{"name":"twentyfifteen_get_link_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return the post URL.\n *\n * Falls back to the post permalink if no URL is found in the post.\n *\n * @since Twenty Fifteen 1.0\n *\n * @see get_url_in_content()\n *\n * @return string The Link format URL.\n *\/"}]},"twentyfifteen_excerpt_more":{"name":"twentyfifteen_excerpt_more","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$more","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Replaces \"[...]\" (appended to automatically generated excerpts) with ... and a 'Continue reading' link.\n *\n * @since Twenty Fifteen 1.0\n *\n * @return string 'Continue reading' link prepended with an ellipsis.\n *\/"}]},"twentyfifteen_the_custom_logo":{"name":"twentyfifteen_the_custom_logo","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays the optional custom logo.\n *\n * Does nothing if the custom logo is not available.\n *\n * @since Twenty Fifteen 1.5\n *\/"}]},"twentyfifteen_switch_theme":{"name":"twentyfifteen_switch_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Twenty Fifteen back compat functionality\n *\n * Prevents Twenty Fifteen from running on WordPress versions prior to 4.1,\n * since this theme is not meant to be backward compatible beyond that and\n * relies on many newer functions and markup changes introduced in 4.1.\n *\n * @package WordPress\n * @subpackage Twenty_Fifteen\n * @since Twenty Fifteen 1.0\n *\/"},{"phpdoc":"\/**\n * Prevent switching to Twenty Fifteen on old versions of WordPress.\n *\n * Switches to the default theme.\n *\n * @since Twenty Fifteen 1.0\n *\/"}]},"twentyfifteen_upgrade_notice":{"name":"twentyfifteen_upgrade_notice","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add message for unsuccessful theme switch.\n *\n * Prints an update nag after an unsuccessful attempt to switch to\n * Twenty Fifteen on WordPress versions prior to 4.1.\n *\n * @since Twenty Fifteen 1.0\n *\/"}]},"twentyfifteen_customize":{"name":"twentyfifteen_customize","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prevent the Customizer from being loaded on WordPress versions prior to 4.1.\n *\n * @since Twenty Fifteen 1.0\n *\/"}]},"twentyfifteen_preview":{"name":"twentyfifteen_preview","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prevent the Theme Preview from being loaded on WordPress versions prior to 4.1.\n *\n * @since Twenty Fifteen 1.0\n *\/"}]},"twentyfourteen_setup":{"name":"twentyfourteen_setup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Twenty Fourteen setup.\n *\n * Set up theme defaults and registers support for various WordPress features.\n *\n * Note that this function is hooked into the after_setup_theme hook, which\n * runs before the init hook. The init hook is too late for some features, such\n * as indicating support post thumbnails.\n *\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_content_width":{"name":"twentyfourteen_content_width","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adjust content_width value for image attachment template.\n *\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_get_featured_posts":{"name":"twentyfourteen_get_featured_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Getter function for Featured Content Plugin.\n *\n * @since Twenty Fourteen 1.0\n *\n * @return array An array of WP_Post objects.\n *\/"}]},"twentyfourteen_has_featured_posts":{"name":"twentyfourteen_has_featured_posts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * A helper conditional function that returns a boolean value.\n *\n * @since Twenty Fourteen 1.0\n *\n * @return bool Whether there are featured posts.\n *\/"}]},"twentyfourteen_widgets_init":{"name":"twentyfourteen_widgets_init","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register three Twenty Fourteen widget areas.\n *\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_font_url":{"name":"twentyfourteen_font_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register Lato Google font for Twenty Fourteen.\n *\n * @since Twenty Fourteen 1.0\n *\n * @return string\n *\/"}]},"twentyfourteen_scripts":{"name":"twentyfourteen_scripts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueue scripts and styles for the front end.\n *\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_admin_fonts":{"name":"twentyfourteen_admin_fonts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueue Google fonts style to admin screen for custom header display.\n *\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_resource_hints":{"name":"twentyfourteen_resource_hints","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$urls","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$relation_type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add preconnect for Google Fonts.\n *\n * @since Twenty Fourteen 1.9\n *\n * @param array   $urls          URLs to print for resource hints.\n * @param string  $relation_type The relation type the URLs are printed.\n * @return array URLs to print for resource hints.\n *\/"}]},"twentyfourteen_the_attached_image":{"name":"twentyfourteen_the_attached_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print the attached image with a link to the next attached image.\n *\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_list_authors":{"name":"twentyfourteen_list_authors","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print a list of all site contributors who published at least one post.\n *\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_body_classes":{"name":"twentyfourteen_body_classes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$classes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Extend the default WordPress body classes.\n *\n * Adds body classes to denote:\n * 1. Single or multiple authors.\n * 2. Presence of header image except in Multisite signup and activate pages.\n * 3. Index views.\n * 4. Full-width content layout.\n * 5. Presence of footer widgets.\n * 6. Single views.\n * 7. Featured content layout.\n *\n * @since Twenty Fourteen 1.0\n *\n * @param array $classes A list of existing body class values.\n * @return array The filtered body class list.\n *\/"}]},"twentyfourteen_post_classes":{"name":"twentyfourteen_post_classes","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$classes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Extend the default WordPress post classes.\n *\n * Adds a post class to denote:\n * Non-password protected page with a post thumbnail.\n *\n * @since Twenty Fourteen 1.0\n *\n * @param array $classes A list of existing post class values.\n * @return array The filtered post class list.\n *\/"}]},"twentyfourteen_wp_title":{"name":"twentyfourteen_wp_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sep","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create a nicely formatted and more specific title element text for output\n * in head of document, based on current view.\n *\n * @since Twenty Fourteen 1.0\n *\n * @global int $paged WordPress archive pagination page count.\n * @global int $page  WordPress paginated post page count.\n *\n * @param string $title Default title text for current view.\n * @param string $sep Optional separator.\n * @return string The filtered title.\n *\/"}]},"twentyfourteen_customize_register":{"name":"twentyfourteen_customize_register","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_customize","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Implement Customizer additions and adjustments.\n *\n * @since Twenty Fourteen 1.0\n *\n * @param WP_Customize_Manager $wp_customize Customizer object.\n *\/"},{"phpdoc":"\/**\n * Twenty Fourteen Customizer support\n *\n * @package WordPress\n * @subpackage Twenty_Fourteen\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_customize_partial_blogname":{"name":"twentyfourteen_customize_partial_blogname","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the site title for the selective refresh partial.\n *\n * @since Twenty Fourteen 1.7\n * @see twentyfourteen_customize_register()\n *\n * @return void\n *\/"}]},"twentyfourteen_customize_partial_blogdescription":{"name":"twentyfourteen_customize_partial_blogdescription","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the site tagline for the selective refresh partial.\n *\n * @since Twenty Fourteen 1.7\n * @see twentyfourteen_customize_register()\n *\n * @return void\n *\/"}]},"twentyfourteen_sanitize_layout":{"name":"twentyfourteen_sanitize_layout","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$layout","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Sanitize the Featured Content layout value.\n *\n * @since Twenty Fourteen 1.0\n *\n * @param string $layout Layout type.\n * @return string Filtered layout type (grid|slider).\n *\/"}]},"twentyfourteen_customize_preview_js":{"name":"twentyfourteen_customize_preview_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Bind JS handlers to make Customizer preview reload changes asynchronously.\n *\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_contextual_help":{"name":"twentyfourteen_contextual_help","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add contextual help to the Themes and Post edit screens.\n *\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_custom_header_setup":{"name":"twentyfourteen_custom_header_setup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set up the WordPress core custom header settings.\n *\n * @since Twenty Fourteen 1.0\n *\n * @uses twentyfourteen_header_style()\n * @uses twentyfourteen_admin_header_style()\n * @uses twentyfourteen_admin_header_image()\n *\/"},{"phpdoc":"\/**\n * Implement Custom Header functionality for Twenty Fourteen\n *\n * @package WordPress\n * @subpackage Twenty_Fourteen\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_header_style":{"name":"twentyfourteen_header_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Styles the header image and text displayed on the blog\n *\n * @see twentyfourteen_custom_header_setup().\n *\n *\/"}]},"twentyfourteen_admin_header_style":{"name":"twentyfourteen_admin_header_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Style the header image displayed on the Appearance > Header screen.\n *\n * @see twentyfourteen_custom_header_setup()\n *\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_admin_header_image":{"name":"twentyfourteen_admin_header_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Create the custom header image markup displayed on the Appearance > Header screen.\n *\n * @see twentyfourteen_custom_header_setup()\n *\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_paging_nav":{"name":"twentyfourteen_paging_nav","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display navigation to next\/previous set of posts when applicable.\n *\n * @since Twenty Fourteen 1.0\n *\n * @global WP_Query   $wp_query   WordPress Query object.\n * @global WP_Rewrite $wp_rewrite WordPress Rewrite object.\n *\/"}]},"twentyfourteen_post_nav":{"name":"twentyfourteen_post_nav","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display navigation to next\/previous post when applicable.\n *\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_posted_on":{"name":"twentyfourteen_posted_on","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print HTML with meta information for the current post-date\/time and author.\n *\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_categorized_blog":{"name":"twentyfourteen_categorized_blog","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Find out if blog has more than one category.\n *\n * @since Twenty Fourteen 1.0\n *\n * @return boolean true if blog has more than 1 category\n *\/"}]},"twentyfourteen_category_transient_flusher":{"name":"twentyfourteen_category_transient_flusher","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Flush out the transients used in twentyfourteen_categorized_blog.\n *\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_post_thumbnail":{"name":"twentyfourteen_post_thumbnail","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Display an optional post thumbnail.\n *\n * Wraps the post thumbnail in an anchor element on index\n * views, or a div element when on single views.\n *\n * @since Twenty Fourteen 1.0\n * @since Twenty Fourteen 1.4 Was made 'pluggable', or overridable.\n *\/"}]},"twentyfourteen_excerpt_more":{"name":"twentyfourteen_excerpt_more","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$more","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Replaces \"[...]\" (appended to automatically generated excerpts) with ...\n * and a Continue reading link.\n *\n * @since Twenty Fourteen 1.3\n *\n * @param string $more Default Read More excerpt link.\n * @return string Filtered Read More excerpt link.\n *\/"}]},"twentyfourteen_switch_theme":{"name":"twentyfourteen_switch_theme","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Twenty Fourteen back compat functionality\n *\n * Prevents Twenty Fourteen from running on WordPress versions prior to 3.6,\n * since this theme is not meant to be backward compatible beyond that\n * and relies on many newer functions and markup changes introduced in 3.6.\n *\n * @package WordPress\n * @subpackage Twenty_Fourteen\n * @since Twenty Fourteen 1.0\n *\/"},{"phpdoc":"\/**\n * Prevent switching to Twenty Fourteen on old versions of WordPress.\n *\n * Switches to the default theme.\n *\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_upgrade_notice":{"name":"twentyfourteen_upgrade_notice","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add message for unsuccessful theme switch.\n *\n * Prints an update nag after an unsuccessful attempt to switch to\n * Twenty Fourteen on WordPress versions prior to 3.6.\n *\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_customize":{"name":"twentyfourteen_customize","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prevent the Customizer from being loaded on WordPress versions prior to 3.6.\n *\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentyfourteen_preview":{"name":"twentyfourteen_preview","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Prevent the Theme Preview from being loaded on WordPress versions prior to 3.4.\n *\n * @since Twenty Fourteen 1.0\n *\/"}]},"twentytwelve_setup":{"name":"twentytwelve_setup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Twenty Twelve setup.\n *\n * Sets up theme defaults and registers the various WordPress features that\n * Twenty Twelve supports.\n *\n * @uses load_theme_textdomain() For translation\/localization support.\n * @uses add_editor_style() To add a Visual Editor stylesheet.\n * @uses add_theme_support() To add support for post thumbnails, automatic feed links,\n * \tcustom background, and post formats.\n * @uses register_nav_menu() To add support for navigation menus.\n * @uses set_post_thumbnail_size() To set a custom post thumbnail size.\n *\n * @since Twenty Twelve 1.0\n *\/"}]},"twentytwelve_get_font_url":{"name":"twentytwelve_get_font_url","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return the Google font stylesheet URL if available.\n *\n * The use of Open Sans by default is localized. For languages that use\n * characters not supported by the font, the font can be disabled.\n *\n * @since Twenty Twelve 1.2\n *\n * @return string Font stylesheet or empty string if disabled.\n *\/"}]},"twentytwelve_scripts_styles":{"name":"twentytwelve_scripts_styles","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueue scripts and styles for front end.\n *\n * @since Twenty Twelve 1.0\n *\/"}]},"twentytwelve_resource_hints":{"name":"twentytwelve_resource_hints","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$urls","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$relation_type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add preconnect for Google Fonts.\n *\n * @since Twenty Twelve 2.2\n *\n * @param array   $urls          URLs to print for resource hints.\n * @param string  $relation_type The relation type the URLs are printed.\n * @return array URLs to print for resource hints.\n *\/"}]},"twentytwelve_mce_css":{"name":"twentytwelve_mce_css","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$mce_css","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filter TinyMCE CSS path to include Google Fonts.\n *\n * Adds additional stylesheets to the TinyMCE editor if needed.\n *\n * @uses twentytwelve_get_font_url() To get the Google Font stylesheet URL.\n *\n * @since Twenty Twelve 1.2\n *\n * @param string $mce_css CSS path to load in TinyMCE.\n * @return string Filtered CSS path.\n *\/"}]},"twentytwelve_wp_title":{"name":"twentytwelve_wp_title","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sep","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filter the page title.\n *\n * Creates a nicely formatted and more specific title element text\n * for output in head of document, based on current view.\n *\n * @since Twenty Twelve 1.0\n *\n * @param string $title Default title text for current view.\n * @param string $sep Optional separator.\n * @return string Filtered title.\n *\/"}]},"twentytwelve_page_menu_args":{"name":"twentytwelve_page_menu_args","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Filter the page menu arguments.\n *\n * Makes our wp_nav_menu() fallback -- wp_page_menu() -- show a home link.\n *\n * @since Twenty Twelve 1.0\n *\/"}]},"twentytwelve_widgets_init":{"name":"twentytwelve_widgets_init","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register sidebars.\n *\n * Registers our main widget area and the front page widget areas.\n *\n * @since Twenty Twelve 1.0\n *\/"}]},"twentytwelve_content_nav":{"name":"twentytwelve_content_nav","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$html_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Displays navigation to next\/previous pages when applicable.\n *\n * @since Twenty Twelve 1.0\n *\/"}]},"twentytwelve_comment":{"name":"twentytwelve_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Template for comments and pingbacks.\n *\n * To override this walker in a child theme without modifying the comments template\n * simply create your own twentytwelve_comment(), and that function will be used instead.\n *\n * Used as a callback by wp_list_comments() for displaying the comments.\n *\n * @since Twenty Twelve 1.0\n *\/"}]},"twentytwelve_entry_meta":{"name":"twentytwelve_entry_meta","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set up post entry meta.\n *\n * Prints HTML with meta information for current post: categories, tags, permalink, author, and date.\n *\n * Create your own twentytwelve_entry_meta() to override in a child theme.\n *\n * @since Twenty Twelve 1.0\n *\/"}]},"twentytwelve_body_class":{"name":"twentytwelve_body_class","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$classes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Extend the default WordPress body classes.\n *\n * Extends the default WordPress body class to denote:\n * 1. Using a full-width layout, when no active widgets in the sidebar\n *    or full-width template.\n * 2. Front Page template: thumbnail in use and number of sidebars for\n *    widget areas.\n * 3. White or empty background color to change the layout and spacing.\n * 4. Custom fonts enabled.\n * 5. Single or multiple authors.\n *\n * @since Twenty Twelve 1.0\n *\n * @param array $classes Existing class values.\n * @return array Filtered class values.\n *\/"}]},"twentytwelve_content_width":{"name":"twentytwelve_content_width","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Adjust content width in certain contexts.\n *\n * Adjusts content_width value for full-width and single image attachment\n * templates, and when there are no active widgets in the sidebar.\n *\n * @since Twenty Twelve 1.0\n *\/"}]},"twentytwelve_customize_register":{"name":"twentytwelve_customize_register","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$wp_customize","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register postMessage support.\n *\n * Add postMessage support for site title and description for the Customizer.\n *\n * @since Twenty Twelve 1.0\n *\n * @param WP_Customize_Manager $wp_customize Customizer object.\n *\/"}]},"twentytwelve_customize_partial_blogname":{"name":"twentytwelve_customize_partial_blogname","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the site title for the selective refresh partial.\n *\n * @since Twenty Twelve 2.0\n * @see twentytwelve_customize_register()\n *\n * @return void\n *\/"}]},"twentytwelve_customize_partial_blogdescription":{"name":"twentytwelve_customize_partial_blogdescription","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Render the site tagline for the selective refresh partial.\n *\n * @since Twenty Twelve 2.0\n * @see twentytwelve_customize_register()\n *\n * @return void\n *\/"}]},"twentytwelve_customize_preview_js":{"name":"twentytwelve_customize_preview_js","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Enqueue Javascript postMessage handlers for the Customizer.\n *\n * Binds JS handlers to make the Customizer preview reload changes asynchronously.\n *\n * @since Twenty Twelve 1.0\n *\/"}]},"twentytwelve_custom_header_setup":{"name":"twentytwelve_custom_header_setup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set up the WordPress core custom header arguments and settings.\n *\n * @uses add_theme_support() to register support for 3.4 and up.\n * @uses twentytwelve_header_style() to style front end.\n * @uses twentytwelve_admin_header_style() to style wp-admin form.\n * @uses twentytwelve_admin_header_image() to add custom markup to wp-admin form.\n *\n * @since Twenty Twelve 1.0\n *\/"},{"phpdoc":"\/**\n * Implement an optional custom header for Twenty Twelve\n *\n * See https:\/\/codex.wordpress.org\/Custom_Headers\n *\n * @package WordPress\n * @subpackage Twenty_Twelve\n * @since Twenty Twelve 1.0\n *\/"}]},"twentytwelve_custom_header_fonts":{"name":"twentytwelve_custom_header_fonts","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Load our special font CSS file.\n *\n * @since Twenty Twelve 1.2\n *\/"}]},"twentytwelve_header_style":{"name":"twentytwelve_header_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Style the header text displayed on the blog.\n *\n * get_header_textcolor() options: 515151 is default, hide text (returns 'blank'), or any hex value.\n *\n * @since Twenty Twelve 1.0\n *\/"}]},"twentytwelve_admin_header_style":{"name":"twentytwelve_admin_header_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Style the header image displayed on the Appearance > Header admin panel.\n *\n * @since Twenty Twelve 1.0\n *\/"}]},"twentytwelve_admin_header_image":{"name":"twentytwelve_admin_header_image","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Output markup to be displayed on the Appearance > Header admin panel.\n *\n * This callback overrides the default markup displayed there.\n *\n * @since Twenty Twelve 1.0\n *\/"}]},"twentyten_setup":{"name":"twentyten_setup","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set up theme defaults and registers support for various WordPress features.\n *\n * Note that this function is hooked into the after_setup_theme hook, which runs\n * before the init hook. The init hook is too late for some features, such as indicating\n * support post thumbnails.\n *\n * To override twentyten_setup() in a child theme, add your own twentyten_setup to your child theme's\n * functions.php file.\n *\n * @uses add_theme_support()        To add support for post thumbnails, custom headers and backgrounds, and automatic feed links.\n * @uses register_nav_menus()       To add support for navigation menus.\n * @uses add_editor_style()         To style the visual editor.\n * @uses load_theme_textdomain()    For translation\/localization support.\n * @uses register_default_headers() To register the default custom header images provided with the theme.\n * @uses set_post_thumbnail_size()  To set a custom post thumbnail size.\n *\n * @since Twenty Ten 1.0\n *\/"}]},"twentyten_admin_header_style":{"name":"twentyten_admin_header_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Style the header image displayed on the Appearance > Header admin panel.\n *\n * Referenced via add_custom_image_header() in twentyten_setup().\n *\n * @since Twenty Ten 1.0\n *\/"}]},"twentyten_page_menu_args":{"name":"twentyten_page_menu_args","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Show a home link for our wp_nav_menu() fallback, wp_page_menu().\n *\n * To override this in a child theme, remove the filter and optionally add\n * your own function tied to the wp_page_menu_args filter hook.\n *\n * @since Twenty Ten 1.0\n *\n * @param array $args An optional array of arguments. @see wp_page_menu()\n *\/"}]},"twentyten_excerpt_length":{"name":"twentyten_excerpt_length","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$length","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Set the post excerpt length to 40 characters.\n *\n * To override this length in a child theme, remove the filter and add your own\n * function tied to the excerpt_length filter hook.\n *\n * @since Twenty Ten 1.0\n *\n * @param int $length The number of excerpt characters.\n * @return int The filtered number of excerpt characters.\n *\/"}]},"twentyten_continue_reading_link":{"name":"twentyten_continue_reading_link","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Return a \"Continue Reading\" link for excerpts.\n *\n * @since Twenty Ten 1.0\n *\n * @return string \"Continue Reading\" link.\n *\/"}]},"twentyten_auto_excerpt_more":{"name":"twentyten_auto_excerpt_more","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$more","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Replace \"[...]\" with an ellipsis and twentyten_continue_reading_link().\n *\n * \"[...]\" is appended to automatically generated excerpts.\n *\n * To override this in a child theme, remove the filter and add your own\n * function tied to the excerpt_more filter hook.\n *\n * @since Twenty Ten 1.0\n *\n * @param string $more The Read More text.\n * @return string An ellipsis.\n *\/"}]},"twentyten_custom_excerpt_more":{"name":"twentyten_custom_excerpt_more","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Add a pretty \"Continue Reading\" link to custom post excerpts.\n *\n * To override this link in a child theme, remove the filter and add your own\n * function tied to the get_the_excerpt filter hook.\n *\n * @since Twenty Ten 1.0\n *\n * @param string $output The \"Coninue Reading\" link.\n * @return string Excerpt with a pretty \"Continue Reading\" link.\n *\/"}]},"twentyten_remove_gallery_css":{"name":"twentyten_remove_gallery_css","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$css","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Deprecated way to remove inline styles printed when the gallery shortcode is used.\n *\n * This function is no longer needed or used. Use the use_default_gallery_style\n * filter instead, as seen above.\n *\n * @since Twenty Ten 1.0\n * @deprecated Deprecated in Twenty Ten 1.2 for WordPress 3.1\n *\n * @return string The gallery style filter, with the styles themselves removed.\n *\/"}]},"twentyten_comment":{"name":"twentyten_comment","returntype":"one","reference":false,"returntypehints":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Template for comments and pingbacks.\n *\n * To override this walker in a child theme without modifying the comments template\n * simply create your own twentyten_comment(), and that function will be used instead.\n *\n * Used as a callback by wp_list_comments() for displaying the comments.\n *\n * @since Twenty Ten 1.0\n *\n * @param object $comment The comment object.\n * @param array  $args    An array of arguments. @see get_comment_reply_link()\n * @param int    $depth   The depth of the comment.\n *\/"}]},"twentyten_widgets_init":{"name":"twentyten_widgets_init","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Register widgetized areas, including two sidebars and four widget-ready columns in the footer.\n *\n * To override twentyten_widgets_init() in a child theme, remove the action hook and add your own\n * function tied to the init hook.\n *\n * @since Twenty Ten 1.0\n *\n * @uses register_sidebar()\n *\/"}]},"twentyten_remove_recent_comments_style":{"name":"twentyten_remove_recent_comments_style","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Remove the default styles that are packaged with the Recent Comments widget.\n *\n * To override this in a child theme, remove the filter and optionally add your own\n * function tied to the widgets_init action hook.\n *\n * This function uses a filter (show_recent_comments_widget_style) new in WordPress 3.1\n * to remove the default style. Using Twenty Ten 1.2 in WordPress 3.0 will show the styles,\n * but they won't have any effect on the widget in default Twenty Ten styling.\n *\n * @since Twenty Ten 1.0\n *\/"}]},"twentyten_posted_on":{"name":"twentyten_posted_on","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print HTML with meta information for the current post-date\/time and author.\n *\n * @since Twenty Ten 1.0\n *\/"}]},"twentyten_posted_in":{"name":"twentyten_posted_in","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Print HTML with meta information for the current post (category, tags and permalink).\n *\n * @since Twenty Ten 1.0\n *\/"}]},"twentyten_get_gallery_images":{"name":"twentyten_get_gallery_images","returntype":"one","reference":false,"returntypehints":[],"arguments":[],"attributes":[],"phpdoc":[{"phpdoc":"\/**\n * Retrieve the IDs for images in a gallery.\n *\n * @uses get_post_galleries() First, if available. Falls back to shortcode parsing,\n *                            then as last option uses a get_posts() call.\n *\n * @since Twenty Ten 1.6.\n *\n * @return array List of image IDs from the post gallery.\n *\/"}]}},"traits":[],"classes":{"stringextractor":{"name":"StringExtractor","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$rules":{"name":"$rules","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_prefix":{"name":"$comment_prefix","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$rules","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"extract_from_directory":{"name":"extract_from_directory","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excludes","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$includes","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$prefix","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"extract_from_file":{"name":"extract_from_file","phpdoc":[],"attributes":[],"arguments":[{"name":"$file_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$prefix","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"does_file_name_match":{"name":"does_file_name_match","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excludes","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$includes","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"entry_from_call":{"name":"entry_from_call","phpdoc":[],"attributes":[],"arguments":[{"name":"$call","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$file_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"extract_from_code":{"name":"extract_from_code","phpdoc":[],"attributes":[],"arguments":[{"name":"$code","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$file_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"find_function_calls":{"name":"find_function_calls","phpdoc":[],"attributes":[],"arguments":[{"name":"$function_names","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$code","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"addtextdomain":{"name":"AddTextdomain","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$modified_contents":{"name":"$modified_contents","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$funcs":{"name":"$funcs","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"usage":{"name":"usage","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"process_file":{"name":"process_file","phpdoc":[],"attributes":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$source_filename","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$inplace","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"process_string":{"name":"process_string","phpdoc":[],"attributes":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$string","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"process_tokens":{"name":"process_tokens","phpdoc":[],"attributes":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tokens","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"notgettexted":{"name":"NotGettexted","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$enable_logging":{"name":"$enable_logging","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$STAGE_OUTSIDE":{"name":"$STAGE_OUTSIDE","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$STAGE_START_COMMENT":{"name":"$STAGE_START_COMMENT","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$STAGE_WHITESPACE_BEFORE":{"name":"$STAGE_WHITESPACE_BEFORE","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$STAGE_STRING":{"name":"$STAGE_STRING","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$STAGE_WHITESPACE_AFTER":{"name":"$STAGE_WHITESPACE_AFTER","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$STAGE_END_COMMENT":{"name":"$STAGE_END_COMMENT","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$commands":{"name":"$commands","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"logmsg":{"name":"logmsg","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"stderr":{"name":"stderr","phpdoc":[],"attributes":[],"arguments":[{"name":"$msg","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$nl","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"cli_die":{"name":"cli_die","phpdoc":[],"attributes":[],"arguments":[{"name":"$msg","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"unchanged_token":{"name":"unchanged_token","phpdoc":[],"attributes":[],"arguments":[{"name":"$token","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$s","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ignore_token":{"name":"ignore_token","phpdoc":[],"attributes":[],"arguments":[{"name":"$token","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$s","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"list_php_files":{"name":"list_php_files","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"make_string_aggregator":{"name":"make_string_aggregator","phpdoc":[],"attributes":[],"arguments":[{"name":"$global_array_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filename","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"make_mo_replacer":{"name":"make_mo_replacer","phpdoc":[],"attributes":[],"arguments":[{"name":"$global_mo_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"walk_tokens":{"name":"walk_tokens","phpdoc":[],"attributes":[],"arguments":[{"name":"$tokens","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$string_action","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$other_action","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$register_action","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"command_extract":{"name":"command_extract","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"command_replace":{"name":"command_replace","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"usage":{"name":"usage","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"cli":{"name":"cli","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"potextmeta":{"name":"PotExtMeta","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$headers":{"name":"$headers","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"usage":{"name":"usage","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"load_from_file":{"name":"load_from_file","phpdoc":[],"attributes":[],"arguments":[{"name":"$ext_filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"append":{"name":"append","phpdoc":[],"attributes":[],"arguments":[{"name":"$ext_filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$pot_filename","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"makepot":{"name":"MakePOT","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$max_header_lines":{"name":"$max_header_lines","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$projects":{"name":"$projects","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$rules":{"name":"$rules","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ms_files":{"name":"$ms_files","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$temp_files":{"name":"$temp_files","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$meta":{"name":"$meta","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$deprecated","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__destruct":{"name":"__destruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"tempnam":{"name":"tempnam","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"realpath_missing":{"name":"realpath_missing","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"xgettext":{"name":"xgettext","phpdoc":[],"attributes":[],"arguments":[{"name":"$project","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dir","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output_file","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$placeholders","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$excludes","rank":4,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$includes","rank":5,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_generic":{"name":"wp_generic","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_frontend":{"name":"wp_frontend","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_admin":{"name":"wp_admin","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_network_admin":{"name":"wp_network_admin","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_wp_network_admin_files":{"name":"get_wp_network_admin_files","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_tz":{"name":"wp_tz","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_version":{"name":"wp_version","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_first_lines":{"name":"get_first_lines","phpdoc":[],"attributes":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$lines","rank":1,"variadic":false,"reference":false,"default":"30","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_addon_header":{"name":"get_addon_header","phpdoc":[],"attributes":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$source","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_cleanup_header_comment":{"name":"_cleanup_header_comment","phpdoc":[],"attributes":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"generic":{"name":"generic","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"guess_plugin_slug":{"name":"guess_plugin_slug","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_plugin":{"name":"wp_plugin","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$slug","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_theme":{"name":"wp_theme","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$slug","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"glotpress":{"name":"glotpress","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wporg_bb_forums":{"name":"wporg_bb_forums","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wporg_themes":{"name":"wporg_themes","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wporg_plugins":{"name":"wporg_plugins","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wporg_forums":{"name":"wporg_forums","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wordcamporg":{"name":"wordcamporg","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"rosetta":{"name":"rosetta","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"extracttest":{"name":"ExtractTest","abstract":false,"final":false,"extends":"\\phpunit_framework_testcase","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"setup":{"name":"setUp","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_with_just_a_string":{"name":"test_with_just_a_string","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_entry_from_call_simple":{"name":"test_entry_from_call_simple","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_entry_from_call_nonexisting_function":{"name":"test_entry_from_call_nonexisting_function","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_entry_from_call_too_few_args":{"name":"test_entry_from_call_too_few_args","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_entry_from_call_non_expected_null_arg":{"name":"test_entry_from_call_non_expected_null_arg","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_entry_from_call_more_args_should_be_ok":{"name":"test_entry_from_call_more_args_should_be_ok","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_entry_from_call_context":{"name":"test_entry_from_call_context","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_entry_from_call_plural":{"name":"test_entry_from_call_plural","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_entry_from_call_plural_and_context":{"name":"test_entry_from_call_plural_and_context","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_entry_from_call_extracted_comment":{"name":"test_entry_from_call_extracted_comment","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_entry_from_call_line_number":{"name":"test_entry_from_call_line_number","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_entry_from_call_zero":{"name":"test_entry_from_call_zero","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_entry_from_call_multiple":{"name":"test_entry_from_call_multiple","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_entry_from_call_multiple_first_plural_then_two_strings":{"name":"test_entry_from_call_multiple_first_plural_then_two_strings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_find_function_calls_one_arg_literal":{"name":"test_find_function_calls_one_arg_literal","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_find_function_calls_one_arg_zero":{"name":"test_find_function_calls_one_arg_zero","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_find_function_calls_one_arg_non_literal":{"name":"test_find_function_calls_one_arg_non_literal","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_find_function_calls_shouldnt_be_mistaken_by_a_class":{"name":"test_find_function_calls_shouldnt_be_mistaken_by_a_class","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_find_function_calls_2_args_bad_literal":{"name":"test_find_function_calls_2_args_bad_literal","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_find_function_calls_2_args_bad_literal_bad":{"name":"test_find_function_calls_2_args_bad_literal_bad","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_find_function_calls_1_arg_bad_concat":{"name":"test_find_function_calls_1_arg_bad_concat","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_find_function_calls_1_arg_bad_function_call":{"name":"test_find_function_calls_1_arg_bad_function_call","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_find_function_calls_2_arg_literal_bad":{"name":"test_find_function_calls_2_arg_literal_bad","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_find_function_calls_2_arg_bad_with_parens_literal":{"name":"test_find_function_calls_2_arg_bad_with_parens_literal","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_find_function_calls_with_comment":{"name":"test_find_function_calls_with_comment","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_find_function_calls_with_not_immediate_comment":{"name":"test_find_function_calls_with_not_immediate_comment","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_find_function_calls_with_not_immediate_comment_include_only_latest":{"name":"test_find_function_calls_with_not_immediate_comment_include_only_latest","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_find_function_calls_with_multi_line_comment":{"name":"test_find_function_calls_with_multi_line_comment","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_find_function_calls_with_c_style_comment":{"name":"test_find_function_calls_with_c_style_comment","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_find_function_calls_with_url_in_comment":{"name":"test_find_function_calls_with_url_in_comment","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_comment_prefix_should_be_case_insensitive":{"name":"test_comment_prefix_should_be_case_insensitive","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"notgettextedtest":{"name":"NotGettextedTest","abstract":false,"final":false,"extends":"\\phpunit_framework_testcase","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_make_string_aggregator":{"name":"test_make_string_aggregator","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_walk":{"name":"test_walk","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_replace":{"name":"test_replace","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"addtextdomaintest":{"name":"AddTextDomainTest","abstract":false,"final":false,"extends":"\\phpunit_framework_testcase","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"setup":{"name":"setUp","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_add":{"name":"test_add","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test_basic_add_textdomain":{"name":"test_basic_add_textdomain","phpdoc":[],"attributes":[],"arguments":[{"name":"$source","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$expected","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"data_textdomain_sources":{"name":"data_textdomain_sources","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"custom_image_header":{"name":"Custom_Image_Header","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$admin_header_callback":{"name":"$admin_header_callback","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$admin_image_div_callback":{"name":"$admin_image_div_callback","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$default_headers":{"name":"$default_headers","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$updated":{"name":"$updated","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$admin_header_callback","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$admin_image_div_callback","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"init":{"name":"init","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"help":{"name":"help","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"step":{"name":"step","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"js_includes":{"name":"js_includes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"css_includes":{"name":"css_includes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"take_action":{"name":"take_action","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"process_default_headers":{"name":"process_default_headers","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"show_header_selector":{"name":"show_header_selector","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"js":{"name":"js","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"js_1":{"name":"js_1","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"js_2":{"name":"js_2","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"step_1":{"name":"step_1","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"step_2":{"name":"step_2","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"step_2_manage_upload":{"name":"step_2_manage_upload","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"step_3":{"name":"step_3","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"finished":{"name":"finished","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"admin_page":{"name":"admin_page","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"attachment_fields_to_edit":{"name":"attachment_fields_to_edit","phpdoc":[],"attributes":[],"arguments":[{"name":"$form_fields","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_upload_tabs":{"name":"filter_upload_tabs","phpdoc":[],"attributes":[],"arguments":[{"name":"$tabs","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_header_image":{"name":"set_header_image","phpdoc":[],"attributes":[],"arguments":[{"name":"$choice","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_header_image":{"name":"remove_header_image","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"reset_header_image":{"name":"reset_header_image","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_header_dimensions":{"name":"get_header_dimensions","phpdoc":[],"attributes":[],"arguments":[{"name":"$dimensions","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"create_attachment_object":{"name":"create_attachment_object","phpdoc":[],"attributes":[],"arguments":[{"name":"$cropped","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent_attachment_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"insert_attachment":{"name":"insert_attachment","phpdoc":[],"attributes":[],"arguments":[{"name":"$object","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cropped","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_header_crop":{"name":"ajax_header_crop","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_header_add":{"name":"ajax_header_add","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_header_remove":{"name":"ajax_header_remove","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"customize_set_last_used":{"name":"customize_set_last_used","phpdoc":[],"attributes":[],"arguments":[{"name":"$wp_customize","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_default_header_images":{"name":"get_default_header_images","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_uploaded_header_images":{"name":"get_uploaded_header_images","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"custom_background":{"name":"Custom_Background","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$admin_header_callback":{"name":"$admin_header_callback","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$admin_image_div_callback":{"name":"$admin_image_div_callback","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$updated":{"name":"$updated","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$admin_header_callback","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$admin_image_div_callback","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"init":{"name":"init","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"admin_load":{"name":"admin_load","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"take_action":{"name":"take_action","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"admin_page":{"name":"admin_page","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handle_upload":{"name":"handle_upload","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_background_add":{"name":"ajax_background_add","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"attachment_fields_to_edit":{"name":"attachment_fields_to_edit","phpdoc":[],"attributes":[],"arguments":[{"name":"$form_fields","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_upload_tabs":{"name":"filter_upload_tabs","phpdoc":[],"attributes":[],"arguments":[{"name":"$tabs","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_set_background_image":{"name":"wp_set_background_image","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_post_comments_list_table":{"name":"WP_Post_Comments_List_Table","abstract":false,"final":false,"extends":"\\WP_Comments_List_Table","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"get_column_info":{"name":"get_column_info","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_table_classes":{"name":"get_table_classes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display":{"name":"display","phpdoc":[],"attributes":[],"arguments":[{"name":"$output_empty","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_per_page":{"name":"get_per_page","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment_status","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_terms_list_table":{"name":"WP_Terms_List_Table","abstract":false,"final":false,"extends":"\\WP_List_Table","constants":[],"properties":{"$callback_args":{"name":"$callback_args","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$level":{"name":"$level","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_user_can":{"name":"ajax_user_can","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_items":{"name":"prepare_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"has_items":{"name":"has_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"no_items":{"name":"no_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_bulk_actions":{"name":"get_bulk_actions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"current_action":{"name":"current_action","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_columns":{"name":"get_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sortable_columns":{"name":"get_sortable_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_rows_or_placeholder":{"name":"display_rows_or_placeholder","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_rows":{"name":"_rows","phpdoc":[],"attributes":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$terms","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$children","rank":2,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$start","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$per_page","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$count","rank":5,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent","rank":6,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$level","rank":7,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"single_row":{"name":"single_row","phpdoc":[],"attributes":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$level","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_cb":{"name":"column_cb","phpdoc":[],"attributes":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_name":{"name":"column_name","phpdoc":[],"attributes":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_default_primary_column_name":{"name":"get_default_primary_column_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handle_row_actions":{"name":"handle_row_actions","phpdoc":[],"attributes":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$primary","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_description":{"name":"column_description","phpdoc":[],"attributes":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_slug":{"name":"column_slug","phpdoc":[],"attributes":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_posts":{"name":"column_posts","phpdoc":[],"attributes":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_links":{"name":"column_links","phpdoc":[],"attributes":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_default":{"name":"column_default","phpdoc":[],"attributes":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"inline_edit":{"name":"inline_edit","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_users_list_table":{"name":"WP_Users_List_Table","abstract":false,"final":false,"extends":"\\WP_List_Table","constants":[],"properties":{"$site_id":{"name":"$site_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_site_users":{"name":"$is_site_users","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_user_can":{"name":"ajax_user_can","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_items":{"name":"prepare_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"no_items":{"name":"no_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_views":{"name":"get_views","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_bulk_actions":{"name":"get_bulk_actions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"extra_tablenav":{"name":"extra_tablenav","phpdoc":[],"attributes":[],"arguments":[{"name":"$which","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"current_action":{"name":"current_action","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_columns":{"name":"get_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sortable_columns":{"name":"get_sortable_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_rows":{"name":"display_rows","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"single_row":{"name":"single_row","phpdoc":[],"attributes":[],"arguments":[{"name":"$user_object","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$style","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$role","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$numposts","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_default_primary_column_name":{"name":"get_default_primary_column_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_role_list":{"name":"get_role_list","phpdoc":[],"attributes":[],"arguments":[{"name":"$user_object","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"plugin_upgrader":{"name":"Plugin_Upgrader","abstract":false,"final":false,"extends":"\\WP_Upgrader","constants":[],"properties":{"$result":{"name":"$result","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$bulk":{"name":"$bulk","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"upgrade_strings":{"name":"upgrade_strings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"install_strings":{"name":"install_strings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"install":{"name":"install","phpdoc":[],"attributes":[],"arguments":[{"name":"$package","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"upgrade":{"name":"upgrade","phpdoc":[],"attributes":[],"arguments":[{"name":"$plugin","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"bulk_upgrade":{"name":"bulk_upgrade","phpdoc":[],"attributes":[],"arguments":[{"name":"$plugins","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_package":{"name":"check_package","phpdoc":[],"attributes":[],"arguments":[{"name":"$source","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"plugin_info":{"name":"plugin_info","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"deactivate_plugin_before_upgrade":{"name":"deactivate_plugin_before_upgrade","phpdoc":[],"attributes":[],"arguments":[{"name":"$return","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$plugin","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_old_plugin":{"name":"delete_old_plugin","phpdoc":[],"attributes":[],"arguments":[{"name":"$removed","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$local_destination","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$remote_destination","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$plugin","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"bulk_plugin_upgrader_skin":{"name":"Bulk_Plugin_Upgrader_Skin","abstract":false,"final":false,"extends":"\\Bulk_Upgrader_Skin","constants":[],"properties":{"$plugin_info":{"name":"$plugin_info","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"add_strings":{"name":"add_strings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"before":{"name":"before","phpdoc":[],"attributes":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"after":{"name":"after","phpdoc":[],"attributes":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"bulk_footer":{"name":"bulk_footer","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_theme_install_list_table":{"name":"WP_Theme_Install_List_Table","abstract":false,"final":false,"extends":"\\WP_Themes_List_Table","constants":[],"properties":{"$features":{"name":"$features","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"ajax_user_can":{"name":"ajax_user_can","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_items":{"name":"prepare_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"no_items":{"name":"no_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_views":{"name":"get_views","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display":{"name":"display","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_rows":{"name":"display_rows","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"single_row":{"name":"single_row","phpdoc":[],"attributes":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"theme_installer":{"name":"theme_installer","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"theme_installer_single":{"name":"theme_installer_single","phpdoc":[],"attributes":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"install_theme_info":{"name":"install_theme_info","phpdoc":[],"attributes":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_js_vars":{"name":"_js_vars","phpdoc":[],"attributes":[],"arguments":[{"name":"$extra_args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_get_theme_status":{"name":"_get_theme_status","phpdoc":[],"attributes":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_press_this":{"name":"WP_Press_This","abstract":false,"final":false,"extends":"","constants":{"VERSION":{"name":"VERSION","value":"8","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]}},"properties":{"$version":{"name":"$version","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$images":{"name":"$images","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$embeds":{"name":"$embeds","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$domain":{"name":"$domain","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"site_settings":{"name":"site_settings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"side_load_images":{"name":"side_load_images","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$content","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"save_post":{"name":"save_post","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_category":{"name":"add_category","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"fetch_source_html":{"name":"fetch_source_html","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_limit_array":{"name":"_limit_array","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_limit_string":{"name":"_limit_string","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_limit_url":{"name":"_limit_url","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_limit_img":{"name":"_limit_img","phpdoc":[],"attributes":[],"arguments":[{"name":"$src","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_limit_embed":{"name":"_limit_embed","phpdoc":[],"attributes":[],"arguments":[{"name":"$src","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_process_meta_entry":{"name":"_process_meta_entry","phpdoc":[],"attributes":[],"arguments":[{"name":"$meta_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"source_data_fetch_fallback":{"name":"source_data_fetch_fallback","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"merge_or_fetch_data":{"name":"merge_or_fetch_data","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_editor_style":{"name":"add_editor_style","phpdoc":[],"attributes":[],"arguments":[{"name":"$styles","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"post_formats_html":{"name":"post_formats_html","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"categories_html":{"name":"categories_html","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"tags_html":{"name":"tags_html","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_embeds":{"name":"get_embeds","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_images":{"name":"get_images","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_canonical_link":{"name":"get_canonical_link","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_source_site_name":{"name":"get_source_site_name","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_suggested_title":{"name":"get_suggested_title","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_suggested_content":{"name":"get_suggested_content","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"html":{"name":"html","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_filesystem_ssh2":{"name":"WP_Filesystem_SSH2","abstract":false,"final":false,"extends":"\\WP_Filesystem_Base","constants":[],"properties":{"$link":{"name":"$link","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sftp_link":{"name":"$sftp_link","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$keys":{"name":"$keys","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$opt","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"connect":{"name":"connect","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sftp_path":{"name":"sftp_path","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"run_command":{"name":"run_command","phpdoc":[],"attributes":[],"arguments":[{"name":"$command","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$returnbool","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_contents":{"name":"get_contents","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_contents_array":{"name":"get_contents_array","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"put_contents":{"name":"put_contents","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$contents","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mode","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"cwd":{"name":"cwd","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"chdir":{"name":"chdir","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"chgrp":{"name":"chgrp","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"chmod":{"name":"chmod","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mode","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"chown":{"name":"chown","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$owner","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"owner":{"name":"owner","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getchmod":{"name":"getchmod","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"group":{"name":"group","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"copy":{"name":"copy","phpdoc":[],"attributes":[],"arguments":[{"name":"$source","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$destination","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$overwrite","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mode","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"move":{"name":"move","phpdoc":[],"attributes":[],"arguments":[{"name":"$source","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$destination","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$overwrite","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete":{"name":"delete","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"exists":{"name":"exists","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_file":{"name":"is_file","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_dir":{"name":"is_dir","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_readable":{"name":"is_readable","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_writable":{"name":"is_writable","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"atime":{"name":"atime","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mtime":{"name":"mtime","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"size":{"name":"size","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"touch":{"name":"touch","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$time","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$atime","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mkdir":{"name":"mkdir","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$chmod","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$chown","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$chgrp","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"rmdir":{"name":"rmdir","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"dirlist":{"name":"dirlist","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$include_hidden","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"file_upload_upgrader":{"name":"File_Upload_Upgrader","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$package":{"name":"$package","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$filename":{"name":"$filename","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$id":{"name":"$id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$form","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$urlholder","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"cleanup":{"name":"cleanup","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"language_pack_upgrader_skin":{"name":"Language_Pack_Upgrader_Skin","abstract":false,"final":false,"extends":"\\WP_Upgrader_Skin","constants":[],"properties":{"$language_update":{"name":"$language_update","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$done_header":{"name":"$done_header","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$done_footer":{"name":"$done_footer","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$display_footer_actions":{"name":"$display_footer_actions","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"before":{"name":"before","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"error":{"name":"error","phpdoc":[],"attributes":[],"arguments":[{"name":"$error","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"after":{"name":"after","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"bulk_footer":{"name":"bulk_footer","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"language_pack_upgrader":{"name":"Language_Pack_Upgrader","abstract":false,"final":false,"extends":"\\WP_Upgrader","constants":[],"properties":{"$result":{"name":"$result","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$bulk":{"name":"$bulk","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"async_upgrade":{"name":"async_upgrade","phpdoc":[],"attributes":[],"arguments":[{"name":"$upgrader","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"upgrade_strings":{"name":"upgrade_strings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"upgrade":{"name":"upgrade","phpdoc":[],"attributes":[],"arguments":[{"name":"$update","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"bulk_upgrade":{"name":"bulk_upgrade","phpdoc":[],"attributes":[],"arguments":[{"name":"$language_updates","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_package":{"name":"check_package","phpdoc":[],"attributes":[],"arguments":[{"name":"$source","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$remote_source","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_name_for_update":{"name":"get_name_for_update","phpdoc":[],"attributes":[],"arguments":[{"name":"$update","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"plugin_installer_skin":{"name":"Plugin_Installer_Skin","abstract":false,"final":false,"extends":"\\WP_Upgrader_Skin","constants":[],"properties":{"$api":{"name":"$api","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"before":{"name":"before","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"after":{"name":"after","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"pclzip":{"name":"PclZip","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$zipname":{"name":"$zipname","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$zip_fd":{"name":"$zip_fd","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$error_code":{"name":"$error_code","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$error_string":{"name":"$error_string","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$magic_quotes_status":{"name":"$magic_quotes_status","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_zipname","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"pclzip":{"name":"PclZip","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_zipname","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"create":{"name":"create","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_filelist","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add":{"name":"add","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_filelist","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"listcontent":{"name":"listContent","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"extract":{"name":"extract","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"extractbyindex":{"name":"extractByIndex","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_index","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete":{"name":"delete","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"deletebyindex":{"name":"deleteByIndex","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_index","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"properties":{"name":"properties","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"duplicate":{"name":"duplicate","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_archive","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"merge":{"name":"merge","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_archive_to_add","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"errorcode":{"name":"errorCode","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"errorname":{"name":"errorName","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_with_code","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"errorinfo":{"name":"errorInfo","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_full","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privcheckformat":{"name":"privCheckFormat","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_level","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privparseoptions":{"name":"privParseOptions","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_options_list","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_size","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$v_result_list","rank":2,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$v_requested_options","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privoptiondefaultthreshold":{"name":"privOptionDefaultThreshold","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_options","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privfiledescrparseatt":{"name":"privFileDescrParseAtt","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_file_list","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_filedescr","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$v_options","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$v_requested_options","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privfiledescrexpand":{"name":"privFileDescrExpand","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_filedescr_list","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_options","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privcreate":{"name":"privCreate","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_filedescr_list","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_result_list","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_options","rank":2,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privadd":{"name":"privAdd","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_filedescr_list","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_result_list","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_options","rank":2,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privopenfd":{"name":"privOpenFd","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_mode","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privclosefd":{"name":"privCloseFd","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privaddlist":{"name":"privAddList","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_filedescr_list","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_result_list","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_options","rank":2,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privaddfilelist":{"name":"privAddFileList","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_filedescr_list","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_result_list","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_options","rank":2,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privaddfile":{"name":"privAddFile","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_filedescr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_header","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_options","rank":2,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privaddfileusingtempfile":{"name":"privAddFileUsingTempFile","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_filedescr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_header","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_options","rank":2,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privcalculatestoredfilename":{"name":"privCalculateStoredFilename","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_filedescr","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_options","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privwritefileheader":{"name":"privWriteFileHeader","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_header","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privwritecentralfileheader":{"name":"privWriteCentralFileHeader","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_header","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privwritecentralheader":{"name":"privWriteCentralHeader","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_nb_entries","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_size","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_offset","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_comment","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privlist":{"name":"privList","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_list","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privconvertheader2fileinfo":{"name":"privConvertHeader2FileInfo","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_info","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privextractbyrule":{"name":"privExtractByRule","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_file_list","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_path","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_remove_path","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_remove_all_path","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_options","rank":4,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privextractfile":{"name":"privExtractFile","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_entry","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_path","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_remove_path","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_remove_all_path","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_options","rank":4,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privextractfileusingtempfile":{"name":"privExtractFileUsingTempFile","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_entry","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_options","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privextractfileinoutput":{"name":"privExtractFileInOutput","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_entry","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_options","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privextractfileasstring":{"name":"privExtractFileAsString","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_entry","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_string","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_options","rank":2,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privreadfileheader":{"name":"privReadFileHeader","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_header","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privreadcentralfileheader":{"name":"privReadCentralFileHeader","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_header","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privcheckfileheaders":{"name":"privCheckFileHeaders","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_local_header","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_central_header","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privreadendcentraldir":{"name":"privReadEndCentralDir","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_central_dir","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privdeletebyrule":{"name":"privDeleteByRule","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_result_list","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_options","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privdircheck":{"name":"privDirCheck","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_is_dir","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privmerge":{"name":"privMerge","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_archive_to_add","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privduplicate":{"name":"privDuplicate","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_archive_filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"priverrorlog":{"name":"privErrorLog","phpdoc":[],"attributes":[],"arguments":[{"name":"$p_error_code","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$p_error_string","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"priverrorreset":{"name":"privErrorReset","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privdisablemagicquotes":{"name":"privDisableMagicQuotes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"privswapbackmagicquotes":{"name":"privSwapBackMagicQuotes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_ajax_upgrader_skin":{"name":"WP_Ajax_Upgrader_Skin","abstract":false,"final":false,"extends":"\\Automatic_Upgrader_Skin","constants":[],"properties":{"$errors":{"name":"$errors","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_errors":{"name":"get_errors","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_error_messages":{"name":"get_error_messages","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"error":{"name":"error","phpdoc":[],"attributes":[],"arguments":[{"name":"$errors","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"feedback":{"name":"feedback","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_themes_list_table":{"name":"WP_Themes_List_Table","abstract":false,"final":false,"extends":"\\WP_List_Table","constants":[],"properties":{"$search_terms":{"name":"$search_terms","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$features":{"name":"$features","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_user_can":{"name":"ajax_user_can","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_items":{"name":"prepare_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"no_items":{"name":"no_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"tablenav":{"name":"tablenav","phpdoc":[],"attributes":[],"arguments":[{"name":"$which","rank":0,"variadic":false,"reference":false,"default":"'top'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display":{"name":"display","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_columns":{"name":"get_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_rows_or_placeholder":{"name":"display_rows_or_placeholder","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_rows":{"name":"display_rows","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"search_theme":{"name":"search_theme","phpdoc":[],"attributes":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_js_vars":{"name":"_js_vars","phpdoc":[],"attributes":[],"arguments":[{"name":"$extra_args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"walker_nav_menu_checklist":{"name":"Walker_Nav_Menu_Checklist","abstract":false,"final":false,"extends":"\\Walker_Nav_Menu","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$fields","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"start_lvl":{"name":"start_lvl","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"end_lvl":{"name":"end_lvl","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"start_el":{"name":"start_el","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$item","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":4,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_ms_sites_list_table":{"name":"WP_MS_Sites_List_Table","abstract":false,"final":false,"extends":"\\WP_List_Table","constants":[],"properties":{"$status_list":{"name":"$status_list","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_user_can":{"name":"ajax_user_can","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_items":{"name":"prepare_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"no_items":{"name":"no_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_bulk_actions":{"name":"get_bulk_actions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"pagination":{"name":"pagination","phpdoc":[],"attributes":[],"arguments":[{"name":"$which","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_columns":{"name":"get_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sortable_columns":{"name":"get_sortable_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_cb":{"name":"column_cb","phpdoc":[],"attributes":[],"arguments":[{"name":"$blog","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_id":{"name":"column_id","phpdoc":[],"attributes":[],"arguments":[{"name":"$blog","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_blogname":{"name":"column_blogname","phpdoc":[],"attributes":[],"arguments":[{"name":"$blog","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_lastupdated":{"name":"column_lastupdated","phpdoc":[],"attributes":[],"arguments":[{"name":"$blog","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_registered":{"name":"column_registered","phpdoc":[],"attributes":[],"arguments":[{"name":"$blog","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_users":{"name":"column_users","phpdoc":[],"attributes":[],"arguments":[{"name":"$blog","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_plugins":{"name":"column_plugins","phpdoc":[],"attributes":[],"arguments":[{"name":"$blog","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_default":{"name":"column_default","phpdoc":[],"attributes":[],"arguments":[{"name":"$blog","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_rows":{"name":"display_rows","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_default_primary_column_name":{"name":"get_default_primary_column_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handle_row_actions":{"name":"handle_row_actions","phpdoc":[],"attributes":[],"arguments":[{"name":"$blog","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$primary","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"walker_nav_menu_edit":{"name":"Walker_Nav_Menu_Edit","abstract":false,"final":false,"extends":"\\Walker_Nav_Menu","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"start_lvl":{"name":"start_lvl","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"end_lvl":{"name":"end_lvl","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"start_el":{"name":"start_el","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$item","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":4,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_automatic_updater":{"name":"WP_Automatic_Updater","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$update_results":{"name":"$update_results","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"is_disabled":{"name":"is_disabled","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_vcs_checkout":{"name":"is_vcs_checkout","phpdoc":[],"attributes":[],"arguments":[{"name":"$context","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"should_update":{"name":"should_update","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$item","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"send_core_update_notification_email":{"name":"send_core_update_notification_email","phpdoc":[],"attributes":[],"arguments":[{"name":"$item","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$item","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"run":{"name":"run","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"after_core_update":{"name":"after_core_update","phpdoc":[],"attributes":[],"arguments":[{"name":"$update_result","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"send_email":{"name":"send_email","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$core_update","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$result","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"send_debug_email":{"name":"send_debug_email","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"plugin_upgrader_skin":{"name":"Plugin_Upgrader_Skin","abstract":false,"final":false,"extends":"\\WP_Upgrader_Skin","constants":[],"properties":{"$plugin":{"name":"$plugin","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$plugin_active":{"name":"$plugin_active","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$plugin_network_active":{"name":"$plugin_network_active","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"after":{"name":"after","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_internal_pointers":{"name":"WP_Internal_Pointers","abstract":false,"final":true,"extends":"","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"enqueue_scripts":{"name":"enqueue_scripts","phpdoc":[],"attributes":[],"arguments":[{"name":"$hook_suffix","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"print_js":{"name":"print_js","phpdoc":[],"attributes":[],"arguments":[{"name":"$pointer_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$selector","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"pointer_wp330_toolbar":{"name":"pointer_wp330_toolbar","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"pointer_wp330_media_uploader":{"name":"pointer_wp330_media_uploader","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"pointer_wp330_saving_widgets":{"name":"pointer_wp330_saving_widgets","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"pointer_wp340_customize_current_theme_link":{"name":"pointer_wp340_customize_current_theme_link","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"pointer_wp340_choose_image_from_library":{"name":"pointer_wp340_choose_image_from_library","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"pointer_wp350_media":{"name":"pointer_wp350_media","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"pointer_wp360_revisions":{"name":"pointer_wp360_revisions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"pointer_wp360_locks":{"name":"pointer_wp360_locks","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"pointer_wp390_widgets":{"name":"pointer_wp390_widgets","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"pointer_wp410_dfw":{"name":"pointer_wp410_dfw","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"dismiss_pointers_for_new_users":{"name":"dismiss_pointers_for_new_users","phpdoc":[],"attributes":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"bulk_theme_upgrader_skin":{"name":"Bulk_Theme_Upgrader_Skin","abstract":false,"final":false,"extends":"\\Bulk_Upgrader_Skin","constants":[],"properties":{"$theme_info":{"name":"$theme_info","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"add_strings":{"name":"add_strings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"before":{"name":"before","phpdoc":[],"attributes":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"after":{"name":"after","phpdoc":[],"attributes":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"bulk_footer":{"name":"bulk_footer","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"theme_installer_skin":{"name":"Theme_Installer_Skin","abstract":false,"final":false,"extends":"\\WP_Upgrader_Skin","constants":[],"properties":{"$api":{"name":"$api","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"before":{"name":"before","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"after":{"name":"after","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"walker_category_checklist":{"name":"Walker_Category_Checklist","abstract":false,"final":false,"extends":"\\Walker","constants":[],"properties":{"$tree_type":{"name":"$tree_type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$db_fields":{"name":"$db_fields","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"start_lvl":{"name":"start_lvl","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"end_lvl":{"name":"end_lvl","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"start_el":{"name":"start_el","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$category","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":4,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"end_el":{"name":"end_el","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$category","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_upgrader":{"name":"WP_Upgrader","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$strings":{"name":"$strings","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$skin":{"name":"$skin","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$result":{"name":"$result","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$update_count":{"name":"$update_count","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$update_current":{"name":"$update_current","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$skin","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"init":{"name":"init","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"generic_strings":{"name":"generic_strings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"fs_connect":{"name":"fs_connect","phpdoc":[],"attributes":[],"arguments":[{"name":"$directories","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allow_relaxed_file_ownership","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"download_package":{"name":"download_package","phpdoc":[],"attributes":[],"arguments":[{"name":"$package","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"unpack_package":{"name":"unpack_package","phpdoc":[],"attributes":[],"arguments":[{"name":"$package","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$delete_package","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"clear_destination":{"name":"clear_destination","phpdoc":[],"attributes":[],"arguments":[{"name":"$remote_destination","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"install_package":{"name":"install_package","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"run":{"name":"run","phpdoc":[],"attributes":[],"arguments":[{"name":"$options","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"maintenance_mode":{"name":"maintenance_mode","phpdoc":[],"attributes":[],"arguments":[{"name":"$enable","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"create_lock":{"name":"create_lock","phpdoc":[],"attributes":[],"arguments":[{"name":"$lock_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$release_timeout","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"release_lock":{"name":"release_lock","phpdoc":[],"attributes":[],"arguments":[{"name":"$lock_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"ftp_sockets":{"name":"ftp_sockets","abstract":false,"final":false,"extends":"\\ftp_base","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$verb","rank":0,"variadic":false,"reference":false,"default":"FALSE","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$le","rank":1,"variadic":false,"reference":false,"default":"FALSE","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_settimeout":{"name":"_settimeout","phpdoc":[],"attributes":[],"arguments":[{"name":"$sock","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_connect":{"name":"_connect","phpdoc":[],"attributes":[],"arguments":[{"name":"$host","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$port","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_readmsg":{"name":"_readmsg","phpdoc":[],"attributes":[],"arguments":[{"name":"$fnction","rank":0,"variadic":false,"reference":false,"default":"\"_readmsg\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_exec":{"name":"_exec","phpdoc":[],"attributes":[],"arguments":[{"name":"$cmd","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fnction","rank":1,"variadic":false,"reference":false,"default":"\"_exec\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_data_prepare":{"name":"_data_prepare","phpdoc":[],"attributes":[],"arguments":[{"name":"$mode","rank":0,"variadic":false,"reference":false,"default":"FTP_ASCII","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_data_read":{"name":"_data_read","phpdoc":[],"attributes":[],"arguments":[{"name":"$mode","rank":0,"variadic":false,"reference":false,"default":"FTP_ASCII","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fp","rank":1,"variadic":false,"reference":false,"default":"NULL","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_data_write":{"name":"_data_write","phpdoc":[],"attributes":[],"arguments":[{"name":"$mode","rank":0,"variadic":false,"reference":false,"default":"FTP_ASCII","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fp","rank":1,"variadic":false,"reference":false,"default":"NULL","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_data_write_block":{"name":"_data_write_block","phpdoc":[],"attributes":[],"arguments":[{"name":"$mode","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$block","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_data_close":{"name":"_data_close","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_quit":{"name":"_quit","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_filesystem_base":{"name":"WP_Filesystem_Base","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$verbose":{"name":"$verbose","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cache":{"name":"$cache","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$method":{"name":"$method","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$errors":{"name":"$errors","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$options":{"name":"$options","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"abspath":{"name":"abspath","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_content_dir":{"name":"wp_content_dir","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_plugins_dir":{"name":"wp_plugins_dir","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_themes_dir":{"name":"wp_themes_dir","phpdoc":[],"attributes":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_lang_dir":{"name":"wp_lang_dir","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"find_base_dir":{"name":"find_base_dir","phpdoc":[],"attributes":[],"arguments":[{"name":"$base","rank":0,"variadic":false,"reference":false,"default":"'.'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_base_dir":{"name":"get_base_dir","phpdoc":[],"attributes":[],"arguments":[{"name":"$base","rank":0,"variadic":false,"reference":false,"default":"'.'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"find_folder":{"name":"find_folder","phpdoc":[],"attributes":[],"arguments":[{"name":"$folder","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"search_for_folder":{"name":"search_for_folder","phpdoc":[],"attributes":[],"arguments":[{"name":"$folder","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$base","rank":1,"variadic":false,"reference":false,"default":"'.'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$loop","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"gethchmod":{"name":"gethchmod","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getchmod":{"name":"getchmod","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getnumchmodfromh":{"name":"getnumchmodfromh","phpdoc":[],"attributes":[],"arguments":[{"name":"$mode","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_binary":{"name":"is_binary","phpdoc":[],"attributes":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"chown":{"name":"chown","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$owner","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"connect":{"name":"connect","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_contents":{"name":"get_contents","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_contents_array":{"name":"get_contents_array","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"put_contents":{"name":"put_contents","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$contents","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mode","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"cwd":{"name":"cwd","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"chdir":{"name":"chdir","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"chgrp":{"name":"chgrp","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"chmod":{"name":"chmod","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mode","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"owner":{"name":"owner","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"group":{"name":"group","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"copy":{"name":"copy","phpdoc":[],"attributes":[],"arguments":[{"name":"$source","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$destination","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$overwrite","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mode","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"move":{"name":"move","phpdoc":[],"attributes":[],"arguments":[{"name":"$source","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$destination","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$overwrite","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete":{"name":"delete","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"exists":{"name":"exists","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_file":{"name":"is_file","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_dir":{"name":"is_dir","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_readable":{"name":"is_readable","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_writable":{"name":"is_writable","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"atime":{"name":"atime","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mtime":{"name":"mtime","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"size":{"name":"size","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"touch":{"name":"touch","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$time","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$atime","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mkdir":{"name":"mkdir","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$chmod","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$chown","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$chgrp","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"rmdir":{"name":"rmdir","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"dirlist":{"name":"dirlist","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$include_hidden","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_plugin_install_list_table":{"name":"WP_Plugin_Install_List_Table","abstract":false,"final":false,"extends":"\\WP_List_Table","constants":[],"properties":{"$order":{"name":"$order","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$orderby":{"name":"$orderby","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$groups":{"name":"$groups","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$error":{"name":"$error","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"ajax_user_can":{"name":"ajax_user_can","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_installed_plugin_slugs":{"name":"get_installed_plugin_slugs","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_items":{"name":"prepare_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"no_items":{"name":"no_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_views":{"name":"get_views","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"views":{"name":"views","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display":{"name":"display","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_tablenav":{"name":"display_tablenav","phpdoc":[],"attributes":[],"arguments":[{"name":"$which","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_table_classes":{"name":"get_table_classes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_columns":{"name":"get_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"order_callback":{"name":"order_callback","phpdoc":[],"attributes":[],"arguments":[{"name":"$plugin_a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$plugin_b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_rows":{"name":"display_rows","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"core_upgrader":{"name":"Core_Upgrader","abstract":false,"final":false,"extends":"\\WP_Upgrader","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"upgrade_strings":{"name":"upgrade_strings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"upgrade":{"name":"upgrade","phpdoc":[],"attributes":[],"arguments":[{"name":"$current","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"should_update_to_version":{"name":"should_update_to_version","phpdoc":[],"attributes":[],"arguments":[{"name":"$offered_ver","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"check_files":{"name":"check_files","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_filesystem_direct":{"name":"WP_Filesystem_Direct","abstract":false,"final":false,"extends":"\\WP_Filesystem_Base","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$arg","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_contents":{"name":"get_contents","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_contents_array":{"name":"get_contents_array","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"put_contents":{"name":"put_contents","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$contents","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mode","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"cwd":{"name":"cwd","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"chdir":{"name":"chdir","phpdoc":[],"attributes":[],"arguments":[{"name":"$dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"chgrp":{"name":"chgrp","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"chmod":{"name":"chmod","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mode","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"chown":{"name":"chown","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$owner","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"owner":{"name":"owner","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getchmod":{"name":"getchmod","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"group":{"name":"group","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"copy":{"name":"copy","phpdoc":[],"attributes":[],"arguments":[{"name":"$source","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$destination","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$overwrite","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mode","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"move":{"name":"move","phpdoc":[],"attributes":[],"arguments":[{"name":"$source","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$destination","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$overwrite","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete":{"name":"delete","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"exists":{"name":"exists","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_file":{"name":"is_file","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_dir":{"name":"is_dir","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_readable":{"name":"is_readable","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_writable":{"name":"is_writable","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"atime":{"name":"atime","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mtime":{"name":"mtime","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"size":{"name":"size","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"touch":{"name":"touch","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$time","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$atime","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mkdir":{"name":"mkdir","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$chmod","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$chown","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$chgrp","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"rmdir":{"name":"rmdir","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"dirlist":{"name":"dirlist","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$include_hidden","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_filesystem_ftpsockets":{"name":"WP_Filesystem_ftpsockets","abstract":false,"final":false,"extends":"\\WP_Filesystem_Base","constants":[],"properties":{"$ftp":{"name":"$ftp","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$opt","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"connect":{"name":"connect","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_contents":{"name":"get_contents","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_contents_array":{"name":"get_contents_array","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"put_contents":{"name":"put_contents","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$contents","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mode","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"cwd":{"name":"cwd","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"chdir":{"name":"chdir","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"chmod":{"name":"chmod","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mode","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"owner":{"name":"owner","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getchmod":{"name":"getchmod","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"group":{"name":"group","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"copy":{"name":"copy","phpdoc":[],"attributes":[],"arguments":[{"name":"$source","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$destination","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$overwrite","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mode","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"move":{"name":"move","phpdoc":[],"attributes":[],"arguments":[{"name":"$source","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$destination","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$overwrite","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete":{"name":"delete","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"exists":{"name":"exists","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_file":{"name":"is_file","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_dir":{"name":"is_dir","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_readable":{"name":"is_readable","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_writable":{"name":"is_writable","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"atime":{"name":"atime","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mtime":{"name":"mtime","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"size":{"name":"size","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"touch":{"name":"touch","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$time","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$atime","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mkdir":{"name":"mkdir","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$chmod","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$chown","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$chgrp","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"rmdir":{"name":"rmdir","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"dirlist":{"name":"dirlist","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"'.'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$include_hidden","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursive","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__destruct":{"name":"__destruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"theme_upgrader":{"name":"Theme_Upgrader","abstract":false,"final":false,"extends":"\\WP_Upgrader","constants":[],"properties":{"$result":{"name":"$result","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$bulk":{"name":"$bulk","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"upgrade_strings":{"name":"upgrade_strings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"install_strings":{"name":"install_strings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_parent_theme_filter":{"name":"check_parent_theme_filter","phpdoc":[],"attributes":[],"arguments":[{"name":"$install_result","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$hook_extra","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$child_result","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"hide_activate_preview_actions":{"name":"hide_activate_preview_actions","phpdoc":[],"attributes":[],"arguments":[{"name":"$actions","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"install":{"name":"install","phpdoc":[],"attributes":[],"arguments":[{"name":"$package","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"upgrade":{"name":"upgrade","phpdoc":[],"attributes":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"bulk_upgrade":{"name":"bulk_upgrade","phpdoc":[],"attributes":[],"arguments":[{"name":"$themes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_package":{"name":"check_package","phpdoc":[],"attributes":[],"arguments":[{"name":"$source","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"current_before":{"name":"current_before","phpdoc":[],"attributes":[],"arguments":[{"name":"$return","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$theme","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"current_after":{"name":"current_after","phpdoc":[],"attributes":[],"arguments":[{"name":"$return","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$theme","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_old_theme":{"name":"delete_old_theme","phpdoc":[],"attributes":[],"arguments":[{"name":"$removed","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$local_destination","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$remote_destination","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$theme","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"theme_info":{"name":"theme_info","phpdoc":[],"attributes":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_links_list_table":{"name":"WP_Links_List_Table","abstract":false,"final":false,"extends":"\\WP_List_Table","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_user_can":{"name":"ajax_user_can","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_items":{"name":"prepare_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"no_items":{"name":"no_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_bulk_actions":{"name":"get_bulk_actions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"extra_tablenav":{"name":"extra_tablenav","phpdoc":[],"attributes":[],"arguments":[{"name":"$which","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_columns":{"name":"get_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sortable_columns":{"name":"get_sortable_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_default_primary_column_name":{"name":"get_default_primary_column_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_cb":{"name":"column_cb","phpdoc":[],"attributes":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_name":{"name":"column_name","phpdoc":[],"attributes":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_url":{"name":"column_url","phpdoc":[],"attributes":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_categories":{"name":"column_categories","phpdoc":[],"attributes":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_rel":{"name":"column_rel","phpdoc":[],"attributes":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_visible":{"name":"column_visible","phpdoc":[],"attributes":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_rating":{"name":"column_rating","phpdoc":[],"attributes":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_default":{"name":"column_default","phpdoc":[],"attributes":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_rows":{"name":"display_rows","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handle_row_actions":{"name":"handle_row_actions","phpdoc":[],"attributes":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$primary","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_upgrader_skin":{"name":"WP_Upgrader_Skin","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$upgrader":{"name":"$upgrader","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$done_header":{"name":"$done_header","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$done_footer":{"name":"$done_footer","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$result":{"name":"$result","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$options":{"name":"$options","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_upgrader":{"name":"set_upgrader","phpdoc":[],"attributes":[],"arguments":[{"name":"$upgrader","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_strings":{"name":"add_strings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_result":{"name":"set_result","phpdoc":[],"attributes":[],"arguments":[{"name":"$result","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"request_filesystem_credentials":{"name":"request_filesystem_credentials","phpdoc":[],"attributes":[],"arguments":[{"name":"$error","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allow_relaxed_file_ownership","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"header":{"name":"header","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"footer":{"name":"footer","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"error":{"name":"error","phpdoc":[],"attributes":[],"arguments":[{"name":"$errors","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"feedback":{"name":"feedback","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"before":{"name":"before","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"after":{"name":"after","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"decrement_update_count":{"name":"decrement_update_count","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"bulk_header":{"name":"bulk_header","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"bulk_footer":{"name":"bulk_footer","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_ms_users_list_table":{"name":"WP_MS_Users_List_Table","abstract":false,"final":false,"extends":"\\WP_List_Table","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"ajax_user_can":{"name":"ajax_user_can","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_items":{"name":"prepare_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_bulk_actions":{"name":"get_bulk_actions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"no_items":{"name":"no_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_views":{"name":"get_views","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"pagination":{"name":"pagination","phpdoc":[],"attributes":[],"arguments":[{"name":"$which","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_columns":{"name":"get_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sortable_columns":{"name":"get_sortable_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_cb":{"name":"column_cb","phpdoc":[],"attributes":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_id":{"name":"column_id","phpdoc":[],"attributes":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_username":{"name":"column_username","phpdoc":[],"attributes":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_name":{"name":"column_name","phpdoc":[],"attributes":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_email":{"name":"column_email","phpdoc":[],"attributes":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_registered":{"name":"column_registered","phpdoc":[],"attributes":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_column_blogs":{"name":"_column_blogs","phpdoc":[],"attributes":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$classes","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$primary","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_blogs":{"name":"column_blogs","phpdoc":[],"attributes":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_default":{"name":"column_default","phpdoc":[],"attributes":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_rows":{"name":"display_rows","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_default_primary_column_name":{"name":"get_default_primary_column_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handle_row_actions":{"name":"handle_row_actions","phpdoc":[],"attributes":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$primary","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_posts_list_table":{"name":"WP_Posts_List_Table","abstract":false,"final":false,"extends":"\\WP_List_Table","constants":[],"properties":{"$hierarchical_display":{"name":"$hierarchical_display","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_pending_count":{"name":"$comment_pending_count","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$user_posts_count":{"name":"$user_posts_count","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sticky_posts_count":{"name":"$sticky_posts_count","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_trash":{"name":"$is_trash","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$current_level":{"name":"$current_level","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_hierarchical_display":{"name":"set_hierarchical_display","phpdoc":[],"attributes":[],"arguments":[{"name":"$display","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_user_can":{"name":"ajax_user_can","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_items":{"name":"prepare_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"has_items":{"name":"has_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"no_items":{"name":"no_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_base_request":{"name":"is_base_request","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_edit_link":{"name":"get_edit_link","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$label","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$class","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_views":{"name":"get_views","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_bulk_actions":{"name":"get_bulk_actions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"categories_dropdown":{"name":"categories_dropdown","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"extra_tablenav":{"name":"extra_tablenav","phpdoc":[],"attributes":[],"arguments":[{"name":"$which","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"current_action":{"name":"current_action","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_table_classes":{"name":"get_table_classes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_columns":{"name":"get_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sortable_columns":{"name":"get_sortable_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_rows":{"name":"display_rows","phpdoc":[],"attributes":[],"arguments":[{"name":"$posts","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$level","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_display_rows":{"name":"_display_rows","phpdoc":[],"attributes":[],"arguments":[{"name":"$posts","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$level","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_display_rows_hierarchical":{"name":"_display_rows_hierarchical","phpdoc":[],"attributes":[],"arguments":[{"name":"$pages","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$pagenum","rank":1,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$per_page","rank":2,"variadic":false,"reference":false,"default":"20","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_page_rows":{"name":"_page_rows","phpdoc":[],"attributes":[],"arguments":[{"name":"$children_pages","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$count","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$level","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$pagenum","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$per_page","rank":5,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$to_display","rank":6,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_cb":{"name":"column_cb","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_column_title":{"name":"_column_title","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$classes","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$primary","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_title":{"name":"column_title","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_date":{"name":"column_date","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_comments":{"name":"column_comments","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_author":{"name":"column_author","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_default":{"name":"column_default","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"single_row":{"name":"single_row","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$level","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_default_primary_column_name":{"name":"get_default_primary_column_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handle_row_actions":{"name":"handle_row_actions","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$primary","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"inline_edit":{"name":"inline_edit","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"_wp_list_table_compat":{"name":"_WP_List_Table_Compat","abstract":false,"final":false,"extends":"\\WP_List_Table","constants":[],"properties":{"$_screen":{"name":"$_screen","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_columns":{"name":"$_columns","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$screen","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$columns","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_column_info":{"name":"get_column_info","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_columns":{"name":"get_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"ftp_pure":{"name":"ftp_pure","abstract":false,"final":false,"extends":"\\ftp_base","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$verb","rank":0,"variadic":false,"reference":false,"default":"FALSE","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$le","rank":1,"variadic":false,"reference":false,"default":"FALSE","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_settimeout":{"name":"_settimeout","phpdoc":[],"attributes":[],"arguments":[{"name":"$sock","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_connect":{"name":"_connect","phpdoc":[],"attributes":[],"arguments":[{"name":"$host","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$port","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_readmsg":{"name":"_readmsg","phpdoc":[],"attributes":[],"arguments":[{"name":"$fnction","rank":0,"variadic":false,"reference":false,"default":"\"_readmsg\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_exec":{"name":"_exec","phpdoc":[],"attributes":[],"arguments":[{"name":"$cmd","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fnction","rank":1,"variadic":false,"reference":false,"default":"\"_exec\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_data_prepare":{"name":"_data_prepare","phpdoc":[],"attributes":[],"arguments":[{"name":"$mode","rank":0,"variadic":false,"reference":false,"default":"FTP_ASCII","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_data_read":{"name":"_data_read","phpdoc":[],"attributes":[],"arguments":[{"name":"$mode","rank":0,"variadic":false,"reference":false,"default":"FTP_ASCII","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fp","rank":1,"variadic":false,"reference":false,"default":"NULL","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_data_write":{"name":"_data_write","phpdoc":[],"attributes":[],"arguments":[{"name":"$mode","rank":0,"variadic":false,"reference":false,"default":"FTP_ASCII","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fp","rank":1,"variadic":false,"reference":false,"default":"NULL","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_data_write_block":{"name":"_data_write_block","phpdoc":[],"attributes":[],"arguments":[{"name":"$mode","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$block","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_data_close":{"name":"_data_close","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_quit":{"name":"_quit","phpdoc":[],"attributes":[],"arguments":[{"name":"$force","rank":0,"variadic":false,"reference":false,"default":"FALSE","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"bulk_upgrader_skin":{"name":"Bulk_Upgrader_Skin","abstract":false,"final":false,"extends":"\\WP_Upgrader_Skin","constants":[],"properties":{"$in_loop":{"name":"$in_loop","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$error":{"name":"$error","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_strings":{"name":"add_strings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"feedback":{"name":"feedback","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"header":{"name":"header","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"footer":{"name":"footer","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"error":{"name":"error","phpdoc":[],"attributes":[],"arguments":[{"name":"$error","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"bulk_header":{"name":"bulk_header","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"bulk_footer":{"name":"bulk_footer","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"before":{"name":"before","phpdoc":[],"attributes":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"after":{"name":"after","phpdoc":[],"attributes":[],"arguments":[{"name":"$title","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"reset":{"name":"reset","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"flush_output":{"name":"flush_output","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_comments_list_table":{"name":"WP_Comments_List_Table","abstract":false,"final":false,"extends":"\\WP_List_Table","constants":[],"properties":{"$checkbox":{"name":"$checkbox","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$pending_count":{"name":"$pending_count","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$extra_items":{"name":"$extra_items","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$user_can":{"name":"$user_can","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"floated_admin_avatar":{"name":"floated_admin_avatar","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment_ID","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_user_can":{"name":"ajax_user_can","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_items":{"name":"prepare_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_per_page":{"name":"get_per_page","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment_status","rank":0,"variadic":false,"reference":false,"default":"'all'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"no_items":{"name":"no_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_views":{"name":"get_views","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_bulk_actions":{"name":"get_bulk_actions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"extra_tablenav":{"name":"extra_tablenav","phpdoc":[],"attributes":[],"arguments":[{"name":"$which","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"current_action":{"name":"current_action","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_columns":{"name":"get_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sortable_columns":{"name":"get_sortable_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_default_primary_column_name":{"name":"get_default_primary_column_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display":{"name":"display","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"single_row":{"name":"single_row","phpdoc":[],"attributes":[],"arguments":[{"name":"$item","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handle_row_actions":{"name":"handle_row_actions","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$primary","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_cb":{"name":"column_cb","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_comment":{"name":"column_comment","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_author":{"name":"column_author","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_date":{"name":"column_date","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_response":{"name":"column_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_default":{"name":"column_default","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_ms_themes_list_table":{"name":"WP_MS_Themes_List_Table","abstract":false,"final":false,"extends":"\\WP_List_Table","constants":[],"properties":{"$site_id":{"name":"$site_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_site_themes":{"name":"$is_site_themes","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$has_items":{"name":"$has_items","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_table_classes":{"name":"get_table_classes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_user_can":{"name":"ajax_user_can","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_items":{"name":"prepare_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_search_callback":{"name":"_search_callback","phpdoc":[],"attributes":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_order_callback":{"name":"_order_callback","phpdoc":[],"attributes":[],"arguments":[{"name":"$theme_a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$theme_b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"no_items":{"name":"no_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_columns":{"name":"get_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sortable_columns":{"name":"get_sortable_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_primary_column_name":{"name":"get_primary_column_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_views":{"name":"get_views","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_bulk_actions":{"name":"get_bulk_actions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_rows":{"name":"display_rows","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_cb":{"name":"column_cb","phpdoc":[],"attributes":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_name":{"name":"column_name","phpdoc":[],"attributes":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_description":{"name":"column_description","phpdoc":[],"attributes":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_default":{"name":"column_default","phpdoc":[],"attributes":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"single_row_columns":{"name":"single_row_columns","phpdoc":[],"attributes":[],"arguments":[{"name":"$item","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"single_row":{"name":"single_row","phpdoc":[],"attributes":[],"arguments":[{"name":"$theme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_list_table":{"name":"WP_List_Table","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$items":{"name":"$items","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_args":{"name":"$_args","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_pagination_args":{"name":"$_pagination_args","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$screen":{"name":"$screen","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_actions":{"name":"$_actions","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_pagination":{"name":"$_pagination","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$modes":{"name":"$modes","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_column_headers":{"name":"$_column_headers","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$compat_fields":{"name":"$compat_fields","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$compat_methods":{"name":"$compat_methods","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__get":{"name":"__get","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__set":{"name":"__set","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__isset":{"name":"__isset","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__unset":{"name":"__unset","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__call":{"name":"__call","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$arguments","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_user_can":{"name":"ajax_user_can","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_items":{"name":"prepare_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_pagination_args":{"name":"set_pagination_args","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_pagination_arg":{"name":"get_pagination_arg","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"has_items":{"name":"has_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"no_items":{"name":"no_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"search_box":{"name":"search_box","phpdoc":[],"attributes":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$input_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_views":{"name":"get_views","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"views":{"name":"views","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_bulk_actions":{"name":"get_bulk_actions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"bulk_actions":{"name":"bulk_actions","phpdoc":[],"attributes":[],"arguments":[{"name":"$which","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"current_action":{"name":"current_action","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"row_actions":{"name":"row_actions","phpdoc":[],"attributes":[],"arguments":[{"name":"$actions","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$always_visible","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"months_dropdown":{"name":"months_dropdown","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"view_switcher":{"name":"view_switcher","phpdoc":[],"attributes":[],"arguments":[{"name":"$current_mode","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"comments_bubble":{"name":"comments_bubble","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$pending_comments","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_pagenum":{"name":"get_pagenum","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items_per_page":{"name":"get_items_per_page","phpdoc":[],"attributes":[],"arguments":[{"name":"$option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default","rank":1,"variadic":false,"reference":false,"default":"20","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"pagination":{"name":"pagination","phpdoc":[],"attributes":[],"arguments":[{"name":"$which","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_columns":{"name":"get_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sortable_columns":{"name":"get_sortable_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_default_primary_column_name":{"name":"get_default_primary_column_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_primary_column":{"name":"get_primary_column","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_primary_column_name":{"name":"get_primary_column_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_column_info":{"name":"get_column_info","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_column_count":{"name":"get_column_count","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_column_headers":{"name":"print_column_headers","phpdoc":[],"attributes":[],"arguments":[{"name":"$with_id","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display":{"name":"display","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_table_classes":{"name":"get_table_classes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_tablenav":{"name":"display_tablenav","phpdoc":[],"attributes":[],"arguments":[{"name":"$which","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"extra_tablenav":{"name":"extra_tablenav","phpdoc":[],"attributes":[],"arguments":[{"name":"$which","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_rows_or_placeholder":{"name":"display_rows_or_placeholder","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_rows":{"name":"display_rows","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"single_row":{"name":"single_row","phpdoc":[],"attributes":[],"arguments":[{"name":"$item","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_default":{"name":"column_default","phpdoc":[],"attributes":[],"arguments":[{"name":"$item","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_cb":{"name":"column_cb","phpdoc":[],"attributes":[],"arguments":[{"name":"$item","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"single_row_columns":{"name":"single_row_columns","phpdoc":[],"attributes":[],"arguments":[{"name":"$item","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handle_row_actions":{"name":"handle_row_actions","phpdoc":[],"attributes":[],"arguments":[{"name":"$item","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$primary","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_response":{"name":"ajax_response","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_js_vars":{"name":"_js_vars","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"automatic_upgrader_skin":{"name":"Automatic_Upgrader_Skin","abstract":false,"final":false,"extends":"\\WP_Upgrader_Skin","constants":[],"properties":{"$messages":{"name":"$messages","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"request_filesystem_credentials":{"name":"request_filesystem_credentials","phpdoc":[],"attributes":[],"arguments":[{"name":"$error","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$allow_relaxed_file_ownership","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_upgrade_messages":{"name":"get_upgrade_messages","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"feedback":{"name":"feedback","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"header":{"name":"header","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"footer":{"name":"footer","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_plugins_list_table":{"name":"WP_Plugins_List_Table","abstract":false,"final":false,"extends":"\\WP_List_Table","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_table_classes":{"name":"get_table_classes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_user_can":{"name":"ajax_user_can","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_items":{"name":"prepare_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_search_callback":{"name":"_search_callback","phpdoc":[],"attributes":[],"arguments":[{"name":"$plugin","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_order_callback":{"name":"_order_callback","phpdoc":[],"attributes":[],"arguments":[{"name":"$plugin_a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$plugin_b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"no_items":{"name":"no_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"search_box":{"name":"search_box","phpdoc":[],"attributes":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$input_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_columns":{"name":"get_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sortable_columns":{"name":"get_sortable_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_views":{"name":"get_views","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_bulk_actions":{"name":"get_bulk_actions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"bulk_actions":{"name":"bulk_actions","phpdoc":[],"attributes":[],"arguments":[{"name":"$which","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"extra_tablenav":{"name":"extra_tablenav","phpdoc":[],"attributes":[],"arguments":[{"name":"$which","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"current_action":{"name":"current_action","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_rows":{"name":"display_rows","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"single_row":{"name":"single_row","phpdoc":[],"attributes":[],"arguments":[{"name":"$item","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_primary_column_name":{"name":"get_primary_column_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_media_list_table":{"name":"WP_Media_List_Table","abstract":false,"final":false,"extends":"\\WP_List_Table","constants":[],"properties":{"$comment_pending_count":{"name":"$comment_pending_count","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$detached":{"name":"$detached","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_trash":{"name":"$is_trash","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_user_can":{"name":"ajax_user_can","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_items":{"name":"prepare_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_views":{"name":"get_views","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_bulk_actions":{"name":"get_bulk_actions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"extra_tablenav":{"name":"extra_tablenav","phpdoc":[],"attributes":[],"arguments":[{"name":"$which","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"current_action":{"name":"current_action","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"has_items":{"name":"has_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"no_items":{"name":"no_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"views":{"name":"views","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_columns":{"name":"get_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sortable_columns":{"name":"get_sortable_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_cb":{"name":"column_cb","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_title":{"name":"column_title","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_author":{"name":"column_author","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_desc":{"name":"column_desc","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_date":{"name":"column_date","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_parent":{"name":"column_parent","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_comments":{"name":"column_comments","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"column_default":{"name":"column_default","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_rows":{"name":"display_rows","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_default_primary_column_name":{"name":"get_default_primary_column_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_get_row_actions":{"name":"_get_row_actions","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$att_title","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handle_row_actions":{"name":"handle_row_actions","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$primary","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_site_icon":{"name":"WP_Site_Icon","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$min_size":{"name":"$min_size","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$page_crop":{"name":"$page_crop","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$site_icon_sizes":{"name":"$site_icon_sizes","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"create_attachment_object":{"name":"create_attachment_object","phpdoc":[],"attributes":[],"arguments":[{"name":"$cropped","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent_attachment_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"insert_attachment":{"name":"insert_attachment","phpdoc":[],"attributes":[],"arguments":[{"name":"$object","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$file","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"additional_sizes":{"name":"additional_sizes","phpdoc":[],"attributes":[],"arguments":[{"name":"$sizes","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"intermediate_image_sizes":{"name":"intermediate_image_sizes","phpdoc":[],"attributes":[],"arguments":[{"name":"$sizes","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_attachment_data":{"name":"delete_attachment_data","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_post_metadata":{"name":"get_post_metadata","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$single","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"theme_upgrader_skin":{"name":"Theme_Upgrader_Skin","abstract":false,"final":false,"extends":"\\WP_Upgrader_Skin","constants":[],"properties":{"$theme":{"name":"$theme","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"after":{"name":"after","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_screen":{"name":"WP_Screen","abstract":false,"final":true,"extends":"","constants":[],"properties":{"$action":{"name":"$action","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$base":{"name":"$base","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$columns":{"name":"$columns","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$id":{"name":"$id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$in_admin":{"name":"$in_admin","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_network":{"name":"$is_network","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_user":{"name":"$is_user","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$parent_base":{"name":"$parent_base","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$parent_file":{"name":"$parent_file","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_type":{"name":"$post_type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$taxonomy":{"name":"$taxonomy","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_help_tabs":{"name":"$_help_tabs","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_help_sidebar":{"name":"$_help_sidebar","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_screen_reader_content":{"name":"$_screen_reader_content","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_old_compat_help":{"name":"$_old_compat_help","visibility":"private","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_options":{"name":"$_options","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_registry":{"name":"$_registry","visibility":"private","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_show_screen_options":{"name":"$_show_screen_options","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_screen_settings":{"name":"$_screen_settings","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"get":{"name":"get","phpdoc":[],"attributes":[],"arguments":[{"name":"$hook_name","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"set_current_screen":{"name":"set_current_screen","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"in_admin":{"name":"in_admin","phpdoc":[],"attributes":[],"arguments":[{"name":"$admin","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_old_compat_help":{"name":"add_old_compat_help","phpdoc":[],"attributes":[],"arguments":[{"name":"$screen","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$help","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"set_parentage":{"name":"set_parentage","phpdoc":[],"attributes":[],"arguments":[{"name":"$parent_file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_option":{"name":"add_option","phpdoc":[],"attributes":[],"arguments":[{"name":"$option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_option":{"name":"remove_option","phpdoc":[],"attributes":[],"arguments":[{"name":"$option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_options":{"name":"remove_options","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_options":{"name":"get_options","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_option":{"name":"get_option","phpdoc":[],"attributes":[],"arguments":[{"name":"$option","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_help_tabs":{"name":"get_help_tabs","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_help_tab":{"name":"get_help_tab","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_help_tab":{"name":"add_help_tab","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_help_tab":{"name":"remove_help_tab","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_help_tabs":{"name":"remove_help_tabs","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_help_sidebar":{"name":"get_help_sidebar","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_help_sidebar":{"name":"set_help_sidebar","phpdoc":[],"attributes":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_columns":{"name":"get_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_screen_reader_content":{"name":"get_screen_reader_content","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_screen_reader_text":{"name":"get_screen_reader_text","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_screen_reader_content":{"name":"set_screen_reader_content","phpdoc":[],"attributes":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_screen_reader_content":{"name":"remove_screen_reader_content","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_screen_meta":{"name":"render_screen_meta","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"show_screen_options":{"name":"show_screen_options","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_screen_options":{"name":"render_screen_options","phpdoc":[],"attributes":[],"arguments":[{"name":"$options","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_meta_boxes_preferences":{"name":"render_meta_boxes_preferences","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_list_table_columns_preferences":{"name":"render_list_table_columns_preferences","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_screen_layout":{"name":"render_screen_layout","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_per_page_options":{"name":"render_per_page_options","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_view_mode":{"name":"render_view_mode","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_screen_reader_content":{"name":"render_screen_reader_content","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tag","rank":1,"variadic":false,"reference":false,"default":"'h2'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_user_search":{"name":"WP_User_Search","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$results":{"name":"$results","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$search_term":{"name":"$search_term","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$page":{"name":"$page","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$role":{"name":"$role","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$raw_page":{"name":"$raw_page","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$users_per_page":{"name":"$users_per_page","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$first_user":{"name":"$first_user","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$last_user":{"name":"$last_user","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_limit":{"name":"$query_limit","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_orderby":{"name":"$query_orderby","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_from":{"name":"$query_from","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_where":{"name":"$query_where","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$total_users_for_query":{"name":"$total_users_for_query","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$too_many_total_users":{"name":"$too_many_total_users","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$search_errors":{"name":"$search_errors","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$paging_text":{"name":"$paging_text","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$search_term","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$page","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$role","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_user_search":{"name":"WP_User_Search","phpdoc":[],"attributes":[],"arguments":[{"name":"$search_term","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$page","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$role","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_query":{"name":"prepare_query","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"query":{"name":"query","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_vars_for_template_usage":{"name":"prepare_vars_for_template_usage","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"do_paging":{"name":"do_paging","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_results":{"name":"get_results","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"page_links":{"name":"page_links","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"results_are_paged":{"name":"results_are_paged","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_search":{"name":"is_search","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"magpierss":{"name":"MagpieRSS","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$parser":{"name":"$parser","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$current_item":{"name":"$current_item","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$items":{"name":"$items","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$channel":{"name":"$channel","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$textinput":{"name":"$textinput","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$image":{"name":"$image","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$feed_type":{"name":"$feed_type","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$feed_version":{"name":"$feed_version","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$stack":{"name":"$stack","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$inchannel":{"name":"$inchannel","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$initem":{"name":"$initem","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$incontent":{"name":"$incontent","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$intextinput":{"name":"$intextinput","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$inimage":{"name":"$inimage","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$current_field":{"name":"$current_field","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$current_namespace":{"name":"$current_namespace","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_CONTENT_CONSTRUCTS":{"name":"$_CONTENT_CONSTRUCTS","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$source","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"magpierss":{"name":"MagpieRSS","phpdoc":[],"attributes":[],"arguments":[{"name":"$source","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"feed_start_element":{"name":"feed_start_element","phpdoc":[],"attributes":[],"arguments":[{"name":"$p","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$element","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attrs","rank":2,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"feed_cdata":{"name":"feed_cdata","phpdoc":[],"attributes":[],"arguments":[{"name":"$p","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$text","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"feed_end_element":{"name":"feed_end_element","phpdoc":[],"attributes":[],"arguments":[{"name":"$p","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$el","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"concat":{"name":"concat","phpdoc":[],"attributes":[],"arguments":[{"name":"$str1","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$str2","rank":1,"variadic":false,"reference":false,"default":"\"\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"append_content":{"name":"append_content","phpdoc":[],"attributes":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"append":{"name":"append","phpdoc":[],"attributes":[],"arguments":[{"name":"$el","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$text","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"normalize":{"name":"normalize","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_rss":{"name":"is_rss","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_atom":{"name":"is_atom","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"map_attrs":{"name":"map_attrs","phpdoc":[],"attributes":[],"arguments":[{"name":"$k","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$v","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"error":{"name":"error","phpdoc":[],"attributes":[],"arguments":[{"name":"$errormsg","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$lvl","rank":1,"variadic":false,"reference":false,"default":"E_USER_WARNING","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"rsscache":{"name":"RSSCache","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$BASE_CACHE":{"name":"$BASE_CACHE","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$MAX_AGE":{"name":"$MAX_AGE","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ERROR":{"name":"$ERROR","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$base","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$age","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"rsscache":{"name":"RSSCache","phpdoc":[],"attributes":[],"arguments":[{"name":"$base","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$age","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set":{"name":"set","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$rss","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get":{"name":"get","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_cache":{"name":"check_cache","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"serialize":{"name":"serialize","phpdoc":[],"attributes":[],"arguments":[{"name":"$rss","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"unserialize":{"name":"unserialize","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"file_name":{"name":"file_name","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"error":{"name":"error","phpdoc":[],"attributes":[],"arguments":[{"name":"$errormsg","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$lvl","rank":1,"variadic":false,"reference":false,"default":"E_USER_WARNING","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"debug":{"name":"debug","phpdoc":[],"attributes":[],"arguments":[{"name":"$debugmsg","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$lvl","rank":1,"variadic":false,"reference":false,"default":"E_USER_NOTICE","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_setting":{"name":"WP_Customize_Setting","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$manager":{"name":"$manager","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$id":{"name":"$id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$capability":{"name":"$capability","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$theme_supports":{"name":"$theme_supports","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$default":{"name":"$default","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$transport":{"name":"$transport","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$validate_callback":{"name":"$validate_callback","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sanitize_callback":{"name":"$sanitize_callback","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sanitize_js_callback":{"name":"$sanitize_js_callback","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$dirty":{"name":"$dirty","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$id_data":{"name":"$id_data","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_previewed":{"name":"$is_previewed","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$aggregated_multidimensionals":{"name":"$aggregated_multidimensionals","visibility":"protected","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_multidimensional_aggregated":{"name":"$is_multidimensional_aggregated","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_previewed_blog_id":{"name":"$_previewed_blog_id","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_original_value":{"name":"$_original_value","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$manager","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"id_data":{"name":"id_data","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"aggregate_multidimensional":{"name":"aggregate_multidimensional","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"reset_aggregated_multidimensionals":{"name":"reset_aggregated_multidimensionals","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"is_current_blog_previewed":{"name":"is_current_blog_previewed","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"preview":{"name":"preview","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_clear_aggregated_multidimensional_preview_applied_flag":{"name":"_clear_aggregated_multidimensional_preview_applied_flag","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_preview_filter":{"name":"_preview_filter","phpdoc":[],"attributes":[],"arguments":[{"name":"$original","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_multidimensional_preview_filter":{"name":"_multidimensional_preview_filter","phpdoc":[],"attributes":[],"arguments":[{"name":"$original","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"save":{"name":"save","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"post_value":{"name":"post_value","phpdoc":[],"attributes":[],"arguments":[{"name":"$default","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize":{"name":"sanitize","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"validate":{"name":"validate","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_root_value":{"name":"get_root_value","phpdoc":[],"attributes":[],"arguments":[{"name":"$default","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_root_value":{"name":"set_root_value","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_update_theme_mod":{"name":"_update_theme_mod","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_update_option":{"name":"_update_option","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"value":{"name":"value","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"js_value":{"name":"js_value","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"json":{"name":"json","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_capabilities":{"name":"check_capabilities","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"multidimensional":{"name":"multidimensional","phpdoc":[],"attributes":[],"arguments":[{"name":"$root","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$keys","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$create","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"multidimensional_replace":{"name":"multidimensional_replace","phpdoc":[],"attributes":[],"arguments":[{"name":"$root","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$keys","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"multidimensional_get":{"name":"multidimensional_get","phpdoc":[],"attributes":[],"arguments":[{"name":"$root","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$keys","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"multidimensional_isset":{"name":"multidimensional_isset","phpdoc":[],"attributes":[],"arguments":[{"name":"$root","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$keys","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_oembed":{"name":"WP_oEmbed","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$providers":{"name":"$providers","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$early_providers":{"name":"$early_providers","visibility":"public","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$compat_methods":{"name":"$compat_methods","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__call":{"name":"__call","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$arguments","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_provider":{"name":"get_provider","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_add_provider_early":{"name":"_add_provider_early","phpdoc":[],"attributes":[],"arguments":[{"name":"$format","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$provider","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$regex","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"_remove_provider_early":{"name":"_remove_provider_early","phpdoc":[],"attributes":[],"arguments":[{"name":"$format","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_html":{"name":"get_html","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"discover":{"name":"discover","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"fetch":{"name":"fetch","phpdoc":[],"attributes":[],"arguments":[{"name":"$provider","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_fetch_with_format":{"name":"_fetch_with_format","phpdoc":[],"attributes":[],"arguments":[{"name":"$provider_url_with_args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$format","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_parse_json":{"name":"_parse_json","phpdoc":[],"attributes":[],"arguments":[{"name":"$response_body","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_parse_xml":{"name":"_parse_xml","phpdoc":[],"attributes":[],"arguments":[{"name":"$response_body","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_parse_xml_body":{"name":"_parse_xml_body","phpdoc":[],"attributes":[],"arguments":[{"name":"$response_body","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"data2html":{"name":"data2html","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_strip_newlines":{"name":"_strip_newlines","phpdoc":[],"attributes":[],"arguments":[{"name":"$html","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_comment_query":{"name":"WP_Comment_Query","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$request":{"name":"$request","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$meta_query":{"name":"$meta_query","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$meta_query_clauses":{"name":"$meta_query_clauses","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sql_clauses":{"name":"$sql_clauses","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$filtered_where_clause":{"name":"$filtered_where_clause","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$date_query":{"name":"$date_query","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_vars":{"name":"$query_vars","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_var_defaults":{"name":"$query_var_defaults","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comments":{"name":"$comments","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$found_comments":{"name":"$found_comments","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$max_num_pages":{"name":"$max_num_pages","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__call":{"name":"__call","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$arguments","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_query":{"name":"parse_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"query":{"name":"query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_comments":{"name":"get_comments","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_comment_ids":{"name":"get_comment_ids","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_found_comments":{"name":"set_found_comments","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"fill_descendants":{"name":"fill_descendants","phpdoc":[],"attributes":[],"arguments":[{"name":"$comments","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_search_sql":{"name":"get_search_sql","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cols","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_orderby":{"name":"parse_orderby","phpdoc":[],"attributes":[],"arguments":[{"name":"$orderby","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_order":{"name":"parse_order","phpdoc":[],"attributes":[],"arguments":[{"name":"$order","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"walker_category":{"name":"Walker_Category","abstract":false,"final":false,"extends":"\\Walker","constants":[],"properties":{"$tree_type":{"name":"$tree_type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$db_fields":{"name":"$db_fields","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"start_lvl":{"name":"start_lvl","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"end_lvl":{"name":"end_lvl","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"start_el":{"name":"start_el","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$category","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":4,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"end_el":{"name":"end_el","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$page","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_scripts":{"name":"WP_Scripts","abstract":false,"final":false,"extends":"\\WP_Dependencies","constants":[],"properties":{"$base_url":{"name":"$base_url","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$content_url":{"name":"$content_url","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$default_version":{"name":"$default_version","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$in_footer":{"name":"$in_footer","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$concat":{"name":"$concat","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$concat_version":{"name":"$concat_version","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$do_concat":{"name":"$do_concat","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$print_html":{"name":"$print_html","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$print_code":{"name":"$print_code","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ext_handles":{"name":"$ext_handles","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ext_version":{"name":"$ext_version","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$default_dirs":{"name":"$default_dirs","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"init":{"name":"init","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_scripts":{"name":"print_scripts","phpdoc":[],"attributes":[],"arguments":[{"name":"$handles","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_scripts_l10n":{"name":"print_scripts_l10n","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_extra_script":{"name":"print_extra_script","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"do_item":{"name":"do_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_inline_script":{"name":"add_inline_script","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$position","rank":2,"variadic":false,"reference":false,"default":"'after'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_inline_script":{"name":"print_inline_script","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$position","rank":1,"variadic":false,"reference":false,"default":"'after'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"localize":{"name":"localize","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$l10n","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_group":{"name":"set_group","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursion","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"all_deps":{"name":"all_deps","phpdoc":[],"attributes":[],"arguments":[{"name":"$handles","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursion","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"do_head_items":{"name":"do_head_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"do_footer_items":{"name":"do_footer_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"in_default_dir":{"name":"in_default_dir","phpdoc":[],"attributes":[],"arguments":[{"name":"$src","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"reset":{"name":"reset","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_session_tokens":{"name":"WP_Session_Tokens","abstract":true,"final":false,"extends":"","constants":[],"properties":{"$user_id":{"name":"$user_id","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_instance":{"name":"get_instance","phpdoc":[],"attributes":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"hash_token":{"name":"hash_token","phpdoc":[],"attributes":[],"arguments":[{"name":"$token","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get":{"name":"get","phpdoc":[],"attributes":[],"arguments":[{"name":"$token","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"verify":{"name":"verify","phpdoc":[],"attributes":[],"arguments":[{"name":"$token","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"create":{"name":"create","phpdoc":[],"attributes":[],"arguments":[{"name":"$expiration","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$token","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$session","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"destroy":{"name":"destroy","phpdoc":[],"attributes":[],"arguments":[{"name":"$token","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"destroy_others":{"name":"destroy_others","phpdoc":[],"attributes":[],"arguments":[{"name":"$token_to_keep","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_still_valid":{"name":"is_still_valid","phpdoc":[],"attributes":[],"arguments":[{"name":"$session","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"destroy_all":{"name":"destroy_all","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"destroy_all_for_all_users":{"name":"destroy_all_for_all_users","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_all":{"name":"get_all","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sessions":{"name":"get_sessions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_session":{"name":"get_session","phpdoc":[],"attributes":[],"arguments":[{"name":"$verifier","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_session":{"name":"update_session","phpdoc":[],"attributes":[],"arguments":[{"name":"$verifier","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$session","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"destroy_other_sessions":{"name":"destroy_other_sessions","phpdoc":[],"attributes":[],"arguments":[{"name":"$verifier","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"destroy_all_sessions":{"name":"destroy_all_sessions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"drop_sessions":{"name":"drop_sessions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_oembed_controller":{"name":"WP_oEmbed_Controller","abstract":false,"final":true,"extends":"","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"register_routes":{"name":"register_routes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item":{"name":"get_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_roles":{"name":"WP_Roles","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$roles":{"name":"$roles","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$role_objects":{"name":"$role_objects","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$role_names":{"name":"$role_names","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$role_key":{"name":"$role_key","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$use_db":{"name":"$use_db","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__call":{"name":"__call","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$arguments","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_init":{"name":"_init","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"reinit":{"name":"reinit","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_role":{"name":"add_role","phpdoc":[],"attributes":[],"arguments":[{"name":"$role","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$display_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capabilities","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_role":{"name":"remove_role","phpdoc":[],"attributes":[],"arguments":[{"name":"$role","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_cap":{"name":"add_cap","phpdoc":[],"attributes":[],"arguments":[{"name":"$role","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cap","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$grant","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_cap":{"name":"remove_cap","phpdoc":[],"attributes":[],"arguments":[{"name":"$role","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cap","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_role":{"name":"get_role","phpdoc":[],"attributes":[],"arguments":[{"name":"$role","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_names":{"name":"get_names","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_role":{"name":"is_role","phpdoc":[],"attributes":[],"arguments":[{"name":"$role","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_http_requests_response":{"name":"WP_HTTP_Requests_Response","abstract":false,"final":false,"extends":"\\WP_HTTP_Response","constants":[],"properties":{"$response":{"name":"$response","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$filename":{"name":"$filename","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"Requests_Response"},{"typehint":"Requests_Response"}],"attributes":[]},{"name":"$filename","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_response_object":{"name":"get_response_object","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_headers":{"name":"get_headers","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_headers":{"name":"set_headers","phpdoc":[],"attributes":[],"arguments":[{"name":"$headers","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"header":{"name":"header","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$replace","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_status":{"name":"get_status","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_status":{"name":"set_status","phpdoc":[],"attributes":[],"arguments":[{"name":"$code","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_data":{"name":"get_data","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_data":{"name":"set_data","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_cookies":{"name":"get_cookies","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"to_array":{"name":"to_array","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"walker":{"name":"Walker","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$tree_type":{"name":"$tree_type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$db_fields":{"name":"$db_fields","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$max_pages":{"name":"$max_pages","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$has_children":{"name":"$has_children","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"start_lvl":{"name":"start_lvl","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"end_lvl":{"name":"end_lvl","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"start_el":{"name":"start_el","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$current_object_id","rank":4,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"end_el":{"name":"end_el","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_element":{"name":"display_element","phpdoc":[],"attributes":[],"arguments":[{"name":"$element","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$children_elements","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_depth","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":5,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"walk":{"name":"walk","phpdoc":[],"attributes":[],"arguments":[{"name":"$elements","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_depth","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"paged_walk":{"name":"paged_walk","phpdoc":[],"attributes":[],"arguments":[{"name":"$elements","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_depth","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$page_num","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$per_page","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_number_of_root_elements":{"name":"get_number_of_root_elements","phpdoc":[],"attributes":[],"arguments":[{"name":"$elements","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"unset_children":{"name":"unset_children","phpdoc":[],"attributes":[],"arguments":[{"name":"$e","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$children_elements","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_nav_menus":{"name":"WP_Customize_Nav_Menus","abstract":false,"final":true,"extends":"","constants":[],"properties":{"$manager":{"name":"$manager","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$previewed_menus":{"name":"$previewed_menus","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$preview_nav_menu_instance_args":{"name":"$preview_nav_menu_instance_args","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$manager","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_nonces":{"name":"filter_nonces","phpdoc":[],"attributes":[],"arguments":[{"name":"$nonces","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_load_available_items":{"name":"ajax_load_available_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"load_available_items_query":{"name":"load_available_items_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"'post_type'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object","rank":1,"variadic":false,"reference":false,"default":"'page'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$page","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_search_available_items":{"name":"ajax_search_available_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"search_available_items_query":{"name":"search_available_items_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"enqueue_scripts":{"name":"enqueue_scripts","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_dynamic_setting_args":{"name":"filter_dynamic_setting_args","phpdoc":[],"attributes":[],"arguments":[{"name":"$setting_args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$setting_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_dynamic_setting_class":{"name":"filter_dynamic_setting_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$setting_class","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$setting_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$setting_args","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"customize_register":{"name":"customize_register","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"intval_base10":{"name":"intval_base10","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"available_item_types":{"name":"available_item_types","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"insert_auto_draft_post":{"name":"insert_auto_draft_post","phpdoc":[],"attributes":[],"arguments":[{"name":"$postarr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ajax_insert_auto_draft_post":{"name":"ajax_insert_auto_draft_post","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_templates":{"name":"print_templates","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"available_items_template":{"name":"available_items_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_post_type_container":{"name":"print_post_type_container","phpdoc":[],"attributes":[],"arguments":[{"name":"$available_item_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_custom_links_available_menu_item":{"name":"print_custom_links_available_menu_item","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"customize_dynamic_partial_args":{"name":"customize_dynamic_partial_args","phpdoc":[],"attributes":[],"arguments":[{"name":"$partial_args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$partial_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"customize_preview_init":{"name":"customize_preview_init","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"make_auto_draft_status_previewable":{"name":"make_auto_draft_status_previewable","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize_nav_menus_created_posts":{"name":"sanitize_nav_menus_created_posts","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"save_nav_menus_created_posts":{"name":"save_nav_menus_created_posts","phpdoc":[],"attributes":[],"arguments":[{"name":"$setting","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_wp_nav_menu_args":{"name":"filter_wp_nav_menu_args","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_wp_nav_menu":{"name":"filter_wp_nav_menu","phpdoc":[],"attributes":[],"arguments":[{"name":"$nav_menu_content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"hash_nav_menu_args":{"name":"hash_nav_menu_args","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"customize_preview_enqueue_deps":{"name":"customize_preview_enqueue_deps","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"export_preview_data":{"name":"export_preview_data","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"export_partial_rendered_nav_menu_instances":{"name":"export_partial_rendered_nav_menu_instances","phpdoc":[],"attributes":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_nav_menu_partial":{"name":"render_nav_menu_partial","phpdoc":[],"attributes":[],"arguments":[{"name":"$partial","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$nav_menu_args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp":{"name":"WP","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$public_query_vars":{"name":"$public_query_vars","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$private_query_vars":{"name":"$private_query_vars","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$extra_query_vars":{"name":"$extra_query_vars","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_vars":{"name":"$query_vars","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_string":{"name":"$query_string","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$request":{"name":"$request","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$matched_rule":{"name":"$matched_rule","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$matched_query":{"name":"$matched_query","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$did_permalink":{"name":"$did_permalink","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"add_query_var":{"name":"add_query_var","phpdoc":[],"attributes":[],"arguments":[{"name":"$qv","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_query_var":{"name":"remove_query_var","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_query_var":{"name":"set_query_var","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_request":{"name":"parse_request","phpdoc":[],"attributes":[],"arguments":[{"name":"$extra_query_vars","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"send_headers":{"name":"send_headers","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"build_query_string":{"name":"build_query_string","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_globals":{"name":"register_globals","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"init":{"name":"init","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"query_posts":{"name":"query_posts","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handle_404":{"name":"handle_404","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"main":{"name":"main","phpdoc":[],"attributes":[],"arguments":[{"name":"$query_args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"phpmailer":{"name":"PHPMailer","abstract":false,"final":false,"extends":"","constants":{"STOP_MESSAGE":{"name":"STOP_MESSAGE","value":"0","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"STOP_CONTINUE":{"name":"STOP_CONTINUE","value":"1","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"CRLF":{"name":"CRLF","value":"\"\\r\\n\"","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"STOP_CRITICAL":{"name":"STOP_CRITICAL","value":"2","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"MAX_LINE_LENGTH":{"name":"MAX_LINE_LENGTH","value":"998","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]}},"properties":{"$Version":{"name":"$Version","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Priority":{"name":"$Priority","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$CharSet":{"name":"$CharSet","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ContentType":{"name":"$ContentType","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Encoding":{"name":"$Encoding","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ErrorInfo":{"name":"$ErrorInfo","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$From":{"name":"$From","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$FromName":{"name":"$FromName","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Sender":{"name":"$Sender","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ReturnPath":{"name":"$ReturnPath","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Subject":{"name":"$Subject","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Body":{"name":"$Body","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$AltBody":{"name":"$AltBody","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Ical":{"name":"$Ical","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$MIMEBody":{"name":"$MIMEBody","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$MIMEHeader":{"name":"$MIMEHeader","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$mailHeader":{"name":"$mailHeader","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$WordWrap":{"name":"$WordWrap","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Mailer":{"name":"$Mailer","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Sendmail":{"name":"$Sendmail","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$UseSendmailOptions":{"name":"$UseSendmailOptions","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$PluginDir":{"name":"$PluginDir","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ConfirmReadingTo":{"name":"$ConfirmReadingTo","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Hostname":{"name":"$Hostname","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$MessageID":{"name":"$MessageID","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$MessageDate":{"name":"$MessageDate","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Host":{"name":"$Host","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Port":{"name":"$Port","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Helo":{"name":"$Helo","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$SMTPSecure":{"name":"$SMTPSecure","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$SMTPAutoTLS":{"name":"$SMTPAutoTLS","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$SMTPAuth":{"name":"$SMTPAuth","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$SMTPOptions":{"name":"$SMTPOptions","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Username":{"name":"$Username","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Password":{"name":"$Password","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$AuthType":{"name":"$AuthType","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Realm":{"name":"$Realm","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Workstation":{"name":"$Workstation","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Timeout":{"name":"$Timeout","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$SMTPDebug":{"name":"$SMTPDebug","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Debugoutput":{"name":"$Debugoutput","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$SMTPKeepAlive":{"name":"$SMTPKeepAlive","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$SingleTo":{"name":"$SingleTo","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$SingleToArray":{"name":"$SingleToArray","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$do_verp":{"name":"$do_verp","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$AllowEmpty":{"name":"$AllowEmpty","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$LE":{"name":"$LE","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$DKIM_selector":{"name":"$DKIM_selector","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$DKIM_identity":{"name":"$DKIM_identity","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$DKIM_passphrase":{"name":"$DKIM_passphrase","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$DKIM_domain":{"name":"$DKIM_domain","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$DKIM_private":{"name":"$DKIM_private","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$DKIM_private_string":{"name":"$DKIM_private_string","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$action_function":{"name":"$action_function","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$XMailer":{"name":"$XMailer","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$validator":{"name":"$validator","visibility":"public","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$smtp":{"name":"$smtp","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$to":{"name":"$to","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cc":{"name":"$cc","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$bcc":{"name":"$bcc","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ReplyTo":{"name":"$ReplyTo","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$all_recipients":{"name":"$all_recipients","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$RecipientsQueue":{"name":"$RecipientsQueue","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ReplyToQueue":{"name":"$ReplyToQueue","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$attachment":{"name":"$attachment","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$CustomHeader":{"name":"$CustomHeader","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$lastMessageID":{"name":"$lastMessageID","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$message_type":{"name":"$message_type","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$boundary":{"name":"$boundary","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$language":{"name":"$language","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$error_count":{"name":"$error_count","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sign_cert_file":{"name":"$sign_cert_file","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sign_key_file":{"name":"$sign_key_file","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sign_extracerts_file":{"name":"$sign_extracerts_file","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sign_key_pass":{"name":"$sign_key_pass","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$exceptions":{"name":"$exceptions","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$uniqueid":{"name":"$uniqueid","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$exceptions","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__destruct":{"name":"__destruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mailpassthru":{"name":"mailPassthru","phpdoc":[],"attributes":[],"arguments":[{"name":"$to","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$subject","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$body","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$header","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$params","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"edebug":{"name":"edebug","phpdoc":[],"attributes":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ishtml":{"name":"isHTML","phpdoc":[],"attributes":[],"arguments":[{"name":"$isHtml","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"issmtp":{"name":"isSMTP","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ismail":{"name":"isMail","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"issendmail":{"name":"isSendmail","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"isqmail":{"name":"isQmail","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"addaddress":{"name":"addAddress","phpdoc":[],"attributes":[],"arguments":[{"name":"$address","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"addcc":{"name":"addCC","phpdoc":[],"attributes":[],"arguments":[{"name":"$address","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"addbcc":{"name":"addBCC","phpdoc":[],"attributes":[],"arguments":[{"name":"$address","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"addreplyto":{"name":"addReplyTo","phpdoc":[],"attributes":[],"arguments":[{"name":"$address","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"addorenqueueanaddress":{"name":"addOrEnqueueAnAddress","phpdoc":[],"attributes":[],"arguments":[{"name":"$kind","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$address","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"addanaddress":{"name":"addAnAddress","phpdoc":[],"attributes":[],"arguments":[{"name":"$kind","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$address","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parseaddresses":{"name":"parseAddresses","phpdoc":[],"attributes":[],"arguments":[{"name":"$addrstr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$useimap","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"setfrom":{"name":"setFrom","phpdoc":[],"attributes":[],"arguments":[{"name":"$address","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$auto","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getlastmessageid":{"name":"getLastMessageID","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"validateaddress":{"name":"validateAddress","phpdoc":[],"attributes":[],"arguments":[{"name":"$address","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$patternselect","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"idnsupported":{"name":"idnSupported","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"punyencodeaddress":{"name":"punyencodeAddress","phpdoc":[],"attributes":[],"arguments":[{"name":"$address","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"send":{"name":"send","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"presend":{"name":"preSend","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"postsend":{"name":"postSend","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sendmailsend":{"name":"sendmailSend","phpdoc":[],"attributes":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$body","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"isshellsafe":{"name":"isShellSafe","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"ispermittedpath":{"name":"isPermittedPath","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"fileisaccessible":{"name":"fileIsAccessible","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"mailsend":{"name":"mailSend","phpdoc":[],"attributes":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$body","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getsmtpinstance":{"name":"getSMTPInstance","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"smtpsend":{"name":"smtpSend","phpdoc":[],"attributes":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$body","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"smtpconnect":{"name":"smtpConnect","phpdoc":[],"attributes":[],"arguments":[{"name":"$options","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"smtpclose":{"name":"smtpClose","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"setlanguage":{"name":"setLanguage","phpdoc":[],"attributes":[],"arguments":[{"name":"$langcode","rank":0,"variadic":false,"reference":false,"default":"'en'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$lang_path","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"gettranslations":{"name":"getTranslations","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"addrappend":{"name":"addrAppend","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$addr","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"addrformat":{"name":"addrFormat","phpdoc":[],"attributes":[],"arguments":[{"name":"$addr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wraptext":{"name":"wrapText","phpdoc":[],"attributes":[],"arguments":[{"name":"$message","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$length","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$qp_mode","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"utf8charboundary":{"name":"utf8CharBoundary","phpdoc":[],"attributes":[],"arguments":[{"name":"$encodedText","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$maxLength","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"setwordwrap":{"name":"setWordWrap","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"createheader":{"name":"createHeader","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getmailmime":{"name":"getMailMIME","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getsentmimemessage":{"name":"getSentMIMEMessage","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"generateid":{"name":"generateId","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"createbody":{"name":"createBody","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getboundary":{"name":"getBoundary","phpdoc":[],"attributes":[],"arguments":[{"name":"$boundary","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$charSet","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$contentType","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$encoding","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"endboundary":{"name":"endBoundary","phpdoc":[],"attributes":[],"arguments":[{"name":"$boundary","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"setmessagetype":{"name":"setMessageType","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"headerline":{"name":"headerLine","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"textline":{"name":"textLine","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"addattachment":{"name":"addAttachment","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$encoding","rank":2,"variadic":false,"reference":false,"default":"'base64'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$disposition","rank":4,"variadic":false,"reference":false,"default":"'attachment'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getattachments":{"name":"getAttachments","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"attachall":{"name":"attachAll","phpdoc":[],"attributes":[],"arguments":[{"name":"$disposition_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$boundary","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"encodefile":{"name":"encodeFile","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$encoding","rank":1,"variadic":false,"reference":false,"default":"'base64'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"encodestring":{"name":"encodeString","phpdoc":[],"attributes":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$encoding","rank":1,"variadic":false,"reference":false,"default":"'base64'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"encodeheader":{"name":"encodeHeader","phpdoc":[],"attributes":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$position","rank":1,"variadic":false,"reference":false,"default":"'text'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"hasmultibytes":{"name":"hasMultiBytes","phpdoc":[],"attributes":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"has8bitchars":{"name":"has8bitChars","phpdoc":[],"attributes":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"base64encodewrapmb":{"name":"base64EncodeWrapMB","phpdoc":[],"attributes":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$linebreak","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"encodeqp":{"name":"encodeQP","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$line_max","rank":1,"variadic":false,"reference":false,"default":"76","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"encodeqpphp":{"name":"encodeQPphp","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$line_max","rank":1,"variadic":false,"reference":false,"default":"76","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$space_conv","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"encodeq":{"name":"encodeQ","phpdoc":[],"attributes":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$position","rank":1,"variadic":false,"reference":false,"default":"'text'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"addstringattachment":{"name":"addStringAttachment","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filename","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$encoding","rank":2,"variadic":false,"reference":false,"default":"'base64'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$disposition","rank":4,"variadic":false,"reference":false,"default":"'attachment'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"addembeddedimage":{"name":"addEmbeddedImage","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cid","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$encoding","rank":3,"variadic":false,"reference":false,"default":"'base64'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$disposition","rank":5,"variadic":false,"reference":false,"default":"'inline'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"addstringembeddedimage":{"name":"addStringEmbeddedImage","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cid","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$encoding","rank":3,"variadic":false,"reference":false,"default":"'base64'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$disposition","rank":5,"variadic":false,"reference":false,"default":"'inline'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"inlineimageexists":{"name":"inlineImageExists","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"attachmentexists":{"name":"attachmentExists","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"alternativeexists":{"name":"alternativeExists","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"clearqueuedaddresses":{"name":"clearQueuedAddresses","phpdoc":[],"attributes":[],"arguments":[{"name":"$kind","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"clearaddresses":{"name":"clearAddresses","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"clearccs":{"name":"clearCCs","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"clearbccs":{"name":"clearBCCs","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"clearreplytos":{"name":"clearReplyTos","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"clearallrecipients":{"name":"clearAllRecipients","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"clearattachments":{"name":"clearAttachments","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"clearcustomheaders":{"name":"clearCustomHeaders","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"seterror":{"name":"setError","phpdoc":[],"attributes":[],"arguments":[{"name":"$msg","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"rfcdate":{"name":"rfcDate","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"serverhostname":{"name":"serverHostname","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"lang":{"name":"lang","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"iserror":{"name":"isError","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"fixeol":{"name":"fixEOL","phpdoc":[],"attributes":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"addcustomheader":{"name":"addCustomHeader","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getcustomheaders":{"name":"getCustomHeaders","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"msghtml":{"name":"msgHTML","phpdoc":[],"attributes":[],"arguments":[{"name":"$message","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$basedir","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$advanced","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"html2text":{"name":"html2text","phpdoc":[],"attributes":[],"arguments":[{"name":"$html","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$advanced","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_mime_types":{"name":"_mime_types","phpdoc":[],"attributes":[],"arguments":[{"name":"$ext","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"filenametotype":{"name":"filenameToType","phpdoc":[],"attributes":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"mb_pathinfo":{"name":"mb_pathinfo","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"set":{"name":"set","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"secureheader":{"name":"secureHeader","phpdoc":[],"attributes":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"normalizebreaks":{"name":"normalizeBreaks","phpdoc":[],"attributes":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$breaktype","rank":1,"variadic":false,"reference":false,"default":"\"\\r\\n\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"sign":{"name":"sign","phpdoc":[],"attributes":[],"arguments":[{"name":"$cert_filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key_filename","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key_pass","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$extracerts_filename","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"dkim_qp":{"name":"DKIM_QP","phpdoc":[],"attributes":[],"arguments":[{"name":"$txt","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"dkim_sign":{"name":"DKIM_Sign","phpdoc":[],"attributes":[],"arguments":[{"name":"$signHeader","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"dkim_headerc":{"name":"DKIM_HeaderC","phpdoc":[],"attributes":[],"arguments":[{"name":"$signHeader","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"dkim_bodyc":{"name":"DKIM_BodyC","phpdoc":[],"attributes":[],"arguments":[{"name":"$body","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"dkim_add":{"name":"DKIM_Add","phpdoc":[],"attributes":[],"arguments":[{"name":"$headers_line","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$subject","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$body","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"haslinelongerthanmax":{"name":"hasLineLongerThanMax","phpdoc":[],"attributes":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"gettoaddresses":{"name":"getToAddresses","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getccaddresses":{"name":"getCcAddresses","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getbccaddresses":{"name":"getBccAddresses","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getreplytoaddresses":{"name":"getReplyToAddresses","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getallrecipientaddresses":{"name":"getAllRecipientAddresses","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"docallback":{"name":"doCallback","phpdoc":[],"attributes":[],"arguments":[{"name":"$isSent","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$to","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cc","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$bcc","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$subject","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$body","rank":5,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$from","rank":6,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"phpmailerexception":{"name":"phpmailerException","abstract":false,"final":false,"extends":"\\exception","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"errormessage":{"name":"errorMessage","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"walker_categorydropdown":{"name":"Walker_CategoryDropdown","abstract":false,"final":false,"extends":"\\Walker","constants":[],"properties":{"$tree_type":{"name":"$tree_type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$db_fields":{"name":"$db_fields","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"start_el":{"name":"start_el","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$category","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":4,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_site_query":{"name":"WP_Site_Query","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$request":{"name":"$request","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sql_clauses":{"name":"$sql_clauses","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$date_query":{"name":"$date_query","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_vars":{"name":"$query_vars","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_var_defaults":{"name":"$query_var_defaults","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sites":{"name":"$sites","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$found_sites":{"name":"$found_sites","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$max_num_pages":{"name":"$max_num_pages","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_query":{"name":"parse_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"query":{"name":"query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sites":{"name":"get_sites","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_site_ids":{"name":"get_site_ids","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_found_sites":{"name":"set_found_sites","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_search_sql":{"name":"get_search_sql","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$columns","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_orderby":{"name":"parse_orderby","phpdoc":[],"attributes":[],"arguments":[{"name":"$orderby","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_order":{"name":"parse_order","phpdoc":[],"attributes":[],"arguments":[{"name":"$order","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_panel":{"name":"WP_Customize_Panel","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$instance_count":{"name":"$instance_count","visibility":"protected","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$instance_number":{"name":"$instance_number","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$manager":{"name":"$manager","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$id":{"name":"$id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$priority":{"name":"$priority","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$capability":{"name":"$capability","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$theme_supports":{"name":"$theme_supports","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$title":{"name":"$title","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$description":{"name":"$description","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$auto_expand_sole_section":{"name":"$auto_expand_sole_section","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sections":{"name":"$sections","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$active_callback":{"name":"$active_callback","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$manager","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"active":{"name":"active","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"active_callback":{"name":"active_callback","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"json":{"name":"json","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_capabilities":{"name":"check_capabilities","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_content":{"name":"get_content","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"maybe_render":{"name":"maybe_render","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render":{"name":"render","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_content":{"name":"render_content","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_template":{"name":"print_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_template":{"name":"render_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"content_template":{"name":"content_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie":{"name":"SimplePie","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$data":{"name":"$data","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$error":{"name":"$error","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sanitize":{"name":"$sanitize","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$useragent":{"name":"$useragent","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$feed_url":{"name":"$feed_url","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$file":{"name":"$file","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$raw_data":{"name":"$raw_data","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$timeout":{"name":"$timeout","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$force_fsockopen":{"name":"$force_fsockopen","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$force_feed":{"name":"$force_feed","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cache":{"name":"$cache","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cache_duration":{"name":"$cache_duration","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$autodiscovery_cache_duration":{"name":"$autodiscovery_cache_duration","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cache_location":{"name":"$cache_location","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cache_name_function":{"name":"$cache_name_function","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$order_by_date":{"name":"$order_by_date","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$input_encoding":{"name":"$input_encoding","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$autodiscovery":{"name":"$autodiscovery","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$registry":{"name":"$registry","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$max_checked_feeds":{"name":"$max_checked_feeds","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$all_discovered_feeds":{"name":"$all_discovered_feeds","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$image_handler":{"name":"$image_handler","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$multifeed_url":{"name":"$multifeed_url","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$multifeed_objects":{"name":"$multifeed_objects","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$config_settings":{"name":"$config_settings","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$item_limit":{"name":"$item_limit","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$strip_attributes":{"name":"$strip_attributes","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$strip_htmltags":{"name":"$strip_htmltags","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__tostring":{"name":"__toString","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__destruct":{"name":"__destruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"force_feed":{"name":"force_feed","phpdoc":[],"attributes":[],"arguments":[{"name":"$enable","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_feed_url":{"name":"set_feed_url","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_file":{"name":"set_file","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_raw_data":{"name":"set_raw_data","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_timeout":{"name":"set_timeout","phpdoc":[],"attributes":[],"arguments":[{"name":"$timeout","rank":0,"variadic":false,"reference":false,"default":"10","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"force_fsockopen":{"name":"force_fsockopen","phpdoc":[],"attributes":[],"arguments":[{"name":"$enable","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"enable_cache":{"name":"enable_cache","phpdoc":[],"attributes":[],"arguments":[{"name":"$enable","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_cache_duration":{"name":"set_cache_duration","phpdoc":[],"attributes":[],"arguments":[{"name":"$seconds","rank":0,"variadic":false,"reference":false,"default":"3600","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_autodiscovery_cache_duration":{"name":"set_autodiscovery_cache_duration","phpdoc":[],"attributes":[],"arguments":[{"name":"$seconds","rank":0,"variadic":false,"reference":false,"default":"604800","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_cache_location":{"name":"set_cache_location","phpdoc":[],"attributes":[],"arguments":[{"name":"$location","rank":0,"variadic":false,"reference":false,"default":"'.\/cache'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"enable_order_by_date":{"name":"enable_order_by_date","phpdoc":[],"attributes":[],"arguments":[{"name":"$enable","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_input_encoding":{"name":"set_input_encoding","phpdoc":[],"attributes":[],"arguments":[{"name":"$encoding","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_autodiscovery_level":{"name":"set_autodiscovery_level","phpdoc":[],"attributes":[],"arguments":[{"name":"$level","rank":0,"variadic":false,"reference":false,"default":"SIMPLEPIE_LOCATOR_ALL","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_registry":{"name":"get_registry","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":true,"returntype":"one","returntypehints":[]},"set_cache_class":{"name":"set_cache_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"'SimplePie_Cache'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_locator_class":{"name":"set_locator_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"'SimplePie_Locator'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_parser_class":{"name":"set_parser_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"'SimplePie_Parser'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_file_class":{"name":"set_file_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"'SimplePie_File'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_sanitize_class":{"name":"set_sanitize_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"'SimplePie_Sanitize'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_item_class":{"name":"set_item_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"'SimplePie_Item'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_author_class":{"name":"set_author_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"'SimplePie_Author'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_category_class":{"name":"set_category_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"'SimplePie_Category'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_enclosure_class":{"name":"set_enclosure_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"'SimplePie_Enclosure'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_caption_class":{"name":"set_caption_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"'SimplePie_Caption'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_copyright_class":{"name":"set_copyright_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"'SimplePie_Copyright'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_credit_class":{"name":"set_credit_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"'SimplePie_Credit'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_rating_class":{"name":"set_rating_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"'SimplePie_Rating'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_restriction_class":{"name":"set_restriction_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"'SimplePie_Restriction'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_content_type_sniffer_class":{"name":"set_content_type_sniffer_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"'SimplePie_Content_Type_Sniffer'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_source_class":{"name":"set_source_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"'SimplePie_Source'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_useragent":{"name":"set_useragent","phpdoc":[],"attributes":[],"arguments":[{"name":"$ua","rank":0,"variadic":false,"reference":false,"default":"SIMPLEPIE_USERAGENT","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_cache_name_function":{"name":"set_cache_name_function","phpdoc":[],"attributes":[],"arguments":[{"name":"$function","rank":0,"variadic":false,"reference":false,"default":"'md5'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_stupidly_fast":{"name":"set_stupidly_fast","phpdoc":[],"attributes":[],"arguments":[{"name":"$set","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_max_checked_feeds":{"name":"set_max_checked_feeds","phpdoc":[],"attributes":[],"arguments":[{"name":"$max","rank":0,"variadic":false,"reference":false,"default":"10","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_div":{"name":"remove_div","phpdoc":[],"attributes":[],"arguments":[{"name":"$enable","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"strip_htmltags":{"name":"strip_htmltags","phpdoc":[],"attributes":[],"arguments":[{"name":"$tags","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$encode","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"encode_instead_of_strip":{"name":"encode_instead_of_strip","phpdoc":[],"attributes":[],"arguments":[{"name":"$enable","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"strip_attributes":{"name":"strip_attributes","phpdoc":[],"attributes":[],"arguments":[{"name":"$attribs","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_output_encoding":{"name":"set_output_encoding","phpdoc":[],"attributes":[],"arguments":[{"name":"$encoding","rank":0,"variadic":false,"reference":false,"default":"'UTF-8'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"strip_comments":{"name":"strip_comments","phpdoc":[],"attributes":[],"arguments":[{"name":"$strip","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_url_replacements":{"name":"set_url_replacements","phpdoc":[],"attributes":[],"arguments":[{"name":"$element_attribute","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_image_handler":{"name":"set_image_handler","phpdoc":[],"attributes":[],"arguments":[{"name":"$page","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$qs","rank":1,"variadic":false,"reference":false,"default":"'i'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_item_limit":{"name":"set_item_limit","phpdoc":[],"attributes":[],"arguments":[{"name":"$limit","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"init":{"name":"init","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"fetch_data":{"name":"fetch_data","phpdoc":[],"attributes":[],"arguments":[{"name":"$cache","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"error":{"name":"error","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_raw_data":{"name":"get_raw_data","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_encoding":{"name":"get_encoding","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handle_content_type":{"name":"handle_content_type","phpdoc":[],"attributes":[],"arguments":[{"name":"$mime","rank":0,"variadic":false,"reference":false,"default":"'text\/html'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_type":{"name":"get_type","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"subscribe_url":{"name":"subscribe_url","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_feed_tags":{"name":"get_feed_tags","phpdoc":[],"attributes":[],"arguments":[{"name":"$namespace","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tag","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_channel_tags":{"name":"get_channel_tags","phpdoc":[],"attributes":[],"arguments":[{"name":"$namespace","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tag","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_image_tags":{"name":"get_image_tags","phpdoc":[],"attributes":[],"arguments":[{"name":"$namespace","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tag","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_base":{"name":"get_base","phpdoc":[],"attributes":[],"arguments":[{"name":"$element","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize":{"name":"sanitize","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$base","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_title":{"name":"get_title","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_category":{"name":"get_category","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_categories":{"name":"get_categories","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_author":{"name":"get_author","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_authors":{"name":"get_authors","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_contributor":{"name":"get_contributor","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_contributors":{"name":"get_contributors","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_link":{"name":"get_link","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$rel","rank":1,"variadic":false,"reference":false,"default":"'alternate'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_permalink":{"name":"get_permalink","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_links":{"name":"get_links","phpdoc":[],"attributes":[],"arguments":[{"name":"$rel","rank":0,"variadic":false,"reference":false,"default":"'alternate'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_all_discovered_feeds":{"name":"get_all_discovered_feeds","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_description":{"name":"get_description","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_copyright":{"name":"get_copyright","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_language":{"name":"get_language","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_latitude":{"name":"get_latitude","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_longitude":{"name":"get_longitude","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_image_title":{"name":"get_image_title","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_image_url":{"name":"get_image_url","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_image_link":{"name":"get_image_link","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_image_width":{"name":"get_image_width","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_image_height":{"name":"get_image_height","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_quantity":{"name":"get_item_quantity","phpdoc":[],"attributes":[],"arguments":[{"name":"$max","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item":{"name":"get_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items":{"name":"get_items","phpdoc":[],"attributes":[],"arguments":[{"name":"$start","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$end","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_favicon_handler":{"name":"set_favicon_handler","phpdoc":[],"attributes":[],"arguments":[{"name":"$page","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$qs","rank":1,"variadic":false,"reference":false,"default":"'i'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_favicon":{"name":"get_favicon","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__call":{"name":"__call","phpdoc":[],"attributes":[],"arguments":[{"name":"$method","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sort_items":{"name":"sort_items","phpdoc":[],"attributes":[],"arguments":[{"name":"$a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"merge_items":{"name":"merge_items","phpdoc":[],"attributes":[],"arguments":[{"name":"$urls","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$start","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$end","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$limit","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_term_query":{"name":"WP_Term_Query","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$request":{"name":"$request","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$meta_query":{"name":"$meta_query","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$meta_query_clauses":{"name":"$meta_query_clauses","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sql_clauses":{"name":"$sql_clauses","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_vars":{"name":"$query_vars","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_var_defaults":{"name":"$query_var_defaults","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$terms":{"name":"$terms","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_query":{"name":"parse_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"query":{"name":"query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_terms":{"name":"get_terms","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_orderby":{"name":"parse_orderby","phpdoc":[],"attributes":[],"arguments":[{"name":"$orderby_raw","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_orderby_meta":{"name":"parse_orderby_meta","phpdoc":[],"attributes":[],"arguments":[{"name":"$orderby_raw","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_order":{"name":"parse_order","phpdoc":[],"attributes":[],"arguments":[{"name":"$order","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_search_sql":{"name":"get_search_sql","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_locale_switcher":{"name":"WP_Locale_Switcher","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$locales":{"name":"$locales","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$original_locale":{"name":"$original_locale","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$available_languages":{"name":"$available_languages","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"init":{"name":"init","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"switch_to_locale":{"name":"switch_to_locale","phpdoc":[],"attributes":[],"arguments":[{"name":"$locale","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"restore_previous_locale":{"name":"restore_previous_locale","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"restore_current_locale":{"name":"restore_current_locale","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_switched":{"name":"is_switched","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_locale":{"name":"filter_locale","phpdoc":[],"attributes":[],"arguments":[{"name":"$locale","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"load_translations":{"name":"load_translations","phpdoc":[],"attributes":[],"arguments":[{"name":"$locale","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"change_locale":{"name":"change_locale","phpdoc":[],"attributes":[],"arguments":[{"name":"$locale","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"walker_comment":{"name":"Walker_Comment","abstract":false,"final":false,"extends":"\\Walker","constants":[],"properties":{"$tree_type":{"name":"$tree_type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$db_fields":{"name":"$db_fields","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"start_lvl":{"name":"start_lvl","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"end_lvl":{"name":"end_lvl","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_element":{"name":"display_element","phpdoc":[],"attributes":[],"arguments":[{"name":"$element","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$children_elements","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_depth","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":5,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"start_el":{"name":"start_el","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":4,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"end_el":{"name":"end_el","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ping":{"name":"ping","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"comment":{"name":"comment","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"html5_comment":{"name":"html5_comment","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_http_cookie":{"name":"WP_Http_Cookie","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$name":{"name":"$name","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$value":{"name":"$value","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$expires":{"name":"$expires","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$path":{"name":"$path","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$domain":{"name":"$domain","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$requested_url","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test":{"name":"test","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getheadervalue":{"name":"getHeaderValue","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getfullheader":{"name":"getFullHeader","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_attributes":{"name":"get_attributes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rewrite":{"name":"WP_Rewrite","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$permalink_structure":{"name":"$permalink_structure","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$use_trailing_slashes":{"name":"$use_trailing_slashes","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$author_base":{"name":"$author_base","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$author_structure":{"name":"$author_structure","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$date_structure":{"name":"$date_structure","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$page_structure":{"name":"$page_structure","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$search_base":{"name":"$search_base","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$search_structure":{"name":"$search_structure","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comments_base":{"name":"$comments_base","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$pagination_base":{"name":"$pagination_base","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comments_pagination_base":{"name":"$comments_pagination_base","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$feed_base":{"name":"$feed_base","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_feed_structure":{"name":"$comment_feed_structure","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$feed_structure":{"name":"$feed_structure","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$front":{"name":"$front","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$root":{"name":"$root","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$index":{"name":"$index","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$matches":{"name":"$matches","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$rules":{"name":"$rules","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$extra_rules":{"name":"$extra_rules","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$extra_rules_top":{"name":"$extra_rules_top","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$non_wp_rules":{"name":"$non_wp_rules","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$extra_permastructs":{"name":"$extra_permastructs","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$endpoints":{"name":"$endpoints","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$use_verbose_rules":{"name":"$use_verbose_rules","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$use_verbose_page_rules":{"name":"$use_verbose_page_rules","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$rewritecode":{"name":"$rewritecode","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$rewritereplace":{"name":"$rewritereplace","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$queryreplace":{"name":"$queryreplace","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$feeds":{"name":"$feeds","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"using_permalinks":{"name":"using_permalinks","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"using_index_permalinks":{"name":"using_index_permalinks","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"using_mod_rewrite_permalinks":{"name":"using_mod_rewrite_permalinks","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"preg_index":{"name":"preg_index","phpdoc":[],"attributes":[],"arguments":[{"name":"$number","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"page_uri_index":{"name":"page_uri_index","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"page_rewrite_rules":{"name":"page_rewrite_rules","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_date_permastruct":{"name":"get_date_permastruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_year_permastruct":{"name":"get_year_permastruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_month_permastruct":{"name":"get_month_permastruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_day_permastruct":{"name":"get_day_permastruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_category_permastruct":{"name":"get_category_permastruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_tag_permastruct":{"name":"get_tag_permastruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_extra_permastruct":{"name":"get_extra_permastruct","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_author_permastruct":{"name":"get_author_permastruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_search_permastruct":{"name":"get_search_permastruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_page_permastruct":{"name":"get_page_permastruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_feed_permastruct":{"name":"get_feed_permastruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_comment_feed_permastruct":{"name":"get_comment_feed_permastruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_rewrite_tag":{"name":"add_rewrite_tag","phpdoc":[],"attributes":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$regex","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$query","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_rewrite_tag":{"name":"remove_rewrite_tag","phpdoc":[],"attributes":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"generate_rewrite_rules":{"name":"generate_rewrite_rules","phpdoc":[],"attributes":[],"arguments":[{"name":"$permalink_structure","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ep_mask","rank":1,"variadic":false,"reference":false,"default":"EP_NONE","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$paged","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feed","rank":3,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$forcomments","rank":4,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$walk_dirs","rank":5,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$endpoints","rank":6,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"generate_rewrite_rule":{"name":"generate_rewrite_rule","phpdoc":[],"attributes":[],"arguments":[{"name":"$permalink_structure","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$walk_dirs","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"rewrite_rules":{"name":"rewrite_rules","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_rewrite_rules":{"name":"wp_rewrite_rules","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mod_rewrite_rules":{"name":"mod_rewrite_rules","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"iis7_url_rewrite_rules":{"name":"iis7_url_rewrite_rules","phpdoc":[],"attributes":[],"arguments":[{"name":"$add_parent_tags","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_rule":{"name":"add_rule","phpdoc":[],"attributes":[],"arguments":[{"name":"$regex","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$query","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$after","rank":2,"variadic":false,"reference":false,"default":"'bottom'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_external_rule":{"name":"add_external_rule","phpdoc":[],"attributes":[],"arguments":[{"name":"$regex","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$query","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_endpoint":{"name":"add_endpoint","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$places","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$query_var","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_permastruct":{"name":"add_permastruct","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$struct","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_permastruct":{"name":"remove_permastruct","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"flush_rules":{"name":"flush_rules","phpdoc":[],"attributes":[],"arguments":[{"name":"$hard","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"init":{"name":"init","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_permalink_structure":{"name":"set_permalink_structure","phpdoc":[],"attributes":[],"arguments":[{"name":"$permalink_structure","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_category_base":{"name":"set_category_base","phpdoc":[],"attributes":[],"arguments":[{"name":"$category_base","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_tag_base":{"name":"set_tag_base","phpdoc":[],"attributes":[],"arguments":[{"name":"$tag_base","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_http_proxy":{"name":"WP_HTTP_Proxy","abstract":false,"final":false,"extends":"","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"is_enabled":{"name":"is_enabled","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"use_authentication":{"name":"use_authentication","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"host":{"name":"host","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"port":{"name":"port","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"username":{"name":"username","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"password":{"name":"password","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"authentication":{"name":"authentication","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"authentication_header":{"name":"authentication_header","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"send_through_proxy":{"name":"send_through_proxy","phpdoc":[],"attributes":[],"arguments":[{"name":"$uri","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_simplepie_file":{"name":"WP_SimplePie_File","abstract":false,"final":false,"extends":"\\SimplePie_File","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$timeout","rank":1,"variadic":false,"reference":false,"default":"10","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$redirects","rank":2,"variadic":false,"reference":false,"default":"5","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$useragent","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$force_fsockopen","rank":5,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_object_cache":{"name":"WP_Object_Cache","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$cache":{"name":"$cache","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cache_hits":{"name":"$cache_hits","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cache_misses":{"name":"$cache_misses","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$global_groups":{"name":"$global_groups","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$blog_prefix":{"name":"$blog_prefix","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$multisite":{"name":"$multisite","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__get":{"name":"__get","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__set":{"name":"__set","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__isset":{"name":"__isset","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__unset":{"name":"__unset","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add":{"name":"add","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":2,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$expire","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_global_groups":{"name":"add_global_groups","phpdoc":[],"attributes":[],"arguments":[{"name":"$groups","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"decr":{"name":"decr","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$offset","rank":1,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":2,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete":{"name":"delete","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":1,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deprecated","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"flush":{"name":"flush","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get":{"name":"get","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":1,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$force","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$found","rank":3,"variadic":false,"reference":true,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"incr":{"name":"incr","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$offset","rank":1,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":2,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"replace":{"name":"replace","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":2,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$expire","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"reset":{"name":"reset","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set":{"name":"set","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":2,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$expire","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"stats":{"name":"stats","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"switch_to_blog":{"name":"switch_to_blog","phpdoc":[],"attributes":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_exists":{"name":"_exists","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__destruct":{"name":"__destruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_manager":{"name":"WP_Customize_Manager","abstract":false,"final":true,"extends":"","constants":[],"properties":{"$theme":{"name":"$theme","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$original_stylesheet":{"name":"$original_stylesheet","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$previewing":{"name":"$previewing","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$widgets":{"name":"$widgets","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$nav_menus":{"name":"$nav_menus","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$selective_refresh":{"name":"$selective_refresh","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$settings":{"name":"$settings","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$containers":{"name":"$containers","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$panels":{"name":"$panels","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$components":{"name":"$components","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sections":{"name":"$sections","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$controls":{"name":"$controls","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$registered_panel_types":{"name":"$registered_panel_types","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$registered_section_types":{"name":"$registered_section_types","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$registered_control_types":{"name":"$registered_control_types","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$preview_url":{"name":"$preview_url","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$return_url":{"name":"$return_url","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$autofocus":{"name":"$autofocus","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$messenger_channel":{"name":"$messenger_channel","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_post_values":{"name":"$_post_values","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_changeset_uuid":{"name":"$_changeset_uuid","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_changeset_post_id":{"name":"$_changeset_post_id","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_changeset_data":{"name":"$_changeset_data","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$pending_starter_content_settings_ids":{"name":"$pending_starter_content_settings_ids","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$store_changeset_revision":{"name":"$store_changeset_revision","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"doing_ajax":{"name":"doing_ajax","phpdoc":[],"attributes":[],"arguments":[{"name":"$action","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_die":{"name":"wp_die","phpdoc":[],"attributes":[],"arguments":[{"name":"$ajax_message","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_die_handler":{"name":"wp_die_handler","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"setup_theme":{"name":"setup_theme","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"after_setup_theme":{"name":"after_setup_theme","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"start_previewing_theme":{"name":"start_previewing_theme","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"stop_previewing_theme":{"name":"stop_previewing_theme","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"changeset_uuid":{"name":"changeset_uuid","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"theme":{"name":"theme","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"settings":{"name":"settings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"controls":{"name":"controls","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"containers":{"name":"containers","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sections":{"name":"sections","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"panels":{"name":"panels","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_theme_active":{"name":"is_theme_active","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_loaded":{"name":"wp_loaded","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_redirect_status":{"name":"wp_redirect_status","phpdoc":[],"attributes":[],"arguments":[{"name":"$status","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"find_changeset_post_id":{"name":"find_changeset_post_id","phpdoc":[],"attributes":[],"arguments":[{"name":"$uuid","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"changeset_post_id":{"name":"changeset_post_id","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_changeset_post_data":{"name":"get_changeset_post_data","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"changeset_data":{"name":"changeset_data","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"import_theme_starter_content":{"name":"import_theme_starter_content","phpdoc":[],"attributes":[],"arguments":[{"name":"$starter_content","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_starter_content_attachments":{"name":"prepare_starter_content_attachments","phpdoc":[],"attributes":[],"arguments":[{"name":"$attachments","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_save_starter_content_changeset":{"name":"_save_starter_content_changeset","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"unsanitized_post_values":{"name":"unsanitized_post_values","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"post_value":{"name":"post_value","phpdoc":[],"attributes":[],"arguments":[{"name":"$setting","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_post_value":{"name":"set_post_value","phpdoc":[],"attributes":[],"arguments":[{"name":"$setting_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"customize_preview_init":{"name":"customize_preview_init","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_iframe_security_headers":{"name":"filter_iframe_security_headers","phpdoc":[],"attributes":[],"arguments":[{"name":"$headers","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_state_query_params":{"name":"add_state_query_params","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"customize_preview_override_404_status":{"name":"customize_preview_override_404_status","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"customize_preview_base":{"name":"customize_preview_base","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"customize_preview_html5":{"name":"customize_preview_html5","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"customize_preview_loading_style":{"name":"customize_preview_loading_style","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_frameless_preview_messenger_channel":{"name":"remove_frameless_preview_messenger_channel","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"customize_preview_settings":{"name":"customize_preview_settings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"customize_preview_signature":{"name":"customize_preview_signature","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_preview_signature":{"name":"remove_preview_signature","phpdoc":[],"attributes":[],"arguments":[{"name":"$return","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_preview":{"name":"is_preview","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_template":{"name":"get_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_stylesheet":{"name":"get_stylesheet","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_template_root":{"name":"get_template_root","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_stylesheet_root":{"name":"get_stylesheet_root","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"current_theme":{"name":"current_theme","phpdoc":[],"attributes":[],"arguments":[{"name":"$current_theme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"validate_setting_values":{"name":"validate_setting_values","phpdoc":[],"attributes":[],"arguments":[{"name":"$setting_values","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_setting_validity_for_js":{"name":"prepare_setting_validity_for_js","phpdoc":[],"attributes":[],"arguments":[{"name":"$validity","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"save":{"name":"save","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"save_changeset_post":{"name":"save_changeset_post","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"preserve_insert_changeset_post_content":{"name":"preserve_insert_changeset_post_content","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$postarr","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$unsanitized_postarr","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_filter_revision_post_has_changed":{"name":"_filter_revision_post_has_changed","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_has_changed","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$last_revision","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_publish_changeset_values":{"name":"_publish_changeset_values","phpdoc":[],"attributes":[],"arguments":[{"name":"$changeset_post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_stashed_theme_mod_settings":{"name":"update_stashed_theme_mod_settings","phpdoc":[],"attributes":[],"arguments":[{"name":"$inactive_theme_mod_settings","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"refresh_nonces":{"name":"refresh_nonces","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_setting":{"name":"add_setting","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_dynamic_settings":{"name":"add_dynamic_settings","phpdoc":[],"attributes":[],"arguments":[{"name":"$setting_ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_setting":{"name":"get_setting","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_setting":{"name":"remove_setting","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_panel":{"name":"add_panel","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_panel":{"name":"get_panel","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_panel":{"name":"remove_panel","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_panel_type":{"name":"register_panel_type","phpdoc":[],"attributes":[],"arguments":[{"name":"$panel","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_panel_templates":{"name":"render_panel_templates","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_section":{"name":"add_section","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_section":{"name":"get_section","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_section":{"name":"remove_section","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_section_type":{"name":"register_section_type","phpdoc":[],"attributes":[],"arguments":[{"name":"$section","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_section_templates":{"name":"render_section_templates","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_control":{"name":"add_control","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_control":{"name":"get_control","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_control":{"name":"remove_control","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_control_type":{"name":"register_control_type","phpdoc":[],"attributes":[],"arguments":[{"name":"$control","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_control_templates":{"name":"render_control_templates","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_cmp_priority":{"name":"_cmp_priority","phpdoc":[],"attributes":[],"arguments":[{"name":"$a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_controls":{"name":"prepare_controls","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"enqueue_control_scripts":{"name":"enqueue_control_scripts","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_ios":{"name":"is_ios","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_document_title_template":{"name":"get_document_title_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_preview_url":{"name":"set_preview_url","phpdoc":[],"attributes":[],"arguments":[{"name":"$preview_url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_preview_url":{"name":"get_preview_url","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_cross_domain":{"name":"is_cross_domain","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_allowed_urls":{"name":"get_allowed_urls","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_messenger_channel":{"name":"get_messenger_channel","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_return_url":{"name":"set_return_url","phpdoc":[],"attributes":[],"arguments":[{"name":"$return_url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_return_url":{"name":"get_return_url","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_autofocus":{"name":"set_autofocus","phpdoc":[],"attributes":[],"arguments":[{"name":"$autofocus","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_autofocus":{"name":"get_autofocus","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_nonces":{"name":"get_nonces","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"customize_pane_settings":{"name":"customize_pane_settings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_previewable_devices":{"name":"get_previewable_devices","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_controls":{"name":"register_controls","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"has_published_pages":{"name":"has_published_pages","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_dynamic_settings":{"name":"register_dynamic_settings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_sanitize_header_textcolor":{"name":"_sanitize_header_textcolor","phpdoc":[],"attributes":[],"arguments":[{"name":"$color","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_sanitize_background_setting":{"name":"_sanitize_background_setting","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$setting","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"export_header_video_settings":{"name":"export_header_video_settings","phpdoc":[],"attributes":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$selective_refresh","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$partials","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_validate_header_video":{"name":"_validate_header_video","phpdoc":[],"attributes":[],"arguments":[{"name":"$validity","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_validate_external_header_video":{"name":"_validate_external_header_video","phpdoc":[],"attributes":[],"arguments":[{"name":"$validity","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_sanitize_external_header_video":{"name":"_sanitize_external_header_video","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_render_custom_logo_partial":{"name":"_render_custom_logo_partial","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"atomfeed":{"name":"AtomFeed","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$links":{"name":"$links","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$categories":{"name":"$categories","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$entries":{"name":"$entries","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"atomentry":{"name":"AtomEntry","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$links":{"name":"$links","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$categories":{"name":"$categories","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"atomparser":{"name":"AtomParser","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$NS":{"name":"$NS","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ATOM_CONTENT_ELEMENTS":{"name":"$ATOM_CONTENT_ELEMENTS","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ATOM_SIMPLE_ELEMENTS":{"name":"$ATOM_SIMPLE_ELEMENTS","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$debug":{"name":"$debug","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$depth":{"name":"$depth","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$indent":{"name":"$indent","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$in_content":{"name":"$in_content","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ns_contexts":{"name":"$ns_contexts","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ns_decls":{"name":"$ns_decls","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$content_ns_decls":{"name":"$content_ns_decls","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$content_ns_contexts":{"name":"$content_ns_contexts","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_xhtml":{"name":"$is_xhtml","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_html":{"name":"$is_html","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_text":{"name":"$is_text","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$skipped_div":{"name":"$skipped_div","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$FILE":{"name":"$FILE","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$feed":{"name":"$feed","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$current":{"name":"$current","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"atomparser":{"name":"AtomParser","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_p":{"name":"_p","phpdoc":[],"attributes":[],"arguments":[{"name":"$msg","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"error_handler":{"name":"error_handler","phpdoc":[],"attributes":[],"arguments":[{"name":"$log_level","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$log_text","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$error_file","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$error_line","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse":{"name":"parse","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"start_element":{"name":"start_element","phpdoc":[],"attributes":[],"arguments":[{"name":"$parser","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attrs","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"end_element":{"name":"end_element","phpdoc":[],"attributes":[],"arguments":[{"name":"$parser","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"start_ns":{"name":"start_ns","phpdoc":[],"attributes":[],"arguments":[{"name":"$parser","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$prefix","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$uri","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"end_ns":{"name":"end_ns","phpdoc":[],"attributes":[],"arguments":[{"name":"$parser","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$prefix","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"cdata":{"name":"cdata","phpdoc":[],"attributes":[],"arguments":[{"name":"$parser","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_default":{"name":"_default","phpdoc":[],"attributes":[],"arguments":[{"name":"$parser","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ns_to_prefix":{"name":"ns_to_prefix","phpdoc":[],"attributes":[],"arguments":[{"name":"$qname","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attr","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_declared_content_ns":{"name":"is_declared_content_ns","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_mapping","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"xml_escape":{"name":"xml_escape","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_text_diff_renderer_table":{"name":"WP_Text_Diff_Renderer_Table","abstract":false,"final":false,"extends":"\\Text_Diff_Renderer","constants":[],"properties":{"$_leading_context_lines":{"name":"$_leading_context_lines","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_trailing_context_lines":{"name":"$_trailing_context_lines","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_diff_threshold":{"name":"$_diff_threshold","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$inline_diff_renderer":{"name":"$inline_diff_renderer","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_show_split_view":{"name":"$_show_split_view","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$compat_fields":{"name":"$compat_fields","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$params","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_startblock":{"name":"_startBlock","phpdoc":[],"attributes":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_lines":{"name":"_lines","phpdoc":[],"attributes":[],"arguments":[{"name":"$lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$prefix","rank":1,"variadic":false,"reference":false,"default":"' '","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"addedline":{"name":"addedLine","phpdoc":[],"attributes":[],"arguments":[{"name":"$line","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"deletedline":{"name":"deletedLine","phpdoc":[],"attributes":[],"arguments":[{"name":"$line","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"contextline":{"name":"contextLine","phpdoc":[],"attributes":[],"arguments":[{"name":"$line","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"emptyline":{"name":"emptyLine","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_added":{"name":"_added","phpdoc":[],"attributes":[],"arguments":[{"name":"$lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$encode","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_deleted":{"name":"_deleted","phpdoc":[],"attributes":[],"arguments":[{"name":"$lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$encode","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_context":{"name":"_context","phpdoc":[],"attributes":[],"arguments":[{"name":"$lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$encode","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_changed":{"name":"_changed","phpdoc":[],"attributes":[],"arguments":[{"name":"$orig","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$final","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"interleave_changed_lines":{"name":"interleave_changed_lines","phpdoc":[],"attributes":[],"arguments":[{"name":"$orig","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$final","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"compute_string_distance":{"name":"compute_string_distance","phpdoc":[],"attributes":[],"arguments":[{"name":"$string1","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$string2","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"difference":{"name":"difference","phpdoc":[],"attributes":[],"arguments":[{"name":"$a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__get":{"name":"__get","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__set":{"name":"__set","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__isset":{"name":"__isset","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__unset":{"name":"__unset","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_xmlrpc_server":{"name":"wp_xmlrpc_server","abstract":false,"final":false,"extends":"\\IXR_Server","constants":[],"properties":{"$methods":{"name":"$methods","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$blog_options":{"name":"$blog_options","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$error":{"name":"$error","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$auth_failed":{"name":"$auth_failed","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__call":{"name":"__call","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$arguments","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"serve_request":{"name":"serve_request","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sayhello":{"name":"sayHello","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"addtwonumbers":{"name":"addTwoNumbers","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"login":{"name":"login","phpdoc":[],"attributes":[],"arguments":[{"name":"$username","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$password","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"login_pass_ok":{"name":"login_pass_ok","phpdoc":[],"attributes":[],"arguments":[{"name":"$username","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$password","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"escape":{"name":"escape","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_custom_fields":{"name":"get_custom_fields","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_custom_fields":{"name":"set_custom_fields","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fields","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"initialise_blog_option_info":{"name":"initialise_blog_option_info","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getusersblogs":{"name":"wp_getUsersBlogs","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"minimum_args":{"name":"minimum_args","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$count","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_prepare_taxonomy":{"name":"_prepare_taxonomy","phpdoc":[],"attributes":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fields","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_prepare_term":{"name":"_prepare_term","phpdoc":[],"attributes":[],"arguments":[{"name":"$term","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_convert_date":{"name":"_convert_date","phpdoc":[],"attributes":[],"arguments":[{"name":"$date","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_convert_date_gmt":{"name":"_convert_date_gmt","phpdoc":[],"attributes":[],"arguments":[{"name":"$date_gmt","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$date","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_prepare_post":{"name":"_prepare_post","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fields","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_prepare_post_type":{"name":"_prepare_post_type","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fields","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_prepare_media_item":{"name":"_prepare_media_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$media_item","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$thumbnail_size","rank":1,"variadic":false,"reference":false,"default":"'thumbnail'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_prepare_page":{"name":"_prepare_page","phpdoc":[],"attributes":[],"arguments":[{"name":"$page","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_prepare_comment":{"name":"_prepare_comment","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_prepare_user":{"name":"_prepare_user","phpdoc":[],"attributes":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fields","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_newpost":{"name":"wp_newPost","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_is_greater_than_one":{"name":"_is_greater_than_one","phpdoc":[],"attributes":[],"arguments":[{"name":"$count","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_toggle_sticky":{"name":"_toggle_sticky","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$update","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_insert_post":{"name":"_insert_post","phpdoc":[],"attributes":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$content_struct","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_editpost":{"name":"wp_editPost","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_deletepost":{"name":"wp_deletePost","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getpost":{"name":"wp_getPost","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getposts":{"name":"wp_getPosts","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_newterm":{"name":"wp_newTerm","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_editterm":{"name":"wp_editTerm","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_deleteterm":{"name":"wp_deleteTerm","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getterm":{"name":"wp_getTerm","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getterms":{"name":"wp_getTerms","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_gettaxonomy":{"name":"wp_getTaxonomy","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_gettaxonomies":{"name":"wp_getTaxonomies","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getuser":{"name":"wp_getUser","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getusers":{"name":"wp_getUsers","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getprofile":{"name":"wp_getProfile","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_editprofile":{"name":"wp_editProfile","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getpage":{"name":"wp_getPage","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getpages":{"name":"wp_getPages","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_newpage":{"name":"wp_newPage","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_deletepage":{"name":"wp_deletePage","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_editpage":{"name":"wp_editPage","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getpagelist":{"name":"wp_getPageList","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getauthors":{"name":"wp_getAuthors","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_gettags":{"name":"wp_getTags","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_newcategory":{"name":"wp_newCategory","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_deletecategory":{"name":"wp_deleteCategory","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_suggestcategories":{"name":"wp_suggestCategories","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getcomment":{"name":"wp_getComment","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getcomments":{"name":"wp_getComments","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_deletecomment":{"name":"wp_deleteComment","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_editcomment":{"name":"wp_editComment","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_newcomment":{"name":"wp_newComment","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getcommentstatuslist":{"name":"wp_getCommentStatusList","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getcommentcount":{"name":"wp_getCommentCount","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getpoststatuslist":{"name":"wp_getPostStatusList","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getpagestatuslist":{"name":"wp_getPageStatusList","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getpagetemplates":{"name":"wp_getPageTemplates","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getoptions":{"name":"wp_getOptions","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_getoptions":{"name":"_getOptions","phpdoc":[],"attributes":[],"arguments":[{"name":"$options","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_setoptions":{"name":"wp_setOptions","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getmediaitem":{"name":"wp_getMediaItem","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getmedialibrary":{"name":"wp_getMediaLibrary","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getpostformats":{"name":"wp_getPostFormats","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getposttype":{"name":"wp_getPostType","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getposttypes":{"name":"wp_getPostTypes","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_getrevisions":{"name":"wp_getRevisions","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_restorerevision":{"name":"wp_restoreRevision","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"blogger_getusersblogs":{"name":"blogger_getUsersBlogs","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_multisite_getusersblogs":{"name":"_multisite_getUsersBlogs","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"blogger_getuserinfo":{"name":"blogger_getUserInfo","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"blogger_getpost":{"name":"blogger_getPost","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"blogger_getrecentposts":{"name":"blogger_getRecentPosts","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"blogger_gettemplate":{"name":"blogger_getTemplate","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"blogger_settemplate":{"name":"blogger_setTemplate","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"blogger_newpost":{"name":"blogger_newPost","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"blogger_editpost":{"name":"blogger_editPost","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"blogger_deletepost":{"name":"blogger_deletePost","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mw_newpost":{"name":"mw_newPost","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_enclosure_if_new":{"name":"add_enclosure_if_new","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_ID","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$enclosure","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"attach_uploads":{"name":"attach_uploads","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_ID","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_content","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mw_editpost":{"name":"mw_editPost","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mw_getpost":{"name":"mw_getPost","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mw_getrecentposts":{"name":"mw_getRecentPosts","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mw_getcategories":{"name":"mw_getCategories","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mw_newmediaobject":{"name":"mw_newMediaObject","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mt_getrecentposttitles":{"name":"mt_getRecentPostTitles","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mt_getcategorylist":{"name":"mt_getCategoryList","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mt_getpostcategories":{"name":"mt_getPostCategories","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mt_setpostcategories":{"name":"mt_setPostCategories","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mt_supportedmethods":{"name":"mt_supportedMethods","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mt_supportedtextfilters":{"name":"mt_supportedTextFilters","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mt_gettrackbackpings":{"name":"mt_getTrackbackPings","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_ID","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mt_publishpost":{"name":"mt_publishPost","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"pingback_ping":{"name":"pingback_ping","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"pingback_extensions_getpingbacks":{"name":"pingback_extensions_getPingbacks","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"pingback_error":{"name":"pingback_error","phpdoc":[],"attributes":[],"arguments":[{"name":"$code","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_feed_cache_transient":{"name":"WP_Feed_Cache_Transient","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$name":{"name":"$name","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$mod_name":{"name":"$mod_name","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$lifetime":{"name":"$lifetime","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$location","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filename","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$extension","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"save":{"name":"save","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"load":{"name":"load","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mtime":{"name":"mtime","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"touch":{"name":"touch","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"unlink":{"name":"unlink","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_theme":{"name":"WP_Theme","abstract":false,"final":true,"extends":"","constants":[],"properties":{"$update":{"name":"$update","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$file_headers":{"name":"$file_headers","visibility":"private","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$default_themes":{"name":"$default_themes","visibility":"private","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$tag_map":{"name":"$tag_map","visibility":"private","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$theme_root":{"name":"$theme_root","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$headers":{"name":"$headers","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$headers_sanitized":{"name":"$headers_sanitized","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$name_translated":{"name":"$name_translated","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$errors":{"name":"$errors","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$stylesheet":{"name":"$stylesheet","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$template":{"name":"$template","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$parent":{"name":"$parent","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$theme_root_uri":{"name":"$theme_root_uri","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$textdomain_loaded":{"name":"$textdomain_loaded","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cache_hash":{"name":"$cache_hash","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$persistently_cache":{"name":"$persistently_cache","visibility":"private","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cache_expiration":{"name":"$cache_expiration","visibility":"private","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[{"target":"\\arrayaccess","type":"implements"}],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$theme_dir","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$theme_root","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$_child","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__tostring":{"name":"__toString","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__isset":{"name":"__isset","phpdoc":[],"attributes":[],"arguments":[{"name":"$offset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__get":{"name":"__get","phpdoc":[],"attributes":[],"arguments":[{"name":"$offset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetset":{"name":"offsetSet","phpdoc":[],"attributes":[],"arguments":[{"name":"$offset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetunset":{"name":"offsetUnset","phpdoc":[],"attributes":[],"arguments":[{"name":"$offset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetexists":{"name":"offsetExists","phpdoc":[],"attributes":[],"arguments":[{"name":"$offset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetget":{"name":"offsetGet","phpdoc":[],"attributes":[],"arguments":[{"name":"$offset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"errors":{"name":"errors","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"exists":{"name":"exists","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parent":{"name":"parent","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"cache_add":{"name":"cache_add","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"cache_get":{"name":"cache_get","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"cache_delete":{"name":"cache_delete","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get":{"name":"get","phpdoc":[],"attributes":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display":{"name":"display","phpdoc":[],"attributes":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$markup","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$translate","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize_header":{"name":"sanitize_header","phpdoc":[],"attributes":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"markup_header":{"name":"markup_header","phpdoc":[],"attributes":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$translate","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"translate_header":{"name":"translate_header","phpdoc":[],"attributes":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_stylesheet":{"name":"get_stylesheet","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_template":{"name":"get_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_stylesheet_directory":{"name":"get_stylesheet_directory","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_template_directory":{"name":"get_template_directory","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_stylesheet_directory_uri":{"name":"get_stylesheet_directory_uri","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_template_directory_uri":{"name":"get_template_directory_uri","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_theme_root":{"name":"get_theme_root","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_theme_root_uri":{"name":"get_theme_root_uri","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_screenshot":{"name":"get_screenshot","phpdoc":[],"attributes":[],"arguments":[{"name":"$uri","rank":0,"variadic":false,"reference":false,"default":"'uri'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_files":{"name":"get_files","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$search_parent","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_post_templates":{"name":"get_post_templates","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_page_templates":{"name":"get_page_templates","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_type","rank":1,"variadic":false,"reference":false,"default":"'page'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"scandir":{"name":"scandir","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$extensions","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$relative_path","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"load_textdomain":{"name":"load_textdomain","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_allowed":{"name":"is_allowed","phpdoc":[],"attributes":[],"arguments":[{"name":"$check","rank":0,"variadic":false,"reference":false,"default":"'both'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_core_default_theme":{"name":"get_core_default_theme","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_allowed":{"name":"get_allowed","phpdoc":[],"attributes":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_allowed_on_network":{"name":"get_allowed_on_network","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_allowed_on_site":{"name":"get_allowed_on_site","phpdoc":[],"attributes":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"network_enable_theme":{"name":"network_enable_theme","phpdoc":[],"attributes":[],"arguments":[{"name":"$stylesheets","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"network_disable_theme":{"name":"network_disable_theme","phpdoc":[],"attributes":[],"arguments":[{"name":"$stylesheets","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"sort_by_name":{"name":"sort_by_name","phpdoc":[],"attributes":[],"arguments":[{"name":"$themes","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"_name_sort":{"name":"_name_sort","phpdoc":[],"attributes":[],"arguments":[{"name":"$a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"_name_sort_i18n":{"name":"_name_sort_i18n","phpdoc":[],"attributes":[],"arguments":[{"name":"$a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_text_diff_renderer_inline":{"name":"WP_Text_Diff_Renderer_inline","abstract":false,"final":false,"extends":"\\Text_Diff_Renderer_inline","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"_splitonwords":{"name":"_splitOnWords","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$newlineEscape","rank":1,"variadic":false,"reference":false,"default":"\"\\n\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wpdb":{"name":"wpdb","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$show_errors":{"name":"$show_errors","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$suppress_errors":{"name":"$suppress_errors","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$last_error":{"name":"$last_error","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$num_queries":{"name":"$num_queries","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$num_rows":{"name":"$num_rows","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$rows_affected":{"name":"$rows_affected","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$insert_id":{"name":"$insert_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$last_query":{"name":"$last_query","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$last_result":{"name":"$last_result","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$result":{"name":"$result","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$col_meta":{"name":"$col_meta","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$table_charset":{"name":"$table_charset","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$check_current_query":{"name":"$check_current_query","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$checking_collation":{"name":"$checking_collation","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$col_info":{"name":"$col_info","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$queries":{"name":"$queries","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reconnect_retries":{"name":"$reconnect_retries","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$prefix":{"name":"$prefix","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$base_prefix":{"name":"$base_prefix","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ready":{"name":"$ready","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$blogid":{"name":"$blogid","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$siteid":{"name":"$siteid","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$tables":{"name":"$tables","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$old_tables":{"name":"$old_tables","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$global_tables":{"name":"$global_tables","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ms_global_tables":{"name":"$ms_global_tables","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comments":{"name":"$comments","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$commentmeta":{"name":"$commentmeta","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$links":{"name":"$links","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$options":{"name":"$options","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$postmeta":{"name":"$postmeta","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$posts":{"name":"$posts","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$terms":{"name":"$terms","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$term_relationships":{"name":"$term_relationships","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$term_taxonomy":{"name":"$term_taxonomy","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$termmeta":{"name":"$termmeta","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$usermeta":{"name":"$usermeta","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$users":{"name":"$users","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$blogs":{"name":"$blogs","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$blog_versions":{"name":"$blog_versions","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$registration_log":{"name":"$registration_log","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$signups":{"name":"$signups","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$site":{"name":"$site","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sitecategories":{"name":"$sitecategories","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sitemeta":{"name":"$sitemeta","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$field_types":{"name":"$field_types","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$charset":{"name":"$charset","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$collate":{"name":"$collate","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$dbuser":{"name":"$dbuser","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$dbpassword":{"name":"$dbpassword","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$dbname":{"name":"$dbname","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$dbhost":{"name":"$dbhost","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$dbh":{"name":"$dbh","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$func_call":{"name":"$func_call","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_mysql":{"name":"$is_mysql","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$incompatible_modes":{"name":"$incompatible_modes","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$use_mysqli":{"name":"$use_mysqli","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$has_connected":{"name":"$has_connected","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$dbuser","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dbpassword","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dbname","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dbhost","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__destruct":{"name":"__destruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__get":{"name":"__get","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__set":{"name":"__set","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__isset":{"name":"__isset","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__unset":{"name":"__unset","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"init_charset":{"name":"init_charset","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"determine_charset":{"name":"determine_charset","phpdoc":[],"attributes":[],"arguments":[{"name":"$charset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$collate","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_charset":{"name":"set_charset","phpdoc":[],"attributes":[],"arguments":[{"name":"$dbh","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$charset","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$collate","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_sql_mode":{"name":"set_sql_mode","phpdoc":[],"attributes":[],"arguments":[{"name":"$modes","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_prefix":{"name":"set_prefix","phpdoc":[],"attributes":[],"arguments":[{"name":"$prefix","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$set_table_names","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_blog_id":{"name":"set_blog_id","phpdoc":[],"attributes":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$site_id","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_blog_prefix":{"name":"get_blog_prefix","phpdoc":[],"attributes":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"tables":{"name":"tables","phpdoc":[],"attributes":[],"arguments":[{"name":"$scope","rank":0,"variadic":false,"reference":false,"default":"'all'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$prefix","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"select":{"name":"select","phpdoc":[],"attributes":[],"arguments":[{"name":"$db","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dbh","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_weak_escape":{"name":"_weak_escape","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_real_escape":{"name":"_real_escape","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_escape":{"name":"_escape","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"escape":{"name":"escape","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"escape_by_ref":{"name":"escape_by_ref","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare":{"name":"prepare","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"esc_like":{"name":"esc_like","phpdoc":[],"attributes":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_error":{"name":"print_error","phpdoc":[],"attributes":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"show_errors":{"name":"show_errors","phpdoc":[],"attributes":[],"arguments":[{"name":"$show","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"hide_errors":{"name":"hide_errors","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"suppress_errors":{"name":"suppress_errors","phpdoc":[],"attributes":[],"arguments":[{"name":"$suppress","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"flush":{"name":"flush","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"db_connect":{"name":"db_connect","phpdoc":[],"attributes":[],"arguments":[{"name":"$allow_bail","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_connection":{"name":"check_connection","phpdoc":[],"attributes":[],"arguments":[{"name":"$allow_bail","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"query":{"name":"query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_do_query":{"name":"_do_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"placeholder_escape":{"name":"placeholder_escape","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_placeholder_escape":{"name":"add_placeholder_escape","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_placeholder_escape":{"name":"remove_placeholder_escape","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"insert":{"name":"insert","phpdoc":[],"attributes":[],"arguments":[{"name":"$table","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$format","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"replace":{"name":"replace","phpdoc":[],"attributes":[],"arguments":[{"name":"$table","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$format","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_insert_replace_helper":{"name":"_insert_replace_helper","phpdoc":[],"attributes":[],"arguments":[{"name":"$table","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$format","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":3,"variadic":false,"reference":false,"default":"'INSERT'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$table","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$where","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$format","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$where_format","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete":{"name":"delete","phpdoc":[],"attributes":[],"arguments":[{"name":"$table","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$where","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$where_format","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"process_fields":{"name":"process_fields","phpdoc":[],"attributes":[],"arguments":[{"name":"$table","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$format","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"process_field_formats":{"name":"process_field_formats","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$format","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"process_field_charsets":{"name":"process_field_charsets","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$table","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"process_field_lengths":{"name":"process_field_lengths","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$table","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_var":{"name":"get_var","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$x","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$y","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_row":{"name":"get_row","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"OBJECT","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$y","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_col":{"name":"get_col","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$x","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_results":{"name":"get_results","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":1,"variadic":false,"reference":false,"default":"OBJECT","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_table_charset":{"name":"get_table_charset","phpdoc":[],"attributes":[],"arguments":[{"name":"$table","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_col_charset":{"name":"get_col_charset","phpdoc":[],"attributes":[],"arguments":[{"name":"$table","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_col_length":{"name":"get_col_length","phpdoc":[],"attributes":[],"arguments":[{"name":"$table","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_ascii":{"name":"check_ascii","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_safe_collation":{"name":"check_safe_collation","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"strip_invalid_text":{"name":"strip_invalid_text","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"strip_invalid_text_from_query":{"name":"strip_invalid_text_from_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"strip_invalid_text_for_column":{"name":"strip_invalid_text_for_column","phpdoc":[],"attributes":[],"arguments":[{"name":"$table","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$column","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_table_from_query":{"name":"get_table_from_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"load_col_info":{"name":"load_col_info","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_col_info":{"name":"get_col_info","phpdoc":[],"attributes":[],"arguments":[{"name":"$info_type","rank":0,"variadic":false,"reference":false,"default":"'name'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$col_offset","rank":1,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"timer_start":{"name":"timer_start","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"timer_stop":{"name":"timer_stop","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"bail":{"name":"bail","phpdoc":[],"attributes":[],"arguments":[{"name":"$message","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$error_code","rank":1,"variadic":false,"reference":false,"default":"'500'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"close":{"name":"close","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_database_version":{"name":"check_database_version","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"supports_collation":{"name":"supports_collation","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_charset_collate":{"name":"get_charset_collate","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"has_cap":{"name":"has_cap","phpdoc":[],"attributes":[],"arguments":[{"name":"$db_cap","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_caller":{"name":"get_caller","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"db_version":{"name":"db_version","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_http_requests_hooks":{"name":"WP_HTTP_Requests_Hooks","abstract":false,"final":false,"extends":"\\Requests_Hooks","constants":[],"properties":{"$url":{"name":"$url","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$request":{"name":"$request","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"dispatch":{"name":"dispatch","phpdoc":[],"attributes":[],"arguments":[{"name":"$hook","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parameters","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_http":{"name":"WP_Http","abstract":false,"final":false,"extends":"","constants":{"REQUEST_ENTITY_TOO_LARGE":{"name":"REQUEST_ENTITY_TOO_LARGE","value":"413","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"REQUEST_URI_TOO_LONG":{"name":"REQUEST_URI_TOO_LONG","value":"414","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"UNSUPPORTED_MEDIA_TYPE":{"name":"UNSUPPORTED_MEDIA_TYPE","value":"415","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"REQUESTED_RANGE_NOT_SATISFIABLE":{"name":"REQUESTED_RANGE_NOT_SATISFIABLE","value":"416","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"EXPECTATION_FAILED":{"name":"EXPECTATION_FAILED","value":"417","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"IM_A_TEAPOT":{"name":"IM_A_TEAPOT","value":"418","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"MISDIRECTED_REQUEST":{"name":"MISDIRECTED_REQUEST","value":"421","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"UNPROCESSABLE_ENTITY":{"name":"UNPROCESSABLE_ENTITY","value":"422","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"LOCKED":{"name":"LOCKED","value":"423","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"FAILED_DEPENDENCY":{"name":"FAILED_DEPENDENCY","value":"424","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"UPGRADE_REQUIRED":{"name":"UPGRADE_REQUIRED","value":"426","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"PRECONDITION_REQUIRED":{"name":"PRECONDITION_REQUIRED","value":"428","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"TOO_MANY_REQUESTS":{"name":"TOO_MANY_REQUESTS","value":"429","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"REQUEST_HEADER_FIELDS_TOO_LARGE":{"name":"REQUEST_HEADER_FIELDS_TOO_LARGE","value":"431","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"INTERNAL_SERVER_ERROR":{"name":"INTERNAL_SERVER_ERROR","value":"500","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"UNAVAILABLE_FOR_LEGAL_REASONS":{"name":"UNAVAILABLE_FOR_LEGAL_REASONS","value":"451","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"BAD_GATEWAY":{"name":"BAD_GATEWAY","value":"502","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"NOT_IMPLEMENTED":{"name":"NOT_IMPLEMENTED","value":"501","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"SERVICE_UNAVAILABLE":{"name":"SERVICE_UNAVAILABLE","value":"503","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"HTTP_VERSION_NOT_SUPPORTED":{"name":"HTTP_VERSION_NOT_SUPPORTED","value":"505","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"GATEWAY_TIMEOUT":{"name":"GATEWAY_TIMEOUT","value":"504","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"VARIANT_ALSO_NEGOTIATES":{"name":"VARIANT_ALSO_NEGOTIATES","value":"506","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"NOT_EXTENDED":{"name":"NOT_EXTENDED","value":"510","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"INSUFFICIENT_STORAGE":{"name":"INSUFFICIENT_STORAGE","value":"507","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"NETWORK_AUTHENTICATION_REQUIRED":{"name":"NETWORK_AUTHENTICATION_REQUIRED","value":"511","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"SWITCHING_PROTOCOLS":{"name":"SWITCHING_PROTOCOLS","value":"101","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"HTTP_CONTINUE":{"name":"HTTP_CONTINUE","value":"100","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"NON_AUTHORITATIVE_INFORMATION":{"name":"NON_AUTHORITATIVE_INFORMATION","value":"203","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"ACCEPTED":{"name":"ACCEPTED","value":"202","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"NO_CONTENT":{"name":"NO_CONTENT","value":"204","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"OK":{"name":"OK","value":"200","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"PROCESSING":{"name":"PROCESSING","value":"102","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"CREATED":{"name":"CREATED","value":"201","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"MOVED_PERMANENTLY":{"name":"MOVED_PERMANENTLY","value":"301","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"FOUND":{"name":"FOUND","value":"302","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"MULTIPLE_CHOICES":{"name":"MULTIPLE_CHOICES","value":"300","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"MULTI_STATUS":{"name":"MULTI_STATUS","value":"207","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"IM_USED":{"name":"IM_USED","value":"226","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"RESET_CONTENT":{"name":"RESET_CONTENT","value":"205","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"PARTIAL_CONTENT":{"name":"PARTIAL_CONTENT","value":"206","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"PERMANENT_REDIRECT":{"name":"PERMANENT_REDIRECT","value":"308","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"RESERVED":{"name":"RESERVED","value":"306","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"TEMPORARY_REDIRECT":{"name":"TEMPORARY_REDIRECT","value":"307","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"NOT_MODIFIED":{"name":"NOT_MODIFIED","value":"304","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"USE_PROXY":{"name":"USE_PROXY","value":"305","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"SEE_OTHER":{"name":"SEE_OTHER","value":"303","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"NOT_ACCEPTABLE":{"name":"NOT_ACCEPTABLE","value":"406","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"METHOD_NOT_ALLOWED":{"name":"METHOD_NOT_ALLOWED","value":"405","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"NOT_FOUND":{"name":"NOT_FOUND","value":"404","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"FORBIDDEN":{"name":"FORBIDDEN","value":"403","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"PAYMENT_REQUIRED":{"name":"PAYMENT_REQUIRED","value":"402","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"UNAUTHORIZED":{"name":"UNAUTHORIZED","value":"401","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"BAD_REQUEST":{"name":"BAD_REQUEST","value":"400","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"PRECONDITION_FAILED":{"name":"PRECONDITION_FAILED","value":"412","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"LENGTH_REQUIRED":{"name":"LENGTH_REQUIRED","value":"411","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"GONE":{"name":"GONE","value":"410","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"CONFLICT":{"name":"CONFLICT","value":"409","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"REQUEST_TIMEOUT":{"name":"REQUEST_TIMEOUT","value":"408","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"PROXY_AUTHENTICATION_REQUIRED":{"name":"PROXY_AUTHENTICATION_REQUIRED","value":"407","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]}},"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"request":{"name":"request","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"normalize_cookies":{"name":"normalize_cookies","phpdoc":[],"attributes":[],"arguments":[{"name":"$cookies","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"browser_redirect_compatibility":{"name":"browser_redirect_compatibility","phpdoc":[],"attributes":[],"arguments":[{"name":"$location","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":3,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$original","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"validate_redirects":{"name":"validate_redirects","phpdoc":[],"attributes":[],"arguments":[{"name":"$location","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"_get_first_available_transport":{"name":"_get_first_available_transport","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_dispatch_request":{"name":"_dispatch_request","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"post":{"name":"post","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get":{"name":"get","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"head":{"name":"head","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"processresponse":{"name":"processResponse","phpdoc":[],"attributes":[],"arguments":[{"name":"$strResponse","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"processheaders":{"name":"processHeaders","phpdoc":[],"attributes":[],"arguments":[{"name":"$headers","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"buildcookieheader":{"name":"buildCookieHeader","phpdoc":[],"attributes":[],"arguments":[{"name":"$r","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"chunktransferdecode":{"name":"chunkTransferDecode","phpdoc":[],"attributes":[],"arguments":[{"name":"$body","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"block_request":{"name":"block_request","phpdoc":[],"attributes":[],"arguments":[{"name":"$uri","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_url":{"name":"parse_url","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"make_absolute_url":{"name":"make_absolute_url","phpdoc":[],"attributes":[],"arguments":[{"name":"$maybe_relative_path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"handle_redirects":{"name":"handle_redirects","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$response","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"is_ip_address":{"name":"is_ip_address","phpdoc":[],"attributes":[],"arguments":[{"name":"$maybe_ip","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_site":{"name":"WP_Site","abstract":false,"final":true,"extends":"","constants":[],"properties":{"$blog_id":{"name":"$blog_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$domain":{"name":"$domain","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$path":{"name":"$path","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$site_id":{"name":"$site_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$registered":{"name":"$registered","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$last_updated":{"name":"$last_updated","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$public":{"name":"$public","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$archived":{"name":"$archived","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$mature":{"name":"$mature","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$spam":{"name":"$spam","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$deleted":{"name":"$deleted","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$lang_id":{"name":"$lang_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"get_instance":{"name":"get_instance","phpdoc":[],"attributes":[],"arguments":[{"name":"$site_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$site","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"to_array":{"name":"to_array","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__get":{"name":"__get","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__isset":{"name":"__isset","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__set":{"name":"__set","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_details":{"name":"get_details","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_matchesmapregex":{"name":"WP_MatchesMapRegex","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$_matches":{"name":"$_matches","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$output":{"name":"$output","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_subject":{"name":"$_subject","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_pattern":{"name":"$_pattern","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$subject","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$matches","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"apply":{"name":"apply","phpdoc":[],"attributes":[],"arguments":[{"name":"$subject","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$matches","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"_map":{"name":"_map","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"callback":{"name":"callback","phpdoc":[],"attributes":[],"arguments":[{"name":"$matches","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_meta_query":{"name":"WP_Meta_Query","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$queries":{"name":"$queries","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$relation":{"name":"$relation","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$meta_table":{"name":"$meta_table","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$meta_id_column":{"name":"$meta_id_column","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$primary_table":{"name":"$primary_table","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$primary_id_column":{"name":"$primary_id_column","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$table_aliases":{"name":"$table_aliases","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$clauses":{"name":"$clauses","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$has_or_relation":{"name":"$has_or_relation","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$meta_query","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize_query":{"name":"sanitize_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$queries","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_first_order_clause":{"name":"is_first_order_clause","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_query_vars":{"name":"parse_query_vars","phpdoc":[],"attributes":[],"arguments":[{"name":"$qv","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_cast_for_type":{"name":"get_cast_for_type","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sql":{"name":"get_sql","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$primary_table","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$primary_id_column","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sql_clauses":{"name":"get_sql_clauses","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sql_for_query":{"name":"get_sql_for_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sql_for_clause":{"name":"get_sql_for_clause","phpdoc":[],"attributes":[],"arguments":[{"name":"$clause","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent_query","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$clause_key","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_clauses":{"name":"get_clauses","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"find_compatible_table_alias":{"name":"find_compatible_table_alias","phpdoc":[],"attributes":[],"arguments":[{"name":"$clause","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent_query","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"has_or_relation":{"name":"has_or_relation","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_locale":{"name":"WP_Locale","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$weekday":{"name":"$weekday","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$weekday_initial":{"name":"$weekday_initial","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$weekday_abbrev":{"name":"$weekday_abbrev","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$start_of_week":{"name":"$start_of_week","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$month":{"name":"$month","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$month_genitive":{"name":"$month_genitive","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$month_abbrev":{"name":"$month_abbrev","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$meridiem":{"name":"$meridiem","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$text_direction":{"name":"$text_direction","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$number_format":{"name":"$number_format","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"init":{"name":"init","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"rtl_src_admin_notice":{"name":"rtl_src_admin_notice","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_weekday":{"name":"get_weekday","phpdoc":[],"attributes":[],"arguments":[{"name":"$weekday_number","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_weekday_initial":{"name":"get_weekday_initial","phpdoc":[],"attributes":[],"arguments":[{"name":"$weekday_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_weekday_abbrev":{"name":"get_weekday_abbrev","phpdoc":[],"attributes":[],"arguments":[{"name":"$weekday_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_month":{"name":"get_month","phpdoc":[],"attributes":[],"arguments":[{"name":"$month_number","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_month_abbrev":{"name":"get_month_abbrev","phpdoc":[],"attributes":[],"arguments":[{"name":"$month_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_meridiem":{"name":"get_meridiem","phpdoc":[],"attributes":[],"arguments":[{"name":"$meridiem","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_globals":{"name":"register_globals","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_rtl":{"name":"is_rtl","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_strings_for_pot":{"name":"_strings_for_pot","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_admin_bar":{"name":"WP_Admin_Bar","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$nodes":{"name":"$nodes","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$bound":{"name":"$bound","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$user":{"name":"$user","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__get":{"name":"__get","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"initialize":{"name":"initialize","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_menu":{"name":"add_menu","phpdoc":[],"attributes":[],"arguments":[{"name":"$node","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_menu":{"name":"remove_menu","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_node":{"name":"add_node","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_set_node":{"name":"_set_node","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_node":{"name":"get_node","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_get_node":{"name":"_get_node","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_nodes":{"name":"get_nodes","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_get_nodes":{"name":"_get_nodes","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_group":{"name":"add_group","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_node":{"name":"remove_node","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_unset_node":{"name":"_unset_node","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render":{"name":"render","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_bind":{"name":"_bind","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_render":{"name":"_render","phpdoc":[],"attributes":[],"arguments":[{"name":"$root","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_render_container":{"name":"_render_container","phpdoc":[],"attributes":[],"arguments":[{"name":"$node","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_render_group":{"name":"_render_group","phpdoc":[],"attributes":[],"arguments":[{"name":"$node","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_render_item":{"name":"_render_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$node","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"recursive_render":{"name":"recursive_render","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$node","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_menus":{"name":"add_menus","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_embed":{"name":"WP_Embed","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$handlers":{"name":"$handlers","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_ID":{"name":"$post_ID","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$usecache":{"name":"$usecache","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$linkifunknown":{"name":"$linkifunknown","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$last_attr":{"name":"$last_attr","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$last_url":{"name":"$last_url","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$return_false_on_fail":{"name":"$return_false_on_fail","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"run_shortcode":{"name":"run_shortcode","phpdoc":[],"attributes":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"maybe_run_ajax_cache":{"name":"maybe_run_ajax_cache","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_handler":{"name":"register_handler","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$regex","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$priority","rank":3,"variadic":false,"reference":false,"default":"10","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"unregister_handler":{"name":"unregister_handler","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$priority","rank":1,"variadic":false,"reference":false,"default":"10","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"shortcode":{"name":"shortcode","phpdoc":[],"attributes":[],"arguments":[{"name":"$attr","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_oembed_caches":{"name":"delete_oembed_caches","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_ID","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"cache_oembed":{"name":"cache_oembed","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_ID","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"autoembed":{"name":"autoembed","phpdoc":[],"attributes":[],"arguments":[{"name":"$content","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"autoembed_callback":{"name":"autoembed_callback","phpdoc":[],"attributes":[],"arguments":[{"name":"$match","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"maybe_make_link":{"name":"maybe_make_link","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_dependencies":{"name":"WP_Dependencies","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$registered":{"name":"$registered","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$queue":{"name":"$queue","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$to_do":{"name":"$to_do","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$done":{"name":"$done","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$args":{"name":"$args","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$groups":{"name":"$groups","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$group":{"name":"$group","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"do_items":{"name":"do_items","phpdoc":[],"attributes":[],"arguments":[{"name":"$handles","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"do_item":{"name":"do_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"all_deps":{"name":"all_deps","phpdoc":[],"attributes":[],"arguments":[{"name":"$handles","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursion","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add":{"name":"add","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$deps","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ver","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_data":{"name":"add_data","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_data":{"name":"get_data","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove":{"name":"remove","phpdoc":[],"attributes":[],"arguments":[{"name":"$handles","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"enqueue":{"name":"enqueue","phpdoc":[],"attributes":[],"arguments":[{"name":"$handles","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"dequeue":{"name":"dequeue","phpdoc":[],"attributes":[],"arguments":[{"name":"$handles","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"recurse_deps":{"name":"recurse_deps","phpdoc":[],"attributes":[],"arguments":[{"name":"$queue","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$handle","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"query":{"name":"query","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$list","rank":1,"variadic":false,"reference":false,"default":"'registered'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_group":{"name":"set_group","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursion","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_error":{"name":"WP_Error","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$errors":{"name":"$errors","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$error_data":{"name":"$error_data","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$code","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_error_codes":{"name":"get_error_codes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_error_code":{"name":"get_error_code","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_error_messages":{"name":"get_error_messages","phpdoc":[],"attributes":[],"arguments":[{"name":"$code","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_error_message":{"name":"get_error_message","phpdoc":[],"attributes":[],"arguments":[{"name":"$code","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_error_data":{"name":"get_error_data","phpdoc":[],"attributes":[],"arguments":[{"name":"$code","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add":{"name":"add","phpdoc":[],"attributes":[],"arguments":[{"name":"$code","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_data":{"name":"add_data","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$code","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove":{"name":"remove","phpdoc":[],"attributes":[],"arguments":[{"name":"$code","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_section":{"name":"WP_Customize_Section","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$instance_count":{"name":"$instance_count","visibility":"protected","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$instance_number":{"name":"$instance_number","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$manager":{"name":"$manager","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$id":{"name":"$id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$priority":{"name":"$priority","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$panel":{"name":"$panel","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$capability":{"name":"$capability","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$theme_supports":{"name":"$theme_supports","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$title":{"name":"$title","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$description":{"name":"$description","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$controls":{"name":"$controls","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$active_callback":{"name":"$active_callback","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$description_hidden":{"name":"$description_hidden","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$manager","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"active":{"name":"active","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"active_callback":{"name":"active_callback","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"json":{"name":"json","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_capabilities":{"name":"check_capabilities","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_content":{"name":"get_content","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"maybe_render":{"name":"maybe_render","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render":{"name":"render","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_template":{"name":"print_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_template":{"name":"render_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_date_query":{"name":"WP_Date_Query","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$queries":{"name":"$queries","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$relation":{"name":"$relation","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$column":{"name":"$column","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$compare":{"name":"$compare","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$time_keys":{"name":"$time_keys","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$date_query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default_column","rank":1,"variadic":false,"reference":false,"default":"'post_date'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize_query":{"name":"sanitize_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$queries","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent_query","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_first_order_clause":{"name":"is_first_order_clause","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_compare":{"name":"get_compare","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"validate_date_values":{"name":"validate_date_values","phpdoc":[],"attributes":[],"arguments":[{"name":"$date_query","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"validate_column":{"name":"validate_column","phpdoc":[],"attributes":[],"arguments":[{"name":"$column","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sql":{"name":"get_sql","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sql_clauses":{"name":"get_sql_clauses","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sql_for_query":{"name":"get_sql_for_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sql_for_subquery":{"name":"get_sql_for_subquery","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sql_for_clause":{"name":"get_sql_for_clause","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent_query","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"build_value":{"name":"build_value","phpdoc":[],"attributes":[],"arguments":[{"name":"$compare","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"build_mysql_datetime":{"name":"build_mysql_datetime","phpdoc":[],"attributes":[],"arguments":[{"name":"$datetime","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default_to_max","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"build_time_query":{"name":"build_time_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$column","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$compare","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$hour","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$minute","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$second","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"passwordhash":{"name":"PasswordHash","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$itoa64":{"name":"$itoa64","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$iteration_count_log2":{"name":"$iteration_count_log2","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$portable_hashes":{"name":"$portable_hashes","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$random_state":{"name":"$random_state","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$iteration_count_log2","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$portable_hashes","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"passwordhash":{"name":"PasswordHash","phpdoc":[],"attributes":[],"arguments":[{"name":"$iteration_count_log2","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$portable_hashes","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_random_bytes":{"name":"get_random_bytes","phpdoc":[],"attributes":[],"arguments":[{"name":"$count","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"encode64":{"name":"encode64","phpdoc":[],"attributes":[],"arguments":[{"name":"$input","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$count","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"gensalt_private":{"name":"gensalt_private","phpdoc":[],"attributes":[],"arguments":[{"name":"$input","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"crypt_private":{"name":"crypt_private","phpdoc":[],"attributes":[],"arguments":[{"name":"$password","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$setting","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"gensalt_extended":{"name":"gensalt_extended","phpdoc":[],"attributes":[],"arguments":[{"name":"$input","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"gensalt_blowfish":{"name":"gensalt_blowfish","phpdoc":[],"attributes":[],"arguments":[{"name":"$input","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"hashpassword":{"name":"HashPassword","phpdoc":[],"attributes":[],"arguments":[{"name":"$password","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"checkpassword":{"name":"CheckPassword","phpdoc":[],"attributes":[],"arguments":[{"name":"$password","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$stored_hash","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_control":{"name":"WP_Customize_Control","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$instance_count":{"name":"$instance_count","visibility":"protected","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$instance_number":{"name":"$instance_number","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$manager":{"name":"$manager","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$id":{"name":"$id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$settings":{"name":"$settings","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$setting":{"name":"$setting","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$capability":{"name":"$capability","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$priority":{"name":"$priority","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$section":{"name":"$section","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$label":{"name":"$label","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$description":{"name":"$description","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$choices":{"name":"$choices","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$input_attrs":{"name":"$input_attrs","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$allow_addition":{"name":"$allow_addition","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$json":{"name":"$json","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$active_callback":{"name":"$active_callback","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$manager","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"enqueue":{"name":"enqueue","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"active":{"name":"active","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"active_callback":{"name":"active_callback","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"value":{"name":"value","phpdoc":[],"attributes":[],"arguments":[{"name":"$setting_key","rank":0,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"to_json":{"name":"to_json","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"json":{"name":"json","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_capabilities":{"name":"check_capabilities","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_content":{"name":"get_content","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"maybe_render":{"name":"maybe_render","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render":{"name":"render","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_link":{"name":"get_link","phpdoc":[],"attributes":[],"arguments":[{"name":"$setting_key","rank":0,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"link":{"name":"link","phpdoc":[],"attributes":[],"arguments":[{"name":"$setting_key","rank":0,"variadic":false,"reference":false,"default":"'default'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"input_attrs":{"name":"input_attrs","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_content":{"name":"render_content","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_template":{"name":"print_template","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"content_template":{"name":"content_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_list_util":{"name":"WP_List_Util","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$input":{"name":"$input","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$output":{"name":"$output","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$orderby":{"name":"$orderby","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$input","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_input":{"name":"get_input","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_output":{"name":"get_output","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter":{"name":"filter","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$operator","rank":1,"variadic":false,"reference":false,"default":"'AND'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"pluck":{"name":"pluck","phpdoc":[],"attributes":[],"arguments":[{"name":"$field","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$index_key","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sort":{"name":"sort","phpdoc":[],"attributes":[],"arguments":[{"name":"$orderby","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$order","rank":1,"variadic":false,"reference":false,"default":"'ASC'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$preserve_keys","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sort_callback":{"name":"sort_callback","phpdoc":[],"attributes":[],"arguments":[{"name":"$a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_ajax_response":{"name":"WP_Ajax_Response","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$responses":{"name":"$responses","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add":{"name":"add","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"send":{"name":"send","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"walker_page":{"name":"Walker_Page","abstract":false,"final":false,"extends":"\\Walker","constants":[],"properties":{"$tree_type":{"name":"$tree_type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$db_fields":{"name":"$db_fields","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"start_lvl":{"name":"start_lvl","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"end_lvl":{"name":"end_lvl","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"start_el":{"name":"start_el","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$page","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$current_page","rank":4,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"end_el":{"name":"end_el","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$page","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"snoopy":{"name":"Snoopy","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$host":{"name":"$host","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$port":{"name":"$port","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$proxy_host":{"name":"$proxy_host","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$proxy_port":{"name":"$proxy_port","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$proxy_user":{"name":"$proxy_user","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$proxy_pass":{"name":"$proxy_pass","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$agent":{"name":"$agent","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$referer":{"name":"$referer","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cookies":{"name":"$cookies","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$rawheaders":{"name":"$rawheaders","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$maxredirs":{"name":"$maxredirs","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$lastredirectaddr":{"name":"$lastredirectaddr","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$offsiteok":{"name":"$offsiteok","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$maxframes":{"name":"$maxframes","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$expandlinks":{"name":"$expandlinks","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$passcookies":{"name":"$passcookies","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$user":{"name":"$user","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$pass":{"name":"$pass","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$accept":{"name":"$accept","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$results":{"name":"$results","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$error":{"name":"$error","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$response_code":{"name":"$response_code","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$headers":{"name":"$headers","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$maxlength":{"name":"$maxlength","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$read_timeout":{"name":"$read_timeout","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$timed_out":{"name":"$timed_out","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$status":{"name":"$status","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$temp_dir":{"name":"$temp_dir","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$curl_path":{"name":"$curl_path","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_maxlinelen":{"name":"$_maxlinelen","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_httpmethod":{"name":"$_httpmethod","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_httpversion":{"name":"$_httpversion","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_submit_method":{"name":"$_submit_method","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_submit_type":{"name":"$_submit_type","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_mime_boundary":{"name":"$_mime_boundary","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_redirectaddr":{"name":"$_redirectaddr","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_redirectdepth":{"name":"$_redirectdepth","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_frameurls":{"name":"$_frameurls","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_framedepth":{"name":"$_framedepth","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_isproxy":{"name":"$_isproxy","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_fp_timeout":{"name":"$_fp_timeout","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"fetch":{"name":"fetch","phpdoc":[],"attributes":[],"arguments":[{"name":"$URI","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"submit":{"name":"submit","phpdoc":[],"attributes":[],"arguments":[{"name":"$URI","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$formvars","rank":1,"variadic":false,"reference":false,"default":"\"\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$formfiles","rank":2,"variadic":false,"reference":false,"default":"\"\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"fetchlinks":{"name":"fetchlinks","phpdoc":[],"attributes":[],"arguments":[{"name":"$URI","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"fetchform":{"name":"fetchform","phpdoc":[],"attributes":[],"arguments":[{"name":"$URI","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"fetchtext":{"name":"fetchtext","phpdoc":[],"attributes":[],"arguments":[{"name":"$URI","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"submitlinks":{"name":"submitlinks","phpdoc":[],"attributes":[],"arguments":[{"name":"$URI","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$formvars","rank":1,"variadic":false,"reference":false,"default":"\"\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$formfiles","rank":2,"variadic":false,"reference":false,"default":"\"\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"submittext":{"name":"submittext","phpdoc":[],"attributes":[],"arguments":[{"name":"$URI","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$formvars","rank":1,"variadic":false,"reference":false,"default":"\"\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$formfiles","rank":2,"variadic":false,"reference":false,"default":"\"\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_submit_multipart":{"name":"set_submit_multipart","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_submit_normal":{"name":"set_submit_normal","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_striplinks":{"name":"_striplinks","phpdoc":[],"attributes":[],"arguments":[{"name":"$document","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_stripform":{"name":"_stripform","phpdoc":[],"attributes":[],"arguments":[{"name":"$document","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_striptext":{"name":"_striptext","phpdoc":[],"attributes":[],"arguments":[{"name":"$document","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_expandlinks":{"name":"_expandlinks","phpdoc":[],"attributes":[],"arguments":[{"name":"$links","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$URI","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_httprequest":{"name":"_httprequest","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fp","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$URI","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$http_method","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$content_type","rank":4,"variadic":false,"reference":false,"default":"\"\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$body","rank":5,"variadic":false,"reference":false,"default":"\"\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_httpsrequest":{"name":"_httpsrequest","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$URI","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$http_method","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$content_type","rank":3,"variadic":false,"reference":false,"default":"\"\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$body","rank":4,"variadic":false,"reference":false,"default":"\"\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"setcookies":{"name":"setcookies","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_check_timeout":{"name":"_check_timeout","phpdoc":[],"attributes":[],"arguments":[{"name":"$fp","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_connect":{"name":"_connect","phpdoc":[],"attributes":[],"arguments":[{"name":"$fp","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_disconnect":{"name":"_disconnect","phpdoc":[],"attributes":[],"arguments":[{"name":"$fp","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_prepare_post_body":{"name":"_prepare_post_body","phpdoc":[],"attributes":[],"arguments":[{"name":"$formvars","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$formfiles","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"walker_nav_menu":{"name":"Walker_Nav_Menu","abstract":false,"final":false,"extends":"\\Walker","constants":[],"properties":{"$tree_type":{"name":"$tree_type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$db_fields":{"name":"$db_fields","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"start_lvl":{"name":"start_lvl","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"end_lvl":{"name":"end_lvl","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"start_el":{"name":"start_el","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$item","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":4,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"end_el":{"name":"end_el","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$item","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_comment":{"name":"WP_Comment","abstract":false,"final":true,"extends":"","constants":[],"properties":{"$comment_ID":{"name":"$comment_ID","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_post_ID":{"name":"$comment_post_ID","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_author":{"name":"$comment_author","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_author_email":{"name":"$comment_author_email","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_author_url":{"name":"$comment_author_url","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_author_IP":{"name":"$comment_author_IP","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_date":{"name":"$comment_date","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_date_gmt":{"name":"$comment_date_gmt","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_content":{"name":"$comment_content","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_karma":{"name":"$comment_karma","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_approved":{"name":"$comment_approved","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_agent":{"name":"$comment_agent","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_type":{"name":"$comment_type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_parent":{"name":"$comment_parent","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$user_id":{"name":"$user_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$children":{"name":"$children","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$populated_children":{"name":"$populated_children","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_fields":{"name":"$post_fields","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"get_instance":{"name":"get_instance","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"to_array":{"name":"to_array","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_children":{"name":"get_children","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_child":{"name":"add_child","phpdoc":[],"attributes":[],"arguments":[{"name":"$child","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"WP_Comment"},{"typehint":"WP_Comment"}],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_child":{"name":"get_child","phpdoc":[],"attributes":[],"arguments":[{"name":"$child_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"populated_children":{"name":"populated_children","phpdoc":[],"attributes":[],"arguments":[{"name":"$set","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__isset":{"name":"__isset","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__get":{"name":"__get","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_network_query":{"name":"WP_Network_Query","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$request":{"name":"$request","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sql_clauses":{"name":"$sql_clauses","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_vars":{"name":"$query_vars","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_var_defaults":{"name":"$query_var_defaults","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$networks":{"name":"$networks","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$found_networks":{"name":"$found_networks","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$max_num_pages":{"name":"$max_num_pages","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_query":{"name":"parse_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"query":{"name":"query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_networks":{"name":"get_networks","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_network_ids":{"name":"get_network_ids","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_found_networks":{"name":"set_found_networks","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_search_sql":{"name":"get_search_sql","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$columns","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_orderby":{"name":"parse_orderby","phpdoc":[],"attributes":[],"arguments":[{"name":"$orderby","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_order":{"name":"parse_order","phpdoc":[],"attributes":[],"arguments":[{"name":"$order","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_image_editor":{"name":"WP_Image_Editor","abstract":true,"final":false,"extends":"","constants":[],"properties":{"$file":{"name":"$file","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$size":{"name":"$size","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$mime_type":{"name":"$mime_type","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$default_mime_type":{"name":"$default_mime_type","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$quality":{"name":"$quality","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$default_quality":{"name":"$default_quality","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test":{"name":"test","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"supports_mime_type":{"name":"supports_mime_type","phpdoc":[],"attributes":[],"arguments":[{"name":"$mime_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"load":{"name":"load","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"save":{"name":"save","phpdoc":[],"attributes":[],"arguments":[{"name":"$destfilename","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mime_type","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"resize":{"name":"resize","phpdoc":[],"attributes":[],"arguments":[{"name":"$max_w","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_h","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$crop","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"multi_resize":{"name":"multi_resize","phpdoc":[],"attributes":[],"arguments":[{"name":"$sizes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"crop":{"name":"crop","phpdoc":[],"attributes":[],"arguments":[{"name":"$src_x","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src_y","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src_w","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src_h","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dst_w","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dst_h","rank":5,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src_abs","rank":6,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"rotate":{"name":"rotate","phpdoc":[],"attributes":[],"arguments":[{"name":"$angle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"flip":{"name":"flip","phpdoc":[],"attributes":[],"arguments":[{"name":"$horz","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$vert","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"stream":{"name":"stream","phpdoc":[],"attributes":[],"arguments":[{"name":"$mime_type","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_size":{"name":"get_size","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_size":{"name":"update_size","phpdoc":[],"attributes":[],"arguments":[{"name":"$width","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$height","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_quality":{"name":"get_quality","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_quality":{"name":"set_quality","phpdoc":[],"attributes":[],"arguments":[{"name":"$quality","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_output_format":{"name":"get_output_format","phpdoc":[],"attributes":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mime_type","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"generate_filename":{"name":"generate_filename","phpdoc":[],"attributes":[],"arguments":[{"name":"$suffix","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dest_path","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$extension","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_suffix":{"name":"get_suffix","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"make_image":{"name":"make_image","phpdoc":[],"attributes":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$arguments","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_mime_type":{"name":"get_mime_type","phpdoc":[],"attributes":[],"arguments":[{"name":"$extension","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_extension":{"name":"get_extension","phpdoc":[],"attributes":[],"arguments":[{"name":"$mime_type","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_post":{"name":"WP_Post","abstract":false,"final":true,"extends":"","constants":[],"properties":{"$ID":{"name":"$ID","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_author":{"name":"$post_author","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_date":{"name":"$post_date","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_date_gmt":{"name":"$post_date_gmt","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_content":{"name":"$post_content","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_title":{"name":"$post_title","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_excerpt":{"name":"$post_excerpt","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_status":{"name":"$post_status","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_status":{"name":"$comment_status","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ping_status":{"name":"$ping_status","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_password":{"name":"$post_password","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_name":{"name":"$post_name","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$to_ping":{"name":"$to_ping","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$pinged":{"name":"$pinged","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_modified":{"name":"$post_modified","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_modified_gmt":{"name":"$post_modified_gmt","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_content_filtered":{"name":"$post_content_filtered","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_parent":{"name":"$post_parent","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$guid":{"name":"$guid","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$menu_order":{"name":"$menu_order","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_type":{"name":"$post_type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_mime_type":{"name":"$post_mime_type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_count":{"name":"$comment_count","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$filter":{"name":"$filter","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"get_instance":{"name":"get_instance","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__isset":{"name":"__isset","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__get":{"name":"__get","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter":{"name":"filter","phpdoc":[],"attributes":[],"arguments":[{"name":"$filter","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"to_array":{"name":"to_array","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_widget":{"name":"WP_Widget","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$id_base":{"name":"$id_base","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$name":{"name":"$name","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$option_name":{"name":"$option_name","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$alt_option_name":{"name":"$alt_option_name","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$widget_options":{"name":"$widget_options","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$control_options":{"name":"$control_options","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$number":{"name":"$number","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$id":{"name":"$id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$updated":{"name":"$updated","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"widget":{"name":"widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"form":{"name":"form","phpdoc":[],"attributes":[],"arguments":[{"name":"$instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$id_base","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$widget_options","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$control_options","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_widget":{"name":"WP_Widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$id_base","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$widget_options","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$control_options","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_field_name":{"name":"get_field_name","phpdoc":[],"attributes":[],"arguments":[{"name":"$field_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_field_id":{"name":"get_field_id","phpdoc":[],"attributes":[],"arguments":[{"name":"$field_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_register":{"name":"_register","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_set":{"name":"_set","phpdoc":[],"attributes":[],"arguments":[{"name":"$number","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_get_display_callback":{"name":"_get_display_callback","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_get_update_callback":{"name":"_get_update_callback","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_get_form_callback":{"name":"_get_form_callback","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_preview":{"name":"is_preview","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"display_callback":{"name":"display_callback","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$widget_args","rank":1,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_callback":{"name":"update_callback","phpdoc":[],"attributes":[],"arguments":[{"name":"$deprecated","rank":0,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"form_callback":{"name":"form_callback","phpdoc":[],"attributes":[],"arguments":[{"name":"$widget_args","rank":0,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_register_one":{"name":"_register_one","phpdoc":[],"attributes":[],"arguments":[{"name":"$number","rank":0,"variadic":false,"reference":false,"default":"-1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"save_settings":{"name":"save_settings","phpdoc":[],"attributes":[],"arguments":[{"name":"$settings","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_settings":{"name":"get_settings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_hook":{"name":"WP_Hook","abstract":false,"final":true,"extends":"","constants":[],"properties":{"$callbacks":{"name":"$callbacks","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$iterations":{"name":"$iterations","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$current_priority":{"name":"$current_priority","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$nesting_level":{"name":"$nesting_level","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$doing_action":{"name":"$doing_action","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[{"target":"\\iterator","type":"implements"},{"target":"\\arrayaccess","type":"implements"}],"phpdoc":[],"methods":{"add_filter":{"name":"add_filter","phpdoc":[],"attributes":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function_to_add","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$priority","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$accepted_args","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"resort_active_iterations":{"name":"resort_active_iterations","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_priority","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$priority_existed","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_filter":{"name":"remove_filter","phpdoc":[],"attributes":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function_to_remove","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$priority","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"has_filter":{"name":"has_filter","phpdoc":[],"attributes":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function_to_check","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"has_filters":{"name":"has_filters","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_all_filters":{"name":"remove_all_filters","phpdoc":[],"attributes":[],"arguments":[{"name":"$priority","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"apply_filters":{"name":"apply_filters","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"do_action":{"name":"do_action","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"do_all_hook":{"name":"do_all_hook","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"current_priority":{"name":"current_priority","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"build_preinitialized_hooks":{"name":"build_preinitialized_hooks","phpdoc":[],"attributes":[],"arguments":[{"name":"$filters","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"offsetexists":{"name":"offsetExists","phpdoc":[],"attributes":[],"arguments":[{"name":"$offset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetget":{"name":"offsetGet","phpdoc":[],"attributes":[],"arguments":[{"name":"$offset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetset":{"name":"offsetSet","phpdoc":[],"attributes":[],"arguments":[{"name":"$offset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetunset":{"name":"offsetUnset","phpdoc":[],"attributes":[],"arguments":[{"name":"$offset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"current":{"name":"current","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"next":{"name":"next","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"key":{"name":"key","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"valid":{"name":"valid","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"rewind":{"name":"rewind","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_simplepie_sanitize_kses":{"name":"WP_SimplePie_Sanitize_KSES","abstract":false,"final":false,"extends":"\\SimplePie_Sanitize","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"sanitize":{"name":"sanitize","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$base","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_user_meta_session_tokens":{"name":"WP_User_Meta_Session_Tokens","abstract":false,"final":false,"extends":"\\WP_Session_Tokens","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"get_sessions":{"name":"get_sessions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_session":{"name":"prepare_session","phpdoc":[],"attributes":[],"arguments":[{"name":"$session","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_session":{"name":"get_session","phpdoc":[],"attributes":[],"arguments":[{"name":"$verifier","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_session":{"name":"update_session","phpdoc":[],"attributes":[],"arguments":[{"name":"$verifier","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$session","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_sessions":{"name":"update_sessions","phpdoc":[],"attributes":[],"arguments":[{"name":"$sessions","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"destroy_other_sessions":{"name":"destroy_other_sessions","phpdoc":[],"attributes":[],"arguments":[{"name":"$verifier","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"destroy_all_sessions":{"name":"destroy_all_sessions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"drop_sessions":{"name":"drop_sessions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_http_encoding":{"name":"WP_Http_Encoding","abstract":false,"final":false,"extends":"","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"compress":{"name":"compress","phpdoc":[],"attributes":[],"arguments":[{"name":"$raw","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$level","rank":1,"variadic":false,"reference":false,"default":"9","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$supports","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"decompress":{"name":"decompress","phpdoc":[],"attributes":[],"arguments":[{"name":"$compressed","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$length","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"compatible_gzinflate":{"name":"compatible_gzinflate","phpdoc":[],"attributes":[],"arguments":[{"name":"$gzData","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"accept_encoding":{"name":"accept_encoding","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"content_encoding":{"name":"content_encoding","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"should_decode":{"name":"should_decode","phpdoc":[],"attributes":[],"arguments":[{"name":"$headers","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"is_available":{"name":"is_available","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_network":{"name":"WP_Network","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$id":{"name":"$id","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$domain":{"name":"$domain","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$path":{"name":"$path","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$blog_id":{"name":"$blog_id","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cookie_domain":{"name":"$cookie_domain","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$site_name":{"name":"$site_name","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"get_instance":{"name":"get_instance","phpdoc":[],"attributes":[],"arguments":[{"name":"$network_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$network","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__get":{"name":"__get","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__isset":{"name":"__isset","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__set":{"name":"__set","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_set_site_name":{"name":"_set_site_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_set_cookie_domain":{"name":"_set_cookie_domain","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_by_path":{"name":"get_by_path","phpdoc":[],"attributes":[],"arguments":[{"name":"$domain","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$segments","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_metadata_lazyloader":{"name":"WP_Metadata_Lazyloader","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$pending_objects":{"name":"$pending_objects","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$settings":{"name":"$settings","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"queue_objects":{"name":"queue_objects","phpdoc":[],"attributes":[],"arguments":[{"name":"$object_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_ids","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"reset_queue":{"name":"reset_queue","phpdoc":[],"attributes":[],"arguments":[{"name":"$object_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"lazyload_term_meta":{"name":"lazyload_term_meta","phpdoc":[],"attributes":[],"arguments":[{"name":"$check","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"lazyload_comment_meta":{"name":"lazyload_comment_meta","phpdoc":[],"attributes":[],"arguments":[{"name":"$check","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_http_curl":{"name":"WP_Http_Curl","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$headers":{"name":"$headers","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$body":{"name":"$body","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$max_body_length":{"name":"$max_body_length","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$stream_handle":{"name":"$stream_handle","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$bytes_written_total":{"name":"$bytes_written_total","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"request":{"name":"request","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"stream_headers":{"name":"stream_headers","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"stream_body":{"name":"stream_body","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test":{"name":"test","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_tax_query":{"name":"WP_Tax_Query","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$queries":{"name":"$queries","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$relation":{"name":"$relation","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$no_results":{"name":"$no_results","visibility":"private","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$table_aliases":{"name":"$table_aliases","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$queried_terms":{"name":"$queried_terms","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$primary_table":{"name":"$primary_table","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$primary_id_column":{"name":"$primary_id_column","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$tax_query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize_query":{"name":"sanitize_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$queries","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize_relation":{"name":"sanitize_relation","phpdoc":[],"attributes":[],"arguments":[{"name":"$relation","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_first_order_clause":{"name":"is_first_order_clause","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_sql":{"name":"get_sql","phpdoc":[],"attributes":[],"arguments":[{"name":"$primary_table","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$primary_id_column","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sql_clauses":{"name":"get_sql_clauses","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sql_for_query":{"name":"get_sql_for_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sql_for_clause":{"name":"get_sql_for_clause","phpdoc":[],"attributes":[],"arguments":[{"name":"$clause","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent_query","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"find_compatible_table_alias":{"name":"find_compatible_table_alias","phpdoc":[],"attributes":[],"arguments":[{"name":"$clause","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent_query","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"clean_query":{"name":"clean_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"transform_query":{"name":"transform_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$resulting_field","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_query":{"name":"WP_Query","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$query":{"name":"$query","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_vars":{"name":"$query_vars","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$tax_query":{"name":"$tax_query","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$meta_query":{"name":"$meta_query","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$date_query":{"name":"$date_query","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$queried_object":{"name":"$queried_object","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$queried_object_id":{"name":"$queried_object_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$request":{"name":"$request","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$posts":{"name":"$posts","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_count":{"name":"$post_count","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$current_post":{"name":"$current_post","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$in_the_loop":{"name":"$in_the_loop","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post":{"name":"$post","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comments":{"name":"$comments","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment_count":{"name":"$comment_count","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$current_comment":{"name":"$current_comment","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment":{"name":"$comment","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$found_posts":{"name":"$found_posts","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$max_num_pages":{"name":"$max_num_pages","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$max_num_comment_pages":{"name":"$max_num_comment_pages","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_single":{"name":"$is_single","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_preview":{"name":"$is_preview","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_page":{"name":"$is_page","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_archive":{"name":"$is_archive","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_date":{"name":"$is_date","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_year":{"name":"$is_year","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_month":{"name":"$is_month","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_day":{"name":"$is_day","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_time":{"name":"$is_time","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_author":{"name":"$is_author","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_category":{"name":"$is_category","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_tag":{"name":"$is_tag","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_tax":{"name":"$is_tax","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_search":{"name":"$is_search","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_feed":{"name":"$is_feed","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_comment_feed":{"name":"$is_comment_feed","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_trackback":{"name":"$is_trackback","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_home":{"name":"$is_home","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_404":{"name":"$is_404","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_embed":{"name":"$is_embed","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_paged":{"name":"$is_paged","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_admin":{"name":"$is_admin","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_attachment":{"name":"$is_attachment","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_singular":{"name":"$is_singular","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_robots":{"name":"$is_robots","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_posts_page":{"name":"$is_posts_page","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_post_type_archive":{"name":"$is_post_type_archive","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_vars_hash":{"name":"$query_vars_hash","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_vars_changed":{"name":"$query_vars_changed","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$thumbnails_cached":{"name":"$thumbnails_cached","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$stopwords":{"name":"$stopwords","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$compat_fields":{"name":"$compat_fields","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$compat_methods":{"name":"$compat_methods","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"init_query_flags":{"name":"init_query_flags","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"init":{"name":"init","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_query_vars":{"name":"parse_query_vars","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"fill_query_vars":{"name":"fill_query_vars","phpdoc":[],"attributes":[],"arguments":[{"name":"$array","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_query":{"name":"parse_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_tax_query":{"name":"parse_tax_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$q","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_search":{"name":"parse_search","phpdoc":[],"attributes":[],"arguments":[{"name":"$q","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_search_terms":{"name":"parse_search_terms","phpdoc":[],"attributes":[],"arguments":[{"name":"$terms","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_search_stopwords":{"name":"get_search_stopwords","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_search_order":{"name":"parse_search_order","phpdoc":[],"attributes":[],"arguments":[{"name":"$q","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_orderby":{"name":"parse_orderby","phpdoc":[],"attributes":[],"arguments":[{"name":"$orderby","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_order":{"name":"parse_order","phpdoc":[],"attributes":[],"arguments":[{"name":"$order","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_404":{"name":"set_404","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get":{"name":"get","phpdoc":[],"attributes":[],"arguments":[{"name":"$query_var","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set":{"name":"set","phpdoc":[],"attributes":[],"arguments":[{"name":"$query_var","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_posts":{"name":"get_posts","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_found_posts":{"name":"set_found_posts","phpdoc":[],"attributes":[],"arguments":[{"name":"$q","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$limits","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"next_post":{"name":"next_post","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"the_post":{"name":"the_post","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"have_posts":{"name":"have_posts","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"rewind_posts":{"name":"rewind_posts","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"next_comment":{"name":"next_comment","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"the_comment":{"name":"the_comment","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"have_comments":{"name":"have_comments","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"rewind_comments":{"name":"rewind_comments","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"query":{"name":"query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_queried_object":{"name":"get_queried_object","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_queried_object_id":{"name":"get_queried_object_id","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__get":{"name":"__get","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__isset":{"name":"__isset","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__call":{"name":"__call","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$arguments","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_archive":{"name":"is_archive","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_post_type_archive":{"name":"is_post_type_archive","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_types","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_attachment":{"name":"is_attachment","phpdoc":[],"attributes":[],"arguments":[{"name":"$attachment","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_author":{"name":"is_author","phpdoc":[],"attributes":[],"arguments":[{"name":"$author","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_category":{"name":"is_category","phpdoc":[],"attributes":[],"arguments":[{"name":"$category","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_tag":{"name":"is_tag","phpdoc":[],"attributes":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_tax":{"name":"is_tax","phpdoc":[],"attributes":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$term","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_comments_popup":{"name":"is_comments_popup","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_date":{"name":"is_date","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_day":{"name":"is_day","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_feed":{"name":"is_feed","phpdoc":[],"attributes":[],"arguments":[{"name":"$feeds","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_comment_feed":{"name":"is_comment_feed","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_front_page":{"name":"is_front_page","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_home":{"name":"is_home","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_month":{"name":"is_month","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_page":{"name":"is_page","phpdoc":[],"attributes":[],"arguments":[{"name":"$page","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_paged":{"name":"is_paged","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_preview":{"name":"is_preview","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_robots":{"name":"is_robots","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_search":{"name":"is_search","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_single":{"name":"is_single","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_singular":{"name":"is_singular","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_types","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_time":{"name":"is_time","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_trackback":{"name":"is_trackback","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_year":{"name":"is_year","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_404":{"name":"is_404","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_embed":{"name":"is_embed","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_main_query":{"name":"is_main_query","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"setup_postdata":{"name":"setup_postdata","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"reset_postdata":{"name":"reset_postdata","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"lazyload_term_meta":{"name":"lazyload_term_meta","phpdoc":[],"attributes":[],"arguments":[{"name":"$check","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$term_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"lazyload_comment_meta":{"name":"lazyload_comment_meta","phpdoc":[],"attributes":[],"arguments":[{"name":"$check","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_atom_server":{"name":"wp_atom_server","abstract":false,"final":false,"extends":"","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__call":{"name":"__call","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$arguments","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__callstatic":{"name":"__callStatic","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$arguments","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"smtp":{"name":"SMTP","abstract":false,"final":false,"extends":"","constants":{"DEBUG_LOWLEVEL":{"name":"DEBUG_LOWLEVEL","value":"4","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"DEBUG_CONNECTION":{"name":"DEBUG_CONNECTION","value":"3","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"CRLF":{"name":"CRLF","value":"\"\\r\\n\"","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"VERSION":{"name":"VERSION","value":"'5.2.22'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"DEBUG_SERVER":{"name":"DEBUG_SERVER","value":"2","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"DEBUG_CLIENT":{"name":"DEBUG_CLIENT","value":"1","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"MAX_LINE_LENGTH":{"name":"MAX_LINE_LENGTH","value":"998","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"DEBUG_OFF":{"name":"DEBUG_OFF","value":"0","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"DEFAULT_SMTP_PORT":{"name":"DEFAULT_SMTP_PORT","value":"25","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]}},"properties":{"$Version":{"name":"$Version","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$SMTP_PORT":{"name":"$SMTP_PORT","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$CRLF":{"name":"$CRLF","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$do_debug":{"name":"$do_debug","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Debugoutput":{"name":"$Debugoutput","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$do_verp":{"name":"$do_verp","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Timeout":{"name":"$Timeout","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$Timelimit":{"name":"$Timelimit","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$smtp_transaction_id_patterns":{"name":"$smtp_transaction_id_patterns","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$smtp_conn":{"name":"$smtp_conn","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$error":{"name":"$error","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$helo_rply":{"name":"$helo_rply","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$server_caps":{"name":"$server_caps","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$last_reply":{"name":"$last_reply","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"edebug":{"name":"edebug","phpdoc":[],"attributes":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$level","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"connect":{"name":"connect","phpdoc":[],"attributes":[],"arguments":[{"name":"$host","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$port","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$timeout","rank":2,"variadic":false,"reference":false,"default":"30","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"starttls":{"name":"startTLS","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"authenticate":{"name":"authenticate","phpdoc":[],"attributes":[],"arguments":[{"name":"$username","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$password","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$authtype","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$realm","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$workstation","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$OAuth","rank":5,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"hmac":{"name":"hmac","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"connected":{"name":"connected","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"close":{"name":"close","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"data":{"name":"data","phpdoc":[],"attributes":[],"arguments":[{"name":"$msg_data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"hello":{"name":"hello","phpdoc":[],"attributes":[],"arguments":[{"name":"$host","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sendhello":{"name":"sendHello","phpdoc":[],"attributes":[],"arguments":[{"name":"$hello","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$host","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parsehellofields":{"name":"parseHelloFields","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mail":{"name":"mail","phpdoc":[],"attributes":[],"arguments":[{"name":"$from","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quit":{"name":"quit","phpdoc":[],"attributes":[],"arguments":[{"name":"$close_on_error","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"recipient":{"name":"recipient","phpdoc":[],"attributes":[],"arguments":[{"name":"$address","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"reset":{"name":"reset","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sendcommand":{"name":"sendCommand","phpdoc":[],"attributes":[],"arguments":[{"name":"$command","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$commandstring","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$expect","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sendandmail":{"name":"sendAndMail","phpdoc":[],"attributes":[],"arguments":[{"name":"$from","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"verify":{"name":"verify","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"noop":{"name":"noop","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"turn":{"name":"turn","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"client_send":{"name":"client_send","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"geterror":{"name":"getError","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getserverextlist":{"name":"getServerExtList","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getserverext":{"name":"getServerExt","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getlastreply":{"name":"getLastReply","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_lines":{"name":"get_lines","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"setverp":{"name":"setVerp","phpdoc":[],"attributes":[],"arguments":[{"name":"$enabled","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getverp":{"name":"getVerp","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"seterror":{"name":"setError","phpdoc":[],"attributes":[],"arguments":[{"name":"$message","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$detail","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$smtp_code","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$smtp_code_ex","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"setdebugoutput":{"name":"setDebugOutput","phpdoc":[],"attributes":[],"arguments":[{"name":"$method","rank":0,"variadic":false,"reference":false,"default":"'echo'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getdebugoutput":{"name":"getDebugOutput","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"setdebuglevel":{"name":"setDebugLevel","phpdoc":[],"attributes":[],"arguments":[{"name":"$level","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getdebuglevel":{"name":"getDebugLevel","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"settimeout":{"name":"setTimeout","phpdoc":[],"attributes":[],"arguments":[{"name":"$timeout","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"gettimeout":{"name":"getTimeout","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"errorhandler":{"name":"errorHandler","phpdoc":[],"attributes":[],"arguments":[{"name":"$errno","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$errmsg","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getlasttransactionid":{"name":"getLastTransactionID","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_styles":{"name":"WP_Styles","abstract":false,"final":false,"extends":"\\WP_Dependencies","constants":[],"properties":{"$base_url":{"name":"$base_url","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$content_url":{"name":"$content_url","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$default_version":{"name":"$default_version","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$text_direction":{"name":"$text_direction","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$concat":{"name":"$concat","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$concat_version":{"name":"$concat_version","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$do_concat":{"name":"$do_concat","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$print_html":{"name":"$print_html","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$print_code":{"name":"$print_code","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$default_dirs":{"name":"$default_dirs","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"do_item":{"name":"do_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_inline_style":{"name":"add_inline_style","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$code","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_inline_style":{"name":"print_inline_style","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$echo","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"all_deps":{"name":"all_deps","phpdoc":[],"attributes":[],"arguments":[{"name":"$handles","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$recursion","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$group","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_css_href":{"name":"_css_href","phpdoc":[],"attributes":[],"arguments":[{"name":"$src","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ver","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$handle","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"in_default_dir":{"name":"in_default_dir","phpdoc":[],"attributes":[],"arguments":[{"name":"$src","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"do_footer_items":{"name":"do_footer_items","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"reset":{"name":"reset","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"requests":{"name":"Requests","abstract":false,"final":false,"extends":"","constants":{"TRACE":{"name":"TRACE","value":"'TRACE'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"PATCH":{"name":"PATCH","value":"'PATCH'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"VERSION":{"name":"VERSION","value":"'1.7'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"BUFFER_SIZE":{"name":"BUFFER_SIZE","value":"1160","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"GET":{"name":"GET","value":"'GET'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"POST":{"name":"POST","value":"'POST'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"PUT":{"name":"PUT","value":"'PUT'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"DELETE":{"name":"DELETE","value":"'DELETE'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"OPTIONS":{"name":"OPTIONS","value":"'OPTIONS'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"HEAD":{"name":"HEAD","value":"'HEAD'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]}},"properties":{"$transports":{"name":"$transports","visibility":"protected","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$transport":{"name":"$transport","visibility":"public","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$certificate_path":{"name":"$certificate_path","visibility":"protected","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"autoloader":{"name":"autoloader","phpdoc":[],"attributes":[],"arguments":[{"name":"$class","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"register_autoloader":{"name":"register_autoloader","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"add_transport":{"name":"add_transport","phpdoc":[],"attributes":[],"arguments":[{"name":"$transport","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_transport":{"name":"get_transport","phpdoc":[],"attributes":[],"arguments":[{"name":"$capabilities","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get":{"name":"get","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"head":{"name":"head","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"delete":{"name":"delete","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"trace":{"name":"trace","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"post":{"name":"post","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"put":{"name":"put","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"options":{"name":"options","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"patch":{"name":"patch","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"request":{"name":"request","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":3,"variadic":false,"reference":false,"default":"self::GET","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":4,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"request_multiple":{"name":"request_multiple","phpdoc":[],"attributes":[],"arguments":[{"name":"$requests","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_default_options":{"name":"get_default_options","phpdoc":[],"attributes":[],"arguments":[{"name":"$multirequest","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_certificate_path":{"name":"get_certificate_path","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"set_certificate_path":{"name":"set_certificate_path","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"set_defaults":{"name":"set_defaults","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":3,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":4,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"parse_response":{"name":"parse_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$headers","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$req_headers","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$req_data","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"parse_multiple":{"name":"parse_multiple","phpdoc":[],"attributes":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"decode_chunked":{"name":"decode_chunked","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"flatten":{"name":"flatten","phpdoc":[],"attributes":[],"arguments":[{"name":"$array","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"flattern":{"name":"flattern","phpdoc":[],"attributes":[],"arguments":[{"name":"$array","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"decompress":{"name":"decompress","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"compatible_gzinflate":{"name":"compatible_gzinflate","phpdoc":[],"attributes":[],"arguments":[{"name":"$gzData","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"match_domain":{"name":"match_domain","phpdoc":[],"attributes":[],"arguments":[{"name":"$host","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$reference","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_term":{"name":"WP_Term","abstract":false,"final":true,"extends":"","constants":[],"properties":{"$term_id":{"name":"$term_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$name":{"name":"$name","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$slug":{"name":"$slug","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$term_group":{"name":"$term_group","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$term_taxonomy_id":{"name":"$term_taxonomy_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$taxonomy":{"name":"$taxonomy","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$description":{"name":"$description","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$parent":{"name":"$parent","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$count":{"name":"$count","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$filter":{"name":"$filter","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"get_instance":{"name":"get_instance","phpdoc":[],"attributes":[],"arguments":[{"name":"$term_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$term","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter":{"name":"filter","phpdoc":[],"attributes":[],"arguments":[{"name":"$filter","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"to_array":{"name":"to_array","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__get":{"name":"__get","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_widget_factory":{"name":"WP_Widget_Factory","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$widgets":{"name":"$widgets","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$hashed_class_counts":{"name":"$hashed_class_counts","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_widget_factory":{"name":"WP_Widget_Factory","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"hash_object":{"name":"hash_object","phpdoc":[],"attributes":[],"arguments":[{"name":"$widget","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register":{"name":"register","phpdoc":[],"attributes":[],"arguments":[{"name":"$widget","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"unregister":{"name":"unregister","phpdoc":[],"attributes":[],"arguments":[{"name":"$widget","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_register_widgets":{"name":"_register_widgets","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_http_streams":{"name":"WP_Http_Streams","abstract":false,"final":false,"extends":"","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"request":{"name":"request","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"verify_ssl_certificate":{"name":"verify_ssl_certificate","phpdoc":[],"attributes":[],"arguments":[{"name":"$stream","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$host","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"test":{"name":"test","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_http_fsockopen":{"name":"WP_HTTP_Fsockopen","abstract":false,"final":false,"extends":"\\WP_Http_Streams","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"wp_customize_widgets":{"name":"WP_Customize_Widgets","abstract":false,"final":true,"extends":"","constants":[],"properties":{"$manager":{"name":"$manager","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$core_widget_id_bases":{"name":"$core_widget_id_bases","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$rendered_sidebars":{"name":"$rendered_sidebars","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$rendered_widgets":{"name":"$rendered_widgets","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$old_sidebars_widgets":{"name":"$old_sidebars_widgets","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$selective_refreshable_widgets":{"name":"$selective_refreshable_widgets","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$setting_id_patterns":{"name":"$setting_id_patterns","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$before_widget_tags_seen":{"name":"$before_widget_tags_seen","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sidebar_instance_count":{"name":"$sidebar_instance_count","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$context_sidebar_instance_number":{"name":"$context_sidebar_instance_number","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$current_dynamic_sidebar_id_stack":{"name":"$current_dynamic_sidebar_id_stack","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$rendering_widget_id":{"name":"$rendering_widget_id","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$rendering_sidebar_id":{"name":"$rendering_sidebar_id","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_captured_options":{"name":"$_captured_options","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_is_capturing_option_updates":{"name":"$_is_capturing_option_updates","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$manager","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_selective_refreshable_widgets":{"name":"get_selective_refreshable_widgets","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_widget_selective_refreshable":{"name":"is_widget_selective_refreshable","phpdoc":[],"attributes":[],"arguments":[{"name":"$id_base","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_setting_type":{"name":"get_setting_type","phpdoc":[],"attributes":[],"arguments":[{"name":"$setting_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_settings":{"name":"register_settings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_customize_dynamic_setting_args":{"name":"filter_customize_dynamic_setting_args","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$setting_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_post_value":{"name":"get_post_value","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"override_sidebars_widgets_for_theme_switch":{"name":"override_sidebars_widgets_for_theme_switch","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_customize_value_old_sidebars_widgets_data":{"name":"filter_customize_value_old_sidebars_widgets_data","phpdoc":[],"attributes":[],"arguments":[{"name":"$old_sidebars_widgets","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_option_sidebars_widgets_for_theme_switch":{"name":"filter_option_sidebars_widgets_for_theme_switch","phpdoc":[],"attributes":[],"arguments":[{"name":"$sidebars_widgets","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"customize_controls_init":{"name":"customize_controls_init","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"schedule_customize_register":{"name":"schedule_customize_register","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"customize_register":{"name":"customize_register","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_panel_active":{"name":"is_panel_active","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_setting_id":{"name":"get_setting_id","phpdoc":[],"attributes":[],"arguments":[{"name":"$widget_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_wide_widget":{"name":"is_wide_widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$widget_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_widget_id":{"name":"parse_widget_id","phpdoc":[],"attributes":[],"arguments":[{"name":"$widget_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_widget_setting_id":{"name":"parse_widget_setting_id","phpdoc":[],"attributes":[],"arguments":[{"name":"$setting_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_styles":{"name":"print_styles","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_scripts":{"name":"print_scripts","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"enqueue_scripts":{"name":"enqueue_scripts","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"output_widget_control_templates":{"name":"output_widget_control_templates","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_footer_scripts":{"name":"print_footer_scripts","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_setting_args":{"name":"get_setting_args","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$overrides","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize_sidebar_widgets":{"name":"sanitize_sidebar_widgets","phpdoc":[],"attributes":[],"arguments":[{"name":"$widget_ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_available_widgets":{"name":"get_available_widgets","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_sort_name_callback":{"name":"_sort_name_callback","phpdoc":[],"attributes":[],"arguments":[{"name":"$widget_a","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$widget_b","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_widget_control":{"name":"get_widget_control","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_widget_control_parts":{"name":"get_widget_control_parts","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"customize_preview_init":{"name":"customize_preview_init","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"refresh_nonces":{"name":"refresh_nonces","phpdoc":[],"attributes":[],"arguments":[{"name":"$nonces","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"preview_sidebars_widgets":{"name":"preview_sidebars_widgets","phpdoc":[],"attributes":[],"arguments":[{"name":"$sidebars_widgets","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"customize_preview_enqueue":{"name":"customize_preview_enqueue","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_preview_css":{"name":"print_preview_css","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"export_preview_data":{"name":"export_preview_data","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"tally_rendered_widgets":{"name":"tally_rendered_widgets","phpdoc":[],"attributes":[],"arguments":[{"name":"$widget","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_widget_rendered":{"name":"is_widget_rendered","phpdoc":[],"attributes":[],"arguments":[{"name":"$widget_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_sidebar_rendered":{"name":"is_sidebar_rendered","phpdoc":[],"attributes":[],"arguments":[{"name":"$sidebar_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"tally_sidebars_via_is_active_sidebar_calls":{"name":"tally_sidebars_via_is_active_sidebar_calls","phpdoc":[],"attributes":[],"arguments":[{"name":"$is_active","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sidebar_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"tally_sidebars_via_dynamic_sidebar_calls":{"name":"tally_sidebars_via_dynamic_sidebar_calls","phpdoc":[],"attributes":[],"arguments":[{"name":"$has_widgets","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$sidebar_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_instance_hash_key":{"name":"get_instance_hash_key","phpdoc":[],"attributes":[],"arguments":[{"name":"$serialized_instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize_widget_instance":{"name":"sanitize_widget_instance","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize_widget_js_instance":{"name":"sanitize_widget_js_instance","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize_sidebar_widgets_js_instance":{"name":"sanitize_sidebar_widgets_js_instance","phpdoc":[],"attributes":[],"arguments":[{"name":"$widget_ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"call_widget_update":{"name":"call_widget_update","phpdoc":[],"attributes":[],"arguments":[{"name":"$widget_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_ajax_update_widget":{"name":"wp_ajax_update_widget","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"customize_dynamic_partial_args":{"name":"customize_dynamic_partial_args","phpdoc":[],"attributes":[],"arguments":[{"name":"$partial_args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$partial_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"selective_refresh_init":{"name":"selective_refresh_init","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_dynamic_sidebar_params":{"name":"filter_dynamic_sidebar_params","phpdoc":[],"attributes":[],"arguments":[{"name":"$params","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_wp_kses_allowed_data_attributes":{"name":"filter_wp_kses_allowed_data_attributes","phpdoc":[],"attributes":[],"arguments":[{"name":"$allowed_html","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"start_dynamic_sidebar":{"name":"start_dynamic_sidebar","phpdoc":[],"attributes":[],"arguments":[{"name":"$index","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"end_dynamic_sidebar":{"name":"end_dynamic_sidebar","phpdoc":[],"attributes":[],"arguments":[{"name":"$index","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_sidebars_widgets_for_rendering_widget":{"name":"filter_sidebars_widgets_for_rendering_widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$sidebars_widgets","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_widget_partial":{"name":"render_widget_partial","phpdoc":[],"attributes":[],"arguments":[{"name":"$partial","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_option_capture_ignored":{"name":"is_option_capture_ignored","phpdoc":[],"attributes":[],"arguments":[{"name":"$option_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_captured_options":{"name":"get_captured_options","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_captured_option":{"name":"get_captured_option","phpdoc":[],"attributes":[],"arguments":[{"name":"$option_name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$default","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"count_captured_options":{"name":"count_captured_options","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"start_capturing_option_updates":{"name":"start_capturing_option_updates","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"capture_filter_pre_update_option":{"name":"capture_filter_pre_update_option","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$option_name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_value","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"capture_filter_pre_get_option":{"name":"capture_filter_pre_get_option","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"stop_capturing_option_updates":{"name":"stop_capturing_option_updates","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"setup_widget_addition_previews":{"name":"setup_widget_addition_previews","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepreview_added_sidebars_widgets":{"name":"prepreview_added_sidebars_widgets","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepreview_added_widget_instance":{"name":"prepreview_added_widget_instance","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_prepreview_filters":{"name":"remove_prepreview_filters","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_taxonomy":{"name":"WP_Taxonomy","abstract":false,"final":true,"extends":"","constants":[],"properties":{"$name":{"name":"$name","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$label":{"name":"$label","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$labels":{"name":"$labels","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$description":{"name":"$description","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$public":{"name":"$public","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$publicly_queryable":{"name":"$publicly_queryable","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$hierarchical":{"name":"$hierarchical","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$show_ui":{"name":"$show_ui","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$show_in_menu":{"name":"$show_in_menu","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$show_in_nav_menus":{"name":"$show_in_nav_menus","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$show_tagcloud":{"name":"$show_tagcloud","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$show_in_quick_edit":{"name":"$show_in_quick_edit","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$show_admin_column":{"name":"$show_admin_column","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$meta_box_cb":{"name":"$meta_box_cb","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$object_type":{"name":"$object_type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cap":{"name":"$cap","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$rewrite":{"name":"$rewrite","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_var":{"name":"$query_var","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$update_count_callback":{"name":"$update_count_callback","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$show_in_rest":{"name":"$show_in_rest","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$rest_base":{"name":"$rest_base","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$rest_controller_class":{"name":"$rest_controller_class","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_builtin":{"name":"$_builtin","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_props":{"name":"set_props","phpdoc":[],"attributes":[],"arguments":[{"name":"$object_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_rewrite_rules":{"name":"add_rewrite_rules","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_rewrite_rules":{"name":"remove_rewrite_rules","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_hooks":{"name":"add_hooks","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_hooks":{"name":"remove_hooks","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_post_type":{"name":"WP_Post_Type","abstract":false,"final":true,"extends":"","constants":[],"properties":{"$name":{"name":"$name","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$label":{"name":"$label","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$labels":{"name":"$labels","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$description":{"name":"$description","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$public":{"name":"$public","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$hierarchical":{"name":"$hierarchical","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$exclude_from_search":{"name":"$exclude_from_search","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$publicly_queryable":{"name":"$publicly_queryable","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$show_ui":{"name":"$show_ui","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$show_in_menu":{"name":"$show_in_menu","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$show_in_nav_menus":{"name":"$show_in_nav_menus","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$show_in_admin_bar":{"name":"$show_in_admin_bar","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$menu_position":{"name":"$menu_position","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$menu_icon":{"name":"$menu_icon","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$capability_type":{"name":"$capability_type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$map_meta_cap":{"name":"$map_meta_cap","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$register_meta_box_cb":{"name":"$register_meta_box_cb","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$taxonomies":{"name":"$taxonomies","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$has_archive":{"name":"$has_archive","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_var":{"name":"$query_var","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$can_export":{"name":"$can_export","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$delete_with_user":{"name":"$delete_with_user","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_builtin":{"name":"$_builtin","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_edit_link":{"name":"$_edit_link","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cap":{"name":"$cap","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$rewrite":{"name":"$rewrite","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$supports":{"name":"$supports","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$show_in_rest":{"name":"$show_in_rest","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$rest_base":{"name":"$rest_base","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$rest_controller_class":{"name":"$rest_controller_class","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_props":{"name":"set_props","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_supports":{"name":"add_supports","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_rewrite_rules":{"name":"add_rewrite_rules","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_meta_boxes":{"name":"register_meta_boxes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_hooks":{"name":"add_hooks","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_taxonomies":{"name":"register_taxonomies","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_supports":{"name":"remove_supports","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_rewrite_rules":{"name":"remove_rewrite_rules","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"unregister_meta_boxes":{"name":"unregister_meta_boxes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"unregister_taxonomies":{"name":"unregister_taxonomies","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_hooks":{"name":"remove_hooks","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_user":{"name":"WP_User","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$data":{"name":"$data","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ID":{"name":"$ID","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$caps":{"name":"$caps","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cap_key":{"name":"$cap_key","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$roles":{"name":"$roles","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$allcaps":{"name":"$allcaps","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$filter":{"name":"$filter","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$back_compat_keys":{"name":"$back_compat_keys","visibility":"private","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"init":{"name":"init","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$blog_id","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_data_by":{"name":"get_data_by","phpdoc":[],"attributes":[],"arguments":[{"name":"$field","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"__call":{"name":"__call","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$arguments","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__isset":{"name":"__isset","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__get":{"name":"__get","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__set":{"name":"__set","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__unset":{"name":"__unset","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"exists":{"name":"exists","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get":{"name":"get","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"has_prop":{"name":"has_prop","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"to_array":{"name":"to_array","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_init_caps":{"name":"_init_caps","phpdoc":[],"attributes":[],"arguments":[{"name":"$cap_key","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_role_caps":{"name":"get_role_caps","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_role":{"name":"add_role","phpdoc":[],"attributes":[],"arguments":[{"name":"$role","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_role":{"name":"remove_role","phpdoc":[],"attributes":[],"arguments":[{"name":"$role","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_role":{"name":"set_role","phpdoc":[],"attributes":[],"arguments":[{"name":"$role","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"level_reduction":{"name":"level_reduction","phpdoc":[],"attributes":[],"arguments":[{"name":"$max","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$item","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_user_level_from_caps":{"name":"update_user_level_from_caps","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_cap":{"name":"add_cap","phpdoc":[],"attributes":[],"arguments":[{"name":"$cap","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$grant","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_cap":{"name":"remove_cap","phpdoc":[],"attributes":[],"arguments":[{"name":"$cap","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_all_caps":{"name":"remove_all_caps","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"has_cap":{"name":"has_cap","phpdoc":[],"attributes":[],"arguments":[{"name":"$cap","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"translate_level_to_cap":{"name":"translate_level_to_cap","phpdoc":[],"attributes":[],"arguments":[{"name":"$level","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"for_blog":{"name":"for_blog","phpdoc":[],"attributes":[],"arguments":[{"name":"$blog_id","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_http_response":{"name":"WP_HTTP_Response","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$data":{"name":"$data","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$headers":{"name":"$headers","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$status":{"name":"$status","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$status","rank":1,"variadic":false,"reference":false,"default":"200","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_headers":{"name":"get_headers","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_headers":{"name":"set_headers","phpdoc":[],"attributes":[],"arguments":[{"name":"$headers","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"header":{"name":"header","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$replace","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_status":{"name":"get_status","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_status":{"name":"set_status","phpdoc":[],"attributes":[],"arguments":[{"name":"$code","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_data":{"name":"get_data","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_data":{"name":"set_data","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"jsonserialize":{"name":"jsonSerialize","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_role":{"name":"WP_Role","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$name":{"name":"$name","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$capabilities":{"name":"$capabilities","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$role","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$capabilities","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_cap":{"name":"add_cap","phpdoc":[],"attributes":[],"arguments":[{"name":"$cap","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$grant","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_cap":{"name":"remove_cap","phpdoc":[],"attributes":[],"arguments":[{"name":"$cap","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"has_cap":{"name":"has_cap","phpdoc":[],"attributes":[],"arguments":[{"name":"$cap","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"_wp_dependency":{"name":"_WP_Dependency","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$handle":{"name":"$handle","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$src":{"name":"$src","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$deps":{"name":"$deps","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ver":{"name":"$ver","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$args":{"name":"$args","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$extra":{"name":"$extra","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_data":{"name":"add_data","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"walker_pagedropdown":{"name":"Walker_PageDropdown","abstract":false,"final":false,"extends":"\\Walker","constants":[],"properties":{"$tree_type":{"name":"$tree_type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$db_fields":{"name":"$db_fields","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"start_el":{"name":"start_el","phpdoc":[],"attributes":[],"arguments":[{"name":"$output","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$page","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$depth","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":4,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_feed_cache":{"name":"WP_Feed_Cache","abstract":false,"final":false,"extends":"\\SimplePie_Cache","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"create":{"name":"create","phpdoc":[],"attributes":[],"arguments":[{"name":"$location","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filename","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$extension","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_image_editor_imagick":{"name":"WP_Image_Editor_Imagick","abstract":false,"final":false,"extends":"\\WP_Image_Editor","constants":[],"properties":{"$image":{"name":"$image","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__destruct":{"name":"__destruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test":{"name":"test","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"supports_mime_type":{"name":"supports_mime_type","phpdoc":[],"attributes":[],"arguments":[{"name":"$mime_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"load":{"name":"load","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_quality":{"name":"set_quality","phpdoc":[],"attributes":[],"arguments":[{"name":"$quality","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_size":{"name":"update_size","phpdoc":[],"attributes":[],"arguments":[{"name":"$width","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$height","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"resize":{"name":"resize","phpdoc":[],"attributes":[],"arguments":[{"name":"$max_w","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_h","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$crop","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"thumbnail_image":{"name":"thumbnail_image","phpdoc":[],"attributes":[],"arguments":[{"name":"$dst_w","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dst_h","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filter_name","rank":2,"variadic":false,"reference":false,"default":"'FILTER_TRIANGLE'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$strip_meta","rank":3,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"multi_resize":{"name":"multi_resize","phpdoc":[],"attributes":[],"arguments":[{"name":"$sizes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"crop":{"name":"crop","phpdoc":[],"attributes":[],"arguments":[{"name":"$src_x","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src_y","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src_w","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src_h","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dst_w","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dst_h","rank":5,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src_abs","rank":6,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"rotate":{"name":"rotate","phpdoc":[],"attributes":[],"arguments":[{"name":"$angle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"flip":{"name":"flip","phpdoc":[],"attributes":[],"arguments":[{"name":"$horz","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$vert","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"save":{"name":"save","phpdoc":[],"attributes":[],"arguments":[{"name":"$destfilename","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mime_type","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_save":{"name":"_save","phpdoc":[],"attributes":[],"arguments":[{"name":"$image","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filename","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mime_type","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"stream":{"name":"stream","phpdoc":[],"attributes":[],"arguments":[{"name":"$mime_type","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"strip_meta":{"name":"strip_meta","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"pdf_setup":{"name":"pdf_setup","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_user_query":{"name":"WP_User_Query","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$query_vars":{"name":"$query_vars","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$results":{"name":"$results","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$total_users":{"name":"$total_users","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$meta_query":{"name":"$meta_query","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$request":{"name":"$request","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$compat_fields":{"name":"$compat_fields","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_fields":{"name":"$query_fields","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_from":{"name":"$query_from","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_where":{"name":"$query_where","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_orderby":{"name":"$query_orderby","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$query_limit":{"name":"$query_limit","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"fill_query_vars":{"name":"fill_query_vars","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"prepare_query":{"name":"prepare_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"query":{"name":"query","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get":{"name":"get","phpdoc":[],"attributes":[],"arguments":[{"name":"$query_var","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set":{"name":"set","phpdoc":[],"attributes":[],"arguments":[{"name":"$query_var","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_search_sql":{"name":"get_search_sql","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cols","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$wild","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_results":{"name":"get_results","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_total":{"name":"get_total","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_orderby":{"name":"parse_orderby","phpdoc":[],"attributes":[],"arguments":[{"name":"$orderby","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_order":{"name":"parse_order","phpdoc":[],"attributes":[],"arguments":[{"name":"$order","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__get":{"name":"__get","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__set":{"name":"__set","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__isset":{"name":"__isset","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__unset":{"name":"__unset","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__call":{"name":"__call","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$arguments","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_image_editor_gd":{"name":"WP_Image_Editor_GD","abstract":false,"final":false,"extends":"\\WP_Image_Editor","constants":[],"properties":{"$image":{"name":"$image","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__destruct":{"name":"__destruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test":{"name":"test","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"supports_mime_type":{"name":"supports_mime_type","phpdoc":[],"attributes":[],"arguments":[{"name":"$mime_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"load":{"name":"load","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_size":{"name":"update_size","phpdoc":[],"attributes":[],"arguments":[{"name":"$width","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$height","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"resize":{"name":"resize","phpdoc":[],"attributes":[],"arguments":[{"name":"$max_w","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_h","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$crop","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_resize":{"name":"_resize","phpdoc":[],"attributes":[],"arguments":[{"name":"$max_w","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_h","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$crop","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"multi_resize":{"name":"multi_resize","phpdoc":[],"attributes":[],"arguments":[{"name":"$sizes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"crop":{"name":"crop","phpdoc":[],"attributes":[],"arguments":[{"name":"$src_x","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src_y","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src_w","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src_h","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dst_w","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$dst_h","rank":5,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$src_abs","rank":6,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"rotate":{"name":"rotate","phpdoc":[],"attributes":[],"arguments":[{"name":"$angle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"flip":{"name":"flip","phpdoc":[],"attributes":[],"arguments":[{"name":"$horz","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$vert","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"save":{"name":"save","phpdoc":[],"attributes":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mime_type","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_save":{"name":"_save","phpdoc":[],"attributes":[],"arguments":[{"name":"$image","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filename","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mime_type","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"stream":{"name":"stream","phpdoc":[],"attributes":[],"arguments":[{"name":"$mime_type","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"make_image":{"name":"make_image","phpdoc":[],"attributes":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$function","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$arguments","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_http_ixr_client":{"name":"WP_HTTP_IXR_Client","abstract":false,"final":false,"extends":"\\IXR_Client","constants":[],"properties":{"$scheme":{"name":"$scheme","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$error":{"name":"$error","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$server","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$port","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$timeout","rank":3,"variadic":false,"reference":false,"default":"15","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"query":{"name":"query","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"getid3_riff":{"name":"getid3_riff","abstract":false,"final":false,"extends":"\\getid3_handler","constants":[],"properties":{"$container":{"name":"$container","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"analyze":{"name":"Analyze","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parseriffamv":{"name":"ParseRIFFAMV","phpdoc":[],"attributes":[],"arguments":[{"name":"$startoffset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$maxoffset","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parseriff":{"name":"ParseRIFF","phpdoc":[],"attributes":[],"arguments":[{"name":"$startoffset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$maxoffset","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parseriffdata":{"name":"ParseRIFFdata","phpdoc":[],"attributes":[],"arguments":[{"name":"$RIFFdata","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parsecomments":{"name":"parseComments","phpdoc":[],"attributes":[],"arguments":[{"name":"$RIFFinfoArray","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$CommentsTargetArray","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"parsewaveformatex":{"name":"parseWAVEFORMATex","phpdoc":[],"attributes":[],"arguments":[{"name":"$WaveFormatExData","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"parsewavpackheader":{"name":"parseWavPackHeader","phpdoc":[],"attributes":[],"arguments":[{"name":"$WavPackChunkData","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parsebitmapinfoheader":{"name":"ParseBITMAPINFOHEADER","phpdoc":[],"attributes":[],"arguments":[{"name":"$BITMAPINFOHEADER","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$littleEndian","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"parsedivxtag":{"name":"ParseDIVXTAG","phpdoc":[],"attributes":[],"arguments":[{"name":"$DIVXTAG","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$raw","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"wavesndmtaglookup":{"name":"waveSNDMtagLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$tagshortname","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"wformattaglookup":{"name":"wFormatTagLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$wFormatTag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"fourcclookup":{"name":"fourccLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$fourcc","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"eitherendian2int":{"name":"EitherEndian2Int","phpdoc":[],"attributes":[],"arguments":[{"name":"$byteword","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$signed","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"getid3_flac":{"name":"getid3_flac","abstract":false,"final":false,"extends":"\\getid3_handler","constants":{"syncword":{"name":"syncword","value":"'fLaC'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]}},"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"analyze":{"name":"Analyze","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parsemetadata":{"name":"parseMETAdata","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parsestreaminfo":{"name":"parseSTREAMINFO","phpdoc":[],"attributes":[],"arguments":[{"name":"$BlockData","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parseapplication":{"name":"parseAPPLICATION","phpdoc":[],"attributes":[],"arguments":[{"name":"$BlockData","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parseseektable":{"name":"parseSEEKTABLE","phpdoc":[],"attributes":[],"arguments":[{"name":"$BlockData","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parsevorbis_comment":{"name":"parseVORBIS_COMMENT","phpdoc":[],"attributes":[],"arguments":[{"name":"$BlockData","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parsecuesheet":{"name":"parseCUESHEET","phpdoc":[],"attributes":[],"arguments":[{"name":"$BlockData","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parsepicture":{"name":"parsePICTURE","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"metablocktypelookup":{"name":"metaBlockTypeLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$blocktype","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"applicationidlookup":{"name":"applicationIDLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$applicationid","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"picturetypelookup":{"name":"pictureTypeLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$type_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"getid3_apetag":{"name":"getid3_apetag","abstract":false,"final":false,"extends":"\\getid3_handler","constants":[],"properties":{"$inline_attachments":{"name":"$inline_attachments","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$overrideendoffset":{"name":"$overrideendoffset","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"analyze":{"name":"Analyze","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parseapeheaderfooter":{"name":"parseAPEheaderFooter","phpdoc":[],"attributes":[],"arguments":[{"name":"$APEheaderFooterData","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parseapetagflags":{"name":"parseAPEtagFlags","phpdoc":[],"attributes":[],"arguments":[{"name":"$rawflagint","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"apecontenttypeflaglookup":{"name":"APEcontentTypeFlagLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$contenttypeid","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"apetagitemisutf8lookup":{"name":"APEtagItemIsUTF8Lookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$itemkey","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"getid3_quicktime":{"name":"getid3_quicktime","abstract":false,"final":false,"extends":"\\getid3_handler","constants":[],"properties":{"$ReturnAtomData":{"name":"$ReturnAtomData","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ParseAllPossibleAtoms":{"name":"$ParseAllPossibleAtoms","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"analyze":{"name":"Analyze","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quicktimeparseatom":{"name":"QuicktimeParseAtom","phpdoc":[],"attributes":[],"arguments":[{"name":"$atomname","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$atomsize","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$atom_data","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$baseoffset","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$atomHierarchy","rank":4,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ParseAllPossibleAtoms","rank":5,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quicktimeparsecontaineratom":{"name":"QuicktimeParseContainerAtom","phpdoc":[],"attributes":[],"arguments":[{"name":"$atom_data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$baseoffset","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$atomHierarchy","rank":2,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ParseAllPossibleAtoms","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quicktime_read_mp4_descr_length":{"name":"quicktime_read_mp4_descr_length","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$offset","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quicktimelanguagelookup":{"name":"QuicktimeLanguageLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$languageid","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quicktimevideocodeclookup":{"name":"QuicktimeVideoCodecLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$codecid","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quicktimeaudiocodeclookup":{"name":"QuicktimeAudioCodecLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$codecid","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quicktimedcomlookup":{"name":"QuicktimeDCOMLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$compressionid","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quicktimecolornamelookup":{"name":"QuicktimeColorNameLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$colordepthid","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quicktimestiklookup":{"name":"QuicktimeSTIKLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$stik","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quicktimeiodsaudioprofilename":{"name":"QuicktimeIODSaudioProfileName","phpdoc":[],"attributes":[],"arguments":[{"name":"$audio_profile_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quicktimeiodsvideoprofilename":{"name":"QuicktimeIODSvideoProfileName","phpdoc":[],"attributes":[],"arguments":[{"name":"$video_profile_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quicktimecontentratinglookup":{"name":"QuicktimeContentRatingLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$rtng","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quicktimestoreaccounttypelookup":{"name":"QuicktimeStoreAccountTypeLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$akid","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quicktimestorefrontcodelookup":{"name":"QuicktimeStoreFrontCodeLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$sfid","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quicktimeparsenikonnctg":{"name":"QuicktimeParseNikonNCTG","phpdoc":[],"attributes":[],"arguments":[{"name":"$atom_data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"copytoappropriatecommentssection":{"name":"CopyToAppropriateCommentsSection","phpdoc":[],"attributes":[],"arguments":[{"name":"$keyname","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$boxname","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"nonullstring":{"name":"NoNullString","phpdoc":[],"attributes":[],"arguments":[{"name":"$nullterminatedstring","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"pascal2string":{"name":"Pascal2String","phpdoc":[],"attributes":[],"arguments":[{"name":"$pascalstring","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"getid3_lyrics3":{"name":"getid3_lyrics3","abstract":false,"final":false,"extends":"\\getid3_handler","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"analyze":{"name":"Analyze","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getlyrics3data":{"name":"getLyrics3Data","phpdoc":[],"attributes":[],"arguments":[{"name":"$endoffset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$version","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$length","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"lyrics3timestamp2seconds":{"name":"Lyrics3Timestamp2Seconds","phpdoc":[],"attributes":[],"arguments":[{"name":"$rawtimestamp","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"lyrics3lyricstimestampparse":{"name":"Lyrics3LyricsTimestampParse","phpdoc":[],"attributes":[],"arguments":[{"name":"$Lyrics3data","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"intstring2bool":{"name":"IntString2Bool","phpdoc":[],"attributes":[],"arguments":[{"name":"$char","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"getid3_dts":{"name":"getid3_dts","abstract":false,"final":false,"extends":"\\getid3_handler","constants":{"syncword":{"name":"syncword","value":"\"\\x7F\\xFE\\x80\\x01\"","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]}},"properties":{"$readBinDataOffset":{"name":"$readBinDataOffset","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$syncwords":{"name":"$syncwords","visibility":"public","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"analyze":{"name":"Analyze","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readbindata":{"name":"readBinData","phpdoc":[],"attributes":[],"arguments":[{"name":"$bin","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$length","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"bitratelookup":{"name":"bitrateLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$index","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"sampleratelookup":{"name":"sampleRateLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$index","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"bitpersamplelookup":{"name":"bitPerSampleLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$index","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"numchannelslookup":{"name":"numChannelsLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$index","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"channelarrangementlookup":{"name":"channelArrangementLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$index","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"dialognormalization":{"name":"dialogNormalization","phpdoc":[],"attributes":[],"arguments":[{"name":"$index","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$version","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"getid3_ogg":{"name":"getid3_ogg","abstract":false,"final":false,"extends":"\\getid3_handler","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"analyze":{"name":"Analyze","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parsevorbispageheader":{"name":"ParseVorbisPageHeader","phpdoc":[],"attributes":[],"arguments":[{"name":"$filedata","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filedataoffset","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$oggpageinfo","rank":2,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parseopuspageheader":{"name":"ParseOpusPageHeader","phpdoc":[],"attributes":[],"arguments":[{"name":"$filedata","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filedataoffset","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$oggpageinfo","rank":2,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parseoggpageheader":{"name":"ParseOggPageHeader","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parsevorbiscomments":{"name":"ParseVorbisComments","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"speexbandmodelookup":{"name":"SpeexBandModeLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$mode","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"oggpagesegmentlength":{"name":"OggPageSegmentLength","phpdoc":[],"attributes":[],"arguments":[{"name":"$OggInfoArray","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$SegmentNumber","rank":1,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_quality_from_nominal_bitrate":{"name":"get_quality_from_nominal_bitrate","phpdoc":[],"attributes":[],"arguments":[{"name":"$nominal_bitrate","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"theoracolorspace":{"name":"TheoraColorSpace","phpdoc":[],"attributes":[],"arguments":[{"name":"$colorspace_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"theorapixelformat":{"name":"TheoraPixelFormat","phpdoc":[],"attributes":[],"arguments":[{"name":"$pixelformat_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"getid3_matroska":{"name":"getid3_matroska","abstract":false,"final":false,"extends":"\\getid3_handler","constants":[],"properties":{"$hide_clusters":{"name":"$hide_clusters","visibility":"public","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$parse_whole_file":{"name":"$parse_whole_file","visibility":"public","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$EBMLbuffer":{"name":"$EBMLbuffer","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$EBMLbuffer_offset":{"name":"$EBMLbuffer_offset","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$EBMLbuffer_length":{"name":"$EBMLbuffer_length","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$current_offset":{"name":"$current_offset","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$unuseful_elements":{"name":"$unuseful_elements","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"analyze":{"name":"Analyze","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parseebml":{"name":"parseEBML","phpdoc":[],"attributes":[],"arguments":[{"name":"$info","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ensurebufferhasenoughdata":{"name":"EnsureBufferHasEnoughData","phpdoc":[],"attributes":[],"arguments":[{"name":"$min_data","rank":0,"variadic":false,"reference":false,"default":"1024","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readebmlint":{"name":"readEBMLint","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readebmlelementdata":{"name":"readEBMLelementData","phpdoc":[],"attributes":[],"arguments":[{"name":"$length","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$check_buffer","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getebmlelement":{"name":"getEBMLelement","phpdoc":[],"attributes":[],"arguments":[{"name":"$element","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parent_end","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$get_data","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"unhandledelement":{"name":"unhandledElement","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$line","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$element","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"extractcommentssimpletag":{"name":"ExtractCommentsSimpleTag","phpdoc":[],"attributes":[],"arguments":[{"name":"$SimpleTagArray","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handleemblsimpletag":{"name":"HandleEMBLSimpleTag","phpdoc":[],"attributes":[],"arguments":[{"name":"$parent_end","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handleemblclusterblock":{"name":"HandleEMBLClusterBlock","phpdoc":[],"attributes":[],"arguments":[{"name":"$element","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$block_type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$info","rank":2,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ebml2int":{"name":"EBML2Int","phpdoc":[],"attributes":[],"arguments":[{"name":"$EBMLstring","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"ebmldate2unix":{"name":"EBMLdate2unix","phpdoc":[],"attributes":[],"arguments":[{"name":"$EBMLdatestamp","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"targettypevalue":{"name":"TargetTypeValue","phpdoc":[],"attributes":[],"arguments":[{"name":"$target_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"blocklacingtype":{"name":"BlockLacingType","phpdoc":[],"attributes":[],"arguments":[{"name":"$lacingtype","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"codecidtocommonname":{"name":"CodecIDtoCommonName","phpdoc":[],"attributes":[],"arguments":[{"name":"$codecid","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"ebmlidname":{"name":"EBMLidName","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"displayunit":{"name":"displayUnit","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"getdefaultstreaminfo":{"name":"getDefaultStreamInfo","phpdoc":[],"attributes":[],"arguments":[{"name":"$streams","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"getid3_flv":{"name":"getid3_flv","abstract":false,"final":false,"extends":"\\getid3_handler","constants":{"magic":{"name":"magic","value":"'FLV'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]}},"properties":{"$max_frames":{"name":"$max_frames","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"analyze":{"name":"Analyze","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"audioformatlookup":{"name":"audioFormatLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"audioratelookup":{"name":"audioRateLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"audiobitdepthlookup":{"name":"audioBitDepthLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"videocodeclookup":{"name":"videoCodecLookup","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"amfstream":{"name":"AMFStream","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$bytes":{"name":"$bytes","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$pos":{"name":"$pos","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$bytes","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readbyte":{"name":"readByte","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readint":{"name":"readInt","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readlong":{"name":"readLong","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readdouble":{"name":"readDouble","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readutf":{"name":"readUTF","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readlongutf":{"name":"readLongUTF","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"read":{"name":"read","phpdoc":[],"attributes":[],"arguments":[{"name":"$length","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"peekbyte":{"name":"peekByte","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"peekint":{"name":"peekInt","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"peeklong":{"name":"peekLong","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"peekdouble":{"name":"peekDouble","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"peekutf":{"name":"peekUTF","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"peeklongutf":{"name":"peekLongUTF","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"amfreader":{"name":"AMFReader","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$stream":{"name":"$stream","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$stream","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readdata":{"name":"readData","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readdouble":{"name":"readDouble","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readboolean":{"name":"readBoolean","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readstring":{"name":"readString","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readobject":{"name":"readObject","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readmixedarray":{"name":"readMixedArray","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readarray":{"name":"readArray","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readdate":{"name":"readDate","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readlongstring":{"name":"readLongString","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readxml":{"name":"readXML","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readtypedobject":{"name":"readTypedObject","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"avcsequenceparametersetreader":{"name":"AVCSequenceParameterSetReader","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$sps":{"name":"$sps","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$start":{"name":"$start","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$currentBytes":{"name":"$currentBytes","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$currentBits":{"name":"$currentBits","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$width":{"name":"$width","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$height":{"name":"$height","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$sps","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readdata":{"name":"readData","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"skipbits":{"name":"skipBits","phpdoc":[],"attributes":[],"arguments":[{"name":"$bits","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getbit":{"name":"getBit","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getbits":{"name":"getBits","phpdoc":[],"attributes":[],"arguments":[{"name":"$bits","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"expgolombue":{"name":"expGolombUe","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"expgolombse":{"name":"expGolombSe","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getwidth":{"name":"getWidth","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getheight":{"name":"getHeight","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_category":{"name":"SimplePie_Category","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$term":{"name":"$term","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$scheme":{"name":"$scheme","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$label":{"name":"$label","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$term","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$label","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__tostring":{"name":"__toString","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_term":{"name":"get_term","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_scheme":{"name":"get_scheme","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_label":{"name":"get_label","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_parser":{"name":"SimplePie_Parser","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$error_code":{"name":"$error_code","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$error_string":{"name":"$error_string","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$current_line":{"name":"$current_line","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$current_column":{"name":"$current_column","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$current_byte":{"name":"$current_byte","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$separator":{"name":"$separator","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$namespace":{"name":"$namespace","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$element":{"name":"$element","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$xml_base":{"name":"$xml_base","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$xml_base_explicit":{"name":"$xml_base_explicit","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$xml_lang":{"name":"$xml_lang","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$data":{"name":"$data","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$datas":{"name":"$datas","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$current_xhtml_construct":{"name":"$current_xhtml_construct","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$encoding":{"name":"$encoding","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$registry":{"name":"$registry","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"set_registry":{"name":"set_registry","phpdoc":[],"attributes":[],"arguments":[{"name":"$registry","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"SimplePie_Registry"},{"typehint":"SimplePie_Registry"}],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse":{"name":"parse","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$encoding","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_error_code":{"name":"get_error_code","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_error_string":{"name":"get_error_string","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_current_line":{"name":"get_current_line","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_current_column":{"name":"get_current_column","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_current_byte":{"name":"get_current_byte","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_data":{"name":"get_data","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"tag_open":{"name":"tag_open","phpdoc":[],"attributes":[],"arguments":[{"name":"$parser","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tag","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attributes","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"cdata":{"name":"cdata","phpdoc":[],"attributes":[],"arguments":[{"name":"$parser","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cdata","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"tag_close":{"name":"tag_close","phpdoc":[],"attributes":[],"arguments":[{"name":"$parser","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tag","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"split_ns":{"name":"split_ns","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_sanitize":{"name":"SimplePie_Sanitize","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$base":{"name":"$base","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$remove_div":{"name":"$remove_div","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$image_handler":{"name":"$image_handler","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$strip_htmltags":{"name":"$strip_htmltags","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$encode_instead_of_strip":{"name":"$encode_instead_of_strip","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$strip_attributes":{"name":"$strip_attributes","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$strip_comments":{"name":"$strip_comments","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$output_encoding":{"name":"$output_encoding","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$enable_cache":{"name":"$enable_cache","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cache_location":{"name":"$cache_location","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cache_name_function":{"name":"$cache_name_function","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$timeout":{"name":"$timeout","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$useragent":{"name":"$useragent","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$force_fsockopen":{"name":"$force_fsockopen","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$replace_url_attributes":{"name":"$replace_url_attributes","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_div":{"name":"remove_div","phpdoc":[],"attributes":[],"arguments":[{"name":"$enable","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_image_handler":{"name":"set_image_handler","phpdoc":[],"attributes":[],"arguments":[{"name":"$page","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_registry":{"name":"set_registry","phpdoc":[],"attributes":[],"arguments":[{"name":"$registry","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"SimplePie_Registry"},{"typehint":"SimplePie_Registry"}],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"pass_cache_data":{"name":"pass_cache_data","phpdoc":[],"attributes":[],"arguments":[{"name":"$enable_cache","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cache_location","rank":1,"variadic":false,"reference":false,"default":"'.\/cache'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cache_name_function","rank":2,"variadic":false,"reference":false,"default":"'md5'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cache_class","rank":3,"variadic":false,"reference":false,"default":"'SimplePie_Cache'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"pass_file_data":{"name":"pass_file_data","phpdoc":[],"attributes":[],"arguments":[{"name":"$file_class","rank":0,"variadic":false,"reference":false,"default":"'SimplePie_File'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$timeout","rank":1,"variadic":false,"reference":false,"default":"10","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$useragent","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$force_fsockopen","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"strip_htmltags":{"name":"strip_htmltags","phpdoc":[],"attributes":[],"arguments":[{"name":"$tags","rank":0,"variadic":false,"reference":false,"default":"array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style')","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"encode_instead_of_strip":{"name":"encode_instead_of_strip","phpdoc":[],"attributes":[],"arguments":[{"name":"$encode","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"strip_attributes":{"name":"strip_attributes","phpdoc":[],"attributes":[],"arguments":[{"name":"$attribs","rank":0,"variadic":false,"reference":false,"default":"array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc')","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"strip_comments":{"name":"strip_comments","phpdoc":[],"attributes":[],"arguments":[{"name":"$strip","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_output_encoding":{"name":"set_output_encoding","phpdoc":[],"attributes":[],"arguments":[{"name":"$encoding","rank":0,"variadic":false,"reference":false,"default":"'UTF-8'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_url_replacements":{"name":"set_url_replacements","phpdoc":[],"attributes":[],"arguments":[{"name":"$element_attribute","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize":{"name":"sanitize","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$base","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"preprocess":{"name":"preprocess","phpdoc":[],"attributes":[],"arguments":[{"name":"$html","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"replace_urls":{"name":"replace_urls","phpdoc":[],"attributes":[],"arguments":[{"name":"$document","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tag","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attributes","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"do_strip_htmltags":{"name":"do_strip_htmltags","phpdoc":[],"attributes":[],"arguments":[{"name":"$match","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"strip_tag":{"name":"strip_tag","phpdoc":[],"attributes":[],"arguments":[{"name":"$tag","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$document","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"strip_attr":{"name":"strip_attr","phpdoc":[],"attributes":[],"arguments":[{"name":"$attrib","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$document","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_cache":{"name":"SimplePie_Cache","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$handlers":{"name":"$handlers","visibility":"protected","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_handler":{"name":"get_handler","phpdoc":[],"attributes":[],"arguments":[{"name":"$location","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filename","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$extension","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"create":{"name":"create","phpdoc":[],"attributes":[],"arguments":[{"name":"$location","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$filename","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$extension","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register":{"name":"register","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$class","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"parse_url":{"name":"parse_URL","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_file":{"name":"SimplePie_File","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$url":{"name":"$url","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$useragent":{"name":"$useragent","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$success":{"name":"$success","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$headers":{"name":"$headers","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$body":{"name":"$body","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$status_code":{"name":"$status_code","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$redirects":{"name":"$redirects","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$error":{"name":"$error","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$method":{"name":"$method","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$timeout","rank":1,"variadic":false,"reference":false,"default":"10","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$redirects","rank":2,"variadic":false,"reference":false,"default":"5","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$useragent","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$force_fsockopen","rank":5,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_registry":{"name":"SimplePie_Registry","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$default":{"name":"$default","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$classes":{"name":"$classes","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$legacy":{"name":"$legacy","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register":{"name":"register","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$class","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$legacy","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_class":{"name":"get_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"create":{"name":"create","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parameters","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":true,"returntype":"one","returntypehints":[]},"call":{"name":"call","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$method","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parameters","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":true,"returntype":"one","returntypehints":[]}}},"simplepie_copyright":{"name":"SimplePie_Copyright","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$url":{"name":"$url","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$label":{"name":"$label","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$label","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__tostring":{"name":"__toString","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_url":{"name":"get_url","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_attribution":{"name":"get_attribution","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_locator":{"name":"SimplePie_Locator","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$useragent":{"name":"$useragent","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$timeout":{"name":"$timeout","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$file":{"name":"$file","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$local":{"name":"$local","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$elsewhere":{"name":"$elsewhere","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cached_entities":{"name":"$cached_entities","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$http_base":{"name":"$http_base","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$base":{"name":"$base","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$base_location":{"name":"$base_location","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$checked_feeds":{"name":"$checked_feeds","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$max_checked_feeds":{"name":"$max_checked_feeds","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$registry":{"name":"$registry","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"SimplePie_File"},{"typehint":"SimplePie_File"}],"attributes":[]},{"name":"$timeout","rank":1,"variadic":false,"reference":false,"default":"10","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$useragent","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$max_checked_feeds","rank":3,"variadic":false,"reference":false,"default":"10","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_registry":{"name":"set_registry","phpdoc":[],"attributes":[],"arguments":[{"name":"$registry","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"SimplePie_Registry"},{"typehint":"SimplePie_Registry"}],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"find":{"name":"find","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"SIMPLEPIE_LOCATOR_ALL","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$working","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_feed":{"name":"is_feed","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_base":{"name":"get_base","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"autodiscovery":{"name":"autodiscovery","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"search_elements_by_tag":{"name":"search_elements_by_tag","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$done","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$feeds","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_links":{"name":"get_links","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"extension":{"name":"extension","phpdoc":[],"attributes":[],"arguments":[{"name":"$array","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"body":{"name":"body","phpdoc":[],"attributes":[],"arguments":[{"name":"$array","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_restriction":{"name":"SimplePie_Restriction","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$relationship":{"name":"$relationship","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$type":{"name":"$type","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$value":{"name":"$value","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$relationship","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__tostring":{"name":"__toString","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_relationship":{"name":"get_relationship","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_type":{"name":"get_type","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_value":{"name":"get_value","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_credit":{"name":"SimplePie_Credit","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$role":{"name":"$role","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$scheme":{"name":"$scheme","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$name":{"name":"$name","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$role","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$scheme","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__tostring":{"name":"__toString","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_role":{"name":"get_role","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_scheme":{"name":"get_scheme","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_name":{"name":"get_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_item":{"name":"SimplePie_Item","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$feed":{"name":"$feed","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$data":{"name":"$data","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$registry":{"name":"$registry","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$feed","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_registry":{"name":"set_registry","phpdoc":[],"attributes":[],"arguments":[{"name":"$registry","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"SimplePie_Registry"},{"typehint":"SimplePie_Registry"}],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__tostring":{"name":"__toString","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__destruct":{"name":"__destruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_tags":{"name":"get_item_tags","phpdoc":[],"attributes":[],"arguments":[{"name":"$namespace","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tag","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_base":{"name":"get_base","phpdoc":[],"attributes":[],"arguments":[{"name":"$element","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize":{"name":"sanitize","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$base","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_feed":{"name":"get_feed","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_id":{"name":"get_id","phpdoc":[],"attributes":[],"arguments":[{"name":"$hash","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_title":{"name":"get_title","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_description":{"name":"get_description","phpdoc":[],"attributes":[],"arguments":[{"name":"$description_only","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_content":{"name":"get_content","phpdoc":[],"attributes":[],"arguments":[{"name":"$content_only","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_category":{"name":"get_category","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_categories":{"name":"get_categories","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_author":{"name":"get_author","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_contributor":{"name":"get_contributor","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_contributors":{"name":"get_contributors","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_authors":{"name":"get_authors","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_copyright":{"name":"get_copyright","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_date":{"name":"get_date","phpdoc":[],"attributes":[],"arguments":[{"name":"$date_format","rank":0,"variadic":false,"reference":false,"default":"'j F Y, g:i a'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_updated_date":{"name":"get_updated_date","phpdoc":[],"attributes":[],"arguments":[{"name":"$date_format","rank":0,"variadic":false,"reference":false,"default":"'j F Y, g:i a'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_local_date":{"name":"get_local_date","phpdoc":[],"attributes":[],"arguments":[{"name":"$date_format","rank":0,"variadic":false,"reference":false,"default":"'%c'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_gmdate":{"name":"get_gmdate","phpdoc":[],"attributes":[],"arguments":[{"name":"$date_format","rank":0,"variadic":false,"reference":false,"default":"'j F Y, g:i a'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_updated_gmdate":{"name":"get_updated_gmdate","phpdoc":[],"attributes":[],"arguments":[{"name":"$date_format","rank":0,"variadic":false,"reference":false,"default":"'j F Y, g:i a'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_permalink":{"name":"get_permalink","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_link":{"name":"get_link","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$rel","rank":1,"variadic":false,"reference":false,"default":"'alternate'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_links":{"name":"get_links","phpdoc":[],"attributes":[],"arguments":[{"name":"$rel","rank":0,"variadic":false,"reference":false,"default":"'alternate'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_enclosure":{"name":"get_enclosure","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$prefer","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_enclosures":{"name":"get_enclosures","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_latitude":{"name":"get_latitude","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_longitude":{"name":"get_longitude","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_source":{"name":"get_source","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_enclosure":{"name":"SimplePie_Enclosure","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$bitrate":{"name":"$bitrate","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$captions":{"name":"$captions","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$categories":{"name":"$categories","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$channels":{"name":"$channels","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$copyright":{"name":"$copyright","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$credits":{"name":"$credits","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$description":{"name":"$description","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$duration":{"name":"$duration","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$expression":{"name":"$expression","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$framerate":{"name":"$framerate","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$handler":{"name":"$handler","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$hashes":{"name":"$hashes","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$height":{"name":"$height","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$javascript":{"name":"$javascript","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$keywords":{"name":"$keywords","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$lang":{"name":"$lang","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$length":{"name":"$length","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$link":{"name":"$link","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$medium":{"name":"$medium","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$player":{"name":"$player","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ratings":{"name":"$ratings","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$restrictions":{"name":"$restrictions","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$samplingrate":{"name":"$samplingrate","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$thumbnails":{"name":"$thumbnails","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$title":{"name":"$title","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$type":{"name":"$type","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$width":{"name":"$width","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$link","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$length","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$javascript","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$bitrate","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$captions","rank":5,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$categories","rank":6,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$channels","rank":7,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$copyright","rank":8,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$credits","rank":9,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$description","rank":10,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$duration","rank":11,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$expression","rank":12,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$framerate","rank":13,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$hashes","rank":14,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$height","rank":15,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$keywords","rank":16,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$lang","rank":17,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$medium","rank":18,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$player","rank":19,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ratings","rank":20,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$restrictions","rank":21,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$samplingrate","rank":22,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$thumbnails","rank":23,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$title","rank":24,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$width","rank":25,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__tostring":{"name":"__toString","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_bitrate":{"name":"get_bitrate","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_caption":{"name":"get_caption","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_captions":{"name":"get_captions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_category":{"name":"get_category","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_categories":{"name":"get_categories","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_channels":{"name":"get_channels","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_copyright":{"name":"get_copyright","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_credit":{"name":"get_credit","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_credits":{"name":"get_credits","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_description":{"name":"get_description","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_duration":{"name":"get_duration","phpdoc":[],"attributes":[],"arguments":[{"name":"$convert","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_expression":{"name":"get_expression","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_extension":{"name":"get_extension","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_framerate":{"name":"get_framerate","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_handler":{"name":"get_handler","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_hash":{"name":"get_hash","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_hashes":{"name":"get_hashes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_height":{"name":"get_height","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_language":{"name":"get_language","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_keyword":{"name":"get_keyword","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_keywords":{"name":"get_keywords","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_length":{"name":"get_length","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_link":{"name":"get_link","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_medium":{"name":"get_medium","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_player":{"name":"get_player","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_rating":{"name":"get_rating","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_ratings":{"name":"get_ratings","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_restriction":{"name":"get_restriction","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_restrictions":{"name":"get_restrictions","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_sampling_rate":{"name":"get_sampling_rate","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_size":{"name":"get_size","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_thumbnail":{"name":"get_thumbnail","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_thumbnails":{"name":"get_thumbnails","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_title":{"name":"get_title","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_type":{"name":"get_type","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_width":{"name":"get_width","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"native_embed":{"name":"native_embed","phpdoc":[],"attributes":[],"arguments":[{"name":"$options","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"embed":{"name":"embed","phpdoc":[],"attributes":[],"arguments":[{"name":"$options","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$native","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_real_type":{"name":"get_real_type","phpdoc":[],"attributes":[],"arguments":[{"name":"$find_handler","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_iri":{"name":"SimplePie_IRI","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$scheme":{"name":"$scheme","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$iuserinfo":{"name":"$iuserinfo","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ihost":{"name":"$ihost","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$port":{"name":"$port","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ipath":{"name":"$ipath","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$iquery":{"name":"$iquery","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ifragment":{"name":"$ifragment","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$normalization":{"name":"$normalization","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__tostring":{"name":"__toString","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__set":{"name":"__set","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__get":{"name":"__get","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__isset":{"name":"__isset","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__unset":{"name":"__unset","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$iri","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"absolutize":{"name":"absolutize","phpdoc":[],"attributes":[],"arguments":[{"name":"$base","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$relative","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"parse_iri":{"name":"parse_iri","phpdoc":[],"attributes":[],"arguments":[{"name":"$iri","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_dot_segments":{"name":"remove_dot_segments","phpdoc":[],"attributes":[],"arguments":[{"name":"$input","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"replace_invalid_with_pct_encoding":{"name":"replace_invalid_with_pct_encoding","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$extra_chars","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$iprivate","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_iunreserved_percent_encoded":{"name":"remove_iunreserved_percent_encoded","phpdoc":[],"attributes":[],"arguments":[{"name":"$match","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"scheme_normalization":{"name":"scheme_normalization","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_valid":{"name":"is_valid","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_iri":{"name":"set_iri","phpdoc":[],"attributes":[],"arguments":[{"name":"$iri","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_scheme":{"name":"set_scheme","phpdoc":[],"attributes":[],"arguments":[{"name":"$scheme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_authority":{"name":"set_authority","phpdoc":[],"attributes":[],"arguments":[{"name":"$authority","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_userinfo":{"name":"set_userinfo","phpdoc":[],"attributes":[],"arguments":[{"name":"$iuserinfo","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_host":{"name":"set_host","phpdoc":[],"attributes":[],"arguments":[{"name":"$ihost","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_port":{"name":"set_port","phpdoc":[],"attributes":[],"arguments":[{"name":"$port","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_path":{"name":"set_path","phpdoc":[],"attributes":[],"arguments":[{"name":"$ipath","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_query":{"name":"set_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$iquery","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_fragment":{"name":"set_fragment","phpdoc":[],"attributes":[],"arguments":[{"name":"$ifragment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"to_uri":{"name":"to_uri","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_iri":{"name":"get_iri","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_uri":{"name":"get_uri","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_iauthority":{"name":"get_iauthority","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_authority":{"name":"get_authority","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_source":{"name":"SimplePie_Source","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$item":{"name":"$item","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$data":{"name":"$data","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$registry":{"name":"$registry","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$item","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_registry":{"name":"set_registry","phpdoc":[],"attributes":[],"arguments":[{"name":"$registry","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"SimplePie_Registry"},{"typehint":"SimplePie_Registry"}],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__tostring":{"name":"__toString","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_source_tags":{"name":"get_source_tags","phpdoc":[],"attributes":[],"arguments":[{"name":"$namespace","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tag","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_base":{"name":"get_base","phpdoc":[],"attributes":[],"arguments":[{"name":"$element","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize":{"name":"sanitize","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$base","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item":{"name":"get_item","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_title":{"name":"get_title","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_category":{"name":"get_category","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_categories":{"name":"get_categories","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_author":{"name":"get_author","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_authors":{"name":"get_authors","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_contributor":{"name":"get_contributor","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_contributors":{"name":"get_contributors","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_link":{"name":"get_link","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$rel","rank":1,"variadic":false,"reference":false,"default":"'alternate'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_permalink":{"name":"get_permalink","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_links":{"name":"get_links","phpdoc":[],"attributes":[],"arguments":[{"name":"$rel","rank":0,"variadic":false,"reference":false,"default":"'alternate'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_description":{"name":"get_description","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_copyright":{"name":"get_copyright","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_language":{"name":"get_language","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_latitude":{"name":"get_latitude","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_longitude":{"name":"get_longitude","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_image_url":{"name":"get_image_url","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_author":{"name":"SimplePie_Author","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$name":{"name":"$name","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$link":{"name":"$link","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$email":{"name":"$email","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$link","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$email","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__tostring":{"name":"__toString","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_name":{"name":"get_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_link":{"name":"get_link","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_email":{"name":"get_email","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_exception":{"name":"SimplePie_Exception","abstract":false,"final":false,"extends":"\\exception","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"simplepie_caption":{"name":"SimplePie_Caption","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$type":{"name":"$type","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$lang":{"name":"$lang","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$startTime":{"name":"$startTime","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$endTime":{"name":"$endTime","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$text":{"name":"$text","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$type","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$lang","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$startTime","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$endTime","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$text","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__tostring":{"name":"__toString","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_endtime":{"name":"get_endtime","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_language":{"name":"get_language","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_starttime":{"name":"get_starttime","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_text":{"name":"get_text","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_type":{"name":"get_type","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_misc":{"name":"SimplePie_Misc","abstract":false,"final":false,"extends":"","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"time_hms":{"name":"time_hms","phpdoc":[],"attributes":[],"arguments":[{"name":"$seconds","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"absolutize_url":{"name":"absolutize_url","phpdoc":[],"attributes":[],"arguments":[{"name":"$relative","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$base","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_element":{"name":"get_element","phpdoc":[],"attributes":[],"arguments":[{"name":"$realname","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$string","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"element_implode":{"name":"element_implode","phpdoc":[],"attributes":[],"arguments":[{"name":"$element","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"error":{"name":"error","phpdoc":[],"attributes":[],"arguments":[{"name":"$message","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$level","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$file","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$line","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"fix_protocol":{"name":"fix_protocol","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$http","rank":1,"variadic":false,"reference":false,"default":"1","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"parse_url":{"name":"parse_url","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"compress_parse_url":{"name":"compress_parse_url","phpdoc":[],"attributes":[],"arguments":[{"name":"$scheme","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$authority","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":2,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$query","rank":3,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$fragment","rank":4,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"normalize_url":{"name":"normalize_url","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"percent_encoding_normalization":{"name":"percent_encoding_normalization","phpdoc":[],"attributes":[],"arguments":[{"name":"$match","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"windows_1252_to_utf8":{"name":"windows_1252_to_utf8","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"change_encoding":{"name":"change_encoding","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$input","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"change_encoding_mbstring":{"name":"change_encoding_mbstring","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$input","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"change_encoding_iconv":{"name":"change_encoding_iconv","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$input","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$output","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"encoding":{"name":"encoding","phpdoc":[],"attributes":[],"arguments":[{"name":"$charset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_curl_version":{"name":"get_curl_version","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"strip_comments":{"name":"strip_comments","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"parse_date":{"name":"parse_date","phpdoc":[],"attributes":[],"arguments":[{"name":"$dt","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"entities_decode":{"name":"entities_decode","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"uncomment_rfc822":{"name":"uncomment_rfc822","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"parse_mime":{"name":"parse_mime","phpdoc":[],"attributes":[],"arguments":[{"name":"$mime","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"atom_03_construct_type":{"name":"atom_03_construct_type","phpdoc":[],"attributes":[],"arguments":[{"name":"$attribs","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"atom_10_construct_type":{"name":"atom_10_construct_type","phpdoc":[],"attributes":[],"arguments":[{"name":"$attribs","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"atom_10_content_construct_type":{"name":"atom_10_content_construct_type","phpdoc":[],"attributes":[],"arguments":[{"name":"$attribs","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"is_isegment_nz_nc":{"name":"is_isegment_nz_nc","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"space_seperated_tokens":{"name":"space_seperated_tokens","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"codepoint_to_utf8":{"name":"codepoint_to_utf8","phpdoc":[],"attributes":[],"arguments":[{"name":"$codepoint","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"parse_str":{"name":"parse_str","phpdoc":[],"attributes":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"xml_encoding":{"name":"xml_encoding","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$registry","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"output_javascript":{"name":"output_javascript","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_build":{"name":"get_build","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"debug":{"name":"debug","phpdoc":[],"attributes":[],"arguments":[{"name":"$sp","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"silence_errors":{"name":"silence_errors","phpdoc":[],"attributes":[],"arguments":[{"name":"$num","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$str","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_rating":{"name":"SimplePie_Rating","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$scheme":{"name":"$scheme","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$value":{"name":"$value","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$scheme","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__tostring":{"name":"__toString","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_scheme":{"name":"get_scheme","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_value":{"name":"get_value","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_core":{"name":"SimplePie_Core","abstract":false,"final":false,"extends":"\\SimplePie","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"simplepie_gzdecode":{"name":"SimplePie_gzdecode","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$compressed_data":{"name":"$compressed_data","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$compressed_size":{"name":"$compressed_size","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$min_compressed_size":{"name":"$min_compressed_size","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$position":{"name":"$position","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$flags":{"name":"$flags","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$data":{"name":"$data","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$MTIME":{"name":"$MTIME","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$XFL":{"name":"$XFL","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$OS":{"name":"$OS","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$SI1":{"name":"$SI1","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$SI2":{"name":"$SI2","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$extra_field":{"name":"$extra_field","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$filename":{"name":"$filename","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$comment":{"name":"$comment","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__set":{"name":"__set","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse":{"name":"parse","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_net_ipv6":{"name":"SimplePie_Net_IPv6","abstract":false,"final":false,"extends":"","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"uncompress":{"name":"uncompress","phpdoc":[],"attributes":[],"arguments":[{"name":"$ip","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"compress":{"name":"compress","phpdoc":[],"attributes":[],"arguments":[{"name":"$ip","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"split_v6_v4":{"name":"split_v6_v4","phpdoc":[],"attributes":[],"arguments":[{"name":"$ip","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"check_ipv6":{"name":"check_ipv6","phpdoc":[],"attributes":[],"arguments":[{"name":"$ip","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"checkipv6":{"name":"checkIPv6","phpdoc":[],"attributes":[],"arguments":[{"name":"$ip","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_cache_memcache":{"name":"SimplePie_Cache_Memcache","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$cache":{"name":"$cache","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$options":{"name":"$options","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$name":{"name":"$name","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[{"target":"\\SimplePie_Cache_Base","type":"implements"}],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$location","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"save":{"name":"save","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"load":{"name":"load","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mtime":{"name":"mtime","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"touch":{"name":"touch","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"unlink":{"name":"unlink","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_cache_file":{"name":"SimplePie_Cache_File","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$location":{"name":"$location","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$filename":{"name":"$filename","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$extension":{"name":"$extension","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$name":{"name":"$name","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[{"target":"\\SimplePie_Cache_Base","type":"implements"}],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$location","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"save":{"name":"save","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"load":{"name":"load","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mtime":{"name":"mtime","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"touch":{"name":"touch","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"unlink":{"name":"unlink","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_cache_db":{"name":"SimplePie_Cache_DB","abstract":true,"final":false,"extends":"","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[{"target":"\\SimplePie_Cache_Base","type":"implements"}],"phpdoc":[],"methods":{"prepare_simplepie_object_for_cache":{"name":"prepare_simplepie_object_for_cache","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_cache_mysql":{"name":"SimplePie_Cache_MySQL","abstract":false,"final":false,"extends":"\\SimplePie_Cache_DB","constants":[],"properties":{"$mysql":{"name":"$mysql","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$options":{"name":"$options","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$id":{"name":"$id","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$location","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"save":{"name":"save","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"load":{"name":"load","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mtime":{"name":"mtime","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"touch":{"name":"touch","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"unlink":{"name":"unlink","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_parse_date":{"name":"SimplePie_Parse_Date","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$date":{"name":"$date","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$day":{"name":"$day","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$month":{"name":"$month","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$timezone":{"name":"$timezone","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$day_pcre":{"name":"$day_pcre","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$month_pcre":{"name":"$month_pcre","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$built_in":{"name":"$built_in","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$user":{"name":"$user","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get":{"name":"get","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"parse":{"name":"parse","phpdoc":[],"attributes":[],"arguments":[{"name":"$date","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_callback":{"name":"add_callback","phpdoc":[],"attributes":[],"arguments":[{"name":"$callback","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"date_w3cdtf":{"name":"date_w3cdtf","phpdoc":[],"attributes":[],"arguments":[{"name":"$date","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_rfc2822_comments":{"name":"remove_rfc2822_comments","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"date_rfc2822":{"name":"date_rfc2822","phpdoc":[],"attributes":[],"arguments":[{"name":"$date","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"date_rfc850":{"name":"date_rfc850","phpdoc":[],"attributes":[],"arguments":[{"name":"$date","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"date_asctime":{"name":"date_asctime","phpdoc":[],"attributes":[],"arguments":[{"name":"$date","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"date_strtotime":{"name":"date_strtotime","phpdoc":[],"attributes":[],"arguments":[{"name":"$date","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_content_type_sniffer":{"name":"SimplePie_Content_Type_Sniffer","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$file":{"name":"$file","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$file","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_type":{"name":"get_type","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"text_or_binary":{"name":"text_or_binary","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"unknown":{"name":"unknown","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"image":{"name":"image","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"feed_or_html":{"name":"feed_or_html","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_xml_declaration_parser":{"name":"SimplePie_XML_Declaration_Parser","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$version":{"name":"$version","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$encoding":{"name":"$encoding","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$standalone":{"name":"$standalone","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$state":{"name":"$state","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$data":{"name":"$data","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$data_length":{"name":"$data_length","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$position":{"name":"$position","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse":{"name":"parse","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"has_data":{"name":"has_data","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"skip_whitespace":{"name":"skip_whitespace","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_value":{"name":"get_value","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"before_version_name":{"name":"before_version_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"version_name":{"name":"version_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"version_equals":{"name":"version_equals","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"version_value":{"name":"version_value","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"encoding_name":{"name":"encoding_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"encoding_equals":{"name":"encoding_equals","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"encoding_value":{"name":"encoding_value","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"standalone_name":{"name":"standalone_name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"standalone_equals":{"name":"standalone_equals","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"standalone_value":{"name":"standalone_value","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_decode_html_entities":{"name":"SimplePie_Decode_HTML_Entities","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$data":{"name":"$data","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$consumed":{"name":"$consumed","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$position":{"name":"$position","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse":{"name":"parse","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"consume":{"name":"consume","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"consume_range":{"name":"consume_range","phpdoc":[],"attributes":[],"arguments":[{"name":"$chars","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"unconsume":{"name":"unconsume","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"entity":{"name":"entity","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"simplepie_http_parser":{"name":"SimplePie_HTTP_Parser","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$http_version":{"name":"$http_version","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$status_code":{"name":"$status_code","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$headers":{"name":"$headers","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$body":{"name":"$body","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$state":{"name":"$state","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$data":{"name":"$data","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$data_length":{"name":"$data_length","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$position":{"name":"$position","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$name":{"name":"$name","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$value":{"name":"$value","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse":{"name":"parse","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"has_data":{"name":"has_data","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_linear_whitespace":{"name":"is_linear_whitespace","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"http_version":{"name":"http_version","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"status":{"name":"status","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"reason":{"name":"reason","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"new_line":{"name":"new_line","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"name":{"name":"name","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"linear_whitespace":{"name":"linear_whitespace","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"value":{"name":"value","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"value_char":{"name":"value_char","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quote":{"name":"quote","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quote_char":{"name":"quote_char","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"quote_escaped":{"name":"quote_escaped","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"body":{"name":"body","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"chunked":{"name":"chunked","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"error":{"name":"Error","abstract":false,"final":false,"extends":"\\exception","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"typeerror":{"name":"TypeError","abstract":false,"final":false,"extends":"\\Error","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_hooks":{"name":"Requests_Hooks","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$hooks":{"name":"$hooks","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[{"target":"\\Requests_Hooker","type":"implements"}],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register":{"name":"register","phpdoc":[],"attributes":[],"arguments":[{"name":"$hook","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$priority","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"dispatch":{"name":"dispatch","phpdoc":[],"attributes":[],"arguments":[{"name":"$hook","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parameters","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_ipv6":{"name":"Requests_IPv6","abstract":false,"final":false,"extends":"","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"uncompress":{"name":"uncompress","phpdoc":[],"attributes":[],"arguments":[{"name":"$ip","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"compress":{"name":"compress","phpdoc":[],"attributes":[],"arguments":[{"name":"$ip","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"split_v6_v4":{"name":"split_v6_v4","phpdoc":[],"attributes":[],"arguments":[{"name":"$ip","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"check_ipv6":{"name":"check_ipv6","phpdoc":[],"attributes":[],"arguments":[{"name":"$ip","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_response":{"name":"Requests_Response","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$body":{"name":"$body","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$raw":{"name":"$raw","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$headers":{"name":"$headers","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$status_code":{"name":"$status_code","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$protocol_version":{"name":"$protocol_version","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$success":{"name":"$success","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$redirects":{"name":"$redirects","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$url":{"name":"$url","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$history":{"name":"$history","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$cookies":{"name":"$cookies","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_redirect":{"name":"is_redirect","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"throw_for_status":{"name":"throw_for_status","phpdoc":[],"attributes":[],"arguments":[{"name":"$allow_redirects","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_session":{"name":"Requests_Session","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$url":{"name":"$url","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$headers":{"name":"$headers","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$data":{"name":"$data","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$options":{"name":"$options","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__get":{"name":"__get","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__set":{"name":"__set","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__isset":{"name":"__isset","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__unset":{"name":"__unset","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get":{"name":"get","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"head":{"name":"head","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete":{"name":"delete","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"post":{"name":"post","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"put":{"name":"put","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"patch":{"name":"patch","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"request":{"name":"request","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":3,"variadic":false,"reference":false,"default":"Requests::GET","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":4,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"request_multiple":{"name":"request_multiple","phpdoc":[],"attributes":[],"arguments":[{"name":"$requests","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"merge_request":{"name":"merge_request","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$merge_options","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_cookie":{"name":"Requests_Cookie","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$name":{"name":"$name","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$value":{"name":"$value","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$attributes":{"name":"$attributes","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$flags":{"name":"$flags","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reference_time":{"name":"$reference_time","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attributes","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$flags","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$reference_time","rank":4,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_expired":{"name":"is_expired","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"uri_matches":{"name":"uri_matches","phpdoc":[],"attributes":[],"arguments":[{"name":"$uri","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"Requests_IRI"},{"typehint":"Requests_IRI"}],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"domain_matches":{"name":"domain_matches","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"path_matches":{"name":"path_matches","phpdoc":[],"attributes":[],"arguments":[{"name":"$request_path","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"normalize":{"name":"normalize","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"normalize_attribute":{"name":"normalize_attribute","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"format_for_header":{"name":"format_for_header","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"formatforheader":{"name":"formatForHeader","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"format_for_set_cookie":{"name":"format_for_set_cookie","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"formatforsetcookie":{"name":"formatForSetCookie","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__tostring":{"name":"__toString","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse":{"name":"parse","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$reference_time","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"parse_from_headers":{"name":"parse_from_headers","phpdoc":[],"attributes":[],"arguments":[{"name":"$headers","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"Requests_Response_Headers"},{"typehint":"Requests_Response_Headers"}],"attributes":[]},{"name":"$origin","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"Requests_IRI"},{"typehint":"Requests_IRI"}],"attributes":[]},{"name":"$time","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"parsefromheaders":{"name":"parseFromHeaders","phpdoc":[],"attributes":[],"arguments":[{"name":"$headers","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"Requests_Response_Headers"},{"typehint":"Requests_Response_Headers"}],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_ssl":{"name":"Requests_SSL","abstract":false,"final":false,"extends":"","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"verify_certificate":{"name":"verify_certificate","phpdoc":[],"attributes":[],"arguments":[{"name":"$host","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cert","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"verify_reference_name":{"name":"verify_reference_name","phpdoc":[],"attributes":[],"arguments":[{"name":"$reference","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"match_domain":{"name":"match_domain","phpdoc":[],"attributes":[],"arguments":[{"name":"$host","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$reference","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_idnaencoder":{"name":"Requests_IDNAEncoder","abstract":false,"final":false,"extends":"","constants":{"ACE_PREFIX":{"name":"ACE_PREFIX","value":"'xn--'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"BOOTSTRAP_TMIN":{"name":"BOOTSTRAP_TMIN","value":"1","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"BOOTSTRAP_BASE":{"name":"BOOTSTRAP_BASE","value":"36","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"BOOTSTRAP_INITIAL_N":{"name":"BOOTSTRAP_INITIAL_N","value":"128","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"BOOTSTRAP_INITIAL_BIAS":{"name":"BOOTSTRAP_INITIAL_BIAS","value":"72","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"BOOTSTRAP_TMAX":{"name":"BOOTSTRAP_TMAX","value":"26","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"BOOTSTRAP_DAMP":{"name":"BOOTSTRAP_DAMP","value":"700","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"BOOTSTRAP_SKEW":{"name":"BOOTSTRAP_SKEW","value":"38","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]}},"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"encode":{"name":"encode","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"to_ascii":{"name":"to_ascii","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"is_ascii":{"name":"is_ascii","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"nameprep":{"name":"nameprep","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"utf8_to_codepoints":{"name":"utf8_to_codepoints","phpdoc":[],"attributes":[],"arguments":[{"name":"$input","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"punycode_encode":{"name":"punycode_encode","phpdoc":[],"attributes":[],"arguments":[{"name":"$input","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"digit_to_char":{"name":"digit_to_char","phpdoc":[],"attributes":[],"arguments":[{"name":"$digit","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"adapt":{"name":"adapt","phpdoc":[],"attributes":[],"arguments":[{"name":"$delta","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$numpoints","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$firsttime","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_iri":{"name":"Requests_IRI","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$scheme":{"name":"$scheme","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$iuserinfo":{"name":"$iuserinfo","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ihost":{"name":"$ihost","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$port":{"name":"$port","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ipath":{"name":"$ipath","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$iquery":{"name":"$iquery","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$ifragment":{"name":"$ifragment","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$normalization":{"name":"$normalization","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__tostring":{"name":"__toString","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__set":{"name":"__set","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__get":{"name":"__get","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__isset":{"name":"__isset","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__unset":{"name":"__unset","phpdoc":[],"attributes":[],"arguments":[{"name":"$name","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$iri","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"absolutize":{"name":"absolutize","phpdoc":[],"attributes":[],"arguments":[{"name":"$base","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$relative","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"parse_iri":{"name":"parse_iri","phpdoc":[],"attributes":[],"arguments":[{"name":"$iri","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_dot_segments":{"name":"remove_dot_segments","phpdoc":[],"attributes":[],"arguments":[{"name":"$input","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"replace_invalid_with_pct_encoding":{"name":"replace_invalid_with_pct_encoding","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$extra_chars","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$iprivate","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_iunreserved_percent_encoded":{"name":"remove_iunreserved_percent_encoded","phpdoc":[],"attributes":[],"arguments":[{"name":"$match","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"scheme_normalization":{"name":"scheme_normalization","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_valid":{"name":"is_valid","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_iri":{"name":"set_iri","phpdoc":[],"attributes":[],"arguments":[{"name":"$iri","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_scheme":{"name":"set_scheme","phpdoc":[],"attributes":[],"arguments":[{"name":"$scheme","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_authority":{"name":"set_authority","phpdoc":[],"attributes":[],"arguments":[{"name":"$authority","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_userinfo":{"name":"set_userinfo","phpdoc":[],"attributes":[],"arguments":[{"name":"$iuserinfo","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_host":{"name":"set_host","phpdoc":[],"attributes":[],"arguments":[{"name":"$ihost","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_port":{"name":"set_port","phpdoc":[],"attributes":[],"arguments":[{"name":"$port","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_path":{"name":"set_path","phpdoc":[],"attributes":[],"arguments":[{"name":"$ipath","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_query":{"name":"set_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$iquery","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_fragment":{"name":"set_fragment","phpdoc":[],"attributes":[],"arguments":[{"name":"$ifragment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"to_uri":{"name":"to_uri","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_iri":{"name":"get_iri","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_uri":{"name":"get_uri","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_iauthority":{"name":"get_iauthority","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_authority":{"name":"get_authority","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_exception":{"name":"Requests_Exception","abstract":false,"final":false,"extends":"\\exception","constants":[],"properties":{"$type":{"name":"$type","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$data":{"name":"$data","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$message","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$code","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"gettype":{"name":"getType","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getdata":{"name":"getData","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_transport_fsockopen":{"name":"Requests_Transport_fsockopen","abstract":false,"final":false,"extends":"","constants":{"SECOND_IN_MICROSECONDS":{"name":"SECOND_IN_MICROSECONDS","value":"1000000","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]}},"properties":{"$headers":{"name":"$headers","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$info":{"name":"$info","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$max_bytes":{"name":"$max_bytes","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$connect_error":{"name":"$connect_error","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[{"target":"\\Requests_Transport","type":"implements"}],"phpdoc":[],"methods":{"request":{"name":"request","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"request_multiple":{"name":"request_multiple","phpdoc":[],"attributes":[],"arguments":[{"name":"$requests","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"accept_encoding":{"name":"accept_encoding","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"format_get":{"name":"format_get","phpdoc":[],"attributes":[],"arguments":[{"name":"$url_parts","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"connect_error_handler":{"name":"connect_error_handler","phpdoc":[],"attributes":[],"arguments":[{"name":"$errno","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$errstr","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"verify_certificate_from_context":{"name":"verify_certificate_from_context","phpdoc":[],"attributes":[],"arguments":[{"name":"$host","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test":{"name":"test","phpdoc":[],"attributes":[],"arguments":[{"name":"$capabilities","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_transport_curl":{"name":"Requests_Transport_cURL","abstract":false,"final":false,"extends":"","constants":{"CURL_7_10_5":{"name":"CURL_7_10_5","value":"0x070A05","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"CURL_7_16_2":{"name":"CURL_7_16_2","value":"0x071002","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]}},"properties":{"$headers":{"name":"$headers","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$response_data":{"name":"$response_data","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$info":{"name":"$info","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$version":{"name":"$version","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$handle":{"name":"$handle","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$hooks":{"name":"$hooks","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$done_headers":{"name":"$done_headers","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$stream_handle":{"name":"$stream_handle","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$response_bytes":{"name":"$response_bytes","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$response_byte_limit":{"name":"$response_byte_limit","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[{"target":"\\Requests_Transport","type":"implements"}],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"__destruct":{"name":"__destruct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"request":{"name":"request","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"request_multiple":{"name":"request_multiple","phpdoc":[],"attributes":[],"arguments":[{"name":"$requests","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_subrequest_handle":{"name":"get_subrequest_handle","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":true,"returntype":"one","returntypehints":[]},"setup_handle":{"name":"setup_handle","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"process_response":{"name":"process_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"stream_headers":{"name":"stream_headers","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"stream_body":{"name":"stream_body","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"format_get":{"name":"format_get","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"test":{"name":"test","phpdoc":[],"attributes":[],"arguments":[{"name":"$capabilities","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_response_headers":{"name":"Requests_Response_Headers","abstract":false,"final":false,"extends":"\\Requests_Utility_CaseInsensitiveDictionary","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"offsetget":{"name":"offsetGet","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetset":{"name":"offsetSet","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getvalues":{"name":"getValues","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"flatten":{"name":"flatten","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getiterator":{"name":"getIterator","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_proxy_http":{"name":"Requests_Proxy_HTTP","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$proxy":{"name":"$proxy","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$user":{"name":"$user","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$pass":{"name":"$pass","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$use_authentication":{"name":"$use_authentication","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[{"target":"\\Requests_Proxy","type":"implements"}],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register":{"name":"register","phpdoc":[],"attributes":[],"arguments":[{"name":"$hooks","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"Requests_Hooks"},{"typehint":"Requests_Hooks"}],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"curl_before_send":{"name":"curl_before_send","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"fsockopen_remote_socket":{"name":"fsockopen_remote_socket","phpdoc":[],"attributes":[],"arguments":[{"name":"$remote_socket","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"fsockopen_remote_host_path":{"name":"fsockopen_remote_host_path","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$url","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"fsockopen_header":{"name":"fsockopen_header","phpdoc":[],"attributes":[],"arguments":[{"name":"$out","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_auth_string":{"name":"get_auth_string","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_auth_basic":{"name":"Requests_Auth_Basic","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$user":{"name":"$user","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$pass":{"name":"$pass","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[{"target":"\\Requests_Auth","type":"implements"}],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register":{"name":"register","phpdoc":[],"attributes":[],"arguments":[{"name":"$hooks","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"Requests_Hooks"},{"typehint":"Requests_Hooks"}],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"curl_before_send":{"name":"curl_before_send","phpdoc":[],"attributes":[],"arguments":[{"name":"$handle","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"fsockopen_header":{"name":"fsockopen_header","phpdoc":[],"attributes":[],"arguments":[{"name":"$out","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getauthstring":{"name":"getAuthString","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_cookie_jar":{"name":"Requests_Cookie_Jar","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$cookies":{"name":"$cookies","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[{"target":"\\iteratoraggregate","type":"implements"},{"target":"\\arrayaccess","type":"implements"}],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$cookies","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"normalize_cookie":{"name":"normalize_cookie","phpdoc":[],"attributes":[],"arguments":[{"name":"$cookie","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"normalizecookie":{"name":"normalizeCookie","phpdoc":[],"attributes":[],"arguments":[{"name":"$cookie","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetexists":{"name":"offsetExists","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetget":{"name":"offsetGet","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetset":{"name":"offsetSet","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetunset":{"name":"offsetUnset","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getiterator":{"name":"getIterator","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register":{"name":"register","phpdoc":[],"attributes":[],"arguments":[{"name":"$hooks","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"Requests_Hooker"},{"typehint":"Requests_Hooker"}],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"before_request":{"name":"before_request","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":3,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":4,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"before_redirect_check":{"name":"before_redirect_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$return","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"Requests_Response"},{"typehint":"Requests_Response"}],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_exception_http":{"name":"Requests_Exception_HTTP","abstract":false,"final":false,"extends":"\\Requests_Exception","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$reason","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getreason":{"name":"getReason","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_class":{"name":"get_class","phpdoc":[],"attributes":[],"arguments":[{"name":"$code","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_exception_transport":{"name":"Requests_Exception_Transport","abstract":false,"final":false,"extends":"\\Requests_Exception","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_transport_curl":{"name":"Requests_Exception_Transport_cURL","abstract":false,"final":false,"extends":"\\Requests_Exception_Transport","constants":{"SHARE":{"name":"SHARE","value":"'cURLShare'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"EASY":{"name":"EASY","value":"'cURLEasy'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"MULTI":{"name":"MULTI","value":"'cURLMulti'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]}},"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$type":{"name":"$type","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$message","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$code","rank":3,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getreason":{"name":"getReason","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_exception_http_406":{"name":"Requests_Exception_HTTP_406","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_412":{"name":"Requests_Exception_HTTP_412","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_413":{"name":"Requests_Exception_HTTP_413","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_407":{"name":"Requests_Exception_HTTP_407","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_411":{"name":"Requests_Exception_HTTP_411","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_405":{"name":"Requests_Exception_HTTP_405","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_404":{"name":"Requests_Exception_HTTP_404","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_410":{"name":"Requests_Exception_HTTP_410","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_428":{"name":"Requests_Exception_HTTP_428","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_414":{"name":"Requests_Exception_HTTP_414","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_400":{"name":"Requests_Exception_HTTP_400","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_401":{"name":"Requests_Exception_HTTP_401","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_415":{"name":"Requests_Exception_HTTP_415","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_429":{"name":"Requests_Exception_HTTP_429","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_403":{"name":"Requests_Exception_HTTP_403","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_417":{"name":"Requests_Exception_HTTP_417","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_416":{"name":"Requests_Exception_HTTP_416","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_402":{"name":"Requests_Exception_HTTP_402","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_511":{"name":"Requests_Exception_HTTP_511","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_505":{"name":"Requests_Exception_HTTP_505","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_504":{"name":"Requests_Exception_HTTP_504","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_unknown":{"name":"Requests_Exception_HTTP_Unknown","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$reason","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_exception_http_503":{"name":"Requests_Exception_HTTP_503","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_305":{"name":"Requests_Exception_HTTP_305","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_304":{"name":"Requests_Exception_HTTP_304","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_502":{"name":"Requests_Exception_HTTP_502","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_500":{"name":"Requests_Exception_HTTP_500","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_306":{"name":"Requests_Exception_HTTP_306","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_501":{"name":"Requests_Exception_HTTP_501","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_418":{"name":"Requests_Exception_HTTP_418","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_431":{"name":"Requests_Exception_HTTP_431","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_409":{"name":"Requests_Exception_HTTP_409","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_exception_http_408":{"name":"Requests_Exception_HTTP_408","abstract":false,"final":false,"extends":"\\Requests_Exception_HTTP","constants":[],"properties":{"$code":{"name":"$code","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$reason":{"name":"$reason","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[]},"requests_utility_caseinsensitivedictionary":{"name":"Requests_Utility_CaseInsensitiveDictionary","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$data":{"name":"$data","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[{"target":"\\iteratoraggregate","type":"implements"},{"target":"\\arrayaccess","type":"implements"}],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"array"},{"typehint":"array"}],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetexists":{"name":"offsetExists","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetget":{"name":"offsetGet","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetset":{"name":"offsetSet","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetunset":{"name":"offsetUnset","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getiterator":{"name":"getIterator","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getall":{"name":"getAll","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"requests_utility_filterediterator":{"name":"Requests_Utility_FilteredIterator","abstract":false,"final":false,"extends":"\\arrayiterator","constants":[],"properties":{"$callback":{"name":"$callback","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"current":{"name":"current","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"po":{"name":"PO","abstract":false,"final":false,"extends":"\\Gettext_Translations","constants":[],"properties":{"$comments_before_headers":{"name":"$comments_before_headers","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"export_headers":{"name":"export_headers","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"export_entries":{"name":"export_entries","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"export":{"name":"export","phpdoc":[],"attributes":[],"arguments":[{"name":"$include_headers","rank":0,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"export_to_file":{"name":"export_to_file","phpdoc":[],"attributes":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$include_headers","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_comment_before_headers":{"name":"set_comment_before_headers","phpdoc":[],"attributes":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"poify":{"name":"poify","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"unpoify":{"name":"unpoify","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"prepend_each_line":{"name":"prepend_each_line","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$with","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"comment_block":{"name":"comment_block","phpdoc":[],"attributes":[],"arguments":[{"name":"$text","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$char","rank":1,"variadic":false,"reference":false,"default":"' '","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"export_entry":{"name":"export_entry","phpdoc":[],"attributes":[],"arguments":[{"name":"$entry","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"match_begin_and_end_newlines":{"name":"match_begin_and_end_newlines","phpdoc":[],"attributes":[],"arguments":[{"name":"$translation","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$original","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"import_from_file":{"name":"import_from_file","phpdoc":[],"attributes":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"read_entry":{"name":"read_entry","phpdoc":[],"attributes":[],"arguments":[{"name":"$f","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$lineno","rank":1,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"read_line":{"name":"read_line","phpdoc":[],"attributes":[],"arguments":[{"name":"$f","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$action","rank":1,"variadic":false,"reference":false,"default":"'read'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_comment_to_entry":{"name":"add_comment_to_entry","phpdoc":[],"attributes":[],"arguments":[{"name":"$entry","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$po_comment_line","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"trim_quotes":{"name":"trim_quotes","phpdoc":[],"attributes":[],"arguments":[{"name":"$s","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"pomo_reader":{"name":"POMO_Reader","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$endian":{"name":"$endian","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_post":{"name":"$_post","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"pomo_reader":{"name":"POMO_Reader","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"setendian":{"name":"setEndian","phpdoc":[],"attributes":[],"arguments":[{"name":"$endian","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readint32":{"name":"readint32","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"readint32array":{"name":"readint32array","phpdoc":[],"attributes":[],"arguments":[{"name":"$count","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"substr":{"name":"substr","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$start","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$length","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"strlen":{"name":"strlen","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"str_split":{"name":"str_split","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$chunk_size","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"pos":{"name":"pos","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_resource":{"name":"is_resource","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"close":{"name":"close","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"pomo_filereader":{"name":"POMO_FileReader","abstract":false,"final":false,"extends":"\\POMO_Reader","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"pomo_filereader":{"name":"POMO_FileReader","phpdoc":[],"attributes":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"read":{"name":"read","phpdoc":[],"attributes":[],"arguments":[{"name":"$bytes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"seekto":{"name":"seekto","phpdoc":[],"attributes":[],"arguments":[{"name":"$pos","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_resource":{"name":"is_resource","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"feof":{"name":"feof","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"close":{"name":"close","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"read_all":{"name":"read_all","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"pomo_stringreader":{"name":"POMO_StringReader","abstract":false,"final":false,"extends":"\\POMO_Reader","constants":[],"properties":{"$_str":{"name":"$_str","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"pomo_stringreader":{"name":"POMO_StringReader","phpdoc":[],"attributes":[],"arguments":[{"name":"$str","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"read":{"name":"read","phpdoc":[],"attributes":[],"arguments":[{"name":"$bytes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"seekto":{"name":"seekto","phpdoc":[],"attributes":[],"arguments":[{"name":"$pos","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"length":{"name":"length","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"read_all":{"name":"read_all","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"pomo_cachedfilereader":{"name":"POMO_CachedFileReader","abstract":false,"final":false,"extends":"\\POMO_StringReader","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"pomo_cachedfilereader":{"name":"POMO_CachedFileReader","phpdoc":[],"attributes":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"pomo_cachedintfilereader":{"name":"POMO_CachedIntFileReader","abstract":false,"final":false,"extends":"\\POMO_CachedFileReader","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"pomo_cachedintfilereader":{"name":"POMO_CachedIntFileReader","phpdoc":[],"attributes":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"translation_entry":{"name":"Translation_Entry","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$is_plural":{"name":"$is_plural","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$context":{"name":"$context","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$singular":{"name":"$singular","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$plural":{"name":"$plural","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$translations":{"name":"$translations","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$translator_comments":{"name":"$translator_comments","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$extracted_comments":{"name":"$extracted_comments","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$references":{"name":"$references","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$flags":{"name":"$flags","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"translation_entry":{"name":"Translation_Entry","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"key":{"name":"key","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"merge_with":{"name":"merge_with","phpdoc":[],"attributes":[],"arguments":[{"name":"$other","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"translations":{"name":"Translations","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$entries":{"name":"$entries","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$headers":{"name":"$headers","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"add_entry":{"name":"add_entry","phpdoc":[],"attributes":[],"arguments":[{"name":"$entry","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_entry_or_merge":{"name":"add_entry_or_merge","phpdoc":[],"attributes":[],"arguments":[{"name":"$entry","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_header":{"name":"set_header","phpdoc":[],"attributes":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_headers":{"name":"set_headers","phpdoc":[],"attributes":[],"arguments":[{"name":"$headers","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_header":{"name":"get_header","phpdoc":[],"attributes":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"translate_entry":{"name":"translate_entry","phpdoc":[],"attributes":[],"arguments":[{"name":"$entry","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"translate":{"name":"translate","phpdoc":[],"attributes":[],"arguments":[{"name":"$singular","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"select_plural_form":{"name":"select_plural_form","phpdoc":[],"attributes":[],"arguments":[{"name":"$count","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_plural_forms_count":{"name":"get_plural_forms_count","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"translate_plural":{"name":"translate_plural","phpdoc":[],"attributes":[],"arguments":[{"name":"$singular","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$plural","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$count","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"merge_with":{"name":"merge_with","phpdoc":[],"attributes":[],"arguments":[{"name":"$other","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"merge_originals_with":{"name":"merge_originals_with","phpdoc":[],"attributes":[],"arguments":[{"name":"$other","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"gettext_translations":{"name":"Gettext_Translations","abstract":false,"final":false,"extends":"\\Translations","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"gettext_select_plural_form":{"name":"gettext_select_plural_form","phpdoc":[],"attributes":[],"arguments":[{"name":"$count","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"nplurals_and_expression_from_header":{"name":"nplurals_and_expression_from_header","phpdoc":[],"attributes":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"make_plural_form_function":{"name":"make_plural_form_function","phpdoc":[],"attributes":[],"arguments":[{"name":"$nplurals","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$expression","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parenthesize_plural_exression":{"name":"parenthesize_plural_exression","phpdoc":[],"attributes":[],"arguments":[{"name":"$expression","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"make_headers":{"name":"make_headers","phpdoc":[],"attributes":[],"arguments":[{"name":"$translation","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_header":{"name":"set_header","phpdoc":[],"attributes":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"noop_translations":{"name":"NOOP_Translations","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$entries":{"name":"$entries","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$headers":{"name":"$headers","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"add_entry":{"name":"add_entry","phpdoc":[],"attributes":[],"arguments":[{"name":"$entry","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_header":{"name":"set_header","phpdoc":[],"attributes":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_headers":{"name":"set_headers","phpdoc":[],"attributes":[],"arguments":[{"name":"$headers","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_header":{"name":"get_header","phpdoc":[],"attributes":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"translate_entry":{"name":"translate_entry","phpdoc":[],"attributes":[],"arguments":[{"name":"$entry","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"translate":{"name":"translate","phpdoc":[],"attributes":[],"arguments":[{"name":"$singular","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"select_plural_form":{"name":"select_plural_form","phpdoc":[],"attributes":[],"arguments":[{"name":"$count","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_plural_forms_count":{"name":"get_plural_forms_count","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"translate_plural":{"name":"translate_plural","phpdoc":[],"attributes":[],"arguments":[{"name":"$singular","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$plural","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$count","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"merge_with":{"name":"merge_with","phpdoc":[],"attributes":[],"arguments":[{"name":"$other","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"mo":{"name":"MO","abstract":false,"final":false,"extends":"\\Gettext_Translations","constants":[],"properties":{"$_nplurals":{"name":"$_nplurals","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$filename":{"name":"$filename","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"get_filename":{"name":"get_filename","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"import_from_file":{"name":"import_from_file","phpdoc":[],"attributes":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"export_to_file":{"name":"export_to_file","phpdoc":[],"attributes":[],"arguments":[{"name":"$filename","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"export":{"name":"export","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_entry_good_for_export":{"name":"is_entry_good_for_export","phpdoc":[],"attributes":[],"arguments":[{"name":"$entry","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"export_to_file_handle":{"name":"export_to_file_handle","phpdoc":[],"attributes":[],"arguments":[{"name":"$fh","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"export_original":{"name":"export_original","phpdoc":[],"attributes":[],"arguments":[{"name":"$entry","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"export_translations":{"name":"export_translations","phpdoc":[],"attributes":[],"arguments":[{"name":"$entry","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"export_headers":{"name":"export_headers","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_byteorder":{"name":"get_byteorder","phpdoc":[],"attributes":[],"arguments":[{"name":"$magic","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"import_from_reader":{"name":"import_from_reader","phpdoc":[],"attributes":[],"arguments":[{"name":"$reader","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"make_entry":{"name":"make_entry","phpdoc":[],"attributes":[],"arguments":[{"name":"$original","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$translation","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":true,"returntype":"one","returntypehints":[]},"select_plural_form":{"name":"select_plural_form","phpdoc":[],"attributes":[],"arguments":[{"name":"$count","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_plural_forms_count":{"name":"get_plural_forms_count","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"text_diff":{"name":"Text_Diff","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$_edits":{"name":"$_edits","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$engine","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$params","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"text_diff":{"name":"Text_Diff","phpdoc":[],"attributes":[],"arguments":[{"name":"$engine","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$params","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getdiff":{"name":"getDiff","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"countaddedlines":{"name":"countAddedLines","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"countdeletedlines":{"name":"countDeletedLines","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"reverse":{"name":"reverse","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"isempty":{"name":"isEmpty","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"lcs":{"name":"lcs","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getoriginal":{"name":"getOriginal","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getfinal":{"name":"getFinal","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"trimnewlines":{"name":"trimNewlines","phpdoc":[],"attributes":[],"arguments":[{"name":"$line","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"_gettempdir":{"name":"_getTempDir","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_check":{"name":"_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$from_lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$to_lines","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"text_mappeddiff":{"name":"Text_MappedDiff","abstract":false,"final":false,"extends":"\\Text_Diff","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$from_lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$to_lines","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mapped_from_lines","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mapped_to_lines","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"text_mappeddiff":{"name":"Text_MappedDiff","phpdoc":[],"attributes":[],"arguments":[{"name":"$from_lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$to_lines","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mapped_from_lines","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mapped_to_lines","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"text_diff_op":{"name":"Text_Diff_Op","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$orig":{"name":"$orig","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$final":{"name":"$final","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"reverse":{"name":"reverse","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":true,"returntype":"one","returntypehints":[]},"norig":{"name":"norig","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"nfinal":{"name":"nfinal","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"text_diff_op_copy":{"name":"Text_Diff_Op_copy","abstract":false,"final":false,"extends":"\\Text_Diff_Op","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$orig","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$final","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"text_diff_op_copy":{"name":"Text_Diff_Op_copy","phpdoc":[],"attributes":[],"arguments":[{"name":"$orig","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$final","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"reverse":{"name":"reverse","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":true,"returntype":"one","returntypehints":[]}}},"text_diff_op_delete":{"name":"Text_Diff_Op_delete","abstract":false,"final":false,"extends":"\\Text_Diff_Op","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"text_diff_op_delete":{"name":"Text_Diff_Op_delete","phpdoc":[],"attributes":[],"arguments":[{"name":"$lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"reverse":{"name":"reverse","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":true,"returntype":"one","returntypehints":[]}}},"text_diff_op_add":{"name":"Text_Diff_Op_add","abstract":false,"final":false,"extends":"\\Text_Diff_Op","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"text_diff_op_add":{"name":"Text_Diff_Op_add","phpdoc":[],"attributes":[],"arguments":[{"name":"$lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"reverse":{"name":"reverse","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":true,"returntype":"one","returntypehints":[]}}},"text_diff_op_change":{"name":"Text_Diff_Op_change","abstract":false,"final":false,"extends":"\\Text_Diff_Op","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$orig","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$final","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"text_diff_op_change":{"name":"Text_Diff_Op_change","phpdoc":[],"attributes":[],"arguments":[{"name":"$orig","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$final","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"reverse":{"name":"reverse","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":true,"returntype":"one","returntypehints":[]}}},"text_diff_renderer":{"name":"Text_Diff_Renderer","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$_leading_context_lines":{"name":"$_leading_context_lines","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_trailing_context_lines":{"name":"$_trailing_context_lines","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$params","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"text_diff_renderer":{"name":"Text_Diff_Renderer","phpdoc":[],"attributes":[],"arguments":[{"name":"$params","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getparams":{"name":"getParams","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render":{"name":"render","phpdoc":[],"attributes":[],"arguments":[{"name":"$diff","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_block":{"name":"_block","phpdoc":[],"attributes":[],"arguments":[{"name":"$xbeg","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$xlen","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ybeg","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ylen","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$edits","rank":4,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_startdiff":{"name":"_startDiff","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_enddiff":{"name":"_endDiff","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_blockheader":{"name":"_blockHeader","phpdoc":[],"attributes":[],"arguments":[{"name":"$xbeg","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$xlen","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ybeg","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ylen","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_startblock":{"name":"_startBlock","phpdoc":[],"attributes":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_endblock":{"name":"_endBlock","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_lines":{"name":"_lines","phpdoc":[],"attributes":[],"arguments":[{"name":"$lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$prefix","rank":1,"variadic":false,"reference":false,"default":"' '","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_context":{"name":"_context","phpdoc":[],"attributes":[],"arguments":[{"name":"$lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_added":{"name":"_added","phpdoc":[],"attributes":[],"arguments":[{"name":"$lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_deleted":{"name":"_deleted","phpdoc":[],"attributes":[],"arguments":[{"name":"$lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_changed":{"name":"_changed","phpdoc":[],"attributes":[],"arguments":[{"name":"$orig","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$final","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"text_diff_renderer_inline":{"name":"Text_Diff_Renderer_inline","abstract":false,"final":false,"extends":"\\Text_Diff_Renderer","constants":[],"properties":{"$_leading_context_lines":{"name":"$_leading_context_lines","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_trailing_context_lines":{"name":"$_trailing_context_lines","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_ins_prefix":{"name":"$_ins_prefix","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_ins_suffix":{"name":"$_ins_suffix","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_del_prefix":{"name":"$_del_prefix","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_del_suffix":{"name":"$_del_suffix","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_block_header":{"name":"$_block_header","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_split_characters":{"name":"$_split_characters","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_split_level":{"name":"$_split_level","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"_blockheader":{"name":"_blockHeader","phpdoc":[],"attributes":[],"arguments":[{"name":"$xbeg","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$xlen","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ybeg","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ylen","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_startblock":{"name":"_startBlock","phpdoc":[],"attributes":[],"arguments":[{"name":"$header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_lines":{"name":"_lines","phpdoc":[],"attributes":[],"arguments":[{"name":"$lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$prefix","rank":1,"variadic":false,"reference":false,"default":"' '","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$encode","rank":2,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_added":{"name":"_added","phpdoc":[],"attributes":[],"arguments":[{"name":"$lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_deleted":{"name":"_deleted","phpdoc":[],"attributes":[],"arguments":[{"name":"$lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$words","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_changed":{"name":"_changed","phpdoc":[],"attributes":[],"arguments":[{"name":"$orig","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$final","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_splitonwords":{"name":"_splitOnWords","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$newlineEscape","rank":1,"variadic":false,"reference":false,"default":"\"\\n\"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_encode":{"name":"_encode","phpdoc":[],"attributes":[],"arguments":[{"name":"$string","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"text_diff_engine_xdiff":{"name":"Text_Diff_Engine_xdiff","abstract":false,"final":false,"extends":"","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"diff":{"name":"diff","phpdoc":[],"attributes":[],"arguments":[{"name":"$from_lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$to_lines","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"text_diff_engine_shell":{"name":"Text_Diff_Engine_shell","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$_diffCommand":{"name":"$_diffCommand","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"diff":{"name":"diff","phpdoc":[],"attributes":[],"arguments":[{"name":"$from_lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$to_lines","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_getlines":{"name":"_getLines","phpdoc":[],"attributes":[],"arguments":[{"name":"$text_lines","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$line_no","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$end","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"text_diff_engine_native":{"name":"Text_Diff_Engine_native","abstract":false,"final":false,"extends":"","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"diff":{"name":"diff","phpdoc":[],"attributes":[],"arguments":[{"name":"$from_lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$to_lines","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_diag":{"name":"_diag","phpdoc":[],"attributes":[],"arguments":[{"name":"$xoff","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$xlim","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$yoff","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ylim","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$nchunks","rank":4,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_lcspos":{"name":"_lcsPos","phpdoc":[],"attributes":[],"arguments":[{"name":"$ypos","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_compareseq":{"name":"_compareseq","phpdoc":[],"attributes":[],"arguments":[{"name":"$xoff","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$xlim","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$yoff","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$ylim","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_shiftboundaries":{"name":"_shiftBoundaries","phpdoc":[],"attributes":[],"arguments":[{"name":"$lines","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$changed","rank":1,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$other_changed","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"text_diff_engine_string":{"name":"Text_Diff_Engine_string","abstract":false,"final":false,"extends":"","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"diff":{"name":"diff","phpdoc":[],"attributes":[],"arguments":[{"name":"$diff","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$mode","rank":1,"variadic":false,"reference":false,"default":"'autodetect'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parseunifieddiff":{"name":"parseUnifiedDiff","phpdoc":[],"attributes":[],"arguments":[{"name":"$diff","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parsecontextdiff":{"name":"parseContextDiff","phpdoc":[],"attributes":[],"arguments":[{"name":"$diff","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"ixr_server":{"name":"IXR_Server","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$data":{"name":"$data","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$callbacks":{"name":"$callbacks","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$message":{"name":"$message","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$capabilities":{"name":"$capabilities","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$callbacks","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$wait","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ixr_server":{"name":"IXR_Server","phpdoc":[],"attributes":[],"arguments":[{"name":"$callbacks","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$wait","rank":2,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"serve":{"name":"serve","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"call":{"name":"call","phpdoc":[],"attributes":[],"arguments":[{"name":"$methodname","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"error":{"name":"error","phpdoc":[],"attributes":[],"arguments":[{"name":"$error","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"output":{"name":"output","phpdoc":[],"attributes":[],"arguments":[{"name":"$xml","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"hasmethod":{"name":"hasMethod","phpdoc":[],"attributes":[],"arguments":[{"name":"$method","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"setcapabilities":{"name":"setCapabilities","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getcapabilities":{"name":"getCapabilities","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"setcallbacks":{"name":"setCallbacks","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"listmethods":{"name":"listMethods","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"multicall":{"name":"multiCall","phpdoc":[],"attributes":[],"arguments":[{"name":"$methodcalls","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"ixr_clientmulticall":{"name":"IXR_ClientMulticall","abstract":false,"final":false,"extends":"\\IXR_Client","constants":[],"properties":{"$calls":{"name":"$calls","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$server","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$port","rank":2,"variadic":false,"reference":false,"default":"80","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ixr_clientmulticall":{"name":"IXR_ClientMulticall","phpdoc":[],"attributes":[],"arguments":[{"name":"$server","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$port","rank":2,"variadic":false,"reference":false,"default":"80","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"addcall":{"name":"addCall","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"query":{"name":"query","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"ixr_message":{"name":"IXR_Message","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$message":{"name":"$message","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$messageType":{"name":"$messageType","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$faultCode":{"name":"$faultCode","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$faultString":{"name":"$faultString","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$methodName":{"name":"$methodName","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$params":{"name":"$params","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_arraystructs":{"name":"$_arraystructs","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_arraystructstypes":{"name":"$_arraystructstypes","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_currentStructName":{"name":"$_currentStructName","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_param":{"name":"$_param","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_value":{"name":"$_value","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_currentTag":{"name":"$_currentTag","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_currentTagContents":{"name":"$_currentTagContents","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_parser":{"name":"$_parser","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$message","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ixr_message":{"name":"IXR_Message","phpdoc":[],"attributes":[],"arguments":[{"name":"$message","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse":{"name":"parse","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"tag_open":{"name":"tag_open","phpdoc":[],"attributes":[],"arguments":[{"name":"$parser","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tag","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attr","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"cdata":{"name":"cdata","phpdoc":[],"attributes":[],"arguments":[{"name":"$parser","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$cdata","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"tag_close":{"name":"tag_close","phpdoc":[],"attributes":[],"arguments":[{"name":"$parser","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$tag","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"ixr_request":{"name":"IXR_Request","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$method":{"name":"$method","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$args":{"name":"$args","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$xml":{"name":"$xml","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$method","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ixr_request":{"name":"IXR_Request","phpdoc":[],"attributes":[],"arguments":[{"name":"$method","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getlength":{"name":"getLength","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getxml":{"name":"getXml","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"ixr_error":{"name":"IXR_Error","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$code":{"name":"$code","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$message":{"name":"$message","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$code","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ixr_error":{"name":"IXR_Error","phpdoc":[],"attributes":[],"arguments":[{"name":"$code","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getxml":{"name":"getXml","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"ixr_date":{"name":"IXR_Date","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$year":{"name":"$year","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$month":{"name":"$month","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$day":{"name":"$day","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$hour":{"name":"$hour","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$minute":{"name":"$minute","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$second":{"name":"$second","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$timezone":{"name":"$timezone","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$time","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ixr_date":{"name":"IXR_Date","phpdoc":[],"attributes":[],"arguments":[{"name":"$time","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parsetimestamp":{"name":"parseTimestamp","phpdoc":[],"attributes":[],"arguments":[{"name":"$timestamp","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parseiso":{"name":"parseIso","phpdoc":[],"attributes":[],"arguments":[{"name":"$iso","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getiso":{"name":"getIso","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getxml":{"name":"getXml","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"gettimestamp":{"name":"getTimestamp","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"ixr_introspectionserver":{"name":"IXR_IntrospectionServer","abstract":false,"final":false,"extends":"\\IXR_Server","constants":[],"properties":{"$signatures":{"name":"$signatures","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$help":{"name":"$help","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ixr_introspectionserver":{"name":"IXR_IntrospectionServer","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"addcallback":{"name":"addCallback","phpdoc":[],"attributes":[],"arguments":[{"name":"$method","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$help","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"call":{"name":"call","phpdoc":[],"attributes":[],"arguments":[{"name":"$methodname","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"methodsignature":{"name":"methodSignature","phpdoc":[],"attributes":[],"arguments":[{"name":"$method","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"methodhelp":{"name":"methodHelp","phpdoc":[],"attributes":[],"arguments":[{"name":"$method","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"ixr_value":{"name":"IXR_Value","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$data":{"name":"$data","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$type":{"name":"$type","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ixr_value":{"name":"IXR_Value","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"calculatetype":{"name":"calculateType","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getxml":{"name":"getXml","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"isstruct":{"name":"isStruct","phpdoc":[],"attributes":[],"arguments":[{"name":"$array","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"ixr_client":{"name":"IXR_Client","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$server":{"name":"$server","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$port":{"name":"$port","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$path":{"name":"$path","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$useragent":{"name":"$useragent","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$response":{"name":"$response","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$message":{"name":"$message","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$debug":{"name":"$debug","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$timeout":{"name":"$timeout","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$headers":{"name":"$headers","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$error":{"name":"$error","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$server","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$port","rank":2,"variadic":false,"reference":false,"default":"80","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$timeout","rank":3,"variadic":false,"reference":false,"default":"15","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ixr_client":{"name":"IXR_Client","phpdoc":[],"attributes":[],"arguments":[{"name":"$server","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$path","rank":1,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$port","rank":2,"variadic":false,"reference":false,"default":"80","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$timeout","rank":3,"variadic":false,"reference":false,"default":"15","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"query":{"name":"query","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getresponse":{"name":"getResponse","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"iserror":{"name":"isError","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"geterrorcode":{"name":"getErrorCode","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"geterrormessage":{"name":"getErrorMessage","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"ixr_base64":{"name":"IXR_Base64","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$data":{"name":"$data","visibility":"","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"ixr_base64":{"name":"IXR_Base64","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"getxml":{"name":"getXml","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_widget_tag_cloud":{"name":"WP_Widget_Tag_Cloud","abstract":false,"final":false,"extends":"\\WP_Widget","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"widget":{"name":"widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"form":{"name":"form","phpdoc":[],"attributes":[],"arguments":[{"name":"$instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_get_current_taxonomy":{"name":"_get_current_taxonomy","phpdoc":[],"attributes":[],"arguments":[{"name":"$instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_widget_archives":{"name":"WP_Widget_Archives","abstract":false,"final":false,"extends":"\\WP_Widget","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"widget":{"name":"widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"form":{"name":"form","phpdoc":[],"attributes":[],"arguments":[{"name":"$instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_widget_meta":{"name":"WP_Widget_Meta","abstract":false,"final":false,"extends":"\\WP_Widget","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"widget":{"name":"widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"form":{"name":"form","phpdoc":[],"attributes":[],"arguments":[{"name":"$instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_widget_recent_posts":{"name":"WP_Widget_Recent_Posts","abstract":false,"final":false,"extends":"\\WP_Widget","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"widget":{"name":"widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"form":{"name":"form","phpdoc":[],"attributes":[],"arguments":[{"name":"$instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_widget_links":{"name":"WP_Widget_Links","abstract":false,"final":false,"extends":"\\WP_Widget","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"widget":{"name":"widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"form":{"name":"form","phpdoc":[],"attributes":[],"arguments":[{"name":"$instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_widget_search":{"name":"WP_Widget_Search","abstract":false,"final":false,"extends":"\\WP_Widget","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"widget":{"name":"widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"form":{"name":"form","phpdoc":[],"attributes":[],"arguments":[{"name":"$instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_widget_pages":{"name":"WP_Widget_Pages","abstract":false,"final":false,"extends":"\\WP_Widget","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"widget":{"name":"widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"form":{"name":"form","phpdoc":[],"attributes":[],"arguments":[{"name":"$instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_widget_categories":{"name":"WP_Widget_Categories","abstract":false,"final":false,"extends":"\\WP_Widget","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"widget":{"name":"widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"form":{"name":"form","phpdoc":[],"attributes":[],"arguments":[{"name":"$instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_widget_recent_comments":{"name":"WP_Widget_Recent_Comments","abstract":false,"final":false,"extends":"\\WP_Widget","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"recent_comments_style":{"name":"recent_comments_style","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"widget":{"name":"widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"form":{"name":"form","phpdoc":[],"attributes":[],"arguments":[{"name":"$instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"flush_widget_cache":{"name":"flush_widget_cache","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_nav_menu_widget":{"name":"WP_Nav_Menu_Widget","abstract":false,"final":false,"extends":"\\WP_Widget","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"widget":{"name":"widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"form":{"name":"form","phpdoc":[],"attributes":[],"arguments":[{"name":"$instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_widget_calendar":{"name":"WP_Widget_Calendar","abstract":false,"final":false,"extends":"\\WP_Widget","constants":[],"properties":{"$instance":{"name":"$instance","visibility":"private","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"widget":{"name":"widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"form":{"name":"form","phpdoc":[],"attributes":[],"arguments":[{"name":"$instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_widget_rss":{"name":"WP_Widget_RSS","abstract":false,"final":false,"extends":"\\WP_Widget","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"widget":{"name":"widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"form":{"name":"form","phpdoc":[],"attributes":[],"arguments":[{"name":"$instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_widget_text":{"name":"WP_Widget_Text","abstract":false,"final":false,"extends":"\\WP_Widget","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"widget":{"name":"widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"form":{"name":"form","phpdoc":[],"attributes":[],"arguments":[{"name":"$instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_server":{"name":"WP_REST_Server","abstract":false,"final":false,"extends":"","constants":{"READABLE":{"name":"READABLE","value":"'GET'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"ALLMETHODS":{"name":"ALLMETHODS","value":"'GET, POST, PUT, PATCH, DELETE'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"DELETABLE":{"name":"DELETABLE","value":"'DELETE'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"CREATABLE":{"name":"CREATABLE","value":"'POST'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"EDITABLE":{"name":"EDITABLE","value":"'POST, PUT, PATCH'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]}},"properties":{"$namespaces":{"name":"$namespaces","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$endpoints":{"name":"$endpoints","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$route_options":{"name":"$route_options","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_authentication":{"name":"check_authentication","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"error_to_response":{"name":"error_to_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$error","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"json_error":{"name":"json_error","phpdoc":[],"attributes":[],"arguments":[{"name":"$code","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$message","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$status","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"serve_request":{"name":"serve_request","phpdoc":[],"attributes":[],"arguments":[{"name":"$path","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"response_to_data":{"name":"response_to_data","phpdoc":[],"attributes":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$embed","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_response_links":{"name":"get_response_links","phpdoc":[],"attributes":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_compact_response_links":{"name":"get_compact_response_links","phpdoc":[],"attributes":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"embed_links":{"name":"embed_links","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"envelope_response":{"name":"envelope_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$embed","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_route":{"name":"register_route","phpdoc":[],"attributes":[],"arguments":[{"name":"$namespace","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$route","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$route_args","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$override","rank":3,"variadic":false,"reference":false,"default":"false","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_routes":{"name":"get_routes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_namespaces":{"name":"get_namespaces","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_route_options":{"name":"get_route_options","phpdoc":[],"attributes":[],"arguments":[{"name":"$route","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"dispatch":{"name":"dispatch","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_json_last_error":{"name":"get_json_last_error","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_index":{"name":"get_index","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_namespace_index":{"name":"get_namespace_index","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_data_for_routes":{"name":"get_data_for_routes","phpdoc":[],"attributes":[],"arguments":[{"name":"$routes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"'view'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_data_for_route":{"name":"get_data_for_route","phpdoc":[],"attributes":[],"arguments":[{"name":"$route","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callbacks","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":2,"variadic":false,"reference":false,"default":"'view'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_status":{"name":"set_status","phpdoc":[],"attributes":[],"arguments":[{"name":"$code","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"send_header":{"name":"send_header","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"send_headers":{"name":"send_headers","phpdoc":[],"attributes":[],"arguments":[{"name":"$headers","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_raw_data":{"name":"get_raw_data","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_headers":{"name":"get_headers","phpdoc":[],"attributes":[],"arguments":[{"name":"$server","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_request":{"name":"WP_REST_Request","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$method":{"name":"$method","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$params":{"name":"$params","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$headers":{"name":"$headers","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$body":{"name":"$body","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$route":{"name":"$route","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$attributes":{"name":"$attributes","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$parsed_json":{"name":"$parsed_json","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$parsed_body":{"name":"$parsed_body","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[{"target":"\\arrayaccess","type":"implements"}],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$method","rank":0,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$route","rank":1,"variadic":false,"reference":false,"default":"''","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attributes","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_method":{"name":"get_method","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_method":{"name":"set_method","phpdoc":[],"attributes":[],"arguments":[{"name":"$method","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_headers":{"name":"get_headers","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"canonicalize_header_name":{"name":"canonicalize_header_name","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_header":{"name":"get_header","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_header_as_array":{"name":"get_header_as_array","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_header":{"name":"set_header","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_header":{"name":"add_header","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_header":{"name":"remove_header","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_headers":{"name":"set_headers","phpdoc":[],"attributes":[],"arguments":[{"name":"$headers","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$override","rank":1,"variadic":false,"reference":false,"default":"true","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_content_type":{"name":"get_content_type","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_parameter_order":{"name":"get_parameter_order","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_param":{"name":"get_param","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_param":{"name":"set_param","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_params":{"name":"get_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_url_params":{"name":"get_url_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_url_params":{"name":"set_url_params","phpdoc":[],"attributes":[],"arguments":[{"name":"$params","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_query_params":{"name":"get_query_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_query_params":{"name":"set_query_params","phpdoc":[],"attributes":[],"arguments":[{"name":"$params","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_body_params":{"name":"get_body_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_body_params":{"name":"set_body_params","phpdoc":[],"attributes":[],"arguments":[{"name":"$params","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_file_params":{"name":"get_file_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_file_params":{"name":"set_file_params","phpdoc":[],"attributes":[],"arguments":[{"name":"$params","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_default_params":{"name":"get_default_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_default_params":{"name":"set_default_params","phpdoc":[],"attributes":[],"arguments":[{"name":"$params","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_body":{"name":"get_body","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_body":{"name":"set_body","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_json_params":{"name":"get_json_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_json_params":{"name":"parse_json_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"parse_body_params":{"name":"parse_body_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_route":{"name":"get_route","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_route":{"name":"set_route","phpdoc":[],"attributes":[],"arguments":[{"name":"$route","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_attributes":{"name":"get_attributes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_attributes":{"name":"set_attributes","phpdoc":[],"attributes":[],"arguments":[{"name":"$attributes","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize_params":{"name":"sanitize_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"has_valid_params":{"name":"has_valid_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetexists":{"name":"offsetExists","phpdoc":[],"attributes":[],"arguments":[{"name":"$offset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetget":{"name":"offsetGet","phpdoc":[],"attributes":[],"arguments":[{"name":"$offset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetset":{"name":"offsetSet","phpdoc":[],"attributes":[],"arguments":[{"name":"$offset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"offsetunset":{"name":"offsetUnset","phpdoc":[],"attributes":[],"arguments":[{"name":"$offset","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"from_url":{"name":"from_url","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_response":{"name":"WP_REST_Response","abstract":false,"final":false,"extends":"\\WP_HTTP_Response","constants":[],"properties":{"$links":{"name":"$links","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$matched_route":{"name":"$matched_route","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$matched_handler":{"name":"$matched_handler","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"add_link":{"name":"add_link","phpdoc":[],"attributes":[],"arguments":[{"name":"$rel","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$href","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$attributes","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_link":{"name":"remove_link","phpdoc":[],"attributes":[],"arguments":[{"name":"$rel","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$href","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_links":{"name":"add_links","phpdoc":[],"attributes":[],"arguments":[{"name":"$links","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_links":{"name":"get_links","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"link_header":{"name":"link_header","phpdoc":[],"attributes":[],"arguments":[{"name":"$rel","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$link","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$other","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_matched_route":{"name":"get_matched_route","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_matched_route":{"name":"set_matched_route","phpdoc":[],"attributes":[],"arguments":[{"name":"$route","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_matched_handler":{"name":"get_matched_handler","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"set_matched_handler":{"name":"set_matched_handler","phpdoc":[],"attributes":[],"arguments":[{"name":"$handler","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_error":{"name":"is_error","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"as_error":{"name":"as_error","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_curies":{"name":"get_curies","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_posts_controller":{"name":"WP_REST_Posts_Controller","abstract":false,"final":false,"extends":"\\WP_REST_Controller","constants":[],"properties":{"$post_type":{"name":"$post_type","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$meta":{"name":"$meta","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$password_check_passed":{"name":"$password_check_passed","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_routes":{"name":"register_routes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items_permissions_check":{"name":"get_items_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_password_required":{"name":"check_password_required","phpdoc":[],"attributes":[],"arguments":[{"name":"$required","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items":{"name":"get_items","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_post":{"name":"get_post","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_permissions_check":{"name":"get_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"can_access_password_content":{"name":"can_access_password_content","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item":{"name":"get_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"create_item_permissions_check":{"name":"create_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"create_item":{"name":"create_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_item_permissions_check":{"name":"update_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_item":{"name":"update_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_item_permissions_check":{"name":"delete_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_item":{"name":"delete_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_items_query":{"name":"prepare_items_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$prepared_args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_date_response":{"name":"prepare_date_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$date_gmt","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$date","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_item_for_database":{"name":"prepare_item_for_database","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handle_status_param":{"name":"handle_status_param","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_status","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_type","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handle_featured_media":{"name":"handle_featured_media","phpdoc":[],"attributes":[],"arguments":[{"name":"$featured_media","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handle_template":{"name":"handle_template","phpdoc":[],"attributes":[],"arguments":[{"name":"$template","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handle_terms":{"name":"handle_terms","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_assign_terms_permission":{"name":"check_assign_terms_permission","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_is_post_type_allowed":{"name":"check_is_post_type_allowed","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_read_permission":{"name":"check_read_permission","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_update_permission":{"name":"check_update_permission","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_create_permission":{"name":"check_create_permission","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_delete_permission":{"name":"check_delete_permission","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_item_for_response":{"name":"prepare_item_for_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"protected_title_format":{"name":"protected_title_format","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_links":{"name":"prepare_links","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_schema":{"name":"get_item_schema","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_collection_params":{"name":"get_collection_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize_post_statuses":{"name":"sanitize_post_statuses","phpdoc":[],"attributes":[],"arguments":[{"name":"$statuses","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parameter","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_post_types_controller":{"name":"WP_REST_Post_Types_Controller","abstract":false,"final":false,"extends":"\\WP_REST_Controller","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_routes":{"name":"register_routes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items_permissions_check":{"name":"get_items_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items":{"name":"get_items","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item":{"name":"get_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_item_for_response":{"name":"prepare_item_for_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_schema":{"name":"get_item_schema","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_collection_params":{"name":"get_collection_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_controller":{"name":"WP_REST_Controller","abstract":true,"final":false,"extends":"","constants":[],"properties":{"$namespace":{"name":"$namespace","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$rest_base":{"name":"$rest_base","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"register_routes":{"name":"register_routes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items_permissions_check":{"name":"get_items_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items":{"name":"get_items","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_permissions_check":{"name":"get_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item":{"name":"get_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"create_item_permissions_check":{"name":"create_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"create_item":{"name":"create_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_item_permissions_check":{"name":"update_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_item":{"name":"update_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_item_permissions_check":{"name":"delete_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_item":{"name":"delete_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_item_for_database":{"name":"prepare_item_for_database","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_item_for_response":{"name":"prepare_item_for_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$item","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_response_for_collection":{"name":"prepare_response_for_collection","phpdoc":[],"attributes":[],"arguments":[{"name":"$response","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_response_by_context":{"name":"filter_response_by_context","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_schema":{"name":"get_item_schema","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_public_item_schema":{"name":"get_public_item_schema","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_collection_params":{"name":"get_collection_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_context_param":{"name":"get_context_param","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_additional_fields_to_object":{"name":"add_additional_fields_to_object","phpdoc":[],"attributes":[],"arguments":[{"name":"$object","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_additional_fields_for_object":{"name":"update_additional_fields_for_object","phpdoc":[],"attributes":[],"arguments":[{"name":"$object","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_additional_fields_schema":{"name":"add_additional_fields_schema","phpdoc":[],"attributes":[],"arguments":[{"name":"$schema","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_additional_fields":{"name":"get_additional_fields","phpdoc":[],"attributes":[],"arguments":[{"name":"$object_type","rank":0,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_object_type":{"name":"get_object_type","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_endpoint_args_for_item_schema":{"name":"get_endpoint_args_for_item_schema","phpdoc":[],"attributes":[],"arguments":[{"name":"$method","rank":0,"variadic":false,"reference":false,"default":"WP_REST_Server::CREATABLE","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize_slug":{"name":"sanitize_slug","phpdoc":[],"attributes":[],"arguments":[{"name":"$slug","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_post_statuses_controller":{"name":"WP_REST_Post_Statuses_Controller","abstract":false,"final":false,"extends":"\\WP_REST_Controller","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_routes":{"name":"register_routes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items_permissions_check":{"name":"get_items_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items":{"name":"get_items","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_permissions_check":{"name":"get_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_read_permission":{"name":"check_read_permission","phpdoc":[],"attributes":[],"arguments":[{"name":"$status","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item":{"name":"get_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_item_for_response":{"name":"prepare_item_for_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$status","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_schema":{"name":"get_item_schema","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_collection_params":{"name":"get_collection_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_attachments_controller":{"name":"WP_REST_Attachments_Controller","abstract":false,"final":false,"extends":"\\WP_REST_Posts_Controller","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"prepare_items_query":{"name":"prepare_items_query","phpdoc":[],"attributes":[],"arguments":[{"name":"$prepared_args","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"create_item_permissions_check":{"name":"create_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"create_item":{"name":"create_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_item":{"name":"update_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_item_for_database":{"name":"prepare_item_for_database","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_item_for_response":{"name":"prepare_item_for_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_schema":{"name":"get_item_schema","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"upload_from_data":{"name":"upload_from_data","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_filename_from_disposition":{"name":"get_filename_from_disposition","phpdoc":[],"attributes":[],"arguments":[{"name":"$disposition_header","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_collection_params":{"name":"get_collection_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"validate_user_can_query_private_statuses":{"name":"validate_user_can_query_private_statuses","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parameter","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"upload_from_file":{"name":"upload_from_file","phpdoc":[],"attributes":[],"arguments":[{"name":"$files","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_media_types":{"name":"get_media_types","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_taxonomies_controller":{"name":"WP_REST_Taxonomies_Controller","abstract":false,"final":false,"extends":"\\WP_REST_Controller","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_routes":{"name":"register_routes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items_permissions_check":{"name":"get_items_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items":{"name":"get_items","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_permissions_check":{"name":"get_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item":{"name":"get_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_item_for_response":{"name":"prepare_item_for_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_schema":{"name":"get_item_schema","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_collection_params":{"name":"get_collection_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_settings_controller":{"name":"WP_REST_Settings_Controller","abstract":false,"final":false,"extends":"\\WP_REST_Controller","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_routes":{"name":"register_routes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_permissions_check":{"name":"get_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item":{"name":"get_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_value":{"name":"prepare_value","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$schema","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_item":{"name":"update_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_registered_options":{"name":"get_registered_options","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_schema":{"name":"get_item_schema","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize_callback":{"name":"sanitize_callback","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$param","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_revisions_controller":{"name":"WP_REST_Revisions_Controller","abstract":false,"final":false,"extends":"\\WP_REST_Controller","constants":[],"properties":{"$parent_post_type":{"name":"$parent_post_type","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$parent_controller":{"name":"$parent_controller","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$parent_base":{"name":"$parent_base","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$parent_post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_routes":{"name":"register_routes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_parent":{"name":"get_parent","phpdoc":[],"attributes":[],"arguments":[{"name":"$parent","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items_permissions_check":{"name":"get_items_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_revision":{"name":"get_revision","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items":{"name":"get_items","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_permissions_check":{"name":"get_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item":{"name":"get_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_item_permissions_check":{"name":"delete_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_item":{"name":"delete_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_item_for_response":{"name":"prepare_item_for_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_date_response":{"name":"prepare_date_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$date_gmt","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$date","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_schema":{"name":"get_item_schema","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_collection_params":{"name":"get_collection_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_excerpt_response":{"name":"prepare_excerpt_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$excerpt","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$post","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_users_controller":{"name":"WP_REST_Users_Controller","abstract":false,"final":false,"extends":"\\WP_REST_Controller","constants":[],"properties":{"$meta":{"name":"$meta","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_routes":{"name":"register_routes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_reassign":{"name":"check_reassign","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$param","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items_permissions_check":{"name":"get_items_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items":{"name":"get_items","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_user":{"name":"get_user","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_permissions_check":{"name":"get_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item":{"name":"get_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_current_item":{"name":"get_current_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"create_item_permissions_check":{"name":"create_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"create_item":{"name":"create_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_item_permissions_check":{"name":"update_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_item":{"name":"update_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_current_item_permissions_check":{"name":"update_current_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_current_item":{"name":"update_current_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_item_permissions_check":{"name":"delete_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_item":{"name":"delete_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_current_item_permissions_check":{"name":"delete_current_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_current_item":{"name":"delete_current_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_item_for_response":{"name":"prepare_item_for_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_links":{"name":"prepare_links","phpdoc":[],"attributes":[],"arguments":[{"name":"$user","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_item_for_database":{"name":"prepare_item_for_database","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_role_update":{"name":"check_role_update","phpdoc":[],"attributes":[],"arguments":[{"name":"$user_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$roles","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_username":{"name":"check_username","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$param","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_user_password":{"name":"check_user_password","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$param","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_schema":{"name":"get_item_schema","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_collection_params":{"name":"get_collection_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_terms_controller":{"name":"WP_REST_Terms_Controller","abstract":false,"final":false,"extends":"\\WP_REST_Controller","constants":[],"properties":{"$taxonomy":{"name":"$taxonomy","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$meta":{"name":"$meta","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sort_column":{"name":"$sort_column","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$total_terms":{"name":"$total_terms","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_routes":{"name":"register_routes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items_permissions_check":{"name":"get_items_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items":{"name":"get_items","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_term":{"name":"get_term","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_permissions_check":{"name":"get_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item":{"name":"get_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"create_item_permissions_check":{"name":"create_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"create_item":{"name":"create_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_item_permissions_check":{"name":"update_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_item":{"name":"update_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_item_permissions_check":{"name":"delete_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_item":{"name":"delete_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_item_for_database":{"name":"prepare_item_for_database","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_item_for_response":{"name":"prepare_item_for_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$item","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_links":{"name":"prepare_links","phpdoc":[],"attributes":[],"arguments":[{"name":"$term","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_schema":{"name":"get_item_schema","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_collection_params":{"name":"get_collection_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_is_taxonomy_allowed":{"name":"check_is_taxonomy_allowed","phpdoc":[],"attributes":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_comments_controller":{"name":"WP_REST_Comments_Controller","abstract":false,"final":false,"extends":"\\WP_REST_Controller","constants":[],"properties":{"$meta":{"name":"$meta","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_routes":{"name":"register_routes","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items_permissions_check":{"name":"get_items_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_items":{"name":"get_items","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_comment":{"name":"get_comment","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_permissions_check":{"name":"get_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item":{"name":"get_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"create_item_permissions_check":{"name":"create_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"create_item":{"name":"create_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_item_permissions_check":{"name":"update_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_item":{"name":"update_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_item_permissions_check":{"name":"delete_item_permissions_check","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_item":{"name":"delete_item","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_item_for_response":{"name":"prepare_item_for_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_links":{"name":"prepare_links","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"normalize_query_param":{"name":"normalize_query_param","phpdoc":[],"attributes":[],"arguments":[{"name":"$query_param","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_status_response":{"name":"prepare_status_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment_approved","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_item_for_database":{"name":"prepare_item_for_database","phpdoc":[],"attributes":[],"arguments":[{"name":"$request","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_item_schema":{"name":"get_item_schema","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_collection_params":{"name":"get_collection_params","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handle_status_param":{"name":"handle_status_param","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_status","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$comment_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_read_post_permission":{"name":"check_read_post_permission","phpdoc":[],"attributes":[],"arguments":[{"name":"$post","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_read_permission":{"name":"check_read_permission","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_edit_permission":{"name":"check_edit_permission","phpdoc":[],"attributes":[],"arguments":[{"name":"$comment","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_comment_author_email":{"name":"check_comment_author_email","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$param","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_user_meta_fields":{"name":"WP_REST_User_Meta_Fields","abstract":false,"final":false,"extends":"\\WP_REST_Meta_Fields","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"get_meta_type":{"name":"get_meta_type","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_rest_field_type":{"name":"get_rest_field_type","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_term_meta_fields":{"name":"WP_REST_Term_Meta_Fields","abstract":false,"final":false,"extends":"\\WP_REST_Meta_Fields","constants":[],"properties":{"$taxonomy":{"name":"$taxonomy","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$taxonomy","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_meta_type":{"name":"get_meta_type","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_rest_field_type":{"name":"get_rest_field_type","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_meta_fields":{"name":"WP_REST_Meta_Fields","abstract":true,"final":false,"extends":"","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"get_meta_type":{"name":"get_meta_type","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_rest_field_type":{"name":"get_rest_field_type","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"register_field":{"name":"register_field","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_value":{"name":"get_value","phpdoc":[],"attributes":[],"arguments":[{"name":"$object_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_value_for_response":{"name":"prepare_value_for_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_value":{"name":"update_value","phpdoc":[],"attributes":[],"arguments":[{"name":"$meta","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$object_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"delete_meta_value":{"name":"delete_meta_value","phpdoc":[],"attributes":[],"arguments":[{"name":"$object_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_multi_meta_value":{"name":"update_multi_meta_value","phpdoc":[],"attributes":[],"arguments":[{"name":"$object_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$values","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update_meta_value":{"name":"update_meta_value","phpdoc":[],"attributes":[],"arguments":[{"name":"$object_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$meta_key","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$value","rank":3,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_registered_fields":{"name":"get_registered_fields","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_field_schema":{"name":"get_field_schema","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_value":{"name":"prepare_value","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"check_meta_is_array":{"name":"check_meta_is_array","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$request","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$param","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_comment_meta_fields":{"name":"WP_REST_Comment_Meta_Fields","abstract":false,"final":false,"extends":"\\WP_REST_Meta_Fields","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"get_meta_type":{"name":"get_meta_type","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_rest_field_type":{"name":"get_rest_field_type","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_rest_post_meta_fields":{"name":"WP_REST_Post_Meta_Fields","abstract":false,"final":false,"extends":"\\WP_REST_Meta_Fields","constants":[],"properties":{"$post_type":{"name":"$post_type","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$post_type","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_meta_type":{"name":"get_meta_type","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_rest_field_type":{"name":"get_rest_field_type","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_nav_menu_section":{"name":"WP_Customize_Nav_Menu_Section","abstract":false,"final":false,"extends":"\\WP_Customize_Section","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"json":{"name":"json","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_filter_setting":{"name":"WP_Customize_Filter_Setting","abstract":false,"final":false,"extends":"\\WP_Customize_Setting","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_background_image_control":{"name":"WP_Customize_Background_Image_Control","abstract":false,"final":false,"extends":"\\WP_Customize_Image_Control","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$manager","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"enqueue":{"name":"enqueue","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_nav_menu_name_control":{"name":"WP_Customize_Nav_Menu_Name_Control","abstract":false,"final":false,"extends":"\\WP_Customize_Control","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"render_content":{"name":"render_content","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"content_template":{"name":"content_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_header_image_control":{"name":"WP_Customize_Header_Image_Control","abstract":false,"final":false,"extends":"\\WP_Customize_Image_Control","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$uploaded_headers":{"name":"$uploaded_headers","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$default_headers":{"name":"$default_headers","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$manager","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"enqueue":{"name":"enqueue","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_control":{"name":"prepare_control","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_header_image_template":{"name":"print_header_image_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_current_image_src":{"name":"get_current_image_src","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_content":{"name":"render_content","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_nav_menu_item_control":{"name":"WP_Customize_Nav_Menu_Item_Control","abstract":false,"final":false,"extends":"\\WP_Customize_Control","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$setting":{"name":"$setting","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$manager","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_content":{"name":"render_content","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"content_template":{"name":"content_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"json":{"name":"json","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_media_control":{"name":"WP_Customize_Media_Control","abstract":false,"final":false,"extends":"\\WP_Customize_Control","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$mime_type":{"name":"$mime_type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$button_labels":{"name":"$button_labels","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$manager","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"enqueue":{"name":"enqueue","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"to_json":{"name":"to_json","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_content":{"name":"render_content","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"content_template":{"name":"content_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_nav_menu_control":{"name":"WP_Customize_Nav_Menu_Control","abstract":false,"final":false,"extends":"\\WP_Customize_Control","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$setting":{"name":"$setting","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"render_content":{"name":"render_content","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"content_template":{"name":"content_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"json":{"name":"json","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_nav_menus_panel":{"name":"WP_Customize_Nav_Menus_Panel","abstract":false,"final":false,"extends":"\\WP_Customize_Panel","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"render_screen_options":{"name":"render_screen_options","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"wp_nav_menu_manage_columns":{"name":"wp_nav_menu_manage_columns","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"content_template":{"name":"content_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_new_menu_control":{"name":"WP_Customize_New_Menu_Control","abstract":false,"final":false,"extends":"\\WP_Customize_Control","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"render_content":{"name":"render_content","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_theme_control":{"name":"WP_Customize_Theme_Control","abstract":false,"final":false,"extends":"\\WP_Customize_Control","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$theme":{"name":"$theme","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"to_json":{"name":"to_json","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_content":{"name":"render_content","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"content_template":{"name":"content_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_upload_control":{"name":"WP_Customize_Upload_Control","abstract":false,"final":false,"extends":"\\WP_Customize_Media_Control","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$mime_type":{"name":"$mime_type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$button_labels":{"name":"$button_labels","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$removed":{"name":"$removed","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$context":{"name":"$context","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$extensions":{"name":"$extensions","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"to_json":{"name":"to_json","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_selective_refresh":{"name":"WP_Customize_Selective_Refresh","abstract":false,"final":true,"extends":"","constants":{"RENDER_QUERY_VAR":{"name":"RENDER_QUERY_VAR","value":"'wp_customize_render_partials'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]}},"properties":{"$manager":{"name":"$manager","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$partials":{"name":"$partials","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$triggered_errors":{"name":"$triggered_errors","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$current_partial_id":{"name":"$current_partial_id","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$manager","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"WP_Customize_Manager"},{"typehint":"WP_Customize_Manager"}],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"partials":{"name":"partials","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_partial":{"name":"add_partial","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_partial":{"name":"get_partial","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_partial":{"name":"remove_partial","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"init_preview":{"name":"init_preview","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"enqueue_preview_scripts":{"name":"enqueue_preview_scripts","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"export_preview_data":{"name":"export_preview_data","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_dynamic_partials":{"name":"add_dynamic_partials","phpdoc":[],"attributes":[],"arguments":[{"name":"$partial_ids","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_render_partials_request":{"name":"is_render_partials_request","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handle_error":{"name":"handle_error","phpdoc":[],"attributes":[],"arguments":[{"name":"$errno","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$errstr","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$errfile","rank":2,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$errline","rank":3,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"handle_render_partials_request":{"name":"handle_render_partials_request","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_nav_menu_auto_add_control":{"name":"WP_Customize_Nav_Menu_Auto_Add_Control","abstract":false,"final":false,"extends":"\\WP_Customize_Control","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"render_content":{"name":"render_content","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"content_template":{"name":"content_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_themes_section":{"name":"WP_Customize_Themes_Section","abstract":false,"final":false,"extends":"\\WP_Customize_Section","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"render":{"name":"render","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_site_icon_control":{"name":"WP_Customize_Site_Icon_Control","abstract":false,"final":false,"extends":"\\WP_Customize_Cropped_Image_Control","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$manager","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"content_template":{"name":"content_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_image_control":{"name":"WP_Customize_Image_Control","abstract":false,"final":false,"extends":"\\WP_Customize_Upload_Control","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$mime_type":{"name":"$mime_type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$manager","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"prepare_control":{"name":"prepare_control","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"add_tab":{"name":"add_tab","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$label","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"remove_tab":{"name":"remove_tab","phpdoc":[],"attributes":[],"arguments":[{"name":"$id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"print_tab_image":{"name":"print_tab_image","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$thumbnail_url","rank":1,"variadic":false,"reference":false,"default":"null","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_new_menu_section":{"name":"WP_Customize_New_Menu_Section","abstract":false,"final":false,"extends":"\\WP_Customize_Section","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"render":{"name":"render","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_nav_menu_item_setting":{"name":"WP_Customize_Nav_Menu_Item_Setting","abstract":false,"final":false,"extends":"\\WP_Customize_Setting","constants":{"TYPE":{"name":"TYPE","value":"'nav_menu_item'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"POST_TYPE":{"name":"POST_TYPE","value":"'nav_menu_item'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"ID_PATTERN":{"name":"ID_PATTERN","value":"'\/^nav_menu_item\\[(?P<id>-?\\d+)\\]$\/'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]}},"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$default":{"name":"$default","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$transport":{"name":"$transport","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$post_id":{"name":"$post_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$value":{"name":"$value","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$previous_post_id":{"name":"$previous_post_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$original_nav_menu_term_id":{"name":"$original_nav_menu_term_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_updated":{"name":"$is_updated","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$update_status":{"name":"$update_status","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$update_error":{"name":"$update_error","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$manager","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"WP_Customize_Manager"},{"typehint":"WP_Customize_Manager"}],"attributes":[]},{"name":"$id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"array"},{"typehint":"array"}],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"flush_cached_value":{"name":"flush_cached_value","phpdoc":[],"attributes":[],"arguments":[{"name":"$menu_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_item_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"value":{"name":"value","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_original_title":{"name":"get_original_title","phpdoc":[],"attributes":[],"arguments":[{"name":"$item","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"get_type_label":{"name":"get_type_label","phpdoc":[],"attributes":[],"arguments":[{"name":"$item","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"populate_value":{"name":"populate_value","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"preview":{"name":"preview","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_wp_get_nav_menu_items":{"name":"filter_wp_get_nav_menu_items","phpdoc":[],"attributes":[],"arguments":[{"name":"$items","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sort_wp_get_nav_menu_items":{"name":"sort_wp_get_nav_menu_items","phpdoc":[],"attributes":[],"arguments":[{"name":"$items","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"value_as_wp_post_nav_menu_item":{"name":"value_as_wp_post_nav_menu_item","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize":{"name":"sanitize","phpdoc":[],"attributes":[],"arguments":[{"name":"$menu_item_value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"amend_customize_save_response":{"name":"amend_customize_save_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_header_image_setting":{"name":"WP_Customize_Header_Image_Setting","abstract":false,"final":true,"extends":"\\WP_Customize_Setting","constants":[],"properties":{"$id":{"name":"$id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_partial":{"name":"WP_Customize_Partial","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$component":{"name":"$component","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$id":{"name":"$id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$id_data":{"name":"$id_data","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$selector":{"name":"$selector","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$settings":{"name":"$settings","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$primary_setting":{"name":"$primary_setting","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$capability":{"name":"$capability","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$render_callback":{"name":"$render_callback","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$container_inclusive":{"name":"$container_inclusive","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$fallback_refresh":{"name":"$fallback_refresh","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$component","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"WP_Customize_Selective_Refresh"},{"typehint":"WP_Customize_Selective_Refresh"}],"attributes":[]},{"name":"$id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"id_data":{"name":"id_data","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render":{"name":"render","phpdoc":[],"attributes":[],"arguments":[{"name":"$container_context","rank":0,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_callback":{"name":"render_callback","phpdoc":[],"attributes":[],"arguments":[{"name":"$partial","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"WP_Customize_Partial"},{"typehint":"WP_Customize_Partial"}],"attributes":[]},{"name":"$context","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"json":{"name":"json","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"check_capabilities":{"name":"check_capabilities","phpdoc":[],"attributes":[],"arguments":[],"final":true,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_color_control":{"name":"WP_Customize_Color_Control","abstract":false,"final":false,"extends":"\\WP_Customize_Control","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$statuses":{"name":"$statuses","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$mode":{"name":"$mode","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$manager","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"enqueue":{"name":"enqueue","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"to_json":{"name":"to_json","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_content":{"name":"render_content","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"content_template":{"name":"content_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_nav_menu_setting":{"name":"WP_Customize_Nav_Menu_Setting","abstract":false,"final":false,"extends":"\\WP_Customize_Setting","constants":{"TYPE":{"name":"TYPE","value":"'nav_menu'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"ID_PATTERN":{"name":"ID_PATTERN","value":"'\/^nav_menu\\[(?P<id>-?\\d+)\\]$\/'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"TAXONOMY":{"name":"TAXONOMY","value":"'nav_menu'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]}},"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$default":{"name":"$default","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$transport":{"name":"$transport","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$term_id":{"name":"$term_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$previous_term_id":{"name":"$previous_term_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_updated":{"name":"$is_updated","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$update_status":{"name":"$update_status","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$update_error":{"name":"$update_error","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_current_menus_sort_orderby":{"name":"$_current_menus_sort_orderby","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$_widget_nav_menu_updates":{"name":"$_widget_nav_menu_updates","visibility":"protected","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$manager","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"WP_Customize_Manager"},{"typehint":"WP_Customize_Manager"}],"attributes":[]},{"name":"$id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"array"},{"typehint":"array"}],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"value":{"name":"value","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"preview":{"name":"preview","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_wp_get_nav_menus":{"name":"filter_wp_get_nav_menus","phpdoc":[],"attributes":[],"arguments":[{"name":"$menus","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"_sort_menus_by_orderby":{"name":"_sort_menus_by_orderby","phpdoc":[],"attributes":[],"arguments":[{"name":"$menu1","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu2","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_wp_get_nav_menu_object":{"name":"filter_wp_get_nav_menu_object","phpdoc":[],"attributes":[],"arguments":[{"name":"$menu_obj","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_nav_menu_options":{"name":"filter_nav_menu_options","phpdoc":[],"attributes":[],"arguments":[{"name":"$nav_menu_options","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"sanitize":{"name":"sanitize","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_nav_menu_options_value":{"name":"filter_nav_menu_options_value","phpdoc":[],"attributes":[],"arguments":[{"name":"$nav_menu_options","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$menu_id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$auto_add","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"amend_customize_save_response":{"name":"amend_customize_save_response","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_background_position_control":{"name":"WP_Customize_Background_Position_Control","abstract":false,"final":false,"extends":"\\WP_Customize_Control","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"render_content":{"name":"render_content","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"content_template":{"name":"content_template","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_background_image_setting":{"name":"WP_Customize_Background_Image_Setting","abstract":false,"final":true,"extends":"\\WP_Customize_Setting","constants":[],"properties":{"$id":{"name":"$id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$value","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_cropped_image_control":{"name":"WP_Customize_Cropped_Image_Control","abstract":false,"final":false,"extends":"\\WP_Customize_Image_Control","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$width":{"name":"$width","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$height":{"name":"$height","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$flex_width":{"name":"$flex_width","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$flex_height":{"name":"$flex_height","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"enqueue":{"name":"enqueue","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"to_json":{"name":"to_json","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_sidebar_section":{"name":"WP_Customize_Sidebar_Section","abstract":false,"final":false,"extends":"\\WP_Customize_Section","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sidebar_id":{"name":"$sidebar_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"json":{"name":"json","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"active_callback":{"name":"active_callback","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_custom_css_setting":{"name":"WP_Customize_Custom_CSS_Setting","abstract":false,"final":true,"extends":"\\WP_Customize_Setting","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$transport":{"name":"$transport","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$capability":{"name":"$capability","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$stylesheet":{"name":"$stylesheet","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$manager","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"preview":{"name":"preview","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"filter_previewed_wp_get_custom_css":{"name":"filter_previewed_wp_get_custom_css","phpdoc":[],"attributes":[],"arguments":[{"name":"$css","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$stylesheet","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"value":{"name":"value","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"validate":{"name":"validate","phpdoc":[],"attributes":[],"arguments":[{"name":"$css","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$css","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"validate_balanced_characters":{"name":"validate_balanced_characters","phpdoc":[],"attributes":[],"arguments":[{"name":"$opening_char","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$closing_char","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$css","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"validate_equal_characters":{"name":"validate_equal_characters","phpdoc":[],"attributes":[],"arguments":[{"name":"$char","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$css","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"validate_count_unclosed_comments":{"name":"validate_count_unclosed_comments","phpdoc":[],"attributes":[],"arguments":[{"name":"$css","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"is_possible_content_error":{"name":"is_possible_content_error","phpdoc":[],"attributes":[],"arguments":[{"name":"$css","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_widget_form_customize_control":{"name":"WP_Widget_Form_Customize_Control","abstract":false,"final":false,"extends":"\\WP_Customize_Control","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$widget_id":{"name":"$widget_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$widget_id_base":{"name":"$widget_id_base","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sidebar_id":{"name":"$sidebar_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_new":{"name":"$is_new","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$width":{"name":"$width","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$height":{"name":"$height","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$is_wide":{"name":"$is_wide","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"to_json":{"name":"to_json","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_content":{"name":"render_content","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"active_callback":{"name":"active_callback","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_widget_area_customize_control":{"name":"WP_Widget_Area_Customize_Control","abstract":false,"final":false,"extends":"\\WP_Customize_Control","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$sidebar_id":{"name":"$sidebar_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"to_json":{"name":"to_json","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_content":{"name":"render_content","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"wp_customize_nav_menu_location_control":{"name":"WP_Customize_Nav_Menu_Location_Control","abstract":false,"final":false,"extends":"\\WP_Customize_Control","constants":[],"properties":{"$type":{"name":"$type","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]},"$location_id":{"name":"$location_id","visibility":"public","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"to_json":{"name":"to_json","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"render_content":{"name":"render_content","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"twenty_eleven_ephemera_widget":{"name":"Twenty_Eleven_Ephemera_Widget","abstract":false,"final":false,"extends":"\\WP_Widget","constants":[],"properties":[],"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"twenty_eleven_ephemera_widget":{"name":"Twenty_Eleven_Ephemera_Widget","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"widget":{"name":"widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$old_instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"flush_widget_cache":{"name":"flush_widget_cache","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"form":{"name":"form","phpdoc":[],"attributes":[],"arguments":[{"name":"$instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"twenty_fourteen_ephemera_widget":{"name":"Twenty_Fourteen_Ephemera_Widget","abstract":false,"final":false,"extends":"\\WP_Widget","constants":[],"properties":{"$formats":{"name":"$formats","visibility":"private","init":"","static":false,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"enqueue_scripts":{"name":"enqueue_scripts","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"widget":{"name":"widget","phpdoc":[],"attributes":[],"arguments":[{"name":"$args","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"update":{"name":"update","phpdoc":[],"attributes":[],"arguments":[{"name":"$new_instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$instance","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"form":{"name":"form","phpdoc":[],"attributes":[],"arguments":[{"name":"$instance","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"featured_content":{"name":"Featured_Content","abstract":false,"final":false,"extends":"","constants":[],"properties":{"$max_posts":{"name":"$max_posts","visibility":"public","init":"","static":true,"expression":false,"typehinttype":"one","typehints":[],"phpdoc":[]}},"traits":[],"attributes":[],"implements":[],"phpdoc":[],"methods":{"setup":{"name":"setup","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"init":{"name":"init","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"wp_loaded":{"name":"wp_loaded","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_featured_posts":{"name":"get_featured_posts","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_featured_post_ids":{"name":"get_featured_post_ids","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_sticky_posts":{"name":"get_sticky_posts","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"delete_transient":{"name":"delete_transient","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"pre_get_posts":{"name":"pre_get_posts","phpdoc":[],"attributes":[],"arguments":[{"name":"$query","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"delete_post_tag":{"name":"delete_post_tag","phpdoc":[],"attributes":[],"arguments":[{"name":"$tag_id","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"hide_featured_term":{"name":"hide_featured_term","phpdoc":[],"attributes":[],"arguments":[{"name":"$terms","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomies","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$args","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"hide_the_featured_term":{"name":"hide_the_featured_term","phpdoc":[],"attributes":[],"arguments":[{"name":"$terms","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$id","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$taxonomy","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"register_setting":{"name":"register_setting","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"customize_register":{"name":"customize_register","phpdoc":[],"attributes":[],"arguments":[{"name":"$wp_customize","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"enqueue_scripts":{"name":"enqueue_scripts","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"get_setting":{"name":"get_setting","phpdoc":[],"attributes":[],"arguments":[{"name":"$key","rank":0,"variadic":false,"reference":false,"default":"'all'","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]},"validate_settings":{"name":"validate_settings","phpdoc":[],"attributes":[],"arguments":[{"name":"$input","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}}},"interfaces":{"SimplePie_Cache_Base":{"name":"SimplePie_Cache_Base","phpdoc":[{"phpdoc":"\/**\n * Base for cache objects\n *\n * Classes to be used with {@see SimplePie_Cache::register()} are expected\n * to implement this interface.\n *\n * @package SimplePie\n * @subpackage Caching\n *\/"},{"phpdoc":"\/**\n * SimplePie\n *\n * A PHP-Based RSS and Atom Feed Framework.\n * Takes the hard work out of managing a complete RSS\/Atom solution.\n *\n * Copyright (c) 2004-2012, Ryan Parman, Geoffrey Sneddon, Ryan McCue, and contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are\n * permitted provided that the following conditions are met:\n *\n * \t* Redistributions of source code must retain the above copyright notice, this list of\n * \t  conditions and the following disclaimer.\n *\n * \t* Redistributions in binary form must reproduce the above copyright notice, this list\n * \t  of conditions and the following disclaimer in the documentation and\/or other materials\n * \t  provided with the distribution.\n *\n * \t* Neither the name of the SimplePie Team nor the names of its contributors may be used\n * \t  to endorse or promote products derived from this software without specific prior\n * \t  written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS\n * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n * @package SimplePie\n * @version 1.3.1\n * @copyright 2004-2012 Ryan Parman, Geoffrey Sneddon, Ryan McCue\n * @author Ryan Parman\n * @author Geoffrey Sneddon\n * @author Ryan McCue\n * @link http:\/\/simplepie.org\/ SimplePie\n * @license http:\/\/www.opensource.org\/licenses\/bsd-license.php BSD License\n *\/"}],"extends":[],"constants":{"TYPE_IMAGE":{"name":"TYPE_IMAGE","value":"'spi'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]},"TYPE_FEED":{"name":"TYPE_FEED","value":"'spc'","expression":false,"final":false,"visibility":"","phpdoc":[],"attributes":[]}},"methods":{"__construct":{"name":"__construct","phpdoc":[],"attributes":[],"arguments":[{"name":"$location","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$name","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$type","rank":2,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"save":{"name":"save","phpdoc":[],"attributes":[],"arguments":[{"name":"$data","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"load":{"name":"load","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"mtime":{"name":"mtime","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"touch":{"name":"touch","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"unlink":{"name":"unlink","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"Requests_Auth":{"name":"Requests_Auth","phpdoc":[{"phpdoc":"\/**\n * Authentication provider interface\n *\n * Implement this interface to act as an authentication provider.\n *\n * Parameters should be passed via the constructor where possible, as this\n * makes it much easier for users to use your provider.\n *\n * @see Requests_Hooks\n * @package Requests\n * @subpackage Authentication\n *\/"},{"phpdoc":"\/**\n * Authentication provider interface\n *\n * @package Requests\n * @subpackage Authentication\n *\/"}],"extends":[],"constants":[],"methods":{"register":{"name":"register","phpdoc":[],"attributes":[],"arguments":[{"name":"$hooks","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"Requests_Hooks"},{"typehint":"Requests_Hooks"}],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"Requests_Hooker":{"name":"Requests_Hooker","phpdoc":[{"phpdoc":"\/**\n * Event dispatcher\n *\n * @package Requests\n * @subpackage Utilities\n *\/"},{"phpdoc":"\/**\n * Event dispatcher\n *\n * @package Requests\n * @subpackage Utilities\n *\/"}],"extends":[],"constants":[],"methods":{"register":{"name":"register","phpdoc":[],"attributes":[],"arguments":[{"name":"$hook","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$callback","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$priority","rank":2,"variadic":false,"reference":false,"default":"0","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"dispatch":{"name":"dispatch","phpdoc":[],"attributes":[],"arguments":[{"name":"$hook","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$parameters","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}},"Requests_Transport":{"name":"Requests_Transport","phpdoc":[{"phpdoc":"\/**\n * Base HTTP transport\n *\n * @package Requests\n * @subpackage Transport\n *\/"},{"phpdoc":"\/**\n * Base HTTP transport\n *\n * @package Requests\n * @subpackage Transport\n *\/"}],"extends":[],"constants":[],"methods":{"request":{"name":"request","phpdoc":[],"attributes":[],"arguments":[{"name":"$url","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$headers","rank":1,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$data","rank":2,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":3,"variadic":false,"reference":false,"default":"array( )","expression":true,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"request_multiple":{"name":"request_multiple","phpdoc":[],"attributes":[],"arguments":[{"name":"$requests","rank":0,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]},{"name":"$options","rank":1,"variadic":false,"reference":false,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]},"test":{"name":"test","phpdoc":[],"attributes":[],"arguments":[],"final":false,"static":true,"reference":false,"returntype":"one","returntypehints":[]}}},"Requests_Proxy":{"name":"Requests_Proxy","phpdoc":[{"phpdoc":"\/**\n * Proxy connection interface\n *\n * Implement this interface to handle proxy settings and authentication\n *\n * Parameters should be passed via the constructor where possible, as this\n * makes it much easier for users to use your provider.\n *\n * @see Requests_Hooks\n * @package Requests\n * @subpackage Proxy\n * @since 1.6\n *\/"},{"phpdoc":"\/**\n * Proxy connection interface\n *\n * @package Requests\n * @subpackage Proxy\n * @since 1.6\n *\/"}],"extends":[],"constants":[],"methods":{"register":{"name":"register","phpdoc":[],"attributes":[],"arguments":[{"name":"$hooks","rank":0,"variadic":false,"reference":true,"default":"","expression":false,"typehinttype":"one","phpdoc":[],"typehints":[{"typehint":"Requests_Hooks"},{"typehint":"Requests_Hooks"}],"attributes":[]}],"final":false,"static":false,"reference":false,"returntype":"one","returntypehints":[]}}}},"enums":[]}}}}